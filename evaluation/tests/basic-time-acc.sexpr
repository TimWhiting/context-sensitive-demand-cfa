'(shuffled-cache
  0
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env (() () ())))\""
  36
  24
  9
  3
  24
  9
  33
  1
  1
  127/24
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  51
  33
  12
  6
  33
  12
  45
  1
  1
  179/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env (())))\""
  51
  33
  12
  6
  33
  12
  45
  1
  1
  179/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env (() () ())))\""
  51
  33
  12
  6
  33
  12
  45
  1
  1
  179/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env (() () ())))\""
  51
  33
  12
  6
  33
  12
  45
  1
  1
  179/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  51
  33
  12
  6
  33
  12
  45
  1
  1
  179/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env (() () ())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env (() () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env (() () ())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env (() () ())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env (() () ())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4) (env (() () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  12
  8
  3
  1
  8
  3
  11
  1
  1
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  22
  13
  7
  2
  13
  7
  20
  1
  1
  68/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4) (env (() () () () ())))\""
  27
  16
  9
  2
  16
  9
  25
  1
  1
  83/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  28
  17
  9
  2
  17
  9
  26
  1
  1
  88/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  29
  18
  9
  2
  18
  9
  27
  1
  1
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  app
  "\"'(eval (λ (n4) (-> (app p n1 n2 n3 n4) <-)) (env (() () () () ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4) (env (() () () () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-)) (env (() () () () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4) (env (() () () () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  24
  16
  6
  2
  16
  6
  22
  1
  1
  83/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4) (env (() () () () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4) (env (() () () () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-)) (env (() () () () ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  app
  "\"'(eval (λ (n4) (-> (app p n1 n2 n3 n4) <-)) (env (() () () () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4) (env (() () () () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4) (env (() () () () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval (app (-> (app p n1) <-) n2) (env (() () () () () () () ())))\""
  11
  8
  2
  1
  8
  2
  10
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env (() () () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env (() () () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env (() () () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env (() () () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env (() () () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env (() () () () () () () ())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (() () () () () () ())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (app p n1) (-> n2 <-)) (env (() () () () () () () ())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env (() () () () () () () ())))\""
  140
  96
  26
  18
  96
  26
  122
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (() () () () () () ())))\""
  140
  96
  26
  18
  96
  26
  122
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1) (env (() () () () () () () ())))\""
  140
  96
  26
  18
  96
  26
  122
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval (app (-> (app (app p n1) n2) <-) n3) (env (() () () () () () () ())))\""
  140
  96
  26
  18
  96
  26
  122
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  140
  96
  26
  18
  96
  26
  122
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env (() () () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (app (app p n1) n2) (-> n3 <-)) (env (() () () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env (() () () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-)) (env (() () () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (() () () () () () ())))\""
  26
  14
  10
  2
  14
  10
  24
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  27
  15
  10
  2
  15
  10
  25
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env (() () () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (app (app p n1) n2) (-> n3 <-)) (env (() () () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env (() () () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env (() () () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval (app (-> (app p n1) <-) n2) (env (() () () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env (() () () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (app p n1) (-> n2 <-)) (env (() () () () () () () ())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (() () () () () () ())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1) (env (() () () () () () () ())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  140
  96
  26
  18
  96
  26
  122
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  140
  96
  26
  18
  96
  26
  122
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (() () () () () () ())))\""
  140
  96
  26
  18
  96
  26
  122
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  140
  96
  26
  18
  96
  26
  122
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env (() () () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval (app (-> (app (app p n1) n2) <-) n3) (env (() () () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env (() () () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env (() () () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-)) (env (() () () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env (() () () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env (() () () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  13/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  27
  17
  8
  2
  17
  8
  25
  1
  1
  86/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  43
  25
  16
  2
  25
  16
  41
  1
  1
  132/25
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  50
  31
  16
  3
  31
  16
  47
  1
  1
  162/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  54
  34
  17
  3
  34
  17
  51
  1
  1
  179/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  123
  90
  21
  12
  90
  21
  111
  1
  1
  167/30
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  123
  90
  21
  12
  90
  21
  111
  1
  1
  167/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  125
  91
  22
  12
  91
  22
  113
  1
  1
  39/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  125
  91
  22
  12
  91
  22
  113
  1
  1
  39/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  125
  91
  22
  12
  91
  22
  113
  1
  1
  39/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  127
  93
  22
  12
  93
  22
  115
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  127
  93
  22
  12
  93
  22
  115
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  127
  93
  22
  12
  93
  22
  115
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  127
  93
  22
  12
  93
  22
  115
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  127
  93
  22
  12
  93
  22
  115
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env (())))\""
  127
  93
  22
  12
  93
  22
  115
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  127
  93
  22
  12
  93
  22
  115
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env (())))\""
  127
  93
  22
  12
  93
  22
  115
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  127
  93
  22
  12
  93
  22
  115
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  130
  96
  22
  12
  96
  22
  118
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  132
  97
  22
  13
  97
  22
  119
  1
  1
  538/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  132
  97
  22
  13
  97
  22
  119
  1
  1
  538/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  133
  98
  22
  13
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  133
  98
  22
  13
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  133
  98
  22
  13
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  133
  98
  22
  13
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  133
  98
  22
  13
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  133
  98
  22
  13
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  133
  98
  22
  13
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  133
  98
  22
  13
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  133
  98
  22
  13
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  133
  98
  22
  13
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  133
  98
  22
  13
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (())))\""
  133
  98
  22
  13
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  20
  12
  6
  2
  12
  6
  18
  1
  1
  31/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  24
  15
  7
  2
  15
  7
  22
  1
  1
  79/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  113
  83
  19
  11
  83
  19
  102
  1
  1
  467/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  113
  83
  19
  11
  83
  19
  102
  1
  1
  467/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  113
  83
  19
  11
  83
  19
  102
  1
  1
  467/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  113
  83
  19
  11
  83
  19
  102
  1
  1
  467/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  113
  83
  19
  11
  83
  19
  102
  1
  1
  467/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  113
  83
  19
  11
  83
  19
  102
  1
  1
  467/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  113
  83
  19
  11
  83
  19
  102
  1
  1
  467/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  113
  83
  19
  11
  83
  19
  102
  1
  1
  467/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  119
  87
  21
  11
  87
  21
  108
  1
  1
  485/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  119
  87
  21
  11
  87
  21
  108
  1
  1
  485/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  119
  87
  21
  11
  87
  21
  108
  1
  1
  485/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  119
  87
  21
  11
  87
  21
  108
  1
  1
  485/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env (())))\""
  119
  87
  21
  11
  87
  21
  108
  1
  1
  485/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  119
  87
  21
  11
  87
  21
  108
  1
  1
  485/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  119
  87
  21
  11
  87
  21
  108
  1
  1
  485/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  119
  87
  21
  11
  87
  21
  108
  1
  1
  485/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  119
  87
  21
  11
  87
  21
  108
  1
  1
  485/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  120
  88
  21
  11
  88
  21
  109
  1
  1
  245/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  120
  88
  21
  11
  88
  21
  109
  1
  1
  245/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  121
  89
  21
  11
  89
  21
  110
  1
  1
  495/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  121
  89
  21
  11
  89
  21
  110
  1
  1
  495/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  121
  89
  21
  11
  89
  21
  110
  1
  1
  495/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  121
  89
  21
  11
  89
  21
  110
  1
  1
  495/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  121
  89
  21
  11
  89
  21
  110
  1
  1
  495/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  121
  89
  21
  11
  89
  21
  110
  1
  1
  495/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  123
  91
  21
  11
  91
  21
  112
  1
  1
  505/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  123
  91
  21
  11
  91
  21
  112
  1
  1
  505/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  123
  91
  21
  11
  91
  21
  112
  1
  1
  505/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  126
  93
  21
  12
  93
  21
  114
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  126
  93
  21
  12
  93
  21
  114
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  127
  94
  21
  12
  94
  21
  115
  1
  1
  261/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  538/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  538/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  538/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  538/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  538/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  538/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  538/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  538/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  538/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  538/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  538/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env (())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  134
  99
  23
  12
  99
  23
  122
  1
  1
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (())))\""
  134
  99
  23
  12
  99
  23
  122
  1
  1
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  134
  99
  23
  12
  99
  23
  122
  1
  1
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  134
  99
  23
  12
  99
  23
  122
  1
  1
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  134
  99
  23
  12
  99
  23
  122
  1
  1
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  136
  100
  24
  12
  100
  24
  124
  1
  1
  111/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  136
  100
  24
  12
  100
  24
  124
  1
  1
  111/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  136
  100
  24
  12
  100
  24
  124
  1
  1
  111/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  136
  100
  24
  12
  100
  24
  124
  1
  1
  111/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  136
  100
  24
  12
  100
  24
  124
  1
  1
  111/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  136
  100
  24
  12
  100
  24
  124
  1
  1
  111/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  136
  100
  24
  12
  100
  24
  124
  1
  1
  111/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  138
  101
  24
  13
  101
  24
  125
  1
  1
  560/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval (let (bo) (-> (match (app wins? bo mark) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  11/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  10
  6
  4
  0
  6
  4
  10
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma))) (env (() ())))\""
  20
  12
  8
  0
  12
  8
  20
  1
  1
  35/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  60
  28
  29
  3
  28
  29
  57
  1
  1
  145/28
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app play-turn empty-board player-one (-> player-two <-)) (env (())))\""
  69
  33
  33
  3
  33
  33
  66
  1
  1
  172/33
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app play-turn (-> bo <-) that-play this-play) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  8
  7
  0
  1
  7
  0
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  10
  9
  0
  1
  9
  0
  9
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  13
  12
  0
  1
  12
  0
  12
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env (() ())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env (() ())))\""
  49
  37
  11
  1
  37
  11
  48
  1
  1
  206/37
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env (() ())))\""
  53
  38
  13
  2
  38
  13
  51
  1
  1
  205/38
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env (())))\""
  54
  39
  13
  2
  39
  13
  52
  1
  1
  70/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  55
  40
  13
  2
  40
  13
  53
  1
  1
  43/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env (() ())))\""
  132
  94
  35
  3
  94
  35
  129
  1
  1
  11/2
  ((4 4 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (())))\""
  134
  96
  35
  3
  96
  35
  131
  1
  1
  527/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env (() ())))\""
  134
  96
  35
  3
  96
  35
  131
  1
  1
  527/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env (() ())))\""
  23
  16
  6
  1
  16
  6
  22
  1
  1
  21/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  32
  20
  11
  1
  20
  11
  31
  1
  1
  27/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env (() ())))\""
  41
  18
  20
  3
  18
  20
  38
  1
  1
  46/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  43
  20
  20
  3
  20
  20
  40
  1
  1
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  45
  22
  20
  3
  22
  20
  42
  1
  1
  56/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  51
  27
  20
  4
  27
  20
  47
  1
  1
  137/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark co mark (-> bo <-)) (env (())))\""
  52
  28
  20
  4
  28
  20
  48
  1
  1
  143/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env (())))\""
  68
  40
  24
  4
  40
  24
  64
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  70
  42
  24
  4
  42
  24
  66
  1
  1
  109/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env (() ())))\""
  72
  44
  24
  4
  44
  24
  68
  1
  1
  57/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  9
  6
  2
  1
  6
  2
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (c) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  33
  25
  7
  1
  25
  7
  32
  1
  1
  134/25
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  39
  30
  7
  2
  30
  7
  37
  1
  1
  53/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (letrec (loop) (-> (app loop) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (app X) (-> (app make-ai-action (app X)) <-)) (env (())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  9
  6
  2
  1
  6
  2
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app win) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  34
  26
  7
  1
  26
  7
  33
  1
  1
  139/26
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  36
  28
  7
  1
  28
  7
  35
  1
  1
  149/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose)) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env (())))\""
  41
  29
  11
  1
  29
  11
  40
  1
  1
  154/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env (())))\""
  43
  31
  11
  1
  31
  11
  42
  1
  1
  164/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  43
  31
  11
  1
  31
  11
  42
  1
  1
  164/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  43
  31
  11
  1
  31
  11
  42
  1
  1
  164/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env (())))\""
  44
  32
  11
  1
  32
  11
  43
  1
  1
  169/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  46
  34
  11
  1
  34
  11
  45
  1
  1
  179/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  7
  6
  0
  1
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app f (-> (app coord r c) <-) x) (env (() () ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  let
  "\"'(eval (λ () (-> (let (co) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env (())))\""
  9
  6
  2
  1
  6
  2
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env (())))\""
  10
  9
  0
  1
  9
  0
  9
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app horizon (-> (app win) <-) 0) (env (() ())))\""
  12
  11
  0
  1
  11
  0
  11
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env (())))\""
  14
  13
  0
  1
  13
  0
  13
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  16
  15
  0
  1
  15
  0
  15
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  59
  33
  23
  3
  33
  23
  56
  1
  1
  56/11
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env (())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env (())))\""
  9
  7
  2
  0
  7
  2
  9
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  11
  9
  2
  0
  9
  2
  11
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  50
  36
  13
  1
  36
  13
  49
  1
  1
  21/4
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  52
  38
  13
  1
  38
  13
  51
  1
  1
  199/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (())))\""
  54
  40
  13
  1
  40
  13
  53
  1
  1
  209/40
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-coord\") (env (())))\""
  55
  41
  13
  1
  41
  13
  54
  1
  1
  214/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (λ (bo) (-> (app error 'human-action \"not implemented\") <-)) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env (())))\""
  73
  36
  34
  3
  36
  34
  70
  1
  1
  47/9
  ((4 4 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env (())))\""
  78
  39
  36
  3
  39
  36
  75
  1
  1
  203/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env (())))\""
  79
  40
  36
  3
  40
  36
  76
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (c) (-> (app marked? (app b (app coord r c))) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env (() ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord rc rc) m) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (() ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app minimax bo (-> that-mark <-) this-mark) (env (() ())))\""
  30
  18
  11
  1
  18
  11
  29
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env (() ())))\""
  41
  29
  11
  1
  29
  11
  40
  1
  1
  154/29
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  43
  31
  11
  1
  31
  11
  42
  1
  1
  164/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> move-horizon-v <-) (move _ move-horizon-x) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app f (app coord r c) (-> x <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  27
  23
  4
  0
  23
  4
  27
  1
  1
  122/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env (())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  7
  6
  0
  1
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  9
  8
  0
  1
  8
  0
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  38
  29
  7
  2
  29
  7
  36
  1
  1
  154/29
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  79
  56
  22
  1
  56
  22
  78
  1
  1
  39/7
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  79
  56
  22
  1
  56
  22
  78
  1
  1
  39/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> this-play <-) (player mark action)) (env (())))\""
  27
  20
  7
  0
  20
  7
  27
  1
  1
  119/20
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  44
  28
  16
  0
  28
  16
  44
  1
  1
  163/28
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env (())))\""
  45
  29
  16
  0
  29
  16
  45
  1
  1
  168/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  46
  30
  16
  0
  30
  16
  46
  1
  1
  173/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  51
  33
  18
  0
  33
  18
  51
  1
  1
  188/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  52
  34
  18
  0
  34
  18
  52
  1
  1
  193/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (co) (-> (match (app equal? co₀ co) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app wins? bo mark) <-) (#f) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (-> (app X) <-) (app make-ai-action (app X))) (env (())))\""
  8
  7
  0
  1
  7
  0
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  8
  7
  0
  1
  7
  0
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  let
  "\"'(eval (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (move-horizon-v) (-> (match move-horizon-v ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env (())))\""
  9
  7
  2
  0
  7
  2
  9
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app some-v (-> (app maximin bo that-mark this-mark) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  20
  15
  4
  1
  15
  4
  19
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  21
  16
  4
  1
  16
  4
  20
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  23
  18
  4
  1
  18
  4
  22
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env (())))\""
  25
  20
  4
  1
  20
  4
  24
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app minimax bo that-mark (-> this-mark <-)) (env (() ())))\""
  43
  29
  13
  1
  29
  13
  42
  1
  1
  148/29
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) bo that-play this-play) (env (())))\""
  45
  31
  13
  1
  31
  13
  44
  1
  1
  158/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env (())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (let (... () (co (-> (app action bo) <-)) () ...) ...) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app play-turn (-> empty-board <-) player-one player-two) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env (() () ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env (() ())))\""
  7
  7
  0
  0
  7
  0
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  9
  9
  0
  0
  9
  0
  9
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  52
  26
  23
  3
  26
  23
  49
  1
  1
  133/26
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  53
  27
  23
  3
  27
  23
  50
  1
  1
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  56
  30
  23
  3
  30
  23
  53
  1
  1
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env (())))\""
  93
  53
  36
  4
  53
  36
  89
  1
  1
  279/53
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env (())))\""
  94
  54
  36
  4
  54
  36
  90
  1
  1
  142/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env (())))\""
  95
  55
  36
  4
  55
  36
  91
  1
  1
  289/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  97
  57
  36
  4
  57
  36
  93
  1
  1
  299/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> marked? <-) (app b (app coord r c))) (env (() () ())))\""
  99
  59
  36
  4
  59
  36
  95
  1
  1
  309/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (let (_) (-> (app display \"Cat's game.\\n\") <-)) (env (())))\""
  102
  62
  36
  4
  62
  36
  98
  1
  1
  323/62
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  103
  63
  36
  4
  63
  36
  99
  1
  1
  328/63
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app marked? (-> (app b (app coord r c)) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env (() ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  40
  28
  11
  1
  28
  11
  39
  1
  1
  149/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  42
  30
  11
  1
  30
  11
  41
  1
  1
  53/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  12
  8
  3
  1
  8
  3
  11
  1
  1
  41/8
  ((0 0 0) (1/2 1/2 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  14
  10
  3
  1
  10
  3
  13
  1
  1
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env (())))\""
  15
  11
  3
  1
  11
  3
  14
  1
  1
  56/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env (() ())))\""
  54
  38
  14
  2
  38
  14
  52
  1
  1
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo that-mark this-mark)) (env (() ())))\""
  56
  40
  14
  2
  40
  14
  54
  1
  1
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env (())))\""
  63
  43
  18
  2
  43
  18
  61
  1
  1
  226/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env (() ())))\""
  64
  44
  18
  2
  44
  18
  62
  1
  1
  58/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env (() ())))\""
  66
  46
  18
  2
  46
  18
  64
  1
  1
  121/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  let
  "\"'(eval (match (app full? bo) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  29/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-horizon\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  6
  4
  2
  0
  4
  2
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env (() () ())))\""
  24
  17
  6
  1
  17
  6
  23
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  25
  18
  6
  1
  18
  6
  24
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  27
  20
  6
  1
  20
  6
  26
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app lose) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> minimax <-) bo that-mark this-mark) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs)) (env (())))\""
  7
  7
  0
  0
  7
  0
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env (())))\""
  9
  9
  0
  0
  9
  0
  9
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin bo that-mark (-> this-mark <-)) (env (() ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  47/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env (())))\""
  41
  29
  11
  1
  29
  11
  40
  1
  1
  151/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env (())))\""
  43
  31
  11
  1
  31
  11
  42
  1
  1
  161/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord rc rc) <-) m) (env (() ())))\""
  45
  33
  11
  1
  33
  11
  44
  1
  1
  57/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env (())))\""
  24
  16
  8
  0
  16
  8
  24
  1
  1
  85/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  25
  17
  8
  0
  17
  8
  25
  1
  1
  90/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env (())))\""
  14
  8
  6
  0
  8
  6
  14
  1
  1
  21/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  15
  9
  6
  0
  9
  6
  15
  1
  1
  47/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env (() ())))\""
  55
  37
  17
  1
  37
  17
  54
  1
  1
  196/37
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> move-coord-v <-) (move move-coord-x _) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app minimax bo that-mark this-mark)) (env (() ())))\""
  18
  14
  4
  0
  14
  4
  18
  1
  1
  75/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-))) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env (())))\""
  14
  9
  5
  0
  9
  5
  14
  1
  1
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env (())))\""
  21
  12
  9
  0
  12
  9
  21
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  23
  14
  9
  0
  14
  9
  23
  1
  1
  37/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  25
  16
  9
  0
  16
  9
  25
  1
  1
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  56
  39
  17
  0
  39
  17
  56
  1
  1
  206/39
  ((3/2 3/2 0) (1 1 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  letrec
  "\"'(eval (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  7
  6
  0
  1
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord rc rc) m) (env (() ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (r) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co mark bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  12
  8
  3
  1
  8
  3
  11
  1
  1
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  14
  10
  3
  1
  10
  3
  13
  1
  1
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env (())))\""
  35
  22
  12
  1
  22
  12
  34
  1
  1
  111/22
  ((1 1 0) (1 1 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  41
  27
  12
  2
  27
  12
  39
  1
  1
  136/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env (() ())))\""
  52
  34
  16
  2
  34
  16
  50
  1
  1
  86/17
  ((0 0 0) (1/2 1/2 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env (())))\""
  115
  85
  27
  3
  85
  27
  112
  1
  1
  462/85
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app horizon (-> (app lose) <-) 0) (env (() ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env (() ())))\""
  7
  7
  0
  0
  7
  0
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (())))\""
  8
  8
  0
  0
  8
  0
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app equal? co₀ co) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env (())))\""
  7
  7
  0
  0
  7
  0
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  13
  12
  0
  1
  12
  0
  12
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  25
  17
  8
  0
  17
  8
  25
  1
  1
  90/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env (())))\""
  27
  19
  8
  0
  19
  8
  27
  1
  1
  100/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match (app b co) ((blank) (-> (app #f) <-)) (marked m*)) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  let
  "\"'(eval (λ (bo this-play that-play) (-> (let (_) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval (let (_) (-> (match this-play ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (move-coord-v) (-> (match move-coord-v ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env (())))\""
  8
  5
  3
  0
  5
  3
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  47
  32
  14
  1
  32
  14
  46
  1
  1
  169/32
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs)) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env (() ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app some-v (-> (app minimax bo that-mark this-mark) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  8
  7
  0
  1
  7
  0
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (() ())))\""
  9
  8
  0
  1
  8
  0
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env (())))\""
  24
  15
  8
  1
  15
  8
  23
  1
  1
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  26
  17
  8
  1
  17
  8
  25
  1
  1
  90/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  11/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app play-turn empty-board (-> player-one <-) player-two) (env (())))\""
  19
  11
  8
  0
  11
  8
  19
  1
  1
  59/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord rc rc) (-> m <-)) (env (() ())))\""
  85
  58
  26
  1
  58
  26
  84
  1
  1
  162/29
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  85
  58
  26
  1
  58
  26
  84
  1
  1
  162/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  90
  61
  28
  1
  61
  28
  89
  1
  1
  339/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  91
  62
  28
  1
  62
  28
  90
  1
  1
  172/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) (app make-ai-action (app X))) (env (())))\""
  91
  62
  28
  1
  62
  28
  90
  1
  1
  172/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env (() ())))\""
  92
  63
  28
  1
  63
  28
  91
  1
  1
  349/63
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) that-mark this-mark) (env (() ())))\""
  98
  68
  28
  2
  68
  28
  96
  1
  1
  11/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  101
  71
  28
  2
  71
  28
  99
  1
  1
  389/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env (())))\""
  49
  35
  13
  1
  35
  13
  48
  1
  1
  188/35
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  49
  35
  13
  1
  35
  13
  48
  1
  1
  188/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env (())))\""
  51
  37
  13
  1
  37
  13
  50
  1
  1
  198/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  68
  49
  17
  2
  49
  17
  66
  1
  1
  258/49
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env (())))\""
  7
  7
  0
  0
  7
  0
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  9
  9
  0
  0
  9
  0
  9
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  84
  61
  22
  1
  61
  22
  83
  1
  1
  337/61
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env (())))\""
  25
  21
  4
  0
  21
  4
  25
  1
  1
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  10
  7
  2
  1
  7
  2
  9
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  41
  30
  9
  2
  30
  9
  39
  1
  1
  53/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (())))\""
  42
  31
  9
  2
  31
  9
  40
  1
  1
  164/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  51
  37
  11
  3
  37
  11
  48
  1
  1
  194/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> display <-) \"Cat's game.\\n\") (env (())))\""
  52
  38
  11
  3
  38
  11
  49
  1
  1
  199/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env (() ())))\""
  77
  54
  22
  1
  54
  22
  76
  1
  1
  151/27
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  78
  55
  22
  1
  55
  22
  77
  1
  1
  28/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) empty-board player-one player-two) (env (())))\""
  80
  57
  22
  1
  57
  22
  79
  1
  1
  106/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> that-mark <-) this-mark) (env (() ())))\""
  80
  57
  22
  1
  57
  22
  79
  1
  1
  106/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  80
  57
  22
  1
  57
  22
  79
  1
  1
  106/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  82
  59
  22
  1
  59
  22
  81
  1
  1
  328/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  84
  61
  22
  1
  61
  22
  83
  1
  1
  338/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (c x) (-> (app f (app coord r c) x) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match some-v-v ((some some-v-x) (-> some-v-x <-)) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app play-turn bo (-> that-play <-) this-play) (env (())))\""
  25
  18
  7
  0
  18
  7
  25
  1
  1
  52/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  26
  19
  7
  0
  19
  7
  26
  1
  1
  109/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  28
  21
  7
  0
  21
  7
  28
  1
  1
  17/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  66
  47
  18
  1
  47
  18
  65
  1
  1
  258/47
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env (())))\""
  19
  15
  4
  0
  15
  4
  19
  1
  1
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app coord r c) x) (env (() () ())))\""
  23
  15
  7
  1
  15
  7
  22
  1
  1
  76/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) mark bo) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app minimax (-> bo <-) that-mark this-mark) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app play-turn bo that-play (-> this-play <-)) (env (())))\""
  23
  16
  7
  0
  16
  7
  23
  1
  1
  47/8
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  29
  21
  7
  1
  21
  7
  28
  1
  1
  17/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo that-mark this-mark) (env (() ())))\""
  31
  23
  7
  1
  23
  7
  30
  1
  1
  129/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env (())))\""
  33
  25
  7
  1
  25
  7
  32
  1
  1
  139/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  64
  44
  18
  2
  44
  18
  62
  1
  1
  241/44
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env (())))\""
  19
  13
  6
  0
  13
  6
  19
  1
  1
  68/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (())))\""
  8
  7
  0
  1
  7
  0
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  8
  7
  0
  1
  7
  0
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  10
  9
  0
  1
  9
  0
  9
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  12
  11
  0
  1
  11
  0
  11
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env (())))\""
  45
  35
  9
  1
  35
  9
  44
  1
  1
  39/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> mark <-) bo) (env (())))\""
  39
  32
  7
  0
  32
  7
  39
  1
  1
  45/8
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  41
  34
  7
  0
  34
  7
  41
  1
  1
  95/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env (() ())))\""
  42
  35
  7
  0
  35
  7
  42
  1
  1
  39/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app play-turn bo (-> that-play <-) this-play) (env (())))\""
  23
  16
  7
  0
  16
  7
  23
  1
  1
  47/8
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  54
  39
  14
  1
  39
  14
  53
  1
  1
  218/39
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  55
  40
  14
  1
  40
  14
  54
  1
  1
  223/40
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env (())))\""
  69
  48
  20
  1
  48
  20
  68
  1
  1
  265/48
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  70
  49
  20
  1
  49
  20
  69
  1
  1
  270/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  72
  51
  20
  1
  51
  20
  71
  1
  1
  280/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  74
  53
  20
  1
  53
  20
  73
  1
  1
  290/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env (())))\""
  75
  54
  20
  1
  54
  20
  74
  1
  1
  295/54
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  83
  59
  22
  2
  59
  22
  81
  1
  1
  320/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark co mark (-> bo <-)) (env (())))\""
  92
  67
  22
  3
  67
  22
  89
  1
  1
  361/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env (() ())))\""
  117
  80
  33
  4
  80
  33
  113
  1
  1
  87/16
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> move-horizon-v <-) (move _ move-horizon-x) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (c) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (app X) (-> (app make-ai-action (app X)) <-)) (env (())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  10
  7
  2
  1
  7
  2
  9
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  12
  9
  2
  1
  9
  2
  11
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) (app make-ai-action (app X))) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-horizon\") (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env (())))\""
  37
  30
  7
  0
  30
  7
  37
  1
  1
  17/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo that-mark this-mark) (env (() ())))\""
  39
  32
  7
  0
  32
  7
  39
  1
  1
  45/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  40
  33
  7
  0
  33
  7
  40
  1
  1
  185/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env (())))\""
  41
  34
  7
  0
  34
  7
  41
  1
  1
  95/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  let
  "\"'(eval (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  44
  37
  7
  0
  37
  7
  44
  1
  1
  205/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env (() ())))\""
  45
  38
  7
  0
  38
  7
  45
  1
  1
  105/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  47
  40
  7
  0
  40
  7
  47
  1
  1
  11/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env (() ())))\""
  50
  43
  7
  0
  43
  7
  50
  1
  1
  235/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (r) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app f (app coord r c) (-> x <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (let (... () (co (-> (app action bo) <-)) () ...) ...) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  9
  9
  0
  0
  9
  0
  9
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env (() ())))\""
  11
  11
  0
  0
  11
  0
  11
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  12
  12
  0
  0
  12
  0
  12
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  14
  14
  0
  0
  14
  0
  14
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env (())))\""
  16
  16
  0
  0
  16
  0
  16
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  77
  54
  22
  1
  54
  22
  76
  1
  1
  151/27
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env (())))\""
  78
  55
  22
  1
  55
  22
  77
  1
  1
  307/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env (() ())))\""
  86
  59
  26
  1
  59
  26
  85
  1
  1
  331/59
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (letrec (loop) (-> (app loop) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env (())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  8
  8
  0
  0
  8
  0
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  9
  8
  0
  1
  8
  0
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env (())))\""
  33
  24
  8
  1
  24
  8
  32
  1
  1
  125/24
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  33
  24
  8
  1
  24
  8
  32
  1
  1
  125/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  35
  26
  8
  1
  26
  8
  34
  1
  1
  135/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env (())))\""
  37
  28
  8
  1
  28
  8
  36
  1
  1
  145/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  38
  29
  8
  1
  29
  8
  37
  1
  1
  150/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  43
  32
  10
  1
  32
  10
  42
  1
  1
  165/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (let (_) (-> (app display \"Cat's game.\\n\") <-)) (env (())))\""
  46
  35
  10
  1
  35
  10
  45
  1
  1
  179/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  48
  37
  10
  1
  37
  10
  47
  1
  1
  189/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  13
  10
  2
  1
  10
  2
  12
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app marked? (-> (app b (app coord r c)) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env (() ())))\""
  23
  16
  6
  1
  16
  6
  22
  1
  1
  21/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app minimax (-> bo <-) that-mark this-mark) (env (() ())))\""
  29
  21
  6
  2
  21
  6
  27
  1
  1
  109/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  let
  "\"'(eval (λ () (-> (let (co) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  13
  10
  2
  1
  10
  2
  12
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  61
  29
  29
  3
  29
  29
  58
  1
  1
  150/29
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  64
  32
  29
  3
  32
  29
  61
  1
  1
  165/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  7
  6
  0
  1
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  23
  14
  8
  1
  14
  8
  22
  1
  1
  40/7
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env (())))\""
  31
  19
  11
  1
  19
  11
  30
  1
  1
  105/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  32
  20
  11
  1
  20
  11
  31
  1
  1
  11/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  31
  19
  11
  1
  19
  11
  30
  1
  1
  102/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app lose) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co mark bo) (env (())))\""
  7
  6
  0
  1
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  22
  16
  4
  2
  16
  4
  20
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env (())))\""
  24
  18
  4
  2
  18
  4
  22
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env (() ())))\""
  63
  45
  15
  3
  45
  15
  60
  1
  1
  26/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  65
  47
  15
  3
  47
  15
  62
  1
  1
  244/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  138
  101
  33
  4
  101
  33
  134
  1
  1
  546/101
  ((4 4 0) (7/2 7/2 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env (())))\""
  147
  106
  37
  4
  106
  37
  143
  1
  1
  289/53
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo that-mark this-mark)) (env (() ())))\""
  149
  108
  37
  4
  108
  37
  145
  1
  1
  49/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord rc rc) <-) m) (env (() ())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord rc rc) m) (env (() ())))\""
  23
  18
  4
  1
  18
  4
  22
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  46
  37
  8
  1
  37
  8
  45
  1
  1
  192/37
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  18
  13
  4
  1
  13
  4
  17
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  19
  14
  4
  1
  14
  4
  18
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  21
  16
  4
  1
  16
  4
  20
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  8
  8
  0
  0
  8
  0
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env (())))\""
  22
  17
  5
  0
  17
  5
  22
  1
  1
  88/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  31
  23
  7
  1
  23
  7
  30
  1
  1
  118/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env (())))\""
  33
  25
  7
  1
  25
  7
  32
  1
  1
  128/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env (())))\""
  35
  27
  7
  1
  27
  7
  34
  1
  1
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env (())))\""
  50
  36
  13
  1
  36
  13
  49
  1
  1
  31/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  55
  40
  13
  2
  40
  13
  53
  1
  1
  103/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  57
  42
  13
  2
  42
  13
  55
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) that-mark this-mark) (env (() ())))\""
  60
  45
  13
  2
  45
  13
  58
  1
  1
  77/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  19
  10
  9
  0
  10
  9
  19
  1
  1
  27/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (move-horizon-v) (-> (match move-horizon-v ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app some-v (-> (app minimax bo that-mark this-mark) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval (let (bo) (-> (match (app wins? bo mark) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app coord r c) x) (env (() () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env (())))\""
  12
  9
  3
  0
  9
  3
  12
  1
  1
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  43
  32
  11
  0
  32
  11
  43
  1
  1
  21/4
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app wins? bo mark) <-) (#f) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  17
  13
  4
  0
  13
  4
  17
  1
  1
  70/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env (())))\""
  18
  14
  4
  0
  14
  4
  18
  1
  1
  75/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env (() ())))\""
  20
  16
  4
  0
  16
  4
  20
  1
  1
  85/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  22
  18
  4
  0
  18
  4
  22
  1
  1
  95/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  53
  37
  15
  1
  37
  15
  52
  1
  1
  199/37
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  11
  9
  0
  2
  9
  0
  9
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env (() ())))\""
  50
  36
  11
  3
  36
  11
  47
  1
  1
  21/4
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) mark bo) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env (())))\""
  8
  6
  2
  0
  6
  2
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs)) (env (())))\""
  10
  8
  2
  0
  8
  2
  10
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  11
  9
  2
  0
  9
  2
  11
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (())))\""
  14
  12
  2
  0
  12
  2
  14
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env (() ())))\""
  16
  14
  2
  0
  14
  2
  16
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  18
  16
  2
  0
  16
  2
  18
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (co) (-> (match (app equal? co₀ co) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (λ (bo) (-> (app error 'human-action \"not implemented\") <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env (())))\""
  30
  20
  9
  1
  20
  9
  29
  1
  1
  5
  ((1 1 0) (1 1 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (c x) (-> (app f (app coord r c) x) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app f (-> (app coord r c) <-) x) (env (() () ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env (())))\""
  91
  63
  27
  1
  63
  27
  90
  1
  1
  39/7
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env (())))\""
  93
  65
  27
  1
  65
  27
  92
  1
  1
  361/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  95
  67
  27
  1
  67
  27
  94
  1
  1
  371/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  97
  69
  27
  1
  69
  27
  96
  1
  1
  127/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> this-play <-) (player mark action)) (env (())))\""
  26
  19
  7
  0
  19
  7
  26
  1
  1
  6
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env (())))\""
  27
  20
  7
  0
  20
  7
  27
  1
  1
  119/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> mark <-) bo) (env (())))\""
  40
  33
  7
  0
  33
  7
  40
  1
  1
  185/33
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env (() ())))\""
  53
  38
  13
  2
  38
  13
  51
  1
  1
  205/38
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) empty-board player-one player-two) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env (())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  22
  17
  4
  1
  17
  4
  21
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env (())))\""
  23
  18
  4
  1
  18
  4
  22
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env (())))\""
  25
  20
  4
  1
  20
  4
  24
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁)) (env (())))\""
  26
  21
  4
  1
  21
  4
  25
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  48
  22
  23
  3
  22
  23
  45
  1
  1
  113/22
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  49
  23
  23
  3
  23
  23
  46
  1
  1
  118/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  50
  24
  23
  3
  24
  23
  47
  1
  1
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env (())))\""
  52
  26
  23
  3
  26
  23
  49
  1
  1
  133/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env (())))\""
  54
  28
  23
  3
  28
  23
  51
  1
  1
  143/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  78
  47
  27
  4
  47
  27
  74
  1
  1
  245/47
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  80
  49
  27
  4
  49
  27
  76
  1
  1
  255/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  82
  51
  27
  4
  51
  27
  78
  1
  1
  265/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  83
  52
  27
  4
  52
  27
  79
  1
  1
  271/52
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env (() ())))\""
  85
  54
  27
  4
  54
  27
  81
  1
  1
  281/54
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  85
  54
  27
  4
  54
  27
  81
  1
  1
  281/54
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env (() ())))\""
  86
  55
  27
  4
  55
  27
  82
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval (let (_) (-> (match this-play ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  12
  8
  3
  1
  8
  3
  11
  1
  1
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env (())))\""
  8
  7
  0
  1
  7
  0
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app play-turn (-> empty-board <-) player-one player-two) (env (())))\""
  9
  7
  2
  0
  7
  2
  9
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match (app b co) ((blank) (-> (app #f) <-)) (marked m*)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app minimax bo (-> that-mark <-) this-mark) (env (() ())))\""
  32
  20
  11
  1
  20
  11
  31
  1
  1
  53/10
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  34
  22
  11
  1
  22
  11
  33
  1
  1
  58/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-coord\") (env (())))\""
  35
  23
  11
  1
  23
  11
  34
  1
  1
  121/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs)) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  31
  23
  7
  1
  23
  7
  30
  1
  1
  124/23
  ((1 1 0) (1 1 0) (1 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  18
  14
  4
  0
  14
  4
  18
  1
  1
  75/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env (() () ())))\""
  18
  13
  4
  1
  13
  4
  17
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env (())))\""
  9
  5
  4
  0
  5
  4
  9
  1
  1
  27/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app horizon (-> (app win) <-) 0) (env (() ())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  37/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  12
  8
  4
  0
  8
  4
  12
  1
  1
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  14
  10
  4
  0
  10
  4
  14
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (() ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app play-turn empty-board (-> player-one <-) player-two) (env (())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  37/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env (() ())))\""
  13
  9
  4
  0
  9
  4
  13
  1
  1
  47/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  15
  11
  4
  0
  11
  4
  15
  1
  1
  57/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  37/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  37/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app minimax bo that-mark (-> this-mark <-)) (env (() ())))\""
  18
  9
  9
  0
  9
  9
  18
  1
  1
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app win) 0) (env (() ())))\""
  19
  10
  9
  0
  10
  9
  19
  1
  1
  53/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  60
  32
  25
  3
  32
  25
  57
  1
  1
  83/16
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  61
  33
  25
  3
  33
  25
  58
  1
  1
  57/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app play-turn (-> bo <-) that-play this-play) (env (())))\""
  61
  33
  25
  3
  33
  25
  58
  1
  1
  57/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  92
  56
  32
  4
  56
  32
  88
  1
  1
  295/56
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma))) (env (() ())))\""
  94
  58
  32
  4
  58
  32
  90
  1
  1
  305/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  95
  59
  32
  4
  59
  32
  91
  1
  1
  310/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  96
  60
  32
  4
  60
  32
  92
  1
  1
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  98
  62
  32
  4
  62
  32
  94
  1
  1
  325/62
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  98
  62
  32
  4
  62
  32
  94
  1
  1
  325/62
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env (())))\""
  113
  69
  40
  4
  69
  40
  109
  1
  1
  365/69
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  115
  71
  40
  4
  71
  40
  111
  1
  1
  375/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app play-turn bo that-play (-> this-play <-)) (env (())))\""
  132
  84
  44
  4
  84
  44
  128
  1
  1
  227/42
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> marked? <-) (app b (app coord r c))) (env (() () ())))\""
  134
  86
  44
  4
  86
  44
  130
  1
  1
  232/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  136
  88
  44
  4
  88
  44
  132
  1
  1
  237/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  136
  88
  44
  4
  88
  44
  132
  1
  1
  237/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env (() ())))\""
  137
  89
  44
  4
  89
  44
  133
  1
  1
  480/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (() ())))\""
  139
  91
  44
  4
  91
  44
  135
  1
  1
  70/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (c) (-> (app marked? (app b (app coord r c))) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  let
  "\"'(eval (λ (bo this-play that-play) (-> (let (_) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  12
  10
  0
  2
  10
  0
  10
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env (() ())))\""
  13
  11
  0
  2
  11
  0
  11
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env (())))\""
  49
  35
  13
  1
  35
  13
  48
  1
  1
  188/35
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> display <-) \"Cat's game.\\n\") (env (())))\""
  50
  36
  13
  1
  36
  13
  49
  1
  1
  193/36
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  52
  38
  13
  1
  38
  13
  51
  1
  1
  203/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env (())))\""
  121
  70
  47
  4
  70
  47
  117
  1
  1
  53/10
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env (())))\""
  122
  71
  47
  4
  71
  47
  118
  1
  1
  376/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> minimax <-) bo that-mark this-mark) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  11
  10
  0
  1
  10
  0
  10
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  50
  37
  11
  2
  37
  11
  48
  1
  1
  194/37
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env (())))\""
  17
  13
  4
  0
  13
  4
  17
  1
  1
  70/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  33
  21
  12
  0
  21
  12
  33
  1
  1
  115/21
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  41
  26
  14
  1
  26
  14
  40
  1
  1
  70/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  let
  "\"'(eval (match (app full? bo) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  10
  9
  0
  1
  9
  0
  9
  1
  1
  44/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  13
  12
  0
  1
  12
  0
  12
  1
  1
  59/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  14
  13
  0
  1
  13
  0
  13
  1
  1
  64/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env (())))\""
  16
  15
  0
  1
  15
  0
  15
  1
  1
  74/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env (() ())))\""
  55
  42
  11
  2
  42
  11
  53
  1
  1
  109/21
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  56
  43
  11
  2
  43
  11
  54
  1
  1
  223/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  13
  8
  4
  1
  8
  4
  12
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  14
  9
  4
  1
  9
  4
  13
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app some-v (-> (app maximin bo that-mark this-mark) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  40
  28
  11
  1
  28
  11
  39
  1
  1
  149/28
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env (())))\""
  41
  29
  11
  1
  29
  11
  40
  1
  1
  154/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app equal? co₀ co) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (move-coord-v) (-> (match move-coord-v ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app horizon (-> (app lose) <-) 0) (env (() ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> move-coord-v <-) (move move-coord-x _) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-))) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env (() ())))\""
  44
  21
  20
  3
  21
  20
  41
  1
  1
  107/21
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  46
  23
  20
  3
  23
  20
  43
  1
  1
  117/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env (() ())))\""
  78
  50
  24
  4
  50
  24
  74
  1
  1
  136/25
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env (())))\""
  79
  51
  24
  4
  51
  24
  75
  1
  1
  277/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env (())))\""
  80
  52
  24
  4
  52
  24
  76
  1
  1
  141/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env (())))\""
  42
  28
  13
  1
  28
  13
  41
  1
  1
  151/28
  ((3/2 3/2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (())))\""
  43
  29
  13
  1
  29
  13
  42
  1
  1
  156/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  45
  31
  13
  1
  31
  13
  44
  1
  1
  166/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin bo that-mark (-> this-mark <-)) (env (() ())))\""
  30
  18
  11
  1
  18
  11
  29
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env (())))\""
  32
  20
  11
  1
  20
  11
  31
  1
  1
  53/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env (() ())))\""
  34
  22
  11
  1
  22
  11
  33
  1
  1
  58/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app play-turn empty-board player-one (-> player-two <-)) (env (())))\""
  13
  9
  4
  0
  9
  4
  13
  1
  1
  47/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  32
  24
  7
  1
  24
  7
  31
  1
  1
  43/8
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) bo that-play this-play) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord rc rc) m) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  9
  8
  0
  1
  8
  0
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  11
  10
  0
  1
  10
  0
  10
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  13
  12
  0
  1
  12
  0
  12
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  15
  14
  0
  1
  14
  0
  14
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  34
  24
  9
  1
  24
  9
  33
  1
  1
  31/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  36
  26
  9
  1
  26
  9
  35
  1
  1
  67/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app minimax bo that-mark this-mark)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  letrec
  "\"'(eval (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env (() ())))\""
  13
  9
  3
  1
  9
  3
  12
  1
  1
  46/9
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match some-v-v ((some some-v-x) (-> some-v-x <-)) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env (() ())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env (())))\""
  13
  9
  4
  0
  9
  4
  13
  1
  1
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env (())))\""
  9
  5
  4
  0
  5
  4
  9
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env (())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  12
  8
  4
  0
  8
  4
  12
  1
  1
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env (())))\""
  13
  9
  4
  0
  9
  4
  13
  1
  1
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  14
  10
  4
  0
  10
  4
  14
  1
  1
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env (() ())))\""
  77
  54
  22
  1
  54
  22
  76
  1
  1
  151/27
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  116
  81
  33
  2
  81
  33
  114
  1
  1
  446/81
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env (() ())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  12
  8
  4
  0
  8
  4
  12
  1
  1
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord rc rc) (-> m <-)) (env (() ())))\""
  77
  54
  22
  1
  54
  22
  76
  1
  1
  151/27
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> that-mark <-) this-mark) (env (() ())))\""
  20
  11
  9
  0
  11
  9
  20
  1
  1
  58/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (-> (app X) <-) (app make-ai-action (app X))) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  19
  13
  3
  3
  7
  1
  8
  1
  3/7
  66/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  25
  19
  3
  3
  11
  1
  12
  1
  13/27
  96/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  27
  21
  3
  3
  13
  1
  14
  1
  19/33
  106/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2)))))\""
  49
  30
  13
  6
  16
  6
  22
  1
  47/84
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  94
  54
  29
  11
  28
  17
  45
  1
  173/270
  151/27
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  160
  108
  31
  21
  57
  19
  76
  1
  257/360
  613/108
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  160
  108
  31
  21
  57
  19
  76
  1
  257/360
  613/108
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  163
  110
  31
  22
  59
  19
  78
  1
  559/765
  125/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env ((□? (x1 x2)))))\""
  164
  111
  31
  22
  59
  19
  78
  1
  2191/3060
  631/111
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  165
  112
  31
  22
  60
  19
  79
  1
  2281/3150
  91/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  177
  124
  31
  22
  60
  19
  79
  1
  323/450
  703/124
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env ((□? (x1 x2)))))\""
  178
  125
  31
  22
  60
  19
  79
  1
  1108/1575
  708/125
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  197
  141
  34
  22
  60
  19
  79
  1
  218/315
  793/141
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  199
  143
  34
  22
  60
  19
  79
  1
  433/630
  805/143
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  199
  143
  34
  22
  60
  19
  79
  1
  433/630
  805/143
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  199
  143
  34
  22
  60
  19
  79
  1
  433/630
  805/143
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  199
  143
  34
  22
  60
  19
  79
  1
  433/630
  805/143
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  200
  144
  34
  22
  60
  19
  79
  1
  212/315
  811/144
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  200
  144
  34
  22
  60
  19
  79
  1
  212/315
  811/144
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env ((□? (x1 x2)))))\""
  202
  146
  34
  22
  60
  19
  79
  1
  29/45
  411/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env ((□? (x1 x2)))))\""
  203
  147
  34
  22
  60
  19
  79
  1
  397/630
  276/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  203
  147
  34
  22
  60
  19
  79
  1
  397/630
  276/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  203
  147
  34
  22
  60
  19
  79
  1
  397/630
  276/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2)))))\""
  203
  147
  34
  22
  60
  19
  79
  1
  397/630
  276/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  121
  78
  28
  15
  52
  19
  71
  1
  245/288
  433/78
  ((7 7 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  131
  88
  28
  15
  58
  19
  77
  1
  2441/2970
  245/44
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  132
  89
  28
  15
  58
  19
  77
  1
  2411/2970
  495/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  135
  92
  28
  15
  58
  19
  77
  1
  211/270
  517/92
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env ((□? (x1 x2)))))\""
  139
  95
  28
  16
  58
  19
  77
  1
  1093/1485
  534/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  144
  99
  28
  17
  58
  19
  77
  1
  2171/2970
  554/99
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  145
  100
  28
  17
  58
  19
  77
  1
  433/594
  559/100
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  147
  102
  28
  17
  58
  19
  77
  1
  421/594
  569/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  150
  104
  28
  18
  60
  19
  79
  1
  457/630
  581/104
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  150
  104
  28
  18
  60
  19
  79
  1
  457/630
  581/104
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  150
  104
  28
  18
  60
  19
  79
  1
  457/630
  581/104
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  152
  106
  28
  18
  60
  19
  79
  1
  227/315
  593/106
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  152
  106
  28
  18
  60
  19
  79
  1
  227/315
  593/106
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  152
  106
  28
  18
  60
  19
  79
  1
  227/315
  593/106
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  152
  106
  28
  18
  60
  19
  79
  1
  227/315
  593/106
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  156
  109
  29
  18
  60
  19
  79
  1
  226/315
  609/109
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  156
  109
  29
  18
  60
  19
  79
  1
  226/315
  609/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  158
  111
  29
  18
  60
  19
  79
  1
  44/63
  619/111
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  194
  138
  34
  22
  60
  19
  79
  1
  71/105
  775/138
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  200
  144
  34
  22
  60
  19
  79
  1
  212/315
  811/144
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2)))))\""
  200
  144
  34
  22
  60
  19
  79
  1
  212/315
  811/144
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env ((□? (x1 x2)))))\""
  203
  147
  34
  22
  60
  19
  79
  1
  397/630
  276/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env ((□? (x1 x2)))))\""
  203
  147
  34
  22
  60
  19
  79
  1
  397/630
  276/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2)))))\""
  203
  147
  34
  22
  60
  19
  79
  1
  397/630
  276/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env ((□? (x1 x2)))))\""
  203
  147
  34
  22
  60
  19
  79
  1
  397/630
  276/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  10
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  203
  147
  34
  22
  60
  19
  79
  1
  397/630
  276/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  38
  19
  8
  11
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  38
  19
  8
  11
  12
  4
  16
  1
  3/4
  100/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  24
  10
  3
  11
  5
  2
  7
  1
  5/8
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  26
  12
  3
  11
  5
  2
  7
  1
  1/2
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  27
  13
  3
  11
  5
  2
  7
  1
  4/9
  66/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  36
  17
  8
  11
  10
  4
  14
  1
  17/24
  88/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  38
  18
  8
  12
  10
  4
  14
  1
  17/24
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  36
  17
  8
  11
  10
  4
  14
  1
  17/24
  88/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  43
  21
  8
  14
  10
  4
  14
  1
  17/26
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  45
  23
  8
  14
  11
  4
  15
  1
  9/14
  118/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  98
  59
  19
  20
  20
  6
  26
  1
  25/42
  307/59
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  113
  71
  21
  21
  22
  8
  30
  1
  29/48
  367/71
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  124
  79
  22
  23
  22
  8
  30
  1
  29/48
  408/79
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  49
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  75
  45
  19
  11
  18
  6
  24
  1
  23/36
  79/15
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  sat-1
  1
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  18
  9
  3
  6
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  78
  45
  20
  13
  16
  6
  22
  1
  21/32
  236/45
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  104
  60
  31
  13
  21
  8
  29
  1
  59/105
  167/30
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  73
  37
  19
  17
  13
  6
  19
  1
  8/13
  195/37
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  75
  39
  19
  17
  13
  6
  19
  1
  22/39
  205/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  40
  21
  8
  11
  13
  4
  17
  1
  11/15
  110/21
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  102
  47
  20
  35
  20
  9
  29
  1
  73/102
  246/47
  ((7 7 0) (7 7 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  59
  28
  19
  12
  13
  6
  19
  1
  44/75
  83/14
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  28
  13
  8
  7
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  30
  15
  8
  7
  10
  4
  14
  1
  19/24
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  33
  14
  8
  11
  8
  4
  12
  1
  3/4
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  41
  17
  9
  15
  8
  4
  12
  1
  3/4
  89/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  86
  41
  20
  25
  14
  7
  21
  1
  9/13
  216/41
  ((8 8 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  88
  43
  20
  25
  15
  7
  22
  1
  19/28
  226/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  90
  45
  20
  25
  16
  7
  23
  1
  2/3
  236/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  106
  59
  22
  25
  18
  9
  27
  1
  2/3
  306/59
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  156
  86
  45
  25
  25
  13
  38
  1
  3/5
  262/43
  ((8 8 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  158
  88
  45
  25
  26
  13
  39
  1
  143/240
  267/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  158
  88
  45
  25
  26
  13
  39
  1
  143/240
  267/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  1
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  24
  9
  3
  12
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  27
  12
  3
  12
  5
  2
  7
  1
  5/8
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  38
  19
  8
  11
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  1
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  5
  3
  0
  2
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  36
  17
  8
  11
  10
  4
  14
  1
  17/24
  88/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  44
  25
  8
  11
  15
  4
  19
  1
  12/17
  132/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  44
  25
  8
  11
  15
  4
  19
  1
  12/17
  132/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  87
  51
  19
  17
  21
  6
  27
  1
  13/21
  271/51
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  89
  53
  19
  17
  21
  6
  27
  1
  37/63
  281/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  91
  55
  19
  17
  22
  6
  28
  1
  7/12
  291/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  101
  65
  19
  17
  27
  6
  33
  1
  46/81
  347/65
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  103
  67
  19
  17
  28
  6
  34
  1
  95/168
  359/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  20
  11
  3
  6
  6
  2
  8
  1
  11/16
  56/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  22
  13
  3
  6
  6
  2
  8
  1
  9/16
  66/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  45
  31
  8
  6
  19
  3
  22
  1
  31/65
  159/31
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  47
  32
  8
  7
  19
  3
  22
  1
  31/70
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  1
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  22
  9
  3
  10
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  90
  45
  20
  25
  16
  6
  22
  1
  21/32
  236/45
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  90
  45
  20
  25
  16
  6
  22
  1
  21/32
  236/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  102
  57
  20
  25
  16
  6
  22
  1
  21/34
  296/57
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x4 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  9
  2
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  10
  3
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  45
  22
  2
  21
  8
  2
  10
  1
  8/15
  5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x4) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  113
  37
  20
  56
  9
  6
  15
  1
  9/14
  202/37
  ((15/2 15/2 0) (15/2 15/2 0) (8 8 0)))
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  121
  45
  20
  56
  9
  6
  15
  1
  3/5
  242/45
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  123
  47
  20
  56
  11
  6
  17
  1
  11/17
  252/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  33
  17
  8
  8
  8
  1
  9
  1
  3/16
  91/17
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  41
  18
  8
  15
  8
  1
  9
  1
  15/88
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  57
  34
  8
  15
  22
  1
  23
  1
  29/104
  88/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  98
  55
  17
  26
  28
  4
  32
  1
  73/176
  302/55
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  57
  15
  8
  34
  8
  5
  13
  1
  8/11
  26/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  124
  49
  35
  40
  18
  9
  27
  1
  79/152
  323/49
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  128
  53
  35
  40
  18
  9
  27
  1
  79/160
  343/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  70
  15
  13
  42
  7
  5
  12
  1
  7/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  43
  20
  2
  21
  7
  2
  9
  1
  1/2
  5
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  51
  21
  2
  28
  7
  2
  9
  1
  7/15
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  51
  21
  2
  28
  7
  2
  9
  1
  7/15
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  7
  2
  16
  3
  2
  5
  1
  3/5
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  10
  2
  17
  4
  2
  6
  1
  4/7
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  95
  19
  20
  56
  7
  6
  13
  1
  7/10
  104/19
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  103
  27
  20
  56
  7
  6
  13
  1
  7/11
  152/27
  ((2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  110
  31
  20
  59
  7
  6
  13
  1
  7/12
  172/31
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x3 x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  118
  39
  20
  59
  7
  6
  13
  1
  7/13
  212/39
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  55
  13
  8
  34
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  9
  3
  17
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  95
  19
  20
  56
  7
  6
  13
  1
  7/10
  104/19
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  70
  15
  13
  42
  7
  5
  12
  1
  7/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  10
  3
  20
  5
  2
  7
  1
  5/8
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  34
  11
  3
  20
  5
  2
  7
  1
  5/9
  56/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  55
  13
  8
  34
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  9
  3
  9
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  50
  31
  8
  11
  9
  4
  13
  1
  5/9
  161/31
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  55
  13
  8
  34
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  57
  15
  8
  34
  8
  5
  13
  1
  8/11
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  59
  17
  8
  34
  8
  5
  13
  1
  2/3
  88/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  47
  31
  8
  8
  21
  1
  22
  1
  21/80
  161/31
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  80
  25
  13
  42
  9
  5
  14
  1
  9/14
  134/25
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  11
  3
  0
  8
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  14
  5
  0
  9
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  15
  6
  0
  9
  1
  0
  1
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  43
  14
  3
  26
  5
  2
  7
  1
  2/5
  71/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  30
  12
  3
  15
  5
  2
  7
  1
  5/8
  61/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  45
  22
  2
  21
  8
  2
  10
  1
  8/15
  5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  10
  2
  17
  4
  2
  6
  1
  4/7
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  97
  31
  15
  51
  11
  7
  18
  1
  11/17
  160/31
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  13
  2
  18
  5
  2
  7
  1
  5/9
  5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x3 x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  41
  14
  2
  25
  5
  2
  7
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  49
  20
  2
  27
  7
  2
  9
  1
  1/2
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  103
  27
  20
  56
  7
  6
  13
  1
  7/11
  16/3
  ((6 6 0) (11/2 11/2 0) (6 6 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  37
  16
  2
  19
  6
  2
  8
  1
  6/11
  5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  80
  25
  13
  42
  9
  5
  14
  1
  9/14
  134/25
  ((7/2 7/2 0) (7/2 7/2 0) (4 4 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  87
  29
  13
  45
  9
  5
  14
  1
  3/5
  154/29
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  94
  33
  13
  48
  9
  5
  14
  1
  9/16
  58/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x4 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  98
  37
  13
  48
  9
  5
  14
  1
  9/17
  194/37
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  100
  39
  13
  48
  10
  5
  15
  1
  19/36
  68/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  100
  39
  13
  48
  10
  5
  15
  1
  19/36
  68/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  29
  5
  2
  22
  2
  2
  4
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  32
  8
  2
  22
  3
  2
  5
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  65
  28
  6
  31
  7
  4
  11
  1
  7/12
  71/14
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  67
  30
  6
  31
  7
  4
  11
  1
  7/13
  76/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  113
  37
  20
  56
  9
  6
  15
  1
  9/14
  202/37
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  133
  41
  21
  71
  9
  6
  15
  1
  9/14
  223/41
  ((5/2 5/2 0) (5/2 5/2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x4) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  9
  2
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  10
  3
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  61
  19
  8
  34
  8
  5
  13
  1
  8/13
  98/19
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  113
  37
  20
  56
  9
  6
  15
  1
  9/14
  202/37
  ((15/2 15/2 0) (15/2 15/2 0) (8 8 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  9
  3
  21
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  36
  12
  3
  21
  5
  2
  7
  1
  5/8
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  136
  27
  31
  78
  7
  7
  14
  1
  7/10
  152/27
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  9
  3
  9
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  7
  2
  16
  3
  2
  5
  1
  3/5
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  95
  19
  20
  56
  7
  6
  13
  1
  7/10
  104/19
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  103
  27
  20
  56
  7
  6
  13
  1
  7/11
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  5
  3
  0
  2
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  4
  0
  5
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ((□? (s)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  8
  6
  0
  2
  4
  0
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  48
  21
  8
  19
  14
  4
  18
  1
  25/32
  36/7
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  114
  43
  19
  52
  20
  9
  29
  1
  38/51
  227/43
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  117
  46
  19
  52
  23
  9
  32
  1
  47/60
  121/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  114
  51
  19
  44
  21
  6
  27
  1
  13/21
  271/51
  ((9 9 0) (9 9 0) (19/2 19/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  19
  8
  18
  12
  4
  16
  1
  3/4
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  48
  21
  8
  19
  12
  4
  16
  1
  21/32
  110/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  57
  25
  8
  24
  12
  4
  16
  1
  21/34
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  33
  16
  8
  9
  7
  1
  8
  1
  7/72
  43/8
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  35
  18
  8
  9
  8
  1
  9
  1
  15/88
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  36
  19
  8
  9
  9
  1
  10
  1
  23/96
  101/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  6
  5
  0
  1
  4
  0
  4
  1
  4/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  7
  6
  0
  1
  4
  0
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  8
  7
  0
  1
  4
  0
  4
  1
  4/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  15
  10
  2
  3
  5
  1
  6
  1
  1/2
  47/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  17
  12
  2
  3
  7
  1
  8
  1
  13/22
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env ((□? (s)))))\""
  19
  14
  2
  3
  8
  1
  9
  1
  7/12
  67/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  65
  35
  11
  19
  22
  6
  28
  1
  35/48
  176/35
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env ((□? (f)))))\""
  68
  38
  11
  19
  24
  6
  30
  1
  19/26
  191/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  124
  66
  24
  34
  30
  9
  39
  1
  29/42
  56/11
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  126
  68
  24
  34
  30
  9
  39
  1
  2/3
  173/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  9
  3
  9
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  106
  47
  19
  40
  20
  7
  27
  1
  13/19
  249/47
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  122
  57
  19
  46
  20
  7
  27
  1
  13/20
  299/57
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  123
  58
  19
  46
  21
  7
  28
  1
  2/3
  152/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  9
  3
  13
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  12
  4
  16
  1
  3/4
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  35
  18
  8
  9
  7
  1
  8
  1
  7/88
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  19
  8
  10
  7
  1
  8
  1
  7/96
  101/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  39
  21
  8
  10
  9
  1
  10
  1
  23/112
  37/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  76
  38
  19
  19
  14
  3
  17
  1
  3/8
  221/38
  ((7/2 7/2 0) (4 4 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  11
  7
  2
  2
  3
  1
  4
  1
  3/8
  33/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  39
  17
  6
  16
  9
  4
  13
  1
  7/11
  83/17
  ((1/2 1/2 0) (1/2 1/2 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  73
  31
  12
  30
  16
  6
  22
  1
  25/36
  158/31
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  9
  5
  14
  1
  17/20
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  15
  8
  22
  10
  5
  15
  1
  9/11
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  104
  39
  19
  46
  15
  7
  22
  1
  19/28
  205/39
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  125
  51
  21
  53
  17
  9
  26
  1
  23/34
  265/51
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  15
  8
  16
  9
  4
  13
  1
  8/11
  26/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  17
  8
  16
  10
  4
  14
  1
  17/24
  88/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  98
  41
  19
  38
  15
  6
  21
  1
  3/5
  215/41
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  100
  43
  19
  38
  16
  6
  22
  1
  19/32
  227/43
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  102
  45
  19
  38
  17
  6
  23
  1
  10/17
  79/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  104
  46
  19
  39
  17
  6
  23
  1
  10/17
  121/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  15
  8
  20
  9
  4
  13
  1
  8/11
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  110
  39
  19
  52
  17
  9
  26
  1
  61/84
  205/39
  ((7 7 0) (7 7 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  112
  41
  19
  52
  18
  9
  27
  1
  32/45
  217/41
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  10
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  114
  43
  19
  52
  18
  9
  27
  1
  2/3
  227/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  33
  17
  8
  8
  9
  1
  10
  1
  23/80
  91/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  9
  3
  0
  6
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  9
  4
  13
  1
  2/3
  98/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  53
  23
  8
  22
  9
  4
  13
  1
  8/13
  118/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  55
  25
  8
  22
  11
  4
  15
  1
  2/3
  128/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  64
  33
  8
  23
  17
  4
  21
  1
  5/7
  56/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  100
  43
  19
  38
  17
  6
  23
  1
  11/17
  227/43
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  25
  7
  2
  16
  2
  2
  4
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  58
  22
  10
  26
  10
  6
  16
  1
  19/32
  113/22
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  9
  3
  21
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  37
  13
  3
  21
  9
  2
  11
  1
  9/11
  66/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  70
  35
  8
  27
  13
  4
  17
  1
  9/13
  181/35
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  70
  35
  8
  27
  13
  4
  17
  1
  9/13
  181/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  9
  5
  14
  1
  17/20
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  108
  37
  19
  52
  16
  9
  25
  1
  29/39
  195/37
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  23
  10
  3
  10
  5
  2
  7
  1
  5/8
  51/10
  ((1/2 1/2 0) (1 1 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  25
  11
  3
  11
  5
  2
  7
  1
  5/9
  56/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env ((□? (f)))))\""
  28
  14
  3
  11
  7
  2
  9
  1
  13/22
  71/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  114
  43
  19
  52
  20
  9
  29
  1
  38/51
  227/43
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  115
  44
  19
  52
  21
  9
  30
  1
  41/54
  58/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  117
  46
  19
  52
  21
  9
  30
  1
  13/18
  121/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  6
  5
  0
  1
  3
  0
  3
  1
  3/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  50
  20
  8
  22
  14
  5
  19
  1
  5/6
  103/20
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env ((□? (s)))))\""
  52
  21
  8
  23
  14
  5
  19
  1
  25/32
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  52
  21
  8
  23
  14
  5
  19
  1
  25/32
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  12
  4
  16
  1
  3/4
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  49
  21
  8
  20
  12
  4
  16
  1
  19/28
  110/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  5
  3
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  46
  17
  8
  21
  9
  4
  13
  1
  8/13
  88/17
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  48
  19
  8
  21
  10
  4
  14
  1
  17/28
  98/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  27
  9
  3
  15
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  29
  10
  3
  16
  5
  2
  7
  1
  5/8
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  11
  7
  2
  2
  3
  1
  4
  1
  3/8
  33/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  13
  9
  2
  2
  5
  1
  6
  1
  7/12
  43/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  9
  5
  14
  1
  17/20
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  96
  37
  19
  40
  14
  7
  21
  1
  9/13
  195/37
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  7
  3
  0
  4
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  15
  8
  18
  9
  4
  13
  1
  8/11
  26/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  98
  43
  19
  36
  17
  6
  23
  1
  11/17
  227/43
  ((7 7 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  33
  17
  8
  8
  8
  1
  9
  1
  3/16
  91/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  111
  52
  33
  26
  20
  6
  26
  1
  95/176
  83/13
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  131
  62
  42
  27
  28
  14
  42
  1
  53/96
  6
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  135
  66
  42
  27
  28
  14
  42
  1
  53/100
  196/33
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma)))\n  (env ((□? (bo)) (□? (ma)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  94
  38
  21
  35
  10
  2
  12
  1
  6/25
  104/19
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  106
  45
  42
  19
  21
  22
  43
  1
  241/576
  232/45
  ((7 7 0) (7 7 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  47
  18
  15
  14
  0
  3
  3
  1
  0
  11/2
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  79
  52
  20
  7
  40
  12
  52
  1
  157/224
  21/4
  ((5 5 0) (5 5 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  5
  3
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  42
  31
  7
  4
  23
  4
  27
  1
  65/88
  166/31
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  46
  33
  7
  6
  24
  4
  28
  1
  23/32
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  54
  41
  7
  6
  30
  4
  34
  1
  75/104
  216/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  11
  5
  2
  4
  1
  1
  2
  1
  1/8
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  14
  7
  2
  5
  1
  1
  2
  1
  1/12
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env ((□? (oc₀ oc₁)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  6
  3
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  7
  3
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  5
  3
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  12
  7
  0
  5
  1
  0
  1
  1
  1/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  15
  9
  0
  6
  1
  0
  1
  1
  1/9
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  22
  14
  0
  8
  3
  0
  3
  1
  3/14
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  6
  5
  0
  1
  4
  0
  4
  1
  4/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  46
  29
  12
  5
  12
  7
  19
  1
  7/34
  185/29
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  48
  30
  12
  6
  12
  7
  19
  1
  7/36
  19/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> empty-board <-) player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  10
  6
  0
  4
  1
  0
  1
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b)))))\""
  11
  7
  0
  4
  3
  0
  3
  1
  3/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  14
  9
  0
  5
  4
  0
  4
  1
  4/9
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  20
  13
  0
  7
  6
  0
  6
  1
  6/13
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  48
  25
  9
  14
  7
  2
  9
  1
  13/42
  128/25
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env ((□? (b co m)))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  8
  0
  6
  3
  0
  3
  1
  3/8
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  48
  22
  15
  11
  10
  8
  18
  1
  31/120
  60/11
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  51
  24
  15
  12
  11
  8
  19
  1
  39/136
  65/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  101
  68
  20
  13
  44
  12
  56
  1
  189/352
  363/68
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  103
  69
  20
  14
  44
  12
  56
  1
  21/40
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  11
  6
  0
  5
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  16
  8
  2
  6
  2
  1
  3
  1
  2/7
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  36
  17
  4
  15
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env ((□? (f acc l)))))\""
  39
  19
  4
  16
  5
  1
  6
  1
  3/14
  97/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  42
  21
  4
  17
  5
  1
  6
  1
  3/16
  107/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  18
  10
  4
  4
  3
  1
  4
  1
  3/28
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  83
  42
  24
  17
  10
  5
  15
  1
  31/104
  113/21
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  83
  42
  24
  17
  10
  5
  15
  1
  31/104
  113/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  86
  44
  24
  18
  10
  5
  15
  1
  31/112
  59/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  124
  72
  31
  21
  33
  9
  42
  1
  24/47
  43/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  125
  73
  31
  21
  33
  9
  42
  1
  1/2
  392/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env ((□? (co)))))\""
  127
  74
  31
  22
  33
  9
  42
  1
  24/49
  397/74
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env ((□? (bo)))))\""
  129
  75
  31
  23
  33
  9
  42
  1
  12/25
  134/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env ((□? (h)))))\""
  131
  76
  31
  24
  33
  9
  42
  1
  8/17
  407/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  133
  78
  31
  24
  34
  9
  43
  1
  25/53
  139/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (c)) (□? (b m)))))\""
  11
  7
  0
  4
  4
  0
  4
  1
  4/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  15
  14
  0
  3
  3
  1
  0
  27/5
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  44
  15
  15
  14
  0
  3
  3
  1
  0
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  53
  23
  15
  15
  2
  3
  5
  1
  1/7
  121/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  31
  20
  7
  4
  15
  4
  19
  1
  3/4
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  18
  7
  7
  4
  3
  4
  7
  1
  3/16
  37/7
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  25
  12
  7
  6
  6
  4
  10
  1
  5/12
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  15
  14
  0
  3
  3
  1
  0
  27/5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  93
  47
  27
  19
  25
  11
  36
  1
  37/64
  254/47
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  54
  32
  15
  7
  22
  8
  30
  1
  13/24
  21/4
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env ((□? (some-v-v)))))\""
  56
  33
  15
  8
  22
  8
  30
  1
  39/76
  173/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  123
  79
  27
  17
  39
  15
  54
  1
  65/196
  450/79
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  135
  91
  27
  17
  47
  15
  62
  1
  227/636
  73/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ((□? (i)))))\""
  5
  3
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  26
  13
  5
  8
  4
  1
  5
  1
  4/45
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  73
  31
  20
  22
  4
  4
  8
  1
  4/95
  167/31
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  78
  33
  20
  25
  4
  4
  8
  1
  4/105
  59/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  90
  58
  23
  9
  42
  13
  55
  1
  37/52
  311/58
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  94
  60
  23
  11
  42
  13
  55
  1
  111/164
  107/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  97
  62
  23
  12
  42
  13
  55
  1
  111/172
  331/62
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  49
  32
  12
  5
  25
  8
  33
  1
  37/46
  173/32
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  52
  34
  12
  6
  25
  8
  33
  1
  37/50
  183/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  53
  35
  12
  6
  25
  8
  33
  1
  37/52
  188/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env ((□? (bo)) (□? (ma)))))\""
  57
  37
  12
  8
  26
  8
  34
  1
  39/56
  198/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo this-play that-play)))))\""
  59
  38
  12
  9
  26
  8
  34
  1
  39/58
  203/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  62
  39
  12
  11
  26
  8
  34
  1
  13/20
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  65
  41
  12
  12
  26
  8
  34
  1
  39/64
  218/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  112
  71
  24
  17
  40
  15
  55
  1
  71/138
  400/71
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  115
  73
  24
  18
  41
  15
  56
  1
  37/72
  410/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ((□? (i)))))\""
  9
  6
  0
  3
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  10
  7
  0
  3
  3
  0
  3
  1
  3/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  12
  9
  0
  3
  5
  0
  5
  1
  5/9
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  15
  11
  0
  4
  5
  0
  5
  1
  5/11
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  18
  13
  0
  5
  5
  0
  5
  1
  5/13
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  32
  17
  4
  11
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  53
  27
  8
  18
  4
  2
  6
  1
  2/19
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-horizon\")\n  (env ((□? (move-horizon-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  5
  4
  0
  1
  3
  0
  3
  1
  3/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  43
  26
  9
  8
  9
  2
  11
  1
  6/17
  135/26
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  46
  27
  9
  10
  9
  2
  11
  1
  1/3
  140/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  49
  29
  9
  11
  10
  2
  12
  1
  7/20
  150/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  48
  32
  12
  4
  25
  8
  33
  1
  37/46
  173/32
  ((3 3 0) (5/2 5/2 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  51
  34
  12
  5
  26
  8
  34
  1
  39/50
  183/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env ((□? (f xs)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  12
  6
  0
  6
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env ((□? (r x)) (□? (f x)))))\""
  16
  8
  0
  8
  3
  0
  3
  1
  3/8
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  19
  10
  0
  9
  4
  0
  4
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  23
  12
  0
  11
  5
  0
  5
  1
  5/12
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  38
  18
  7
  13
  8
  4
  12
  1
  23/60
  46/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  39
  19
  7
  13
  9
  4
  13
  1
  27/64
  97/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  80
  42
  17
  21
  19
  11
  30
  1
  41/112
  17/3
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  95
  52
  20
  23
  20
  11
  31
  1
  15/44
  72/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  98
  54
  20
  24
  20
  11
  31
  1
  9/28
  149/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  100
  56
  20
  24
  20
  11
  31
  1
  5/16
  11/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  116
  64
  20
  32
  20
  11
  31
  1
  45/152
  351/64
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app minimax bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) bo that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  36
  17
  4
  15
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  37
  18
  4
  15
  4
  1
  5
  1
  2/13
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-coord\")\n  (env ((□? (move-coord-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env ((□? (b m)))))\""
  12
  7
  0
  5
  3
  0
  3
  1
  3/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  18
  11
  0
  7
  4
  0
  4
  1
  4/11
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  21
  13
  0
  8
  5
  0
  5
  1
  5/13
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  24
  15
  0
  9
  6
  0
  6
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  36
  22
  2
  12
  7
  0
  7
  1
  7/20
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  71
  48
  15
  8
  37
  8
  45
  1
  149/216
  251/48
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  74
  49
  15
  10
  37
  8
  45
  1
  149/224
  256/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  75
  50
  15
  10
  37
  8
  45
  1
  149/232
  261/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  79
  53
  15
  11
  37
  8
  45
  1
  149/256
  275/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  82
  55
  15
  12
  37
  8
  45
  1
  149/272
  57/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  100
  63
  23
  14
  41
  13
  54
  1
  13/24
  37/7
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  103
  66
  23
  14
  42
  13
  55
  1
  177/328
  58/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  116
  72
  25
  19
  43
  13
  56
  1
  185/368
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  103
  43
  42
  18
  21
  22
  43
  1
  241/528
  222/43
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  118
  52
  45
  21
  22
  22
  44
  1
  265/648
  267/52
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  27
  16
  5
  6
  9
  3
  12
  1
  5/8
  81/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  66
  45
  12
  9
  22
  7
  29
  1
  103/288
  254/45
  ((7/2 7/2 0) (7/2 7/2 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  70
  48
  14
  8
  15
  8
  23
  1
  14/99
  47/8
  ((5 5 0) (5 5 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  121
  78
  29
  14
  37
  16
  53
  1
  173/588
  220/39
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  123
  80
  29
  14
  38
  16
  54
  1
  185/612
  45/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  145
  102
  29
  14
  52
  16
  68
  1
  103/354
  290/51
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? (bo this-play that-play)))))\""
  151
  108
  29
  14
  56
  16
  72
  1
  37/122
  307/54
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  156
  112
  29
  15
  58
  16
  74
  1
  41/130
  317/56
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  156
  112
  29
  15
  58
  16
  74
  1
  41/130
  317/56
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? (ma)))))\""
  5
  3
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app X) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  69
  32
  20
  17
  7
  4
  11
  1
  7/20
  43/8
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  79
  38
  23
  18
  8
  5
  13
  1
  15/46
  205/38
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  11
  6
  2
  3
  3
  1
  4
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  13
  7
  2
  4
  3
  1
  4
  1
  5/12
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  9
  2
  4
  3
  1
  4
  1
  5/16
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  17
  11
  2
  4
  3
  1
  4
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  17
  7
  2
  8
  1
  0
  1
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> display <-) \"Cat's game.\\n\")\n  (env ((□? (bo this-play that-play)))))\""
  19
  8
  2
  9
  1
  0
  1
  1
  1/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env ((□? (b m)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  9
  0
  5
  4
  0
  4
  1
  4/9
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  17
  11
  0
  6
  5
  0
  5
  1
  5/11
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  21
  14
  0
  7
  6
  0
  6
  1
  5/13
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  24
  16
  0
  8
  7
  0
  7
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  4
  3
  0
  1
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  20
  10
  7
  3
  6
  4
  10
  1
  3/8
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env ((□? (oc₀ oc₁)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  95
  63
  23
  9
  41
  13
  54
  1
  91/152
  16/3
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  98
  64
  23
  11
  41
  13
  54
  1
  7/12
  341/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  100
  65
  23
  12
  41
  13
  54
  1
  91/160
  346/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  100
  65
  23
  12
  41
  13
  54
  1
  91/160
  346/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  102
  67
  23
  12
  41
  13
  54
  1
  91/164
  360/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app win) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  3
  0
  4
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) empty-board player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  10
  5
  0
  5
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  14
  8
  0
  6
  4
  0
  4
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  18
  10
  0
  8
  5
  0
  5
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  84
  45
  20
  19
  12
  4
  16
  1
  12/29
  239/45
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  9
  6
  0
  3
  3
  0
  3
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  60
  39
  13
  8
  28
  8
  36
  1
  3/4
  16/3
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  19
  10
  7
  2
  6
  4
  10
  1
  3/8
  27/5
  ((1 1 0) (3/2 3/2 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  27
  15
  7
  5
  8
  4
  12
  1
  7/18
  79/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env ((□? (h)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  4
  0
  5
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  33
  20
  5
  8
  12
  3
  15
  1
  5/9
  101/20
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env ((□? (f x)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  30
  20
  7
  3
  15
  4
  19
  1
  3/4
  27/5
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  54
  36
  12
  6
  26
  7
  33
  1
  97/132
  21/4
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  61
  44
  12
  5
  14
  7
  21
  1
  5/36
  131/22
  ((11/2 11/2 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  13
  7
  3
  3
  2
  1
  3
  1
  2/15
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  55
  32
  12
  11
  9
  3
  12
  1
  23/63
  167/32
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  74
  46
  20
  8
  34
  12
  46
  1
  79/116
  243/46
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  78
  48
  20
  10
  35
  12
  47
  1
  83/124
  253/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? (ma)))))\""
  80
  49
  20
  11
  35
  12
  47
  1
  83/128
  258/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> minimax <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env ((□? (bo this-play that-play)))))\""
  10
  6
  0
  4
  3
  0
  3
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  11
  7
  0
  4
  3
  0
  3
  1
  3/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  38
  25
  7
  6
  17
  4
  21
  1
  25/38
  133/25
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  41
  27
  7
  7
  17
  4
  21
  1
  25/42
  143/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  44
  29
  7
  8
  17
  4
  21
  1
  25/46
  153/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked? <-) (app b (app coord r c)))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  49
  31
  7
  11
  18
  4
  22
  1
  27/50
  163/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  77
  47
  20
  10
  34
  12
  46
  1
  79/120
  248/47
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  79
  48
  20
  11
  34
  12
  46
  1
  79/124
  253/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  5
  4
  0
  1
  3
  0
  3
  1
  3/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  4
  3
  0
  1
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  10
  6
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  13
  8
  0
  5
  1
  0
  1
  1
  1/8
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  17
  10
  0
  7
  1
  0
  1
  1
  1/10
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  35
  20
  4
  11
  4
  1
  5
  1
  7/68
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  80
  36
  32
  12
  20
  18
  38
  1
  241/432
  46/9
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env ((□? (oc₀ oc₁)))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  10
  5
  0
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  27
  16
  5
  6
  9
  3
  12
  1
  5/8
  81/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  36
  20
  7
  9
  10
  4
  14
  1
  1/2
  101/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  38
  22
  7
  9
  12
  4
  16
  1
  15/26
  111/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (b)))))\""
  41
  24
  7
  10
  13
  4
  17
  1
  17/30
  121/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  44
  26
  7
  11
  13
  4
  17
  1
  1/2
  131/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  78
  47
  21
  10
  34
  12
  46
  1
  79/116
  248/47
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  27
  18
  7
  2
  14
  4
  18
  1
  19/24
  49/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  34
  22
  7
  5
  16
  4
  20
  1
  23/32
  59/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  37
  24
  7
  6
  17
  4
  21
  1
  25/36
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  40
  26
  7
  7
  17
  4
  21
  1
  5/8
  69/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app lose) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  5
  3
  0
  2
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  9
  7
  0
  2
  4
  0
  4
  1
  4/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  22
  13
  2
  7
  5
  1
  6
  1
  4/11
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  65
  30
  20
  15
  7
  4
  11
  1
  7/18
  27/5
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env ((□? ()))))\""
  67
  31
  20
  16
  7
  4
  11
  1
  7/19
  167/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  69
  33
  20
  16
  7
  4
  11
  1
  1/3
  59/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  17
  5
  3
  9
  0
  1
  1
  1
  0
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  7
  0
  5
  3
  0
  3
  1
  3/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  73
  45
  20
  8
  33
  12
  45
  1
  75/112
  238/45
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  76
  46
  20
  10
  33
  12
  45
  1
  75/116
  243/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> maximin <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  38
  19
  4
  15
  5
  1
  6
  1
  3/14
  97/19
  ((1 1 0) (1 1 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  51
  24
  4
  23
  6
  1
  7
  1
  1/4
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b m)))))\""
  56
  29
  4
  23
  7
  1
  8
  1
  5/18
  147/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  58
  30
  4
  24
  7
  1
  8
  1
  5/19
  76/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  59
  31
  4
  24
  7
  1
  8
  1
  1/4
  157/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  61
  32
  4
  25
  7
  1
  8
  1
  5/21
  81/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (oc₀ oc₁)))))\""
  63
  33
  4
  26
  7
  1
  8
  1
  5/22
  167/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  66
  35
  4
  27
  8
  1
  9
  1
  1/4
  177/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  70
  37
  4
  29
  9
  1
  10
  1
  7/26
  187/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  43
  22
  4
  17
  6
  1
  7
  1
  4/17
  56/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  48
  24
  4
  20
  6
  1
  7
  1
  4/19
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app lose) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  12
  6
  2
  4
  2
  1
  3
  1
  3/10
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app X) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  10
  6
  0
  4
  3
  0
  3
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  8
  0
  4
  4
  0
  4
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  15
  10
  0
  5
  4
  0
  4
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env ((□? (bo)) (□? (ma)))))\""
  10
  5
  0
  5
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  40
  22
  4
  14
  6
  1
  7
  1
  4/17
  56/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  43
  23
  4
  16
  6
  1
  7
  1
  2/9
  117/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  45
  24
  4
  17
  6
  1
  7
  1
  4/19
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  74
  39
  13
  22
  7
  3
  10
  1
  1/6
  200/39
  ((3/2 3/2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  69
  33
  20
  16
  7
  4
  11
  1
  7/20
  179/33
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  110
  59
  32
  19
  17
  11
  28
  1
  59/216
  337/59
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  119
  67
  32
  20
  19
  11
  30
  1
  71/246
  377/67
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  129
  77
  32
  20
  26
  11
  37
  1
  83/264
  61/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> maximin <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  7
  0
  5
  3
  0
  3
  1
  3/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  78
  48
  20
  10
  34
  12
  46
  1
  79/124
  253/48
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env ((□? (b m)))))\""
  80
  50
  20
  10
  35
  12
  47
  1
  83/132
  263/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  181
  93
  62
  26
  56
  34
  90
  1
  739/1320
  485/93
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  7
  3
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  23
  12
  4
  7
  0
  1
  1
  1
  0
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  17
  7
  2
  8
  1
  0
  1
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ((□? (i)))))\""
  19
  8
  2
  9
  1
  0
  1
  1
  1/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  29
  14
  5
  10
  2
  1
  3
  1
  3/20
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env ((□? (rc)) (□? (b m)))))\""
  32
  15
  5
  12
  2
  1
  3
  1
  3/22
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  138
  90
  32
  16
  50
  19
  69
  1
  101/228
  17/3
  ((11/2 11/2 0) (11/2 11/2 0) (6 6 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (oc₀ oc₁)))))\""
  140
  91
  32
  17
  50
  19
  69
  1
  101/232
  515/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (c)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked? <-) (app b (app coord r c)))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  11
  6
  0
  5
  1
  0
  1
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  38
  22
  5
  11
  10
  3
  13
  1
  3/7
  111/22
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  68
  37
  11
  20
  14
  6
  20
  1
  10/33
  188/37
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  110
  69
  18
  23
  29
  10
  39
  1
  131/468
  388/69
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  110
  69
  18
  23
  29
  10
  39
  1
  131/468
  388/69
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  4
  3
  0
  1
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  7
  3
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env ((□? (some-v-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  53
  34
  13
  6
  25
  8
  33
  1
  37/48
  183/34
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  10
  7
  0
  3
  2
  0
  2
  1
  2/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  13
  9
  0
  4
  2
  0
  2
  1
  2/9
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  15
  11
  0
  4
  4
  0
  4
  1
  4/11
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  5
  3
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  8
  0
  5
  4
  0
  4
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  15
  9
  0
  6
  4
  0
  4
  1
  4/9
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  17
  11
  0
  6
  4
  0
  4
  1
  4/11
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  6
  3
  0
  3
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  8
  4
  0
  4
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  11
  6
  0
  5
  3
  0
  3
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  5
  3
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  4
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  22
  10
  4
  8
  2
  1
  3
  1
  3/16
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  19
  10
  7
  2
  6
  4
  10
  1
  3/8
  27/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  5
  3
  0
  2
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  12
  6
  0
  6
  1
  0
  1
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  16
  8
  0
  8
  2
  0
  2
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  23
  13
  0
  10
  4
  0
  4
  1
  4/13
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  25
  14
  0
  11
  4
  0
  4
  1
  2/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  28
  16
  0
  12
  4
  0
  4
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  56
  34
  7
  15
  18
  4
  22
  1
  27/56
  89/17
  ((2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  59
  36
  7
  16
  18
  4
  22
  1
  9/20
  47/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  63
  38
  7
  18
  18
  4
  22
  1
  27/64
  99/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  18
  10
  4
  4
  3
  1
  4
  1
  3/28
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  22
  12
  4
  6
  3
  1
  4
  1
  1/12
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  26
  14
  4
  8
  3
  1
  4
  1
  3/44
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-horizon\")\n  (env ((□? (move-horizon-v)))))\""
  28
  15
  4
  9
  3
  1
  4
  1
  1/16
  77/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  32
  19
  4
  9
  3
  1
  4
  1
  3/64
  96/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  34
  21
  4
  9
  4
  1
  5
  1
  7/72
  106/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  38
  23
  4
  11
  5
  1
  6
  1
  11/80
  116/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  40
  25
  4
  11
  6
  1
  7
  1
  15/88
  126/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  47
  29
  6
  12
  7
  2
  9
  1
  17/100
  146/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  47
  18
  15
  14
  0
  3
  3
  1
  0
  11/2
  ((3 3 0) (3 3 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  50
  20
  15
  15
  0
  3
  3
  1
  0
  109/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  53
  22
  15
  16
  0
  3
  3
  1
  0
  119/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  81
  40
  22
  19
  9
  7
  16
  1
  8/57
  43/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) empty-board player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  74
  46
  20
  8
  34
  12
  46
  1
  79/116
  243/46
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  38
  19
  4
  15
  5
  1
  6
  1
  3/14
  97/19
  ((3/2 3/2 0) (3/2 3/2 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  40
  21
  4
  15
  5
  1
  6
  1
  3/16
  107/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  9
  5
  0
  4
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  22
  11
  2
  9
  3
  0
  3
  1
  3/10
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  64
  46
  12
  6
  14
  7
  21
  1
  25/192
  136/23
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  148
  104
  32
  12
  61
  19
  80
  1
  74/177
  575/104
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env ((□? (oc₀ oc₁)))))\""
  150
  105
  32
  13
  61
  19
  80
  1
  37/90
  116/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  51
  30
  15
  6
  22
  8
  30
  1
  39/64
  79/15
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  57
  34
  15
  8
  24
  8
  32
  1
  47/80
  89/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env ((□? (bo this-play that-play)))))\""
  60
  36
  15
  9
  25
  8
  33
  1
  51/88
  47/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  126
  68
  35
  23
  32
  12
  44
  1
  79/164
  181/34
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  146
  82
  40
  24
  43
  16
  59
  1
  115/208
  437/82
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  149
  85
  40
  24
  44
  16
  60
  1
  119/216
  452/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env ((□? ()))))\""
  150
  86
  40
  24
  44
  16
  60
  1
  119/220
  457/86
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  150
  86
  40
  24
  44
  16
  60
  1
  119/220
  457/86
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  155
  91
  40
  24
  45
  16
  61
  1
  41/76
  482/91
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  38
  16
  15
  7
  7
  8
  15
  1
  7/72
  45/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  53
  23
  17
  13
  9
  9
  18
  1
  23/120
  125/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  26
  13
  4
  9
  2
  1
  3
  1
  1/5
  66/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env ((□? (h₀ h₁)))))\""
  28
  14
  4
  10
  2
  1
  3
  1
  2/11
  71/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  31
  16
  4
  11
  3
  1
  4
  1
  3/13
  81/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  58
  33
  11
  14
  16
  5
  21
  1
  23/48
  58/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo this-play that-play)))))\""
  60
  34
  11
  15
  16
  5
  21
  1
  23/50
  179/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env ((□? (bo)))))\""
  62
  35
  11
  16
  16
  5
  21
  1
  23/52
  184/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  43
  22
  15
  6
  14
  8
  22
  1
  7/32
  65/11
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  7
  3
  0
  4
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  27
  13
  7
  7
  7
  4
  11
  1
  5/14
  69/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  8
  6
  0
  2
  3
  0
  3
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (b)))))\""
  11
  8
  0
  3
  4
  0
  4
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) bo that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  15
  14
  0
  3
  3
  1
  0
  27/5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  74
  46
  20
  8
  33
  12
  45
  1
  75/116
  243/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  74
  46
  20
  8
  33
  12
  45
  1
  75/116
  243/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env ((□? ()))))\""
  76
  47
  20
  9
  33
  12
  45
  1
  5/8
  248/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  80
  49
  20
  11
  34
  12
  46
  1
  79/128
  258/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  83
  51
  20
  12
  35
  12
  47
  1
  83/136
  268/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  85
  53
  20
  12
  35
  12
  47
  1
  83/144
  278/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  89
  55
  20
  14
  35
  12
  47
  1
  83/152
  288/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  17
  5
  3
  9
  0
  1
  1
  1
  0
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  19
  7
  3
  9
  2
  1
  3
  1
  2/5
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  9
  6
  0
  3
  3
  0
  3
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  10
  7
  0
  3
  3
  0
  3
  1
  3/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  49
  32
  12
  5
  25
  8
  33
  1
  37/46
  173/32
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  95
  62
  23
  10
  42
  13
  55
  1
  95/148
  331/62
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  65
  30
  20
  15
  7
  4
  11
  1
  7/18
  27/5
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  10
  6
  0
  4
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  14
  8
  0
  6
  2
  0
  2
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  31
  20
  5
  6
  13
  3
  16
  1
  23/36
  101/20
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? (ma)))))\""
  33
  21
  5
  7
  13
  3
  16
  1
  23/39
  106/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env ((□? (bo this-play that-play)))))\""
  5
  3
  0
  2
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env ((□? ()))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  9
  6
  0
  3
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  10
  7
  0
  3
  2
  0
  2
  1
  2/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  68
  49
  12
  7
  16
  7
  23
  1
  37/210
  41/7
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  10
  6
  0
  4
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  5
  3
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  15
  9
  2
  4
  3
  1
  4
  1
  1/4
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  10
  6
  0
  4
  3
  0
  3
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  18
  9
  2
  7
  3
  1
  4
  1
  3/8
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env ((□? (r x)) (□? (f x)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  48
  32
  12
  4
  25
  8
  33
  1
  37/46
  173/32
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  55
  37
  12
  6
  27
  8
  35
  1
  41/56
  198/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  59
  39
  12
  8
  27
  8
  35
  1
  41/60
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  65
  44
  15
  6
  35
  8
  43
  1
  133/184
  21/4
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  68
  45
  15
  8
  35
  8
  43
  1
  133/192
  236/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env ((□? (f x)))))\""
  71
  47
  15
  9
  36
  8
  44
  1
  141/208
  246/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  7
  3
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  11
  7
  0
  4
  2
  0
  2
  1
  2/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> empty-board <-) player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  27
  18
  7
  2
  14
  4
  18
  1
  19/24
  49/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  30
  20
  7
  3
  14
  4
  18
  1
  19/28
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  4
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  30
  18
  5
  7
  10
  3
  13
  1
  3/5
  91/18
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  35
  20
  5
  10
  11
  3
  14
  1
  7/12
  101/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  37
  22
  5
  10
  13
  3
  16
  1
  9/14
  111/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  81
  48
  23
  10
  35
  13
  48
  1
  27/40
  257/48
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  85
  51
  23
  11
  35
  13
  48
  1
  27/44
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  103
  61
  27
  15
  38
  14
  52
  1
  21/40
  324/61
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  116
  73
  27
  16
  46
  14
  60
  1
  29/50
  390/73
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  38
  28
  7
  3
  23
  4
  27
  1
  65/76
  151/28
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  41
  30
  7
  4
  23
  4
  27
  1
  65/84
  161/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  45
  32
  7
  6
  23
  4
  27
  1
  65/92
  171/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  47
  33
  7
  7
  23
  4
  27
  1
  65/96
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  50
  35
  7
  8
  24
  4
  28
  1
  69/104
  186/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  16
  8
  2
  6
  1
  0
  1
  1
  1/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  90
  53
  23
  14
  34
  12
  46
  1
  79/136
  278/53
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  94
  55
  23
  16
  34
  12
  46
  1
  79/144
  288/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  95
  56
  23
  16
  34
  12
  46
  1
  79/148
  293/56
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> minimax <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  97
  58
  23
  16
  35
  12
  47
  1
  83/156
  303/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  100
  60
  23
  17
  35
  12
  47
  1
  83/164
  313/60
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  100
  60
  23
  17
  35
  12
  47
  1
  83/164
  313/60
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  101
  61
  23
  17
  35
  12
  47
  1
  83/168
  318/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  122
  74
  30
  18
  44
  16
  60
  1
  1/2
  197/37
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  15
  14
  0
  3
  3
  1
  0
  27/5
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  46
  16
  15
  15
  0
  3
  3
  1
  0
  43/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  68
  32
  20
  16
  6
  4
  10
  1
  3/17
  171/32
  ((3/2 3/2 0) (3/2 3/2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  84
  38
  27
  19
  9
  8
  17
  1
  3/16
  203/38
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  89
  35
  21
  33
  8
  2
  10
  1
  14/85
  193/35
  ((5 5 0) (5 5 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env ((□? (co)))))\""
  91
  36
  21
  34
  8
  2
  10
  1
  7/45
  11/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  91
  36
  21
  34
  8
  2
  10
  1
  7/45
  11/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  93
  37
  21
  35
  8
  2
  10
  1
  14/95
  203/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  96
  39
  21
  36
  8
  2
  10
  1
  2/15
  71/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  5
  3
  0
  2
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env ((□? (f acc l)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  7
  0
  5
  3
  0
  3
  1
  3/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  54
  32
  9
  13
  10
  2
  12
  1
  10/23
  167/32
  ((2 2 0) (2 2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  56
  33
  9
  14
  10
  2
  12
  1
  5/12
  172/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  58
  35
  9
  14
  11
  2
  13
  1
  11/26
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  63
  39
  9
  15
  13
  2
  15
  1
  13/30
  202/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  134
  83
  29
  22
  46
  14
  60
  1
  127/228
  435/83
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  11
  7
  0
  4
  2
  0
  2
  1
  2/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  43
  26
  12
  5
  10
  7
  17
  1
  17/96
  79/13
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env ((□? (b co m)))))\""
  5
  3
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  7
  0
  5
  1
  0
  1
  1
  1/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  24
  16
  5
  3
  11
  3
  14
  1
  17/24
  81/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ((□? (i)))))\""
  26
  17
  5
  4
  11
  3
  14
  1
  17/27
  86/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  5
  3
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  32
  21
  7
  4
  14
  4
  18
  1
  19/30
  113/21
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  34
  22
  7
  5
  14
  4
  18
  1
  19/32
  59/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  38
  24
  7
  7
  14
  4
  18
  1
  19/36
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  47
  18
  15
  14
  0
  3
  3
  1
  0
  11/2
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma)))\n  (env ((□? (bo)) (□? (ma)))))\""
  52
  23
  15
  14
  1
  3
  4
  1
  1/12
  124/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo)))))\""
  54
  24
  15
  15
  1
  3
  4
  1
  1/13
  43/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  10
  7
  0
  3
  4
  0
  4
  1
  4/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  8
  0
  5
  4
  0
  4
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  14
  9
  0
  5
  4
  0
  4
  1
  4/9
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app minimax bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  16
  11
  0
  5
  5
  0
  5
  1
  5/11
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  10
  5
  0
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  12
  7
  0
  5
  1
  0
  1
  1
  1/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> display <-) \"Cat's game.\\n\")\n  (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  5
  3
  0
  2
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  21
  11
  2
  8
  2
  0
  2
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  21
  11
  2
  8
  2
  0
  2
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  25
  13
  2
  10
  3
  0
  3
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  67
  36
  7
  24
  7
  1
  8
  1
  5/24
  91/18
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  26
  13
  5
  8
  4
  1
  5
  1
  4/45
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  103
  43
  42
  18
  21
  22
  43
  1
  241/528
  222/43
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  5
  3
  0
  2
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  10
  6
  0
  4
  3
  0
  3
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  91
  44
  32
  15
  25
  18
  43
  1
  329/576
  56/11
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  106
  50
  39
  17
  28
  22
  50
  1
  347/648
  128/25
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  180
  93
  63
  24
  45
  31
  76
  1
  277/540
  488/93
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  182
  95
  63
  24
  46
  31
  77
  1
  289/564
  498/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env ((□? (oc₀ oc₁)))))\""
  184
  96
  63
  25
  46
  31
  77
  1
  289/576
  503/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (oc₀ oc₁)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-coord\")\n  (env ((□? (move-coord-v)))))\""
  6
  3
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app win) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b m)))))\""
  7
  3
  0
  4
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  10
  6
  0
  4
  3
  0
  3
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  22
  13
  3
  6
  5
  1
  6
  1
  1/3
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  23
  14
  3
  6
  5
  1
  6
  1
  11/36
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  49
  32
  12
  5
  25
  8
  33
  1
  37/46
  173/32
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  119
  83
  25
  11
  50
  17
  67
  1
  781/1035
  435/83
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  139
  95
  32
  12
  56
  21
  77
  1
  1697/2340
  102/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  222
  159
  32
  31
  73
  21
  94
  1
  3737/5760
  16/3
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  222
  159
  32
  31
  73
  21
  94
  1
  3737/5760
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2)))))\""
  224
  160
  32
  32
  73
  21
  94
  1
  3707/5760
  427/80
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  227
  163
  32
  32
  73
  21
  94
  1
  1847/2880
  869/163
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  227
  163
  32
  32
  73
  21
  94
  1
  1847/2880
  869/163
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env ((□? (x1 x2)))))\""
  228
  164
  32
  32
  73
  21
  94
  1
  229/360
  875/164
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env ((□? (x1 x2)))))\""
  230
  166
  32
  32
  73
  21
  94
  1
  901/1440
  443/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  234
  170
  32
  32
  73
  21
  94
  1
  1757/2880
  453/85
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  234
  170
  32
  32
  73
  21
  94
  1
  1757/2880
  453/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env ((□? (x1 x2)))))\""
  236
  172
  32
  32
  73
  21
  94
  1
  1727/2880
  917/172
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  240
  175
  32
  33
  76
  21
  97
  1
  1997/3150
  932/175
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  244
  179
  32
  33
  76
  21
  97
  1
  976/1575
  952/179
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2)))))\""
  244
  179
  32
  33
  76
  21
  97
  1
  976/1575
  952/179
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  244
  179
  32
  33
  76
  21
  97
  1
  976/1575
  952/179
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  244
  179
  32
  33
  76
  21
  97
  1
  976/1575
  952/179
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  248
  182
  33
  33
  76
  21
  97
  1
  971/1575
  484/91
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  248
  182
  33
  33
  76
  21
  97
  1
  971/1575
  484/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env ((□? (x1 x2)))))\""
  248
  182
  33
  33
  76
  21
  97
  1
  971/1575
  484/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  248
  182
  33
  33
  76
  21
  97
  1
  971/1575
  484/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  248
  182
  33
  33
  76
  21
  97
  1
  971/1575
  484/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  23
  15
  3
  5
  5
  1
  6
  1
  3/10
  68/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  23
  15
  3
  5
  5
  1
  6
  1
  3/10
  68/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  119
  83
  25
  11
  50
  17
  67
  1
  781/1035
  435/83
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  120
  84
  25
  11
  50
  17
  67
  1
  1517/2070
  110/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  223
  160
  32
  31
  73
  21
  94
  1
  3647/5760
  853/160
  ((9 9 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  223
  160
  32
  31
  73
  21
  94
  1
  3647/5760
  853/160
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  225
  162
  32
  31
  74
  21
  95
  1
  3737/5940
  863/162
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env ((□? (x1 x2)))))\""
  232
  168
  32
  32
  74
  21
  95
  1
  3557/5940
  299/56
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  232
  168
  32
  32
  74
  21
  95
  1
  3557/5940
  299/56
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2)))))\""
  232
  168
  32
  32
  74
  21
  95
  1
  3557/5940
  299/56
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env ((□? (x1 x2)))))\""
  232
  168
  32
  32
  74
  21
  95
  1
  3557/5940
  299/56
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  232
  168
  32
  32
  74
  21
  95
  1
  3557/5940
  299/56
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  233
  169
  32
  32
  74
  21
  95
  1
  323/540
  902/169
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  233
  169
  32
  32
  74
  21
  95
  1
  323/540
  902/169
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  237
  172
  33
  32
  74
  21
  95
  1
  3533/5940
  459/86
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  237
  172
  33
  32
  74
  21
  95
  1
  3533/5940
  459/86
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  237
  172
  33
  32
  74
  21
  95
  1
  3533/5940
  459/86
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  237
  172
  33
  32
  74
  21
  95
  1
  3533/5940
  459/86
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env ((□? (x1 x2)))))\""
  237
  172
  33
  32
  74
  21
  95
  1
  3533/5940
  459/86
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  20
  12
  3
  5
  11
  1
  12
  1
  11/12
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  28
  17
  3
  8
  11
  1
  12
  1
  11/15
  80/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  34
  23
  3
  8
  11
  1
  12
  1
  11/17
  110/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  75
  51
  10
  14
  26
  6
  32
  1
  193/300
  82/17
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2)))))\""
  76
  52
  10
  14
  26
  6
  32
  1
  193/312
  251/52
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  76
  52
  10
  14
  26
  6
  32
  1
  193/312
  251/52
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  10
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  84
  60
  10
  14
  28
  6
  34
  1
  199/336
  97/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  2
  49
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  25
  9
  3
  13
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  27
  10
  3
  14
  1
  0
  1
  1
  1/8
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  30
  13
  3
  14
  1
  0
  1
  1
  1/9
  66/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  2
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  121
  76
  14
  31
  27
  6
  33
  1
  23/42
  19/4
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  174
  114
  21
  39
  38
  6
  44
  1
  71/152
  185/38
  ((4 4 0) (4 4 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  174
  114
  21
  39
  38
  6
  44
  1
  71/152
  185/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  174
  114
  21
  39
  38
  6
  44
  1
  71/152
  185/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  174
  114
  21
  39
  38
  6
  44
  1
  71/152
  185/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  176
  116
  21
  39
  38
  6
  44
  1
  71/156
  565/116
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  49
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  38
  19
  8
  11
  5
  2
  7
  1
  5/14
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  36
  15
  8
  13
  4
  2
  6
  1
  7/22
  26/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  81
  43
  20
  18
  6
  2
  8
  1
  4/13
  226/43
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  51
  24
  14
  13
  10
  6
  16
  1
  10/19
  113/24
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  53
  26
  14
  13
  10
  6
  16
  1
  1/2
  123/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  55
  27
  14
  14
  10
  6
  16
  1
  1/2
  128/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  98
  56
  21
  21
  18
  6
  24
  1
  62/135
  137/28
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  114
  70
  21
  23
  21
  6
  27
  1
  151/360
  359/70
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  49
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  28
  15
  5
  8
  5
  1
  6
  1
  3/11
  68/15
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  29
  16
  5
  8
  5
  1
  6
  1
  1/4
  73/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  51
  24
  12
  15
  5
  1
  6
  1
  3/17
  19/4
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  52
  25
  12
  15
  5
  1
  6
  1
  1/6
  119/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  40
  19
  8
  13
  5
  2
  7
  1
  5/14
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  84
  51
  19
  14
  13
  2
  15
  1
  7/17
  271/51
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  88
  55
  19
  14
  15
  2
  17
  1
  5/12
  291/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  121
  69
  32
  20
  29
  4
  33
  1
  17/27
  353/69
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  49
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  102
  59
  23
  20
  13
  6
  19
  1
  1/3
  311/59
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  102
  59
  23
  20
  13
  6
  19
  1
  1/3
  311/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  154
  87
  42
  25
  19
  8
  27
  1
  4/13
  518/87
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  156
  89
  42
  25
  19
  8
  27
  1
  8/27
  528/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  173
  103
  42
  28
  33
  8
  41
  1
  35/72
  589/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  225
  145
  44
  36
  52
  10
  62
  1
  139/282
  782/145
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  237
  157
  44
  36
  58
  10
  68
  1
  139/282
  842/157
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  248
  166
  44
  38
  58
  10
  68
  1
  153/329
  883/166
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  250
  168
  44
  38
  58
  10
  68
  1
  51/112
  895/168
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  262
  180
  44
  38
  64
  10
  74
  1
  51/112
  191/36
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  273
  190
  44
  39
  64
  10
  74
  1
  51/112
  201/38
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  19
  9
  3
  7
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  40
  22
  8
  10
  5
  1
  6
  1
  3/16
  52/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  42
  23
  8
  11
  5
  1
  6
  1
  3/17
  109/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  124
  69
  33
  22
  15
  4
  19
  1
  20/69
  346/69
  ((17/2 17/2 0) (8 8 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  2
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  25
  9
  3
  13
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  32
  15
  8
  9
  5
  2
  7
  1
  7/20
  26/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  10
  5
  0
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  49
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  34
  13
  8
  13
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  68
  28
  21
  19
  18
  4
  22
  1
  27/40
  67/14
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  77
  34
  23
  20
  20
  6
  26
  1
  31/46
  82/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  92
  40
  28
  24
  20
  6
  26
  1
  2/3
  39/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  94
  42
  28
  24
  20
  6
  26
  1
  23/36
  205/42
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  102
  50
  28
  24
  22
  6
  28
  1
  52/87
  249/50
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  149
  89
  28
  32
  27
  6
  33
  1
  61/111
  441/89
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  sat-1
  2
  49
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  21
  10
  5
  6
  10
  1
  11
  1
  1
  9/2
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  22
  11
  5
  6
  10
  1
  11
  1
  10/11
  50/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  74
  34
  21
  19
  19
  4
  23
  1
  43/69
  167/34
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  142
  74
  42
  26
  27
  8
  35
  1
  49/90
  189/37
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  142
  74
  42
  26
  27
  8
  35
  1
  49/90
  189/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  143
  75
  42
  26
  27
  8
  35
  1
  19/36
  383/75
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  153
  79
  45
  29
  27
  8
  35
  1
  19/36
  404/79
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  49
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  35
  13
  8
  14
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  37
  15
  8
  14
  10
  5
  15
  1
  5/6
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  44
  19
  8
  17
  10
  5
  15
  1
  10/13
  98/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  93
  47
  23
  23
  14
  9
  23
  1
  4/7
  233/47
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  93
  47
  23
  23
  14
  9
  23
  1
  4/7
  233/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  95
  49
  23
  23
  14
  9
  23
  1
  6/11
  243/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  127
  77
  23
  27
  33
  9
  42
  1
  467/810
  53/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  194
  115
  42
  37
  38
  11
  49
  1
  179/360
  567/115
  ((15/2 15/2 0) (8 8 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  202
  123
  42
  37
  40
  11
  51
  1
  199/410
  611/123
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  204
  125
  42
  37
  40
  11
  51
  1
  587/1230
  621/125
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  206
  127
  42
  37
  40
  11
  51
  1
  587/1260
  631/127
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  207
  128
  42
  37
  40
  11
  51
  1
  1363/2940
  159/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  25
  10
  5
  10
  0
  1
  1
  1
  0
  53/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  26
  11
  5
  10
  0
  1
  1
  1
  0
  58/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  77
  37
  21
  19
  7
  4
  11
  1
  31/136
  219/37
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  85
  45
  21
  19
  10
  4
  14
  1
  17/72
  278/45
  ((1 1 0) (3/2 3/2 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  87
  47
  21
  19
  10
  4
  14
  1
  17/76
  288/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  36
  13
  2
  21
  2
  2
  4
  1
  2/9
  5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x4) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  44
  14
  2
  28
  2
  2
  4
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  82
  33
  17
  32
  7
  4
  11
  1
  1/4
  158/33
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  124
  61
  25
  38
  7
  4
  11
  1
  5/26
  300/61
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  186
  108
  30
  48
  24
  6
  30
  1
  11/30
  263/54
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  87
  42
  20
  25
  16
  6
  22
  1
  16/31
  29/6
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  90
  44
  20
  26
  16
  6
  22
  1
  16/31
  213/44
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  90
  44
  20
  26
  16
  6
  22
  1
  16/31
  213/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  90
  44
  20
  26
  16
  6
  22
  1
  16/31
  213/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  56
  13
  8
  35
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  58
  15
  8
  35
  8
  5
  13
  1
  8/11
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  125
  43
  35
  47
  12
  9
  21
  1
  1/2
  213/43
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  38
  15
  8
  15
  0
  1
  1
  1
  0
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  46
  16
  8
  22
  0
  1
  1
  1
  0
  43/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  105
  21
  20
  64
  4
  2
  6
  1
  7/22
  38/7
  ((11/2 11/2 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  121
  37
  20
  64
  5
  2
  7
  1
  5/14
  202/37
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  32
  9
  3
  20
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  78
  31
  8
  39
  1
  0
  1
  1
  1/9
  161/31
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  91
  29
  13
  49
  5
  2
  7
  1
  1/3
  154/29
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  95
  33
  13
  49
  5
  2
  7
  1
  5/16
  58/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  99
  37
  13
  49
  5
  2
  7
  1
  5/17
  198/37
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  103
  41
  13
  49
  5
  2
  7
  1
  5/18
  218/41
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  165
  69
  38
  58
  9
  4
  13
  1
  7/27
  353/69
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  154
  29
  31
  94
  3
  2
  5
  1
  3/11
  162/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  163
  33
  31
  99
  3
  2
  5
  1
  1/4
  182/33
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x4 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  179
  49
  31
  99
  3
  2
  5
  1
  3/13
  262/49
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  78
  19
  13
  46
  3
  2
  5
  1
  3/11
  100/19
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  103
  19
  20
  64
  3
  2
  5
  1
  3/10
  104/19
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  124
  30
  22
  72
  5
  4
  9
  1
  1/3
  53/10
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  150
  50
  22
  78
  5
  4
  9
  1
  5/23
  259/50
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  212
  83
  45
  84
  9
  6
  15
  1
  127/682
  483/83
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  31
  10
  2
  19
  2
  2
  4
  1
  2/7
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  101
  31
  15
  55
  5
  4
  9
  1
  5/17
  160/31
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  143
  45
  40
  58
  19
  6
  25
  1
  29/52
  74/15
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  170
  69
  40
  61
  27
  6
  33
  1
  193/480
  332/69
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  174
  73
  40
  61
  27
  6
  33
  1
  193/495
  352/73
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  51
  22
  2
  27
  2
  2
  4
  1
  2/15
  5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  54
  25
  2
  27
  3
  2
  5
  1
  3/17
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  62
  26
  2
  34
  3
  2
  5
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  63
  27
  2
  34
  3
  2
  5
  1
  3/19
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  32
  14
  8
  10
  5
  1
  6
  1
  3/10
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  35
  16
  8
  11
  5
  1
  6
  1
  1/4
  73/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  121
  37
  20
  64
  5
  2
  7
  1
  5/14
  202/37
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  129
  45
  20
  64
  5
  2
  7
  1
  1/3
  242/45
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x3 x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  137
  53
  20
  64
  5
  2
  7
  1
  5/16
  282/53
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  139
  55
  20
  64
  5
  2
  7
  1
  5/16
  292/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  41
  16
  2
  23
  2
  2
  4
  1
  2/11
  5
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  77
  34
  17
  26
  20
  4
  24
  1
  16/25
  161/34
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  131
  66
  29
  36
  20
  4
  24
  1
  16/31
  323/66
  ((8 8 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  131
  66
  29
  36
  20
  4
  24
  1
  16/31
  323/66
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  40
  17
  8
  15
  1
  1
  2
  1
  1/10
  91/17
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  41
  18
  8
  15
  1
  1
  2
  1
  1/11
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  33
  15
  8
  10
  5
  1
  6
  1
  3/10
  68/15
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  53
  28
  8
  17
  5
  1
  6
  1
  47/288
  139/28
  ((1 1 0) (1 1 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  91
  48
  17
  26
  16
  4
  20
  1
  149/380
  16/3
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  109
  66
  17
  26
  18
  4
  22
  1
  1381/3780
  173/33
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  145
  90
  25
  30
  24
  4
  28
  1
  1073/3300
  27/5
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  87
  42
  20
  25
  16
  6
  22
  1
  16/31
  29/6
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  87
  42
  20
  25
  16
  6
  22
  1
  16/31
  29/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x3 x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  9
  2
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  34
  16
  8
  10
  7
  1
  8
  1
  5/12
  73/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  70
  30
  19
  21
  11
  1
  12
  1
  17/60
  47/10
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  74
  15
  13
  46
  3
  2
  5
  1
  3/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  56
  13
  8
  35
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  116
  41
  20
  55
  8
  5
  13
  1
  1/2
  216/41
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  32
  14
  8
  10
  5
  1
  6
  1
  3/10
  9/2
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  121
  37
  20
  64
  5
  2
  7
  1
  5/14
  202/37
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x4) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  129
  45
  20
  64
  5
  2
  7
  1
  1/3
  242/45
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  32
  14
  8
  10
  5
  1
  6
  1
  3/10
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  40
  15
  8
  17
  5
  1
  6
  1
  3/11
  68/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  41
  16
  8
  17
  5
  1
  6
  1
  1/4
  73/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  42
  17
  8
  17
  5
  1
  6
  1
  1/4
  78/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  71
  32
  15
  24
  9
  1
  10
  1
  11/60
  151/32
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  81
  41
  15
  25
  18
  1
  19
  1
  9/25
  191/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  146
  76
  29
  41
  27
  4
  31
  1
  71/165
  365/76
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  10
  2
  0
  8
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  42
  16
  8
  18
  5
  1
  6
  1
  17/66
  73/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  94
  40
  17
  37
  7
  4
  11
  1
  29/144
  193/40
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  96
  42
  17
  37
  7
  4
  11
  1
  29/144
  29/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x4 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  97
  43
  17
  37
  7
  4
  11
  1
  29/150
  208/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  28
  11
  8
  9
  11
  1
  12
  1
  1
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  28
  9
  3
  16
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  41
  16
  2
  23
  2
  2
  4
  1
  2/11
  5
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  51
  22
  2
  27
  2
  2
  4
  1
  2/15
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  54
  25
  2
  27
  3
  2
  5
  1
  3/17
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  62
  26
  2
  34
  3
  2
  5
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  32
  14
  8
  10
  5
  1
  6
  1
  3/10
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  35
  16
  8
  11
  5
  1
  6
  1
  1/4
  73/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  84
  25
  13
  46
  5
  2
  7
  1
  5/14
  134/25
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  111
  41
  15
  55
  7
  4
  11
  1
  1/3
  214/41
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  111
  41
  15
  55
  7
  4
  11
  1
  1/3
  214/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  115
  45
  15
  55
  7
  4
  11
  1
  7/22
  238/45
  ((1 1 0) (1/2 1/2 0) (1 1 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  103
  19
  20
  64
  3
  2
  5
  1
  3/10
  104/19
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  110
  23
  20
  67
  3
  2
  5
  1
  3/11
  124/23
  ((1/2 1/2 0) (1/2 1/2 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  140
  44
  22
  74
  5
  4
  9
  1
  1/4
  229/44
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  148
  52
  22
  74
  5
  4
  9
  1
  5/21
  269/52
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  42
  10
  3
  29
  1
  0
  1
  1
  1/8
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  34
  16
  8
  10
  6
  1
  7
  1
  7/22
  71/16
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  34
  16
  8
  10
  6
  1
  7
  1
  7/22
  71/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  96
  39
  29
  28
  10
  4
  14
  1
  5/16
  191/39
  ((11/2 11/2 0) (11/2 11/2 0) (6 6 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  100
  43
  29
  28
  10
  4
  14
  1
  3/10
  211/43
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  109
  49
  31
  29
  12
  6
  18
  1
  19/56
  241/49
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  111
  51
  31
  29
  12
  6
  18
  1
  19/58
  251/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  131
  69
  31
  31
  30
  6
  36
  1
  209/420
  110/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  154
  89
  31
  34
  35
  6
  41
  1
  17/37
  421/89
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  154
  89
  31
  34
  35
  6
  41
  1
  17/37
  421/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  156
  91
  31
  34
  35
  6
  41
  1
  101/222
  431/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  34
  16
  8
  10
  6
  1
  7
  1
  7/22
  71/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  36
  18
  8
  10
  8
  1
  9
  1
  11/26
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  37
  19
  8
  10
  9
  1
  10
  1
  13/28
  86/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  49
  26
  10
  13
  9
  2
  11
  1
  13/36
  119/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  36
  10
  3
  23
  1
  0
  1
  1
  1/8
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  30
  11
  3
  16
  3
  0
  3
  1
  1/3
  56/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  27
  11
  3
  13
  1
  0
  1
  1
  1/9
  56/11
  ((1 1 0) (1/2 1/2 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  46
  15
  8
  23
  8
  5
  13
  1
  7/10
  26/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  47
  16
  8
  23
  9
  5
  14
  1
  8/11
  83/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env ((□? (f)))))\""
  50
  19
  8
  23
  11
  5
  16
  1
  19/26
  98/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  52
  21
  8
  23
  11
  5
  16
  1
  19/28
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  52
  21
  8
  23
  11
  5
  16
  1
  19/28
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  54
  23
  8
  23
  11
  5
  16
  1
  19/30
  118/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  15
  8
  22
  3
  2
  5
  1
  3/11
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  5
  4
  0
  1
  3
  0
  3
  1
  3/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  44
  17
  8
  19
  6
  2
  8
  1
  3/7
  88/17
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  112
  49
  23
  40
  14
  6
  20
  1
  8/17
  255/49
  ((8 8 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  114
  51
  23
  40
  14
  6
  20
  1
  4/9
  89/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  5
  2
  7
  1
  5/14
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  122
  59
  31
  32
  20
  4
  24
  1
  35/96
  287/59
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  124
  61
  31
  32
  20
  4
  24
  1
  7/20
  297/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  134
  66
  34
  34
  21
  5
  26
  1
  109/324
  317/66
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  185
  102
  47
  36
  30
  5
  35
  1
  45/116
  505/102
  ((10 10 0) (10 10 0) (10 19/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  5
  2
  7
  1
  5/14
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  67
  23
  9
  35
  5
  2
  7
  1
  5/14
  121/23
  ((2 2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  49
  17
  8
  24
  3
  2
  5
  1
  3/11
  88/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  51
  19
  8
  24
  4
  2
  6
  1
  7/24
  98/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  15
  10
  0
  5
  1
  0
  1
  1
  1/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  19
  12
  0
  7
  2
  0
  2
  1
  2/9
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  20
  13
  0
  7
  2
  0
  2
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  21
  14
  0
  7
  2
  0
  2
  1
  2/11
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  27
  15
  0
  12
  2
  0
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  92
  65
  8
  19
  23
  1
  24
  1
  13/60
  26/5
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  108
  79
  8
  21
  28
  1
  29
  1
  41/174
  399/79
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  108
  79
  8
  21
  28
  1
  29
  1
  41/174
  399/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  64
  25
  20
  19
  10
  6
  16
  1
  1/2
  117/25
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  107
  45
  31
  31
  10
  6
  16
  1
  10/27
  74/15
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  109
  47
  31
  31
  10
  6
  16
  1
  5/14
  234/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  113
  51
  31
  31
  14
  6
  20
  1
  7/16
  254/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  5
  3
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  32
  9
  3
  20
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  35
  12
  3
  20
  1
  0
  1
  1
  1/8
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  38
  15
  3
  20
  1
  0
  1
  1
  1/9
  76/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  77
  29
  9
  39
  3
  2
  5
  1
  1/4
  149/29
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ((□? (s)))))\""
  79
  30
  9
  40
  3
  2
  5
  1
  3/13
  77/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  81
  32
  9
  40
  3
  2
  5
  1
  3/14
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  89
  40
  9
  40
  5
  2
  7
  1
  5/19
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  32
  9
  3
  20
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env ((□? (s)))))\""
  34
  10
  3
  21
  1
  0
  1
  1
  1/8
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  37
  13
  3
  21
  1
  0
  1
  1
  1/11
  66/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  65
  35
  8
  22
  1
  0
  1
  1
  1/13
  181/35
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  67
  36
  8
  23
  1
  0
  1
  1
  1/14
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  115
  53
  23
  39
  13
  6
  19
  1
  7/18
  279/53
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  119
  54
  23
  42
  13
  6
  19
  1
  7/18
  142/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  121
  56
  23
  42
  15
  6
  21
  1
  9/20
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  191
  78
  64
  49
  20
  8
  28
  1
  23/60
  397/78
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  208
  81
  71
  56
  20
  8
  28
  1
  23/60
  413/81
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  9
  4
  0
  5
  3
  0
  3
  1
  3/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  37
  19
  8
  10
  8
  1
  9
  1
  11/28
  86/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  38
  20
  8
  10
  8
  1
  9
  1
  11/30
  91/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  46
  23
  10
  13
  8
  2
  10
  1
  11/34
  103/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  110
  48
  32
  30
  11
  5
  16
  1
  47/150
  229/48
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  112
  50
  32
  30
  11
  5
  16
  1
  47/156
  241/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  34
  16
  8
  10
  6
  1
  7
  1
  7/22
  71/16
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  45
  26
  8
  11
  16
  1
  17
  1
  7/12
  115/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  121
  62
  30
  29
  31
  6
  37
  1
  79/136
  291/62
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  34
  16
  8
  10
  6
  1
  7
  1
  7/22
  71/16
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  56
  24
  15
  17
  6
  1
  7
  1
  7/32
  14/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  58
  25
  15
  18
  6
  1
  7
  1
  7/34
  117/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  5
  3
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  26
  7
  2
  17
  2
  2
  4
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  87
  46
  17
  24
  6
  4
  10
  1
  17/84
  257/46
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  135
  82
  27
  26
  28
  6
  34
  1
  95/324
  217/41
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  158
  102
  27
  29
  48
  6
  54
  1
  365/594
  523/102
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  3
  0
  4
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  53
  21
  8
  24
  3
  2
  5
  1
  3/13
  36/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  5
  3
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  39
  19
  8
  12
  6
  1
  7
  1
  1/4
  86/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  41
  21
  8
  12
  8
  1
  9
  1
  11/32
  32/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  86
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  108
  47
  19
  42
  10
  5
  15
  1
  8/19
  249/47
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  6
  5
  0
  1
  4
  0
  4
  1
  4/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  14
  7
  0
  7
  5
  0
  5
  1
  5/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  14
  7
  0
  7
  5
  0
  5
  1
  5/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  15
  8
  0
  7
  5
  0
  5
  1
  5/8
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  60
  25
  8
  27
  7
  2
  9
  1
  7/17
  128/25
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  73
  36
  8
  29
  11
  2
  13
  1
  19/46
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  51
  21
  8
  22
  5
  2
  7
  1
  1/3
  110/21
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  127
  57
  23
  47
  13
  6
  19
  1
  7/20
  299/57
  ((8 8 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  129
  59
  23
  47
  13
  6
  19
  1
  1/3
  311/59
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  132
  61
  23
  48
  13
  6
  19
  1
  7/23
  321/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  34
  9
  3
  22
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  48
  25
  8
  15
  1
  1
  2
  1
  1/11
  131/25
  ((2 2 0) (2 2 0) (2 5/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  49
  26
  8
  15
  1
  1
  2
  1
  1/12
  68/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  51
  27
  8
  16
  1
  1
  2
  1
  1/13
  47/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  19
  8
  18
  5
  2
  7
  1
  5/14
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  107
  47
  19
  41
  5
  2
  7
  1
  5/19
  249/47
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  115
  55
  19
  41
  5
  2
  7
  1
  5/23
  59/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  115
  55
  19
  41
  5
  2
  7
  1
  5/23
  59/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  117
  57
  19
  41
  5
  2
  7
  1
  5/24
  305/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env ((□? (f)))))\""
  121
  61
  19
  41
  6
  2
  8
  1
  3/13
  325/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  38
  17
  4
  17
  1
  1
  2
  1
  1/12
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? (ma)))))\""
  40
  18
  4
  18
  1
  1
  2
  1
  1/13
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  41
  19
  4
  18
  1
  1
  2
  1
  1/14
  97/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  43
  21
  4
  18
  2
  1
  3
  1
  1/8
  107/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  46
  23
  4
  19
  2
  1
  3
  1
  1/9
  117/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  93
  44
  26
  23
  11
  11
  22
  1
  5/39
  261/44
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  117
  54
  30
  33
  11
  12
  23
  1
  5/52
  52/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  58
  32
  18
  8
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  60
  33
  18
  9
  23
  7
  30
  1
  53/69
  169/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env ((□? (oc₀ oc₁)))))\""
  62
  34
  18
  10
  23
  7
  30
  1
  53/72
  87/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  50
  24
  4
  22
  2
  1
  3
  1
  1/8
  61/12
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env ((□? (b m)))))\""
  55
  29
  4
  22
  3
  1
  4
  1
  1/6
  147/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  68
  36
  7
  25
  3
  2
  5
  1
  3/23
  91/18
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env ((□? (f xs)))))\""
  70
  37
  7
  26
  3
  2
  5
  1
  1/8
  187/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (oc₀ oc₁)))))\""
  72
  38
  7
  27
  3
  2
  5
  1
  3/25
  96/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  9
  5
  0
  4
  3
  0
  3
  1
  3/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app win) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  6
  0
  6
  3
  0
  3
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  14
  8
  0
  6
  5
  0
  5
  1
  5/8
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  11
  6
  0
  5
  3
  0
  3
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  8
  0
  7
  3
  0
  3
  1
  3/8
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  61
  33
  9
  19
  4
  2
  6
  1
  1/6
  172/33
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  117
  65
  27
  25
  27
  9
  36
  1
  65/138
  336/65
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  90
  46
  18
  26
  14
  4
  18
  1
  5/17
  101/23
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  92
  48
  18
  26
  14
  4
  18
  1
  5/18
  53/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  93
  49
  18
  26
  14
  4
  18
  1
  10/37
  31/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  93
  49
  18
  26
  14
  4
  18
  1
  10/37
  31/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  13
  6
  0
  7
  1
  0
  1
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  17
  8
  0
  9
  1
  0
  1
  1
  1/8
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  19
  10
  0
  9
  1
  0
  1
  1
  1/10
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  25
  14
  0
  11
  1
  0
  1
  1
  1/13
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  28
  16
  0
  12
  1
  0
  1
  1
  1/15
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  53
  24
  8
  21
  5
  1
  6
  1
  5/23
  29/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env ((□? (r x)) (□? (f x)))))\""
  55
  26
  8
  21
  6
  1
  7
  1
  6/25
  63/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  58
  28
  8
  22
  6
  1
  7
  1
  2/9
  34/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) bo that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  60
  30
  8
  22
  7
  1
  8
  1
  7/29
  73/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  23
  12
  4
  7
  0
  1
  1
  1
  0
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  26
  13
  4
  9
  0
  1
  1
  1
  0
  67/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  5
  4
  0
  1
  1
  0
  1
  1
  1/4
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  58
  32
  18
  8
  23
  7
  30
  1
  53/66
  41/8
  ((3 3 0) (5/2 5/2 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  61
  34
  18
  9
  23
  7
  30
  1
  53/72
  87/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  64
  35
  18
  11
  23
  7
  30
  1
  53/75
  179/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  72
  40
  18
  14
  24
  7
  31
  1
  28/45
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  94
  55
  20
  19
  27
  8
  35
  1
  43/88
  272/55
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  147
  76
  35
  36
  36
  11
  47
  1
  61/130
  183/38
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  148
  77
  35
  36
  36
  11
  47
  1
  61/132
  53/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> empty-board <-) player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  58
  23
  15
  20
  10
  3
  13
  1
  10/23
  104/23
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  77
  33
  19
  25
  13
  4
  17
  1
  13/33
  148/33
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  84
  38
  19
  27
  14
  4
  18
  1
  7/19
  173/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  87
  40
  19
  28
  15
  4
  19
  1
  3/8
  183/40
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  90
  43
  19
  28
  17
  4
  21
  1
  17/43
  198/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app lose) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env ((□? (h₀ h₁)))))\""
  5
  3
  0
  2
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  53
  33
  14
  6
  23
  7
  30
  1
  53/69
  169/33
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  45
  22
  12
  11
  10
  2
  12
  1
  5/11
  103/22
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  88
  44
  21
  23
  10
  4
  14
  1
  2/7
  109/22
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  63
  36
  17
  10
  10
  7
  17
  1
  5/64
  37/6
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  102
  52
  25
  25
  18
  9
  27
  1
  37/128
  147/26
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  181
  93
  49
  39
  32
  14
  46
  1
  73/220
  163/31
  ((7 7 0) (7 7 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  181
  93
  49
  39
  32
  14
  46
  1
  73/220
  163/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  223
  123
  49
  51
  39
  14
  53
  1
  167/552
  670/123
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  227
  125
  49
  53
  39
  14
  53
  1
  167/568
  136/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  227
  125
  49
  53
  39
  14
  53
  1
  167/568
  136/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  260
  149
  55
  56
  53
  17
  70
  1
  1613/4592
  809/149
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  260
  149
  55
  56
  53
  17
  70
  1
  1613/4592
  809/149
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  48
  21
  10
  17
  9
  3
  12
  1
  3/7
  94/21
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  132
  60
  32
  40
  22
  5
  27
  1
  5/12
  93/20
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  58
  32
  18
  8
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  62
  36
  18
  8
  25
  7
  32
  1
  109/138
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  65
  38
  18
  9
  26
  7
  33
  1
  23/30
  97/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  84
  48
  22
  14
  30
  8
  38
  1
  139/210
  239/48
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env ((□? ()))))\""
  87
  50
  22
  15
  31
  8
  39
  1
  145/222
  249/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  120
  67
  34
  19
  39
  14
  53
  1
  311/516
  338/67
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  122
  69
  34
  19
  39
  14
  53
  1
  311/540
  116/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  169
  89
  44
  36
  47
  17
  64
  1
  407/756
  436/89
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env ((□? (f x)))))\""
  170
  90
  44
  36
  47
  17
  64
  1
  401/756
  49/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  186
  99
  47
  40
  52
  18
  70
  1
  461/864
  481/99
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma)))\n  (env ((□? (bo)) (□? (ma)))))\""
  186
  99
  47
  40
  52
  18
  70
  1
  461/864
  481/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  187
  100
  47
  40
  52
  18
  70
  1
  461/876
  243/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  188
  101
  47
  40
  52
  18
  70
  1
  461/888
  491/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  189
  102
  47
  40
  52
  18
  70
  1
  461/900
  248/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  8
  3
  0
  5
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  16
  8
  0
  8
  2
  0
  2
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  54
  25
  13
  16
  12
  2
  14
  1
  12/25
  117/25
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (b)))))\""
  55
  26
  13
  16
  12
  2
  14
  1
  6/13
  61/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  72
  41
  13
  18
  15
  2
  17
  1
  3/8
  189/41
  ((3/2 3/2 0) (2 2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  74
  43
  13
  18
  15
  2
  17
  1
  6/17
  199/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  147
  76
  33
  38
  16
  6
  22
  1
  13/53
  189/38
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  154
  81
  33
  40
  16
  6
  22
  1
  13/56
  403/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  193
  104
  40
  49
  18
  6
  24
  1
  29/122
  529/104
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  221
  124
  44
  53
  26
  7
  33
  1
  41/142
  619/124
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ((□? (i)))))\""
  223
  125
  44
  54
  26
  7
  33
  1
  41/144
  624/125
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  226
  127
  44
  55
  26
  7
  33
  1
  41/148
  634/127
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  317
  175
  77
  65
  49
  21
  70
  1
  199/540
  36/7
  ((10 10 0) (10 10 0) (10 10 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  343
  186
  87
  70
  52
  22
  74
  1
  217/606
  158/31
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  9
  6
  0
  3
  1
  0
  1
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  29
  12
  4
  13
  0
  1
  1
  1
  0
  61/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  32
  14
  4
  14
  1
  1
  2
  1
  1/11
  71/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  35
  16
  4
  15
  1
  1
  2
  1
  1/13
  81/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  12
  7
  0
  5
  3
  0
  3
  1
  3/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  15
  10
  0
  5
  3
  0
  3
  1
  3/10
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  18
  12
  0
  6
  3
  0
  3
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> display <-) \"Cat's game.\\n\")\n  (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  15
  9
  0
  6
  2
  0
  2
  1
  2/9
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  82
  44
  22
  16
  26
  8
  34
  1
  5/8
  115/22
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  39
  26
  7
  6
  12
  3
  15
  1
  8/15
  139/26
  ((3 3 0) (3 3 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  25
  16
  4
  5
  9
  1
  10
  1
  4/7
  75/16
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  72
  42
  18
  12
  26
  8
  34
  1
  59/90
  209/42
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  89
  49
  20
  20
  27
  9
  36
  1
  31/54
  244/49
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  43
  28
  7
  8
  13
  3
  16
  1
  79/150
  149/28
  ((5/2 3 0) (5/2 5/2 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  45
  18
  10
  17
  8
  3
  11
  1
  8/17
  40/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> minimax <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  47
  20
  10
  17
  9
  3
  12
  1
  9/19
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  43
  18
  4
  21
  1
  1
  2
  1
  1/13
  46/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  76
  30
  13
  33
  1
  3
  4
  1
  1/21
  31/6
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  46
  20
  8
  18
  10
  2
  12
  1
  1/2
  23/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  48
  21
  8
  19
  10
  2
  12
  1
  10/21
  97/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  46
  27
  7
  12
  10
  3
  13
  1
  58/135
  16/3
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  61
  33
  9
  19
  11
  3
  14
  1
  73/210
  58/11
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  64
  35
  9
  20
  11
  3
  14
  1
  73/240
  184/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  65
  36
  9
  20
  12
  3
  15
  1
  88/255
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  70
  39
  9
  22
  14
  3
  17
  1
  59/150
  68/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  19
  9
  2
  8
  1
  1
  2
  1
  1/8
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  75
  30
  24
  21
  8
  9
  17
  1
  22/225
  11/2
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env ((□? (oc₀ oc₁)))))\""
  77
  31
  24
  22
  8
  9
  17
  1
  11/120
  170/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  111
  53
  29
  29
  19
  10
  29
  1
  187/570
  272/53
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  35
  18
  10
  7
  7
  4
  11
  1
  13/42
  16/3
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  46
  19
  7
  20
  5
  2
  7
  1
  3/13
  85/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  30
  10
  8
  12
  4
  1
  5
  1
  2/5
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ((□? (i)))))\""
  32
  11
  8
  13
  4
  1
  5
  1
  4/11
  50/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  35
  13
  8
  14
  4
  1
  5
  1
  4/13
  60/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? (bo this-play that-play)))))\""
  5
  3
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  67
  28
  18
  21
  12
  4
  16
  1
  3/7
  9/2
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  70
  30
  18
  22
  12
  4
  16
  1
  2/5
  68/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  98
  52
  18
  28
  17
  4
  21
  1
  13/40
  115/26
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  107
  56
  22
  29
  17
  5
  22
  1
  13/43
  125/28
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  128
  66
  26
  36
  17
  6
  23
  1
  13/50
  151/33
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  131
  68
  26
  37
  17
  6
  23
  1
  1/4
  78/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  19
  5
  3
  11
  0
  1
  1
  1
  0
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  22
  7
  3
  12
  0
  1
  1
  1
  0
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env ((□? (bo)))))\""
  24
  8
  3
  13
  0
  1
  1
  1
  0
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  28
  10
  3
  15
  1
  1
  2
  1
  1/8
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  22
  10
  4
  8
  5
  1
  6
  1
  1/2
  23/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  24
  11
  4
  9
  5
  1
  6
  1
  5/11
  51/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  79
  41
  22
  16
  27
  8
  35
  1
  65/93
  5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  109
  57
  32
  20
  33
  12
  45
  1
  473/735
  98/19
  ((3 3 0) (3 3 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env ((□? (f acc l)))))\""
  110
  58
  32
  20
  33
  12
  45
  1
  473/756
  299/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  114
  60
  32
  22
  34
  12
  46
  1
  13/21
  103/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? (ma)))))\""
  6
  3
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  6
  3
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  58
  23
  15
  20
  0
  3
  3
  1
  0
  124/23
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  28
  9
  8
  11
  4
  1
  5
  1
  4/9
  40/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  82
  30
  23
  29
  4
  4
  8
  1
  2/9
  49/10
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (c)) (□? (b m)))))\""
  83
  31
  23
  29
  4
  4
  8
  1
  4/19
  152/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  85
  32
  23
  30
  4
  4
  8
  1
  1/5
  157/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  128
  63
  33
  32
  26
  10
  36
  1
  79/160
  316/63
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  129
  64
  33
  32
  26
  10
  36
  1
  79/164
  321/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app X) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  17
  8
  2
  7
  1
  1
  2
  1
  1/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  18
  9
  2
  7
  1
  1
  2
  1
  1/8
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  70
  29
  19
  22
  1
  4
  5
  1
  1/16
  157/29
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  101
  53
  24
  24
  2
  5
  7
  1
  1/14
  289/53
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  104
  55
  24
  25
  2
  5
  7
  1
  1/15
  299/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  107
  57
  24
  26
  2
  5
  7
  1
  1/16
  103/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  136
  69
  32
  35
  6
  6
  12
  1
  6/41
  362/69
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  8
  0
  7
  2
  0
  2
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  18
  10
  0
  8
  2
  0
  2
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked? <-) (app b (app coord r c)))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  8
  4
  0
  4
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  47
  20
  8
  19
  10
  2
  12
  1
  1/2
  23/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  9
  6
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  14
  10
  0
  4
  0
  0
  0
  1
  0
  49/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  16
  12
  0
  4
  0
  0
  0
  1
  0
  59/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  25
  17
  0
  8
  1
  0
  1
  1
  1/17
  84/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  29
  19
  0
  10
  1
  0
  1
  1
  1/19
  94/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  87
  55
  22
  10
  32
  8
  40
  1
  68/99
  293/55
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  102
  61
  24
  17
  33
  8
  41
  1
  71/114
  323/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  103
  62
  24
  17
  33
  8
  41
  1
  71/117
  164/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  107
  64
  24
  19
  34
  8
  42
  1
  74/123
  169/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  3
  0
  4
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  28
  12
  6
  10
  4
  2
  6
  1
  4/11
  14/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  27
  8
  8
  11
  4
  1
  5
  1
  1/2
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  59
  24
  18
  17
  10
  5
  15
  1
  17/42
  61/12
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  62
  32
  20
  10
  23
  7
  30
  1
  53/66
  41/8
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env ((□? (f xs)))))\""
  5
  3
  0
  2
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env ((□? (rc)) (□? (b m)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  82
  37
  20
  25
  2
  4
  6
  1
  1/12
  199/37
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  107
  52
  24
  31
  9
  5
  14
  1
  9/35
  267/52
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env ((□? (bo)) (□? (ma)))))\""
  9
  4
  0
  5
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  0
  7
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env ((□? (co)))))\""
  15
  7
  0
  8
  2
  0
  2
  1
  2/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env ((□? (some-v-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  7
  3
  0
  4
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  108
  75
  14
  19
  36
  3
  39
  1
  3/7
  347/75
  ((8 8 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  118
  79
  16
  23
  36
  4
  40
  1
  2/5
  367/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  195
  123
  38
  34
  58
  12
  70
  1
  404/915
  596/123
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  202
  128
  38
  36
  59
  12
  71
  1
  419/990
  621/128
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  72
  30
  20
  22
  1
  4
  5
  1
  1/18
  27/5
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  75
  33
  20
  22
  2
  4
  6
  1
  1/10
  59/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  79
  37
  20
  22
  2
  4
  6
  1
  1/11
  197/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  82
  39
  20
  23
  2
  4
  6
  1
  1/12
  69/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  85
  41
  18
  26
  14
  4
  18
  1
  10/31
  180/41
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  86
  42
  18
  26
  14
  4
  18
  1
  5/16
  185/42
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  130
  68
  25
  37
  24
  7
  31
  1
  26/75
  81/17
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  150
  82
  27
  41
  26
  8
  34
  1
  104/345
  192/41
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env ((□? (h)))))\""
  153
  85
  27
  41
  26
  8
  34
  1
  208/705
  399/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (oc₀ oc₁)))))\""
  155
  86
  27
  42
  26
  8
  34
  1
  13/45
  202/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  172
  100
  27
  45
  40
  8
  48
  1
  209/465
  233/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  175
  103
  27
  45
  40
  8
  48
  1
  418/945
  483/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  178
  105
  27
  46
  40
  8
  48
  1
  418/945
  491/105
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  179
  106
  27
  46
  40
  8
  48
  1
  418/945
  248/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  183
  108
  27
  48
  41
  8
  49
  1
  433/975
  253/54
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  185
  110
  27
  48
  43
  8
  51
  1
  463/1005
  258/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  187
  111
  27
  49
  43
  8
  51
  1
  463/1020
  521/111
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  272
  165
  49
  58
  72
  16
  88
  1
  41/80
  269/55
  ((9/2 9/2 0) (9/2 9/2 0) (5 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  294
  178
  56
  60
  76
  19
  95
  1
  734/1485
  875/178
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  299
  182
  56
  61
  77
  19
  96
  1
  749/1545
  893/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  337
  206
  65
  66
  85
  23
  108
  1
  149/321
  1021/206
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  340
  208
  65
  67
  85
  23
  108
  1
  149/327
  1031/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  372
  226
  72
  74
  86
  24
  110
  1
  299/708
  1131/226
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  373
  227
  72
  74
  86
  24
  110
  1
  299/714
  1136/227
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  374
  228
  72
  74
  86
  24
  110
  1
  299/720
  1141/228
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  411
  251
  82
  78
  95
  28
  123
  1
  2147/5250
  1268/251
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  411
  251
  82
  78
  95
  28
  123
  1
  2147/5250
  1268/251
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env ((□? (bo)) (□? (ma)))))\""
  413
  253
  82
  78
  96
  28
  124
  1
  2189/5334
  1278/253
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  417
  257
  82
  78
  96
  28
  124
  1
  2189/5376
  1294/257
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  88
  46
  21
  21
  16
  5
  21
  1
  11/28
  110/23
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  151
  82
  38
  31
  26
  12
  38
  1
  49/176
  221/41
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  188
  103
  46
  39
  35
  13
  48
  1
  9/28
  540/103
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  188
  103
  46
  39
  35
  13
  48
  1
  9/28
  540/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  279
  149
  76
  54
  59
  24
  83
  1
  2273/6384
  780/149
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  297
  165
  76
  56
  61
  24
  85
  1
  2161/7056
  284/55
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  94
  50
  18
  26
  14
  4
  18
  1
  5/17
  219/50
  ((7/2 7/2 0) (4 4 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  132
  67
  22
  43
  15
  5
  20
  1
  11/46
  306/67
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  135
  69
  22
  44
  15
  5
  20
  1
  11/48
  316/69
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  151
  78
  25
  48
  20
  6
  26
  1
  16/57
  178/39
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app minimax bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) empty-board player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  78
  40
  22
  16
  16
  8
  24
  1
  11/45
  23/4
  ((8 8 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  25
  13
  4
  8
  4
  1
  5
  1
  4/13
  59/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  27
  15
  4
  8
  5
  1
  6
  1
  1/3
  23/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  31
  17
  4
  10
  5
  1
  6
  1
  5/17
  79/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  72
  40
  18
  14
  14
  5
  19
  1
  5/14
  189/40
  ((5 5 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  88
  52
  18
  18
  18
  5
  23
  1
  29/84
  121/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  32
  16
  4
  12
  8
  1
  9
  1
  1/2
  75/16
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  36
  18
  4
  14
  9
  1
  10
  1
  1/2
  85/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  8
  3
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  11
  5
  0
  6
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  7
  0
  8
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  40
  23
  4
  13
  9
  1
  10
  1
  8/21
  110/23
  ((2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  27
  8
  8
  11
  4
  1
  5
  1
  1/2
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  30
  10
  8
  12
  5
  1
  6
  1
  1/2
  23/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env ((□? (b co m)))))\""
  32
  11
  8
  13
  5
  1
  6
  1
  5/11
  51/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  51
  21
  12
  18
  9
  2
  11
  1
  3/7
  32/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  54
  24
  12
  18
  11
  2
  13
  1
  11/24
  37/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  61
  29
  12
  20
  12
  2
  14
  1
  12/29
  136/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  71
  38
  12
  21
  14
  2
  16
  1
  3/8
  175/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  72
  39
  12
  21
  14
  2
  16
  1
  4/11
  60/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> maximin <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  74
  41
  12
  21
  15
  2
  17
  1
  13/35
  190/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  76
  42
  12
  22
  15
  2
  17
  1
  13/36
  65/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  55
  27
  13
  15
  13
  2
  15
  1
  13/27
  127/27
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  77
  40
  17
  20
  17
  3
  20
  1
  17/40
  23/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  80
  42
  17
  21
  17
  3
  20
  1
  17/42
  97/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  56
  39
  10
  7
  24
  4
  28
  1
  38/49
  69/13
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env ((□? (b m)))))\""
  59
  41
  10
  8
  25
  4
  29
  1
  121/161
  217/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  62
  43
  10
  9
  25
  4
  29
  1
  121/175
  227/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-coord\")\n  (env ((□? (move-coord-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  55
  19
  15
  21
  0
  3
  3
  1
  0
  104/19
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  81
  36
  19
  26
  4
  4
  8
  1
  2/11
  179/36
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  139
  72
  29
  38
  9
  4
  13
  1
  7/27
  181/36
  ((11/2 11/2 0) (6 6 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  167
  84
  40
  43
  12
  5
  17
  1
  10/39
  69/14
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  168
  85
  40
  43
  12
  5
  17
  1
  1/4
  419/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  168
  85
  40
  43
  12
  5
  17
  1
  1/4
  419/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  171
  88
  40
  43
  13
  5
  18
  1
  31/123
  217/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  17
  8
  2
  7
  3
  0
  3
  1
  3/7
  5
  ((1/2 1/2 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  19
  9
  2
  8
  3
  0
  3
  1
  3/8
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  92
  54
  13
  25
  29
  2
  31
  1
  48/85
  124/27
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  94
  55
  13
  26
  29
  2
  31
  1
  96/175
  23/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  97
  57
  13
  27
  29
  2
  31
  1
  96/185
  263/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  25
  9
  10
  6
  3
  4
  7
  1
  1/7
  16/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  5
  3
  0
  2
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  24
  11
  4
  9
  7
  1
  8
  1
  7/11
  50/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  47
  28
  10
  9
  15
  4
  19
  1
  69/112
  149/28
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  47
  28
  10
  9
  15
  4
  19
  1
  69/112
  149/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  49
  30
  10
  9
  15
  4
  19
  1
  23/42
  53/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  25
  11
  4
  10
  3
  1
  4
  1
  3/11
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-horizon\")\n  (env ((□? (move-horizon-v)))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  9
  5
  0
  4
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  24
  11
  2
  11
  3
  0
  3
  1
  3/10
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  46
  23
  5
  18
  5
  1
  6
  1
  9/32
  119/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  49
  25
  5
  19
  6
  1
  7
  1
  11/36
  129/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env ((□? ()))))\""
  52
  27
  5
  20
  7
  1
  8
  1
  13/40
  139/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  53
  28
  5
  20
  8
  1
  9
  1
  5/14
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  67
  37
  9
  21
  8
  2
  10
  1
  5/16
  196/37
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  68
  38
  9
  21
  8
  2
  10
  1
  3/10
  201/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  111
  59
  21
  31
  17
  4
  21
  1
  33/92
  299/59
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  113
  60
  21
  32
  17
  4
  21
  1
  33/94
  76/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  24
  15
  3
  6
  13
  1
  14
  1
  13/15
  68/15
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  110
  69
  21
  20
  33
  6
  39
  1
  127/203
  320/69
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  12
  8
  0
  4
  3
  0
  3
  1
  3/8
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  29
  17
  3
  9
  8
  1
  9
  1
  8/17
  80/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  32
  19
  3
  10
  8
  1
  9
  1
  8/19
  90/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env ((□? (bo this-play that-play)))))\""
  34
  21
  3
  10
  9
  1
  10
  1
  3/7
  100/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  36
  23
  3
  10
  11
  1
  12
  1
  11/23
  110/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  38
  25
  3
  10
  11
  1
  12
  1
  11/25
  24/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  45
  22
  12
  11
  10
  2
  12
  1
  5/11
  103/22
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  48
  24
  12
  12
  10
  2
  12
  1
  5/12
  113/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  51
  26
  12
  13
  10
  2
  12
  1
  5/13
  123/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  58
  32
  18
  8
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  61
  34
  18
  9
  24
  7
  31
  1
  7/9
  87/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  84
  44
  22
  18
  30
  8
  38
  1
  37/51
  219/44
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  96
  49
  18
  29
  15
  4
  19
  1
  11/37
  31/7
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  97
  50
  18
  29
  15
  4
  19
  1
  11/38
  111/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  102
  53
  18
  31
  17
  4
  21
  1
  13/41
  237/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  104
  55
  18
  31
  17
  4
  21
  1
  13/43
  247/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  18
  8
  2
  8
  1
  0
  1
  1
  1/7
  5
  ((0 0 0) (1/2 1/2 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  21
  10
  2
  9
  1
  0
  1
  1
  1/9
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env ((□? (f xs)))))\""
  23
  12
  2
  9
  2
  0
  2
  1
  2/11
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  4
  3
  0
  1
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env ((□? (bo)) (□? (ma)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  10
  6
  0
  4
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  8
  0
  6
  2
  0
  2
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  17
  10
  0
  7
  2
  0
  2
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  92
  47
  20
  25
  3
  4
  7
  1
  3/29
  250/47
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  96
  51
  20
  25
  3
  4
  7
  1
  3/31
  271/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  99
  53
  20
  26
  3
  4
  7
  1
  1/11
  281/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  104
  55
  20
  29
  4
  4
  8
  1
  4/35
  291/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  109
  60
  20
  29
  5
  4
  9
  1
  5/37
  79/15
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  185
  103
  42
  40
  26
  12
  38
  1
  97/390
  540/103
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  207
  117
  46
  44
  30
  13
  43
  1
  254/945
  602/117
  ((1/2 1/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  97
  34
  21
  42
  1
  2
  3
  1
  1/16
  94/17
  ((6 6 0) (6 6 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  103
  40
  21
  42
  3
  2
  5
  1
  3/19
  109/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  106
  42
  21
  43
  3
  2
  5
  1
  1/7
  38/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-horizon\")\n  (env ((□? (move-horizon-v)))))\""
  108
  43
  21
  44
  3
  2
  5
  1
  3/22
  233/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b)))))\""
  112
  45
  21
  46
  4
  2
  6
  1
  1/6
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  113
  46
  21
  46
  4
  2
  6
  1
  4/25
  124/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  6
  0
  3
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  72
  40
  18
  14
  14
  5
  19
  1
  5/14
  189/40
  ((9/2 9/2 0) (9/2 9/2 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ((□? (i)))))\""
  74
  41
  18
  15
  14
  5
  19
  1
  30/91
  194/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  125
  73
  32
  20
  37
  12
  49
  1
  461/735
  358/73
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  137
  81
  32
  24
  40
  12
  52
  1
  482/861
  131/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  139
  82
  32
  25
  40
  12
  52
  1
  241/441
  199/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  147
  87
  32
  28
  41
  12
  53
  1
  503/987
  141/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (c)) (□? (b m)))))\""
  148
  88
  32
  28
  41
  12
  53
  1
  503/987
  107/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app minimax bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  152
  90
  32
  30
  42
  12
  54
  1
  524/1029
  73/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  153
  91
  32
  30
  42
  12
  54
  1
  262/525
  443/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  153
  91
  32
  30
  42
  12
  54
  1
  262/525
  443/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  210
  131
  46
  33
  58
  19
  77
  1
  1237/2646
  659/131
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  213
  133
  46
  34
  58
  19
  77
  1
  1237/2730
  669/133
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  215
  135
  46
  34
  58
  19
  77
  1
  1237/2814
  679/135
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  260
  158
  56
  46
  64
  20
  84
  1
  703/1743
  396/79
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  4
  3
  0
  1
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env ((□? (f x)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  16
  8
  2
  6
  1
  1
  2
  1
  1/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  74
  46
  17
  11
  15
  7
  22
  1
  15/152
  291/46
  ((17/2 17/2 0) (17/2 17/2 0) (9 9 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (oc₀ oc₁)))))\""
  76
  47
  17
  12
  15
  7
  22
  1
  3/32
  296/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  79
  49
  17
  13
  15
  7
  22
  1
  15/176
  306/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  90
  55
  19
  16
  15
  8
  23
  1
  3/40
  337/55
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  24
  11
  4
  9
  7
  1
  8
  1
  7/11
  50/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  33
  16
  4
  13
  8
  1
  9
  1
  1/2
  75/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  13
  6
  0
  7
  1
  0
  1
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  8
  0
  7
  1
  0
  1
  1
  1/8
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  49
  29
  10
  10
  15
  4
  19
  1
  69/119
  154/29
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  13
  6
  0
  7
  1
  0
  1
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  60
  29
  13
  18
  12
  2
  14
  1
  12/29
  137/29
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  6
  2
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  10
  4
  0
  6
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  14
  6
  0
  8
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  28
  13
  2
  13
  3
  0
  3
  1
  3/11
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  31
  16
  2
  13
  4
  0
  4
  1
  4/13
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  102
  72
  14
  16
  35
  3
  38
  1
  17/39
  83/18
  ((8 8 0) (17/2 17/2 0) (8 8 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  55
  21
  15
  19
  9
  3
  12
  1
  3/7
  94/21
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  82
  30
  23
  29
  13
  4
  17
  1
  13/30
  67/15
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env ((□? ()))))\""
  9
  6
  0
  3
  3
  0
  3
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  18
  11
  0
  7
  4
  0
  4
  1
  4/11
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  19
  12
  0
  7
  5
  0
  5
  1
  5/12
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  42
  22
  4
  16
  5
  1
  6
  1
  5/19
  111/22
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo)))))\""
  44
  23
  4
  17
  5
  1
  6
  1
  1/4
  116/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  100
  54
  22
  24
  27
  8
  35
  1
  65/123
  275/54
  ((3 3 0) (3 3 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  110
  61
  22
  27
  30
  8
  38
  1
  95/188
  306/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  115
  64
  22
  29
  30
  8
  38
  1
  95/196
  321/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  116
  65
  22
  29
  30
  8
  38
  1
  19/40
  326/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  118
  66
  22
  30
  30
  8
  38
  1
  95/204
  331/66
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  20
  10
  4
  6
  4
  1
  5
  1
  2/5
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  81
  42
  24
  15
  27
  8
  35
  1
  65/96
  209/42
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  88
  47
  24
  17
  28
  8
  36
  1
  68/111
  234/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  107
  59
  27
  21
  40
  9
  49
  1
  104/147
  288/59
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  109
  61
  27
  21
  42
  9
  51
  1
  110/153
  296/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  39
  16
  8
  15
  8
  2
  10
  1
  1/2
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  40
  17
  8
  15
  8
  2
  10
  1
  8/17
  77/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  5
  3
  0
  2
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  5
  4
  0
  1
  3
  0
  3
  1
  3/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> maximin <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  67
  27
  18
  22
  10
  4
  14
  1
  10/27
  121/27
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  68
  28
  18
  22
  10
  4
  14
  1
  5/14
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  92
  43
  23
  26
  11
  5
  16
  1
  11/34
  197/43
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  94
  45
  23
  26
  11
  5
  16
  1
  11/35
  23/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  12
  8
  0
  4
  2
  0
  2
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  16
  10
  0
  6
  2
  0
  2
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  55
  36
  7
  12
  14
  3
  17
  1
  47/135
  21/4
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  6
  2
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  68
  36
  8
  24
  14
  2
  16
  1
  4/11
  53/12
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  7
  0
  5
  2
  0
  2
  1
  2/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app lose) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  66
  37
  17
  12
  10
  7
  17
  1
  5/68
  227/37
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  124
  69
  35
  20
  33
  14
  47
  1
  227/468
  17/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  127
  71
  35
  21
  33
  14
  47
  1
  227/492
  401/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  25
  9
  10
  6
  3
  4
  7
  1
  1/7
  16/3
  ((2 2 0) (5/2 5/2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked? <-) (app b (app coord r c)))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  24
  10
  4
  10
  5
  1
  6
  1
  1/2
  23/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  63
  34
  14
  15
  19
  5
  24
  1
  97/154
  175/34
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> minimax <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  67
  36
  14
  17
  20
  5
  25
  1
  13/21
  185/36
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  86
  47
  18
  21
  26
  5
  31
  1
  33/56
  238/47
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  89
  50
  18
  21
  27
  5
  32
  1
  139/238
  253/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  90
  51
  18
  21
  27
  5
  32
  1
  139/245
  86/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  22
  11
  4
  7
  4
  1
  5
  1
  4/11
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  79
  35
  19
  25
  4
  4
  8
  1
  4/21
  174/35
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  45
  18
  10
  17
  8
  3
  11
  1
  8/17
  40/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  48
  20
  10
  18
  8
  3
  11
  1
  8/19
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  24
  11
  4
  9
  7
  1
  8
  1
  7/11
  50/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env ((□? (h)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  54
  25
  10
  19
  11
  3
  14
  1
  11/25
  114/25
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  58
  27
  10
  21
  11
  3
  14
  1
  11/27
  124/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  60
  28
  10
  22
  11
  3
  14
  1
  11/28
  129/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  138
  69
  34
  35
  25
  8
  33
  1
  20/51
  108/23
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  140
  71
  34
  35
  27
  8
  35
  1
  22/53
  334/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app X) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  141
  72
  34
  35
  27
  8
  35
  1
  11/27
  113/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  24
  13
  3
  8
  6
  1
  7
  1
  6/13
  60/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  31
  17
  3
  11
  7
  1
  8
  1
  7/17
  80/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  40
  24
  3
  13
  10
  1
  11
  1
  7/19
  55/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  45
  26
  3
  16
  11
  1
  12
  1
  8/21
  60/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env ((□? (some-v-v)))))\""
  47
  27
  3
  17
  11
  1
  12
  1
  4/11
  125/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  50
  29
  3
  18
  11
  1
  12
  1
  1/3
  135/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  51
  30
  3
  18
  12
  1
  13
  1
  9/25
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env ((□? (bo this-play that-play)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  23
  11
  2
  10
  2
  1
  3
  1
  1/5
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  31
  18
  2
  11
  2
  1
  3
  1
  2/13
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-coord\")\n  (env ((□? (move-coord-v)))))\""
  33
  19
  2
  12
  2
  1
  3
  1
  1/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  58
  30
  7
  21
  2
  2
  4
  1
  1/10
  76/15
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  59
  31
  7
  21
  2
  2
  4
  1
  2/21
  157/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env ((□? (f xs)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  30
  15
  4
  11
  5
  1
  6
  1
  1/3
  68/15
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  34
  17
  4
  13
  6
  1
  7
  1
  6/17
  78/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  36
  19
  4
  13
  8
  1
  9
  1
  8/19
  88/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  44
  23
  6
  15
  8
  2
  10
  1
  4/11
  108/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  47
  25
  6
  16
  8
  2
  10
  1
  1/3
  118/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  48
  26
  6
  16
  9
  2
  11
  1
  9/25
  123/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  51
  28
  6
  17
  10
  2
  12
  1
  10/27
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  53
  30
  6
  17
  10
  2
  12
  1
  10/29
  143/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  55
  32
  6
  17
  11
  2
  13
  1
  11/31
  153/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  56
  33
  6
  17
  11
  2
  13
  1
  11/32
  158/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  96
  58
  20
  18
  20
  6
  26
  1
  36/119
  136/29
  ((11/2 11/2 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  99
  60
  20
  19
  20
  6
  26
  1
  36/133
  47/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  101
  62
  20
  19
  21
  6
  27
  1
  43/147
  146/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  104
  64
  20
  20
  21
  6
  27
  1
  43/161
  151/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  42
  17
  4
  21
  1
  1
  2
  1
  1/12
  87/17
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  58
  25
  4
  29
  1
  1
  2
  1
  1/14
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  66
  29
  4
  33
  1
  1
  2
  1
  1/15
  152/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  44
  26
  7
  11
  10
  3
  13
  1
  29/60
  139/26
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env ((□? (f acc l)))))\""
  47
  28
  7
  12
  11
  3
  14
  1
  73/150
  149/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  51
  31
  7
  13
  13
  3
  16
  1
  103/195
  164/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  27
  13
  4
  10
  3
  1
  4
  1
  3/13
  57/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  69
  40
  17
  12
  11
  7
  18
  1
  9/80
  121/20
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  71
  42
  17
  12
  13
  7
  20
  1
  17/88
  6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  21
  10
  4
  7
  4
  1
  5
  1
  2/5
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  94
  50
  18
  26
  14
  4
  18
  1
  5/17
  219/50
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  13
  6
  2
  5
  0
  1
  1
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env ((□? (b m)))))\""
  16
  8
  2
  6
  1
  1
  2
  1
  1/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env ((□? (oc₀ oc₁)))))\""
  18
  9
  2
  7
  1
  1
  2
  1
  1/8
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? (ma)))))\""
  20
  10
  2
  8
  1
  1
  2
  1
  1/9
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  23
  12
  2
  9
  2
  1
  3
  1
  2/11
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  21
  10
  3
  8
  5
  1
  6
  1
  1/2
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  23
  11
  3
  9
  5
  1
  6
  1
  5/11
  50/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  67
  33
  15
  19
  15
  3
  18
  1
  5/11
  51/11
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env ((□? (co)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  10
  5
  0
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  35
  21
  4
  10
  10
  1
  11
  1
  9/19
  100/21
  ((3/2 3/2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  82
  47
  18
  17
  27
  8
  35
  1
  62/105
  234/47
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  84
  49
  18
  17
  27
  8
  35
  1
  62/111
  244/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  87
  51
  18
  18
  27
  8
  35
  1
  62/117
  254/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  88
  52
  18
  18
  27
  8
  35
  1
  31/60
  259/52
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  90
  54
  18
  18
  28
  8
  36
  1
  65/126
  269/54
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  93
  56
  18
  19
  28
  8
  36
  1
  65/132
  279/56
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  46
  24
  10
  12
  11
  2
  13
  1
  11/24
  113/24
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  85
  40
  18
  27
  19
  4
  23
  1
  19/40
  37/8
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  110
  56
  24
  30
  25
  7
  32
  1
  139/308
  271/56
  ((3 3 0) (5/2 5/2 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  141
  87
  24
  30
  42
  7
  49
  1
  395/784
  146/29
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  143
  89
  24
  30
  43
  7
  50
  1
  409/812
  448/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  145
  90
  24
  31
  43
  7
  50
  1
  409/826
  151/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  29
  15
  4
  10
  1
  1
  2
  1
  1/12
  77/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  94
  41
  22
  31
  11
  5
  16
  1
  11/38
  193/41
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  97
  44
  22
  31
  11
  5
  16
  1
  11/41
  207/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env ((□? (bo)))))\""
  99
  45
  22
  32
  11
  5
  16
  1
  11/42
  212/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) empty-board player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  104
  50
  22
  32
  12
  5
  17
  1
  3/11
  237/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  104
  50
  22
  32
  12
  5
  17
  1
  3/11
  237/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  105
  51
  22
  32
  12
  5
  17
  1
  4/15
  242/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  106
  52
  22
  32
  12
  5
  17
  1
  6/23
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env ((□? (h₀ h₁)))))\""
  108
  53
  22
  33
  12
  5
  17
  1
  12/47
  252/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  150
  75
  34
  41
  12
  7
  19
  1
  1/5
  367/75
  ((5/2 5/2 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  153
  78
  34
  41
  14
  7
  21
  1
  2/9
  191/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  154
  79
  34
  41
  14
  7
  21
  1
  7/32
  387/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  211
  110
  54
  47
  15
  9
  24
  1
  5/23
  543/110
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  225
  123
  54
  48
  21
  9
  30
  1
  13/57
  201/41
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  226
  124
  54
  48
  21
  9
  30
  1
  52/231
  152/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (b)))))\""
  229
  126
  54
  49
  22
  9
  31
  1
  55/237
  103/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  264
  146
  64
  54
  32
  13
  45
  1
  487/1827
  727/146
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  309
  167
  82
  60
  44
  20
  64
  1
  209/686
  836/167
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  53
  32
  14
  7
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma)))\n  (env ((□? (bo)) (□? (ma)))))\""
  57
  34
  14
  9
  24
  7
  31
  1
  7/9
  87/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  61
  36
  14
  11
  24
  7
  31
  1
  28/39
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  104
  54
  24
  26
  31
  10
  41
  1
  11/18
  131/27
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  136
  69
  34
  33
  34
  11
  45
  1
  83/165
  110/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  137
  70
  34
  33
  34
  11
  45
  1
  83/168
  67/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  137
  70
  34
  33
  34
  11
  45
  1
  83/168
  67/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  140
  72
  34
  34
  35
  11
  46
  1
  43/87
  115/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  146
  76
  34
  36
  35
  11
  46
  1
  43/93
  365/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  148
  78
  34
  36
  35
  11
  46
  1
  86/189
  373/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  158
  86
  34
  38
  38
  11
  49
  1
  30/67
  204/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  28
  12
  4
  12
  3
  1
  4
  1
  1/4
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  30
  14
  4
  12
  4
  1
  5
  1
  2/7
  32/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> empty-board <-) player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  33
  16
  4
  13
  5
  1
  6
  1
  5/16
  37/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  33
  12
  8
  13
  5
  1
  6
  1
  5/12
  14/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  24
  10
  4
  10
  0
  1
  1
  1
  0
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  47
  23
  8
  16
  4
  2
  6
  1
  1/5
  108/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  49
  25
  8
  16
  6
  2
  8
  1
  3/11
  118/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  56
  30
  8
  18
  7
  2
  9
  1
  7/27
  143/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  58
  32
  8
  18
  8
  2
  10
  1
  8/29
  153/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  59
  33
  8
  18
  8
  2
  10
  1
  4/15
  158/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  61
  35
  8
  18
  8
  2
  10
  1
  1/4
  24/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  62
  36
  8
  18
  9
  2
  11
  1
  3/11
  173/36
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  110
  58
  21
  31
  19
  4
  23
  1
  19/55
  275/58
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  42
  28
  7
  7
  12
  3
  15
  1
  32/75
  149/28
  ((5/2 5/2 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  58
  41
  7
  10
  25
  3
  28
  1
  259/345
  207/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo this-play that-play)))))\""
  63
  46
  7
  10
  27
  3
  30
  1
  53/72
  116/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  66
  48
  7
  11
  28
  3
  31
  1
  28/39
  121/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  124
  80
  25
  19
  51
  10
  61
  1
  109/144
  203/40
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  127
  82
  25
  20
  52
  10
  62
  1
  56/75
  208/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  142
  88
  27
  27
  53
  10
  63
  1
  23/33
  223/44
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  40
  24
  10
  6
  14
  4
  18
  1
  31/42
  43/8
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (oc₀ oc₁)))))\""
  42
  25
  10
  7
  14
  4
  18
  1
  62/91
  134/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  51
  30
  10
  11
  15
  4
  19
  1
  23/42
  53/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> display <-) \"Cat's game.\\n\")\n  (env ((□? (bo this-play that-play)))))\""
  53
  31
  10
  12
  15
  4
  19
  1
  69/133
  164/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  33
  12
  9
  12
  0
  2
  2
  1
  0
  21/4
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  37
  15
  9
  13
  2
  2
  4
  1
  2/11
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  72
  30
  20
  22
  1
  4
  5
  1
  1/18
  27/5
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  75
  32
  20
  23
  1
  4
  5
  1
  1/20
  43/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  29
  10
  8
  11
  6
  1
  7
  1
  3/5
  23/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  33
  12
  8
  13
  6
  1
  7
  1
  1/2
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  36
  15
  8
  13
  8
  1
  9
  1
  8/15
  71/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  82
  40
  17
  25
  9
  3
  12
  1
  9/31
  203/40
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  6
  3
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  53
  27
  12
  14
  10
  2
  12
  1
  10/27
  127/27
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  57
  29
  12
  16
  11
  2
  13
  1
  11/29
  137/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  85
  45
  17
  23
  15
  3
  18
  1
  14/43
  209/45
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  138
  66
  32
  40
  24
  6
  30
  1
  23/64
  101/22
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  140
  68
  32
  40
  25
  6
  31
  1
  4/11
  313/68
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  144
  71
  32
  41
  25
  6
  31
  1
  8/23
  328/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  46
  19
  7
  20
  5
  2
  7
  1
  3/13
  85/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  52
  23
  7
  22
  6
  2
  8
  1
  4/17
  105/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  136
  58
  28
  50
  6
  5
  11
  1
  2/13
  143/29
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  138
  60
  28
  50
  6
  5
  11
  1
  4/27
  74/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  64
  34
  8
  22
  15
  2
  17
  1
  9/23
  9/2
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env ((□? (b co m)))))\""
  66
  35
  8
  23
  15
  2
  17
  1
  3/8
  158/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  69
  37
  8
  24
  16
  2
  18
  1
  5/13
  168/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  72
  39
  8
  25
  16
  2
  18
  1
  5/14
  178/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  53
  16
  15
  22
  0
  3
  3
  1
  0
  43/8
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  101
  39
  28
  34
  11
  5
  16
  1
  1/3
  193/39
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  123
  53
  32
  38
  15
  6
  21
  1
  15/43
  256/53
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  141
  62
  38
  41
  18
  9
  27
  1
  54/161
  152/31
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  18
  8
  2
  8
  1
  0
  1
  1
  1/7
  5
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b m)))))\""
  22
  10
  2
  10
  2
  0
  2
  1
  2/9
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  67
  35
  22
  10
  24
  8
  32
  1
  18/23
  37/7
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  58
  32
  18
  8
  23
  7
  30
  1
  53/66
  41/8
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  77
  40
  22
  15
  27
  8
  35
  1
  13/18
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  80
  42
  22
  16
  27
  8
  35
  1
  65/96
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  23
  12
  4
  7
  2
  1
  3
  1
  2/9
  31/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  120
  52
  44
  24
  24
  17
  41
  1
  11/26
  68/13
  ((8 8 0) (15/2 15/2 0) (8 8 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app win) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  123
  53
  44
  26
  24
  17
  41
  1
  11/27
  277/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  163
  84
  48
  31
  48
  18
  66
  1
  301/570
  69/14
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  218
  114
  66
  38
  69
  25
  94
  1
  268/435
  284/57
  ((5/2 5/2 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env ((□? (h)))))\""
  220
  115
  66
  39
  69
  25
  94
  1
  536/885
  573/115
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  224
  117
  66
  41
  69
  25
  94
  1
  536/915
  583/117
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  238
  124
  68
  46
  70
  25
  95
  1
  551/990
  309/62
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  7
  4
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env ((□? (oc₀ oc₁)))))\""
  9
  5
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  7
  0
  6
  1
  0
  1
  1
  1/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  62
  34
  8
  20
  14
  2
  16
  1
  2/5
  149/34
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  95
  53
  15
  27
  26
  3
  29
  1
  1/2
  243/53
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  98
  55
  15
  28
  26
  3
  29
  1
  8/17
  23/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  90
  45
  18
  27
  14
  4
  18
  1
  10/33
  197/45
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) bo that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  93
  47
  18
  28
  15
  4
  19
  1
  11/35
  207/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  94
  48
  18
  28
  15
  4
  19
  1
  11/36
  53/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  30
  13
  5
  12
  0
  1
  1
  1
  0
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  88
  44
  18
  26
  14
  4
  18
  1
  5/16
  48/11
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env ((□? (bo this-play that-play)))))\""
  11
  6
  0
  5
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  30
  16
  4
  10
  5
  1
  6
  1
  5/16
  73/16
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  44
  23
  7
  14
  5
  2
  7
  1
  5/21
  108/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  108
  52
  25
  31
  8
  5
  13
  1
  11/62
  131/26
  ((5 5 0) (9/2 9/2 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  112
  56
  25
  31
  9
  5
  14
  1
  13/66
  141/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  50
  30
  7
  13
  12
  3
  15
  1
  22/45
  53/10
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  124
  62
  27
  35
  13
  7
  20
  1
  103/465
  333/62
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ((□? (i)))))\""
  126
  63
  27
  36
  13
  7
  20
  1
  103/480
  338/63
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env ((□? (oc₀ oc₁)))))\""
  128
  64
  27
  37
  13
  7
  20
  1
  103/495
  343/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  130
  66
  27
  37
  13
  7
  20
  1
  103/525
  353/66
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  206
  120
  38
  48
  30
  8
  38
  1
  538/2025
  601/120
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  9
  5
  0
  4
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  61
  42
  10
  9
  25
  4
  29
  1
  121/168
  37/7
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  98
  58
  18
  22
  33
  6
  39
  1
  177/280
  147/29
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  101
  60
  18
  23
  34
  6
  40
  1
  92/147
  76/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env ((□? (r x)) (□? (f x)))))\""
  102
  61
  18
  23
  34
  6
  40
  1
  184/301
  309/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  157
  82
  40
  35
  41
  14
  55
  1
  2809/5250
  429/82
  ((7 7 0) (6 6 0) (7 7 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  160
  84
  40
  36
  42
  14
  56
  1
  1457/2730
  439/84
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  55
  32
  16
  7
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  132
  72
  30
  30
  36
  10
  46
  1
  191/375
  113/24
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? (bo this-play that-play)))))\""
  135
  74
  30
  31
  36
  10
  46
  1
  191/390
  349/74
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  206
  110
  52
  44
  50
  18
  68
  1
  11/25
  559/110
  ((9 9 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  208
  112
  52
  44
  51
  18
  69
  1
  137/310
  569/112
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env (() () ())))\""
  27
  17
  8
  2
  17
  8
  25
  1
  1
  88/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env (() () ())))\""
  30
  19
  9
  2
  19
  9
  28
  1
  1
  99/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env (() () ())))\""
  30
  19
  9
  2
  19
  9
  28
  1
  1
  99/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  30
  19
  9
  2
  19
  9
  28
  1
  1
  99/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  30
  19
  9
  2
  19
  9
  28
  1
  1
  99/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  36
  22
  12
  2
  22
  12
  34
  1
  1
  115/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env (())))\""
  39
  25
  12
  2
  25
  12
  37
  1
  1
  132/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env (() () ())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env (() () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  51
  33
  12
  6
  33
  12
  45
  1
  1
  179/33
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  51
  33
  12
  6
  33
  12
  45
  1
  1
  179/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env (() () ())))\""
  51
  33
  12
  6
  33
  12
  45
  1
  1
  179/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env (() () ())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env (() () ())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  100
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4) (env (() () () () ())))\""
  23
  13
  8
  2
  13
  8
  21
  1
  1
  67/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  app
  "\"'(eval (λ (n4) (-> (app p n1 n2 n3 n4) <-)) (env (() () () () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4) (env (() () () () ())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4) (env (() () () () ())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4) (env (() () () () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-)) (env (() () () () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  100
  49
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4) (env (() () () () ())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4) (env (() () () () ())))\""
  23
  13
  8
  2
  13
  8
  21
  1
  1
  67/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  23
  13
  8
  2
  13
  8
  21
  1
  1
  67/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-)) (env (() () () () ())))\""
  26
  15
  9
  2
  15
  9
  24
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4) (env (() () () () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  app
  "\"'(eval (λ (n4) (-> (app p n1 n2 n3 n4) <-)) (env (() () () () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4) (env (() () () () ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  35
  22
  11
  2
  22
  11
  33
  1
  1
  117/22
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  46
  32
  12
  2
  32
  12
  44
  1
  1
  87/16
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  46
  32
  12
  2
  32
  12
  44
  1
  1
  87/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  46
  32
  12
  2
  32
  12
  44
  1
  1
  87/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env (() () () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (app (app p n1) n2) (-> n3 <-)) (env (() () () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env (() () () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (app p n1) (-> n2 <-)) (env (() () () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval (app (-> (app (app p n1) n2) <-) n3) (env (() () () () () () () ())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (() () () () () () ())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1) (env (() () () () () () () ())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env (() () () () () () ())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env (() () () () () () () ())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (() () () () () () ())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval (app (-> (app p n1) <-) n2) (env (() () () () () () () ())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env (() () () () () () () ())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (() () () () () () ())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (() () () () () () ())))\""
  139
  95
  26
  18
  95
  26
  121
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env (() () () () () () () ())))\""
  141
  96
  27
  18
  96
  27
  123
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env (() () () () () () () ())))\""
  141
  96
  27
  18
  96
  27
  123
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  141
  96
  27
  18
  96
  27
  123
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (() () () () () () ())))\""
  141
  96
  27
  18
  96
  27
  123
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  141
  96
  27
  18
  96
  27
  123
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (() () () () () () ())))\""
  141
  96
  27
  18
  96
  27
  123
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  141
  96
  27
  18
  96
  27
  123
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env (() () () () () () () ())))\""
  143
  97
  28
  18
  97
  28
  125
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-)) (env (() () () () () () () ())))\""
  143
  97
  28
  18
  97
  28
  125
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (() () () () () () ())))\""
  143
  97
  28
  18
  97
  28
  125
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  143
  97
  28
  18
  97
  28
  125
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (() () () () () () ())))\""
  143
  97
  28
  18
  97
  28
  125
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (() () () () () () ())))\""
  143
  97
  28
  18
  97
  28
  125
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  143
  97
  28
  18
  97
  28
  125
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  143
  97
  28
  18
  97
  28
  125
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  143
  97
  28
  18
  97
  28
  125
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env (() () () () () () () ())))\""
  143
  97
  28
  18
  97
  28
  125
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (() () () () () () ())))\""
  143
  97
  28
  18
  97
  28
  125
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  143
  97
  28
  18
  97
  28
  125
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  143
  97
  28
  18
  97
  28
  125
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (() () () () () () ())))\""
  143
  97
  28
  18
  97
  28
  125
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (() () () () () () ())))\""
  143
  97
  28
  18
  97
  28
  125
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  143
  97
  28
  18
  97
  28
  125
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (() () () () () () ())))\""
  143
  97
  28
  18
  97
  28
  125
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env (() () () () () () ())))\""
  143
  97
  28
  18
  97
  28
  125
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  143
  97
  28
  18
  97
  28
  125
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  143
  97
  28
  18
  97
  28
  125
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (() () () () () () ())))\""
  143
  97
  28
  18
  97
  28
  125
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (() () () () () () ())))\""
  143
  97
  28
  18
  97
  28
  125
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env (() () () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  135
  93
  25
  17
  93
  25
  118
  1
  1
  517/93
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  135
  93
  25
  17
  93
  25
  118
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env (() () () () () () () ())))\""
  135
  93
  25
  17
  93
  25
  118
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  135
  93
  25
  17
  93
  25
  118
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval (app (-> (app p n1) <-) n2) (env (() () () () () () () ())))\""
  135
  93
  25
  17
  93
  25
  118
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env (() () () () () () () ())))\""
  137
  94
  26
  17
  94
  26
  120
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (() () () () () () ())))\""
  137
  94
  26
  17
  94
  26
  120
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env (() () () () () () () ())))\""
  137
  94
  26
  17
  94
  26
  120
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  137
  94
  26
  17
  94
  26
  120
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  137
  94
  26
  17
  94
  26
  120
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  137
  94
  26
  17
  94
  26
  120
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  140
  96
  26
  18
  96
  26
  122
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (() () () () () () ())))\""
  140
  96
  26
  18
  96
  26
  122
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (() () () () () () ())))\""
  140
  96
  26
  18
  96
  26
  122
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (() () () () () () ())))\""
  140
  96
  26
  18
  96
  26
  122
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  140
  96
  26
  18
  96
  26
  122
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env (() () () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env (() () () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1) (env (() () () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env (() () () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env (() () () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-)) (env (() () () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval (app (-> (app (app p n1) n2) <-) n3) (env (() () () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (app (app p n1) n2) (-> n3 <-)) (env (() () () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env (() () () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (app p n1) (-> n2 <-)) (env (() () () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env (() () () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((7 7 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  117
  85
  21
  11
  85
  21
  106
  1
  1
  95/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  117
  85
  21
  11
  85
  21
  106
  1
  1
  95/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  117
  85
  21
  11
  85
  21
  106
  1
  1
  95/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  118
  86
  21
  11
  86
  21
  107
  1
  1
  240/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  118
  86
  21
  11
  86
  21
  107
  1
  1
  240/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  118
  86
  21
  11
  86
  21
  107
  1
  1
  240/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  118
  86
  21
  11
  86
  21
  107
  1
  1
  240/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  118
  86
  21
  11
  86
  21
  107
  1
  1
  240/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  118
  86
  21
  11
  86
  21
  107
  1
  1
  240/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  118
  86
  21
  11
  86
  21
  107
  1
  1
  240/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  118
  86
  21
  11
  86
  21
  107
  1
  1
  240/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  118
  86
  21
  11
  86
  21
  107
  1
  1
  240/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env (())))\""
  119
  87
  21
  11
  87
  21
  108
  1
  1
  485/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  119
  87
  21
  11
  87
  21
  108
  1
  1
  485/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  119
  87
  21
  11
  87
  21
  108
  1
  1
  485/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  119
  87
  21
  11
  87
  21
  108
  1
  1
  485/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  119
  87
  21
  11
  87
  21
  108
  1
  1
  485/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  119
  87
  21
  11
  87
  21
  108
  1
  1
  485/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  119
  87
  21
  11
  87
  21
  108
  1
  1
  485/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  119
  87
  21
  11
  87
  21
  108
  1
  1
  485/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  119
  87
  21
  11
  87
  21
  108
  1
  1
  485/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  121
  89
  21
  11
  89
  21
  110
  1
  1
  495/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  121
  89
  21
  11
  89
  21
  110
  1
  1
  495/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  121
  89
  21
  11
  89
  21
  110
  1
  1
  495/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env (())))\""
  121
  89
  21
  11
  89
  21
  110
  1
  1
  495/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  121
  89
  21
  11
  89
  21
  110
  1
  1
  495/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  121
  89
  21
  11
  89
  21
  110
  1
  1
  495/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  121
  89
  21
  11
  89
  21
  110
  1
  1
  495/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  121
  89
  21
  11
  89
  21
  110
  1
  1
  495/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  124
  91
  21
  12
  91
  21
  112
  1
  1
  39/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (())))\""
  124
  91
  21
  12
  91
  21
  112
  1
  1
  39/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  126
  92
  22
  12
  92
  22
  114
  1
  1
  513/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  126
  92
  22
  12
  92
  22
  114
  1
  1
  513/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  126
  92
  22
  12
  92
  22
  114
  1
  1
  513/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  127
  93
  22
  12
  93
  22
  115
  1
  1
  518/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  127
  93
  22
  12
  93
  22
  115
  1
  1
  518/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  127
  93
  22
  12
  93
  22
  115
  1
  1
  518/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  127
  93
  22
  12
  93
  22
  115
  1
  1
  518/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  127
  93
  22
  12
  93
  22
  115
  1
  1
  518/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  127
  93
  22
  12
  93
  22
  115
  1
  1
  518/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  127
  93
  22
  12
  93
  22
  115
  1
  1
  518/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  127
  93
  22
  12
  93
  22
  115
  1
  1
  518/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  129
  94
  23
  12
  94
  23
  117
  1
  1
  262/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (())))\""
  129
  94
  23
  12
  94
  23
  117
  1
  1
  262/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  129
  94
  23
  12
  94
  23
  117
  1
  1
  262/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  129
  94
  23
  12
  94
  23
  117
  1
  1
  262/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  131
  95
  24
  12
  95
  24
  119
  1
  1
  106/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  132
  96
  24
  12
  96
  24
  120
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  132
  96
  24
  12
  96
  24
  120
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  132
  96
  24
  12
  96
  24
  120
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  135
  99
  24
  12
  99
  24
  123
  1
  1
  50/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  135
  99
  24
  12
  99
  24
  123
  1
  1
  50/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  135
  99
  24
  12
  99
  24
  123
  1
  1
  50/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  135
  99
  24
  12
  99
  24
  123
  1
  1
  50/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  135
  99
  24
  12
  99
  24
  123
  1
  1
  50/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  135
  99
  24
  12
  99
  24
  123
  1
  1
  50/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  135
  99
  24
  12
  99
  24
  123
  1
  1
  50/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  135
  99
  24
  12
  99
  24
  123
  1
  1
  50/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  135
  99
  24
  12
  99
  24
  123
  1
  1
  50/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  135
  99
  24
  12
  99
  24
  123
  1
  1
  50/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  135
  99
  24
  12
  99
  24
  123
  1
  1
  50/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  135
  99
  24
  12
  99
  24
  123
  1
  1
  50/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  135
  99
  24
  12
  99
  24
  123
  1
  1
  50/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  21
  13
  6
  2
  13
  6
  19
  1
  1
  67/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  30
  21
  7
  2
  21
  7
  28
  1
  1
  110/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  33
  23
  8
  2
  23
  8
  31
  1
  1
  122/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env (())))\""
  34
  24
  8
  2
  24
  8
  32
  1
  1
  127/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  34
  24
  8
  2
  24
  8
  32
  1
  1
  127/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  34
  24
  8
  2
  24
  8
  32
  1
  1
  127/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  114
  84
  19
  11
  84
  19
  103
  1
  1
  118/21
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  114
  84
  19
  11
  84
  19
  103
  1
  1
  118/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  114
  84
  19
  11
  84
  19
  103
  1
  1
  118/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (())))\""
  114
  84
  19
  11
  84
  19
  103
  1
  1
  118/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  116
  85
  20
  11
  85
  20
  105
  1
  1
  478/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  121
  89
  20
  12
  89
  20
  109
  1
  1
  500/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  121
  89
  20
  12
  89
  20
  109
  1
  1
  500/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  123
  91
  20
  12
  91
  20
  111
  1
  1
  510/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  123
  91
  20
  12
  91
  20
  111
  1
  1
  510/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  123
  91
  20
  12
  91
  20
  111
  1
  1
  510/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  125
  93
  20
  12
  93
  20
  113
  1
  1
  520/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  125
  93
  20
  12
  93
  20
  113
  1
  1
  520/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  125
  93
  20
  12
  93
  20
  113
  1
  1
  520/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  125
  93
  20
  12
  93
  20
  113
  1
  1
  520/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  125
  93
  20
  12
  93
  20
  113
  1
  1
  520/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  125
  93
  20
  12
  93
  20
  113
  1
  1
  520/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env (())))\""
  125
  93
  20
  12
  93
  20
  113
  1
  1
  520/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  125
  93
  20
  12
  93
  20
  113
  1
  1
  520/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  125
  93
  20
  12
  93
  20
  113
  1
  1
  520/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  125
  93
  20
  12
  93
  20
  113
  1
  1
  520/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  125
  93
  20
  12
  93
  20
  113
  1
  1
  520/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  125
  93
  20
  12
  93
  20
  113
  1
  1
  520/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  125
  93
  20
  12
  93
  20
  113
  1
  1
  520/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  125
  93
  20
  12
  93
  20
  113
  1
  1
  520/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  126
  94
  20
  12
  94
  20
  114
  1
  1
  525/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  126
  94
  20
  12
  94
  20
  114
  1
  1
  525/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  126
  94
  20
  12
  94
  20
  114
  1
  1
  525/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  126
  94
  20
  12
  94
  20
  114
  1
  1
  525/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  128
  96
  20
  12
  96
  20
  116
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  128
  96
  20
  12
  96
  20
  116
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  128
  96
  20
  12
  96
  20
  116
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  128
  96
  20
  12
  96
  20
  116
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  128
  96
  20
  12
  96
  20
  116
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  128
  96
  20
  12
  96
  20
  116
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  134
  99
  23
  12
  99
  23
  122
  1
  1
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  135
  100
  23
  12
  100
  23
  123
  1
  1
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  135
  100
  23
  12
  100
  23
  123
  1
  1
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  135
  100
  23
  12
  100
  23
  123
  1
  1
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  135
  100
  23
  12
  100
  23
  123
  1
  1
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  135
  100
  23
  12
  100
  23
  123
  1
  1
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  135
  100
  23
  12
  100
  23
  123
  1
  1
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  135
  100
  23
  12
  100
  23
  123
  1
  1
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  135
  100
  23
  12
  100
  23
  123
  1
  1
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (())))\""
  135
  100
  23
  12
  100
  23
  123
  1
  1
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  137
  101
  24
  12
  101
  24
  125
  1
  1
  560/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  137
  101
  24
  12
  101
  24
  125
  1
  1
  560/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  137
  101
  24
  12
  101
  24
  125
  1
  1
  560/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  137
  101
  24
  12
  101
  24
  125
  1
  1
  560/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  85
  59
  24
  2
  59
  24
  83
  1
  1
  327/59
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  91
  64
  24
  3
  64
  24
  88
  1
  1
  11/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env (())))\""
  93
  66
  24
  3
  66
  24
  90
  1
  1
  181/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env (())))\""
  598
  411
  136
  51
  411
  136
  547
  1
  1
  2290/411
  ((115/2 115/2 1) (115/2 115/2 1) (115/2 115/2 1)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  598
  411
  136
  51
  411
  136
  547
  1
  1
  2290/411
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env (())))\""
  598
  411
  136
  51
  411
  136
  547
  1
  1
  2290/411
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env (())))\""
  598
  411
  136
  51
  411
  136
  547
  1
  1
  2290/411
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  598
  411
  136
  51
  411
  136
  547
  1
  1
  2290/411
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  598
  411
  136
  51
  411
  136
  547
  1
  1
  2290/411
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (app X) (-> (app make-ai-action (app X)) <-)) (env (())))\""
  598
  411
  136
  51
  411
  136
  547
  1
  1
  2290/411
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  600
  413
  136
  51
  413
  136
  549
  1
  1
  2299/413
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  600
  413
  136
  51
  413
  136
  549
  1
  1
  2299/413
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> move-horizon-v <-) (move _ move-horizon-x) _) (env (())))\""
  600
  413
  136
  51
  413
  136
  549
  1
  1
  2299/413
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  601
  414
  136
  51
  414
  136
  550
  1
  1
  128/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app play-turn empty-board (-> player-one <-) player-two) (env (())))\""
  601
  414
  136
  51
  414
  136
  550
  1
  1
  128/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  601
  414
  136
  51
  414
  136
  550
  1
  1
  128/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env (())))\""
  601
  414
  136
  51
  414
  136
  550
  1
  1
  128/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  601
  414
  136
  51
  414
  136
  550
  1
  1
  128/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env (())))\""
  603
  416
  136
  51
  416
  136
  552
  1
  1
  89/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  605
  418
  136
  51
  418
  136
  554
  1
  1
  1162/209
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  605
  418
  136
  51
  418
  136
  554
  1
  1
  1162/209
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  605
  418
  136
  51
  418
  136
  554
  1
  1
  1162/209
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env (())))\""
  605
  418
  136
  51
  418
  136
  554
  1
  1
  1162/209
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (let (_) (-> (match this-play ...) <-)) (env (())))\""
  610
  423
  136
  51
  423
  136
  559
  1
  1
  2344/423
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env (() ())))\""
  610
  423
  136
  51
  423
  136
  559
  1
  1
  2344/423
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env (())))\""
  611
  424
  136
  51
  424
  136
  560
  1
  1
  1175/212
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  611
  424
  136
  51
  424
  136
  560
  1
  1
  1175/212
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env (() () ())))\""
  611
  424
  136
  51
  424
  136
  560
  1
  1
  1175/212
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  611
  424
  136
  51
  424
  136
  560
  1
  1
  1175/212
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  611
  424
  136
  51
  424
  136
  560
  1
  1
  1175/212
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env (())))\""
  615
  426
  138
  51
  426
  138
  564
  1
  1
  393/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  615
  426
  138
  51
  426
  138
  564
  1
  1
  393/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env (() ())))\""
  622
  429
  141
  52
  429
  141
  570
  1
  1
  2377/429
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  622
  429
  141
  52
  429
  141
  570
  1
  1
  2377/429
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env (())))\""
  622
  429
  141
  52
  429
  141
  570
  1
  1
  2377/429
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  622
  429
  141
  52
  429
  141
  570
  1
  1
  2377/429
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env (())))\""
  622
  429
  141
  52
  429
  141
  570
  1
  1
  2377/429
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env (())))\""
  624
  431
  141
  52
  431
  141
  572
  1
  1
  2387/431
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  624
  431
  141
  52
  431
  141
  572
  1
  1
  2387/431
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env (() ())))\""
  626
  433
  141
  52
  433
  141
  574
  1
  1
  2397/433
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app minimax bo (-> that-mark <-) this-mark) (env (() ())))\""
  626
  433
  141
  52
  433
  141
  574
  1
  1
  2397/433
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  626
  433
  141
  52
  433
  141
  574
  1
  1
  2397/433
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env (())))\""
  629
  435
  141
  53
  435
  141
  576
  1
  1
  481/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  629
  435
  141
  53
  435
  141
  576
  1
  1
  481/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env (())))\""
  630
  436
  141
  53
  436
  141
  577
  1
  1
  1205/218
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env (())))\""
  630
  436
  141
  53
  436
  141
  577
  1
  1
  1205/218
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env (())))\""
  631
  437
  141
  53
  437
  141
  578
  1
  1
  105/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  631
  437
  141
  53
  437
  141
  578
  1
  1
  105/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app play-turn (-> empty-board <-) player-one player-two) (env (())))\""
  631
  437
  141
  53
  437
  141
  578
  1
  1
  105/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  631
  437
  141
  53
  437
  141
  578
  1
  1
  105/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  631
  437
  141
  53
  437
  141
  578
  1
  1
  105/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  631
  437
  141
  53
  437
  141
  578
  1
  1
  105/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  631
  437
  141
  53
  437
  141
  578
  1
  1
  105/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  631
  437
  141
  53
  437
  141
  578
  1
  1
  105/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env (())))\""
  631
  437
  141
  53
  437
  141
  578
  1
  1
  105/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  631
  437
  141
  53
  437
  141
  578
  1
  1
  105/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  631
  437
  141
  53
  437
  141
  578
  1
  1
  105/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  632
  438
  141
  53
  438
  141
  579
  1
  1
  1210/219
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env (())))\""
  632
  438
  141
  53
  438
  141
  579
  1
  1
  1210/219
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (let (_) (-> (app display \"Cat's game.\\n\") <-)) (env (())))\""
  635
  441
  141
  53
  441
  141
  582
  1
  1
  2434/441
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  640
  445
  141
  54
  445
  141
  586
  1
  1
  2451/445
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env (())))\""
  640
  445
  141
  54
  445
  141
  586
  1
  1
  2451/445
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  640
  445
  141
  54
  445
  141
  586
  1
  1
  2451/445
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env (())))\""
  641
  446
  141
  54
  446
  141
  587
  1
  1
  1228/223
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env (() ())))\""
  641
  446
  141
  54
  446
  141
  587
  1
  1
  1228/223
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env (() () ())))\""
  641
  446
  141
  54
  446
  141
  587
  1
  1
  1228/223
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env (())))\""
  642
  447
  141
  54
  447
  141
  588
  1
  1
  2461/447
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env (() ())))\""
  642
  447
  141
  54
  447
  141
  588
  1
  1
  2461/447
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  642
  447
  141
  54
  447
  141
  588
  1
  1
  2461/447
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env (())))\""
  643
  448
  141
  54
  448
  141
  589
  1
  1
  1233/224
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  649
  450
  144
  55
  450
  144
  594
  1
  1
  248/45
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app f (app coord r c) (-> x <-)) (env (() () ())))\""
  649
  450
  144
  55
  450
  144
  594
  1
  1
  248/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  649
  450
  144
  55
  450
  144
  594
  1
  1
  248/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env (())))\""
  649
  450
  144
  55
  450
  144
  594
  1
  1
  248/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (() ())))\""
  649
  450
  144
  55
  450
  144
  594
  1
  1
  248/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  649
  450
  144
  55
  450
  144
  594
  1
  1
  248/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app minimax (-> bo <-) that-mark this-mark) (env (() ())))\""
  649
  450
  144
  55
  450
  144
  594
  1
  1
  248/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env (())))\""
  650
  451
  144
  55
  451
  144
  595
  1
  1
  2484/451
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (() ())))\""
  650
  451
  144
  55
  451
  144
  595
  1
  1
  2484/451
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env (())))\""
  650
  451
  144
  55
  451
  144
  595
  1
  1
  2484/451
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  650
  451
  144
  55
  451
  144
  595
  1
  1
  2484/451
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  650
  451
  144
  55
  451
  144
  595
  1
  1
  2484/451
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  650
  451
  144
  55
  451
  144
  595
  1
  1
  2484/451
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env (())))\""
  650
  451
  144
  55
  451
  144
  595
  1
  1
  2484/451
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  651
  452
  144
  55
  452
  144
  596
  1
  1
  622/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match some-v-v ((some some-v-x) (-> some-v-x <-)) _) (env (())))\""
  651
  452
  144
  55
  452
  144
  596
  1
  1
  622/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  651
  452
  144
  55
  452
  144
  596
  1
  1
  622/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co mark bo) (env (())))\""
  651
  452
  144
  55
  452
  144
  596
  1
  1
  622/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app marked? (-> (app b (app coord r c)) <-)) (env (() () ())))\""
  651
  452
  144
  55
  452
  144
  596
  1
  1
  622/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  651
  452
  144
  55
  452
  144
  596
  1
  1
  622/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  651
  452
  144
  55
  452
  144
  596
  1
  1
  622/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  651
  452
  144
  55
  452
  144
  596
  1
  1
  622/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  651
  452
  144
  55
  452
  144
  596
  1
  1
  622/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env (() ())))\""
  651
  452
  144
  55
  452
  144
  596
  1
  1
  622/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env (() ())))\""
  653
  454
  144
  55
  454
  144
  598
  1
  1
  1249/227
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env (())))\""
  653
  454
  144
  55
  454
  144
  598
  1
  1
  1249/227
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app coord r c) x) (env (() () ())))\""
  653
  454
  144
  55
  454
  144
  598
  1
  1
  1249/227
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (() ())))\""
  654
  455
  144
  55
  455
  144
  599
  1
  1
  2503/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env (())))\""
  654
  455
  144
  55
  455
  144
  599
  1
  1
  2503/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) bo that-play this-play) (env (())))\""
  654
  455
  144
  55
  455
  144
  599
  1
  1
  2503/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env (() ())))\""
  654
  455
  144
  55
  455
  144
  599
  1
  1
  2503/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (c x) (-> (app f (app coord r c) x) <-)) (env (() () ())))\""
  654
  455
  144
  55
  455
  144
  599
  1
  1
  2503/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env (() ())))\""
  654
  455
  144
  55
  455
  144
  599
  1
  1
  2503/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env (())))\""
  654
  455
  144
  55
  455
  144
  599
  1
  1
  2503/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  654
  455
  144
  55
  455
  144
  599
  1
  1
  2503/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  654
  455
  144
  55
  455
  144
  599
  1
  1
  2503/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  654
  455
  144
  55
  455
  144
  599
  1
  1
  2503/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env (())))\""
  654
  455
  144
  55
  455
  144
  599
  1
  1
  2503/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord rc rc) m) (env (() ())))\""
  654
  455
  144
  55
  455
  144
  599
  1
  1
  2503/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  654
  455
  144
  55
  455
  144
  599
  1
  1
  2503/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env (())))\""
  658
  459
  144
  55
  459
  144
  603
  1
  1
  841/153
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env (())))\""
  658
  459
  144
  55
  459
  144
  603
  1
  1
  841/153
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env (() ())))\""
  658
  459
  144
  55
  459
  144
  603
  1
  1
  841/153
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  662
  462
  144
  56
  462
  144
  606
  1
  1
  2537/462
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app f (-> (app coord r c) <-) x) (env (() () ())))\""
  662
  462
  144
  56
  462
  144
  606
  1
  1
  2537/462
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  662
  462
  144
  56
  462
  144
  606
  1
  1
  2537/462
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  662
  462
  144
  56
  462
  144
  606
  1
  1
  2537/462
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  662
  462
  144
  56
  462
  144
  606
  1
  1
  2537/462
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval (match (app full? bo) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  663
  463
  144
  56
  463
  144
  607
  1
  1
  2542/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env (() ())))\""
  663
  463
  144
  56
  463
  144
  607
  1
  1
  2542/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env (())))\""
  663
  463
  144
  56
  463
  144
  607
  1
  1
  2542/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (app b co) ((blank) (-> (app #f) <-)) (marked m*)) (env (())))\""
  663
  463
  144
  56
  463
  144
  607
  1
  1
  2542/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  663
  463
  144
  56
  463
  144
  607
  1
  1
  2542/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env (() ())))\""
  663
  463
  144
  56
  463
  144
  607
  1
  1
  2542/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env (())))\""
  663
  463
  144
  56
  463
  144
  607
  1
  1
  2542/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env (())))\""
  663
  463
  144
  56
  463
  144
  607
  1
  1
  2542/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-)) (env (() ())))\""
  663
  463
  144
  56
  463
  144
  607
  1
  1
  2542/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-horizon\") (env (())))\""
  663
  463
  144
  56
  463
  144
  607
  1
  1
  2542/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env (())))\""
  663
  463
  144
  56
  463
  144
  607
  1
  1
  2542/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  665
  464
  145
  56
  464
  145
  609
  1
  1
  2549/464
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env (() ())))\""
  665
  464
  145
  56
  464
  145
  609
  1
  1
  2549/464
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (())))\""
  665
  464
  145
  56
  464
  145
  609
  1
  1
  2549/464
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env (())))\""
  666
  465
  145
  56
  465
  145
  610
  1
  1
  851/155
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-)) (env (() ())))\""
  666
  465
  145
  56
  465
  145
  610
  1
  1
  851/155
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  666
  465
  145
  56
  465
  145
  610
  1
  1
  851/155
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  666
  465
  145
  56
  465
  145
  610
  1
  1
  851/155
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  666
  465
  145
  56
  465
  145
  610
  1
  1
  851/155
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  666
  465
  145
  56
  465
  145
  610
  1
  1
  851/155
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  666
  465
  145
  56
  465
  145
  610
  1
  1
  851/155
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env (())))\""
  666
  465
  145
  56
  465
  145
  610
  1
  1
  851/155
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  667
  466
  145
  56
  466
  145
  611
  1
  1
  1279/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env (())))\""
  667
  466
  145
  56
  466
  145
  611
  1
  1
  1279/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (let (bo) (-> (match (app wins? bo mark) ...) <-)) (env (())))\""
  667
  466
  145
  56
  466
  145
  611
  1
  1
  1279/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  667
  466
  145
  56
  466
  145
  611
  1
  1
  1279/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env (())))\""
  667
  466
  145
  56
  466
  145
  611
  1
  1
  1279/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  667
  466
  145
  56
  466
  145
  611
  1
  1
  1279/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) that-mark this-mark) (env (() ())))\""
  667
  466
  145
  56
  466
  145
  611
  1
  1
  1279/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  669
  468
  145
  56
  468
  145
  613
  1
  1
  643/117
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env (())))\""
  669
  468
  145
  56
  468
  145
  613
  1
  1
  643/117
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env (())))\""
  670
  469
  145
  56
  469
  145
  614
  1
  1
  2577/469
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  670
  469
  145
  56
  469
  145
  614
  1
  1
  2577/469
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  670
  469
  145
  56
  469
  145
  614
  1
  1
  2577/469
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  670
  469
  145
  56
  469
  145
  614
  1
  1
  2577/469
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env (())))\""
  670
  469
  145
  56
  469
  145
  614
  1
  1
  2577/469
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env (() ())))\""
  670
  469
  145
  56
  469
  145
  614
  1
  1
  2577/469
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env (() ())))\""
  670
  469
  145
  56
  469
  145
  614
  1
  1
  2577/469
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁)) (env (())))\""
  671
  470
  145
  56
  470
  145
  615
  1
  1
  1291/235
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  671
  470
  145
  56
  470
  145
  615
  1
  1
  1291/235
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  671
  470
  145
  56
  470
  145
  615
  1
  1
  1291/235
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  671
  470
  145
  56
  470
  145
  615
  1
  1
  1291/235
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  671
  470
  145
  56
  470
  145
  615
  1
  1
  1291/235
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  671
  470
  145
  56
  470
  145
  615
  1
  1
  1291/235
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env (())))\""
  671
  470
  145
  56
  470
  145
  615
  1
  1
  1291/235
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁)) (env (())))\""
  673
  472
  145
  56
  472
  145
  617
  1
  1
  1295/236
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env (())))\""
  674
  473
  145
  56
  473
  145
  618
  1
  1
  2594/473
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env (())))\""
  675
  474
  145
  56
  474
  145
  619
  1
  1
  2599/474
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  676
  475
  145
  56
  475
  145
  620
  1
  1
  2604/475
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  676
  475
  145
  56
  475
  145
  620
  1
  1
  2604/475
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  676
  475
  145
  56
  475
  145
  620
  1
  1
  2604/475
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) mark bo) (env (())))\""
  676
  475
  145
  56
  475
  145
  620
  1
  1
  2604/475
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  681
  478
  145
  58
  478
  145
  623
  1
  1
  1308/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  681
  478
  145
  58
  478
  145
  623
  1
  1
  1308/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  681
  478
  145
  58
  478
  145
  623
  1
  1
  1308/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  681
  478
  145
  58
  478
  145
  623
  1
  1
  1308/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  681
  478
  145
  58
  478
  145
  623
  1
  1
  1308/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app lose) 0) (env (() ())))\""
  681
  478
  145
  58
  478
  145
  623
  1
  1
  1308/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  682
  479
  145
  58
  479
  145
  624
  1
  1
  2621/479
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (() ())))\""
  682
  479
  145
  58
  479
  145
  624
  1
  1
  2621/479
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  682
  479
  145
  58
  479
  145
  624
  1
  1
  2621/479
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app play-turn empty-board player-one (-> player-two <-)) (env (())))\""
  682
  479
  145
  58
  479
  145
  624
  1
  1
  2621/479
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env (())))\""
  682
  479
  145
  58
  479
  145
  624
  1
  1
  2621/479
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval (λ (bo this-play that-play) (-> (let (_) ...) <-)) (env (())))\""
  682
  479
  145
  58
  479
  145
  624
  1
  1
  2621/479
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  682
  479
  145
  58
  479
  145
  624
  1
  1
  2621/479
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (c) (-> (app marked? (app b (app coord r c))) <-)) (env (() () ())))\""
  682
  479
  145
  58
  479
  145
  624
  1
  1
  2621/479
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  682
  479
  145
  58
  479
  145
  624
  1
  1
  2621/479
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  684
  480
  146
  58
  480
  146
  626
  1
  1
  219/40
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  684
  480
  146
  58
  480
  146
  626
  1
  1
  219/40
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env (() ())))\""
  684
  480
  146
  58
  480
  146
  626
  1
  1
  219/40
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  685
  481
  146
  58
  481
  146
  627
  1
  1
  2633/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env (())))\""
  685
  481
  146
  58
  481
  146
  627
  1
  1
  2633/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app minimax bo that-mark (-> this-mark <-)) (env (() ())))\""
  685
  481
  146
  58
  481
  146
  627
  1
  1
  2633/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env (())))\""
  686
  482
  146
  58
  482
  146
  628
  1
  1
  2637/482
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env (() ())))\""
  686
  482
  146
  58
  482
  146
  628
  1
  1
  2637/482
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  686
  482
  146
  58
  482
  146
  628
  1
  1
  2637/482
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  686
  482
  146
  58
  482
  146
  628
  1
  1
  2637/482
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma))) (env (() ())))\""
  686
  482
  146
  58
  482
  146
  628
  1
  1
  2637/482
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (move-coord-v) (-> (match move-coord-v ...) <-)) (env (())))\""
  686
  482
  146
  58
  482
  146
  628
  1
  1
  2637/482
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env (())))\""
  688
  484
  146
  58
  484
  146
  630
  1
  1
  2647/484
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  688
  484
  146
  58
  484
  146
  630
  1
  1
  2647/484
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env (() ())))\""
  690
  485
  147
  58
  485
  147
  632
  1
  1
  2654/485
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord rc rc) (-> m <-)) (env (() ())))\""
  690
  485
  147
  58
  485
  147
  632
  1
  1
  2654/485
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env (())))\""
  690
  485
  147
  58
  485
  147
  632
  1
  1
  2654/485
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env (())))\""
  690
  485
  147
  58
  485
  147
  632
  1
  1
  2654/485
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (())))\""
  690
  485
  147
  58
  485
  147
  632
  1
  1
  2654/485
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (c) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  690
  485
  147
  58
  485
  147
  632
  1
  1
  2654/485
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  690
  485
  147
  58
  485
  147
  632
  1
  1
  2654/485
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  690
  485
  147
  58
  485
  147
  632
  1
  1
  2654/485
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app play-turn bo that-play (-> this-play <-)) (env (())))\""
  690
  485
  147
  58
  485
  147
  632
  1
  1
  2654/485
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  690
  485
  147
  58
  485
  147
  632
  1
  1
  2654/485
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env (() ())))\""
  690
  485
  147
  58
  485
  147
  632
  1
  1
  2654/485
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  690
  485
  147
  58
  485
  147
  632
  1
  1
  2654/485
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env (())))\""
  690
  485
  147
  58
  485
  147
  632
  1
  1
  2654/485
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  690
  485
  147
  58
  485
  147
  632
  1
  1
  2654/485
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  690
  485
  147
  58
  485
  147
  632
  1
  1
  2654/485
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  692
  487
  147
  58
  487
  147
  634
  1
  1
  2664/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  letrec
  "\"'(eval (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...) (env (())))\""
  692
  487
  147
  58
  487
  147
  634
  1
  1
  2664/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  693
  488
  147
  58
  488
  147
  635
  1
  1
  2669/488
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env (() ())))\""
  693
  488
  147
  58
  488
  147
  635
  1
  1
  2669/488
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env (())))\""
  695
  490
  147
  58
  490
  147
  637
  1
  1
  2679/490
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  695
  490
  147
  58
  490
  147
  637
  1
  1
  2679/490
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  695
  490
  147
  58
  490
  147
  637
  1
  1
  2679/490
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  695
  490
  147
  58
  490
  147
  637
  1
  1
  2679/490
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env (())))\""
  695
  490
  147
  58
  490
  147
  637
  1
  1
  2679/490
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env (())))\""
  696
  491
  147
  58
  491
  147
  638
  1
  1
  2684/491
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose)) (env (())))\""
  698
  493
  147
  58
  493
  147
  640
  1
  1
  2694/493
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  698
  493
  147
  58
  493
  147
  640
  1
  1
  2694/493
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env (())))\""
  702
  497
  147
  58
  497
  147
  644
  1
  1
  2710/497
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  702
  497
  147
  58
  497
  147
  644
  1
  1
  2710/497
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env (())))\""
  702
  497
  147
  58
  497
  147
  644
  1
  1
  2710/497
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env (())))\""
  702
  497
  147
  58
  497
  147
  644
  1
  1
  2710/497
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  702
  497
  147
  58
  497
  147
  644
  1
  1
  2710/497
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  702
  497
  147
  58
  497
  147
  644
  1
  1
  2710/497
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  702
  497
  147
  58
  497
  147
  644
  1
  1
  2710/497
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  702
  497
  147
  58
  497
  147
  644
  1
  1
  2710/497
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env (())))\""
  703
  498
  147
  58
  498
  147
  645
  1
  1
  905/166
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs)) (env (())))\""
  705
  500
  147
  58
  500
  147
  647
  1
  1
  109/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (move-horizon-v) (-> (match move-horizon-v ...) <-)) (env (())))\""
  705
  500
  147
  58
  500
  147
  647
  1
  1
  109/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  705
  500
  147
  58
  500
  147
  647
  1
  1
  109/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  705
  500
  147
  58
  500
  147
  647
  1
  1
  109/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env (())))\""
  705
  500
  147
  58
  500
  147
  647
  1
  1
  109/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> this-play <-) (player mark action)) (env (())))\""
  705
  500
  147
  58
  500
  147
  647
  1
  1
  109/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  705
  500
  147
  58
  500
  147
  647
  1
  1
  109/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> mark <-) bo) (env (())))\""
  705
  500
  147
  58
  500
  147
  647
  1
  1
  109/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app play-turn bo (-> that-play <-) this-play) (env (())))\""
  705
  500
  147
  58
  500
  147
  647
  1
  1
  109/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env (() ())))\""
  705
  500
  147
  58
  500
  147
  647
  1
  1
  109/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  705
  500
  147
  58
  500
  147
  647
  1
  1
  109/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  705
  500
  147
  58
  500
  147
  647
  1
  1
  109/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env (())))\""
  705
  500
  147
  58
  500
  147
  647
  1
  1
  109/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env (())))\""
  706
  501
  147
  58
  501
  147
  648
  1
  1
  910/167
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env (())))\""
  706
  501
  147
  58
  501
  147
  648
  1
  1
  910/167
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env (())))\""
  706
  501
  147
  58
  501
  147
  648
  1
  1
  910/167
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env (())))\""
  706
  501
  147
  58
  501
  147
  648
  1
  1
  910/167
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  706
  501
  147
  58
  501
  147
  648
  1
  1
  910/167
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  706
  501
  147
  58
  501
  147
  648
  1
  1
  910/167
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env (())))\""
  706
  501
  147
  58
  501
  147
  648
  1
  1
  910/167
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  706
  501
  147
  58
  501
  147
  648
  1
  1
  910/167
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env (() ())))\""
  706
  501
  147
  58
  501
  147
  648
  1
  1
  910/167
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env (() ())))\""
  706
  501
  147
  58
  501
  147
  648
  1
  1
  910/167
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (bo) (-> (app error 'human-action \"not implemented\") <-)) (env (())))\""
  706
  501
  147
  58
  501
  147
  648
  1
  1
  910/167
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env (() ())))\""
  708
  503
  147
  58
  503
  147
  650
  1
  1
  2740/503
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  708
  503
  147
  58
  503
  147
  650
  1
  1
  2740/503
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  708
  503
  147
  58
  503
  147
  650
  1
  1
  2740/503
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env (())))\""
  708
  503
  147
  58
  503
  147
  650
  1
  1
  2740/503
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  708
  503
  147
  58
  503
  147
  650
  1
  1
  2740/503
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  708
  503
  147
  58
  503
  147
  650
  1
  1
  2740/503
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  708
  503
  147
  58
  503
  147
  650
  1
  1
  2740/503
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  708
  503
  147
  58
  503
  147
  650
  1
  1
  2740/503
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  709
  504
  147
  58
  504
  147
  651
  1
  1
  49/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env (() ())))\""
  717
  509
  149
  59
  509
  149
  658
  1
  1
  2777/509
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env (())))\""
  717
  509
  149
  59
  509
  149
  658
  1
  1
  2777/509
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  717
  509
  149
  59
  509
  149
  658
  1
  1
  2777/509
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  717
  509
  149
  59
  509
  149
  658
  1
  1
  2777/509
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env (())))\""
  718
  510
  149
  59
  510
  149
  659
  1
  1
  1391/255
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  720
  512
  149
  59
  512
  149
  661
  1
  1
  349/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  720
  512
  149
  59
  512
  149
  661
  1
  1
  349/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  720
  512
  149
  59
  512
  149
  661
  1
  1
  349/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  720
  512
  149
  59
  512
  149
  661
  1
  1
  349/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  720
  512
  149
  59
  512
  149
  661
  1
  1
  349/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env (())))\""
  720
  512
  149
  59
  512
  149
  661
  1
  1
  349/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env (())))\""
  722
  514
  149
  59
  514
  149
  663
  1
  1
  1400/257
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord rc rc) m) (env (() ())))\""
  722
  514
  149
  59
  514
  149
  663
  1
  1
  1400/257
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  722
  514
  149
  59
  514
  149
  663
  1
  1
  1400/257
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env (())))\""
  722
  514
  149
  59
  514
  149
  663
  1
  1
  1400/257
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  722
  514
  149
  59
  514
  149
  663
  1
  1
  1400/257
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  722
  514
  149
  59
  514
  149
  663
  1
  1
  1400/257
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  722
  514
  149
  59
  514
  149
  663
  1
  1
  1400/257
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  722
  514
  149
  59
  514
  149
  663
  1
  1
  1400/257
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env (())))\""
  722
  514
  149
  59
  514
  149
  663
  1
  1
  1400/257
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env (())))\""
  722
  514
  149
  59
  514
  149
  663
  1
  1
  1400/257
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env (())))\""
  722
  514
  149
  59
  514
  149
  663
  1
  1
  1400/257
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  722
  514
  149
  59
  514
  149
  663
  1
  1
  1400/257
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  724
  516
  149
  59
  516
  149
  665
  1
  1
  1405/258
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> move-coord-v <-) (move move-coord-x _) _) (env (())))\""
  724
  516
  149
  59
  516
  149
  665
  1
  1
  1405/258
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  724
  516
  149
  59
  516
  149
  665
  1
  1
  1405/258
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app horizon (-> (app win) <-) 0) (env (() ())))\""
  725
  517
  149
  59
  517
  149
  666
  1
  1
  2815/517
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  725
  517
  149
  59
  517
  149
  666
  1
  1
  2815/517
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env (() ())))\""
  725
  517
  149
  59
  517
  149
  666
  1
  1
  2815/517
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env (() ())))\""
  725
  517
  149
  59
  517
  149
  666
  1
  1
  2815/517
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (() ())))\""
  726
  518
  149
  59
  518
  149
  667
  1
  1
  1410/259
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app win) 0) (env (() ())))\""
  726
  518
  149
  59
  518
  149
  667
  1
  1
  1410/259
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  726
  518
  149
  59
  518
  149
  667
  1
  1
  1410/259
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env (() ())))\""
  726
  518
  149
  59
  518
  149
  667
  1
  1
  1410/259
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env (() ())))\""
  727
  519
  149
  59
  519
  149
  668
  1
  1
  2825/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env (())))\""
  727
  519
  149
  59
  519
  149
  668
  1
  1
  2825/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  727
  519
  149
  59
  519
  149
  668
  1
  1
  2825/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  727
  519
  149
  59
  519
  149
  668
  1
  1
  2825/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  727
  519
  149
  59
  519
  149
  668
  1
  1
  2825/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env (())))\""
  727
  519
  149
  59
  519
  149
  668
  1
  1
  2825/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  727
  519
  149
  59
  519
  149
  668
  1
  1
  2825/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env (())))\""
  727
  519
  149
  59
  519
  149
  668
  1
  1
  2825/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) (app make-ai-action (app X))) (env (())))\""
  727
  519
  149
  59
  519
  149
  668
  1
  1
  2825/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (letrec (loop) (-> (app loop) <-)) (env (())))\""
  727
  519
  149
  59
  519
  149
  668
  1
  1
  2825/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env (())))\""
  727
  519
  149
  59
  519
  149
  668
  1
  1
  2825/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  727
  519
  149
  59
  519
  149
  668
  1
  1
  2825/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env (() ())))\""
  728
  520
  149
  59
  520
  149
  669
  1
  1
  354/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app play-turn (-> bo <-) that-play this-play) (env (())))\""
  728
  520
  149
  59
  520
  149
  669
  1
  1
  354/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  728
  520
  149
  59
  520
  149
  669
  1
  1
  354/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env (())))\""
  729
  521
  149
  59
  521
  149
  670
  1
  1
  2836/521
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo that-mark this-mark)) (env (() ())))\""
  729
  521
  149
  59
  521
  149
  670
  1
  1
  2836/521
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  729
  521
  149
  59
  521
  149
  670
  1
  1
  2836/521
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app minimax bo that-mark this-mark)) (env (() ())))\""
  729
  521
  149
  59
  521
  149
  670
  1
  1
  2836/521
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (())))\""
  729
  521
  149
  59
  521
  149
  670
  1
  1
  2836/521
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  729
  521
  149
  59
  521
  149
  670
  1
  1
  2836/521
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (co) (-> (match (app equal? co₀ co) ...) <-)) (env (() ())))\""
  729
  521
  149
  59
  521
  149
  670
  1
  1
  2836/521
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  729
  521
  149
  59
  521
  149
  670
  1
  1
  2836/521
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  729
  521
  149
  59
  521
  149
  670
  1
  1
  2836/521
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  729
  521
  149
  59
  521
  149
  670
  1
  1
  2836/521
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env (())))\""
  729
  521
  149
  59
  521
  149
  670
  1
  1
  2836/521
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  729
  521
  149
  59
  521
  149
  670
  1
  1
  2836/521
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app wins? bo mark) <-) (#f) _) (env (())))\""
  729
  521
  149
  59
  521
  149
  670
  1
  1
  2836/521
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  730
  522
  149
  59
  522
  149
  671
  1
  1
  2843/522
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (())))\""
  732
  524
  149
  59
  524
  149
  673
  1
  1
  2851/524
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-))) (env (())))\""
  733
  525
  149
  59
  525
  149
  674
  1
  1
  571/105
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  733
  525
  149
  59
  525
  149
  674
  1
  1
  571/105
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  734
  526
  149
  59
  526
  149
  675
  1
  1
  1430/263
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env (())))\""
  734
  526
  149
  59
  526
  149
  675
  1
  1
  1430/263
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  734
  526
  149
  59
  526
  149
  675
  1
  1
  1430/263
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  734
  526
  149
  59
  526
  149
  675
  1
  1
  1430/263
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  735
  527
  149
  59
  527
  149
  676
  1
  1
  2864/527
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  736
  528
  149
  59
  528
  149
  677
  1
  1
  2869/528
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env (())))\""
  737
  529
  149
  59
  529
  149
  678
  1
  1
  2873/529
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env (() ())))\""
  737
  529
  149
  59
  529
  149
  678
  1
  1
  2873/529
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app some-v (-> (app maximin bo that-mark this-mark) <-)) (env (() ())))\""
  737
  529
  149
  59
  529
  149
  678
  1
  1
  2873/529
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  737
  529
  149
  59
  529
  149
  678
  1
  1
  2873/529
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env (())))\""
  737
  529
  149
  59
  529
  149
  678
  1
  1
  2873/529
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  737
  529
  149
  59
  529
  149
  678
  1
  1
  2873/529
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  737
  529
  149
  59
  529
  149
  678
  1
  1
  2873/529
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env (() ())))\""
  737
  529
  149
  59
  529
  149
  678
  1
  1
  2873/529
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env (() ())))\""
  737
  529
  149
  59
  529
  149
  678
  1
  1
  2873/529
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env (())))\""
  737
  529
  149
  59
  529
  149
  678
  1
  1
  2873/529
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> marked? <-) (app b (app coord r c))) (env (() () ())))\""
  737
  529
  149
  59
  529
  149
  678
  1
  1
  2873/529
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env (())))\""
  740
  531
  149
  60
  531
  149
  680
  1
  1
  2881/531
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env (() ())))\""
  740
  531
  149
  60
  531
  149
  680
  1
  1
  2881/531
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (())))\""
  740
  531
  149
  60
  531
  149
  680
  1
  1
  2881/531
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  740
  531
  149
  60
  531
  149
  680
  1
  1
  2881/531
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env (())))\""
  740
  531
  149
  60
  531
  149
  680
  1
  1
  2881/531
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env (())))\""
  741
  532
  149
  60
  532
  149
  681
  1
  1
  2885/532
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  741
  532
  149
  60
  532
  149
  681
  1
  1
  2885/532
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  741
  532
  149
  60
  532
  149
  681
  1
  1
  2885/532
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env (())))\""
  743
  534
  149
  60
  534
  149
  683
  1
  1
  965/178
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env (())))\""
  745
  536
  149
  60
  536
  149
  685
  1
  1
  363/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  745
  536
  149
  60
  536
  149
  685
  1
  1
  363/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  745
  536
  149
  60
  536
  149
  685
  1
  1
  363/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-)) (env (())))\""
  747
  538
  149
  60
  538
  149
  687
  1
  1
  1456/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env (())))\""
  747
  538
  149
  60
  538
  149
  687
  1
  1
  1456/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env (())))\""
  747
  538
  149
  60
  538
  149
  687
  1
  1
  1456/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env (())))\""
  747
  538
  149
  60
  538
  149
  687
  1
  1
  1456/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  747
  538
  149
  60
  538
  149
  687
  1
  1
  1456/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  747
  538
  149
  60
  538
  149
  687
  1
  1
  1456/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  747
  538
  149
  60
  538
  149
  687
  1
  1
  1456/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  747
  538
  149
  60
  538
  149
  687
  1
  1
  1456/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord rc rc) <-) m) (env (() ())))\""
  747
  538
  149
  60
  538
  149
  687
  1
  1
  1456/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env (() ())))\""
  747
  538
  149
  60
  538
  149
  687
  1
  1
  1456/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  747
  538
  149
  60
  538
  149
  687
  1
  1
  1456/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  747
  538
  149
  60
  538
  149
  687
  1
  1
  1456/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  747
  538
  149
  60
  538
  149
  687
  1
  1
  1456/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env (())))\""
  747
  538
  149
  60
  538
  149
  687
  1
  1
  1456/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env (())))\""
  747
  538
  149
  60
  538
  149
  687
  1
  1
  1456/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env (() ())))\""
  747
  538
  149
  60
  538
  149
  687
  1
  1
  1456/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-)) (env (() ())))\""
  747
  538
  149
  60
  538
  149
  687
  1
  1
  1456/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env (())))\""
  748
  539
  149
  60
  539
  149
  688
  1
  1
  2917/539
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  748
  539
  149
  60
  539
  149
  688
  1
  1
  2917/539
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  748
  539
  149
  60
  539
  149
  688
  1
  1
  2917/539
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env (())))\""
  748
  539
  149
  60
  539
  149
  688
  1
  1
  2917/539
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  748
  539
  149
  60
  539
  149
  688
  1
  1
  2917/539
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env (())))\""
  749
  540
  149
  60
  540
  149
  689
  1
  1
  2923/540
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> that-mark <-) this-mark) (env (() ())))\""
  749
  540
  149
  60
  540
  149
  689
  1
  1
  2923/540
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs)) (env (())))\""
  751
  542
  149
  60
  542
  149
  691
  1
  1
  2933/542
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  751
  542
  149
  60
  542
  149
  691
  1
  1
  2933/542
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env (())))\""
  751
  542
  149
  60
  542
  149
  691
  1
  1
  2933/542
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  751
  542
  149
  60
  542
  149
  691
  1
  1
  2933/542
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  751
  542
  149
  60
  542
  149
  691
  1
  1
  2933/542
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env (())))\""
  751
  542
  149
  60
  542
  149
  691
  1
  1
  2933/542
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env (())))\""
  751
  542
  149
  60
  542
  149
  691
  1
  1
  2933/542
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  752
  543
  149
  60
  543
  149
  692
  1
  1
  979/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env (())))\""
  752
  543
  149
  60
  543
  149
  692
  1
  1
  979/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  752
  543
  149
  60
  543
  149
  692
  1
  1
  979/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  752
  543
  149
  60
  543
  149
  692
  1
  1
  979/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env (())))\""
  752
  543
  149
  60
  543
  149
  692
  1
  1
  979/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  752
  543
  149
  60
  543
  149
  692
  1
  1
  979/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-coord\") (env (())))\""
  752
  543
  149
  60
  543
  149
  692
  1
  1
  979/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) empty-board player-one player-two) (env (())))\""
  752
  543
  149
  60
  543
  149
  692
  1
  1
  979/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  752
  543
  149
  60
  543
  149
  692
  1
  1
  979/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env (())))\""
  752
  543
  149
  60
  543
  149
  692
  1
  1
  979/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  752
  543
  149
  60
  543
  149
  692
  1
  1
  979/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env (())))\""
  753
  544
  149
  60
  544
  149
  693
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env (())))\""
  753
  544
  149
  60
  544
  149
  693
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env (() ())))\""
  753
  544
  149
  60
  544
  149
  693
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  754
  545
  149
  60
  545
  149
  694
  1
  1
  589/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env (() ())))\""
  754
  545
  149
  60
  545
  149
  694
  1
  1
  589/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  754
  545
  149
  60
  545
  149
  694
  1
  1
  589/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env (())))\""
  754
  545
  149
  60
  545
  149
  694
  1
  1
  589/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (r) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  754
  545
  149
  60
  545
  149
  694
  1
  1
  589/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  754
  545
  149
  60
  545
  149
  694
  1
  1
  589/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (())))\""
  754
  545
  149
  60
  545
  149
  694
  1
  1
  589/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  754
  545
  149
  60
  545
  149
  694
  1
  1
  589/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env (())))\""
  754
  545
  149
  60
  545
  149
  694
  1
  1
  589/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (())))\""
  754
  545
  149
  60
  545
  149
  694
  1
  1
  589/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env (())))\""
  754
  545
  149
  60
  545
  149
  694
  1
  1
  589/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  754
  545
  149
  60
  545
  149
  694
  1
  1
  589/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  754
  545
  149
  60
  545
  149
  694
  1
  1
  589/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  754
  545
  149
  60
  545
  149
  694
  1
  1
  589/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  754
  545
  149
  60
  545
  149
  694
  1
  1
  589/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app equal? co₀ co) <-) (#f) _) (env (() ())))\""
  754
  545
  149
  60
  545
  149
  694
  1
  1
  589/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  755
  546
  149
  60
  546
  149
  695
  1
  1
  227/42
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env (())))\""
  755
  546
  149
  60
  546
  149
  695
  1
  1
  227/42
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  755
  546
  149
  60
  546
  149
  695
  1
  1
  227/42
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  755
  546
  149
  60
  546
  149
  695
  1
  1
  227/42
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env (())))\""
  755
  546
  149
  60
  546
  149
  695
  1
  1
  227/42
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  755
  546
  149
  60
  546
  149
  695
  1
  1
  227/42
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env (())))\""
  755
  546
  149
  60
  546
  149
  695
  1
  1
  227/42
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  755
  546
  149
  60
  546
  149
  695
  1
  1
  227/42
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  757
  547
  150
  60
  547
  150
  697
  1
  1
  2958/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  757
  547
  150
  60
  547
  150
  697
  1
  1
  2958/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  757
  547
  150
  60
  547
  150
  697
  1
  1
  2958/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env (())))\""
  757
  547
  150
  60
  547
  150
  697
  1
  1
  2958/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env (() ())))\""
  757
  547
  150
  60
  547
  150
  697
  1
  1
  2958/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env (())))\""
  758
  548
  150
  60
  548
  150
  698
  1
  1
  1481/274
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  758
  548
  150
  60
  548
  150
  698
  1
  1
  1481/274
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> minimax <-) bo that-mark this-mark) (env (() ())))\""
  758
  548
  150
  60
  548
  150
  698
  1
  1
  1481/274
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  758
  548
  150
  60
  548
  150
  698
  1
  1
  1481/274
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  758
  548
  150
  60
  548
  150
  698
  1
  1
  1481/274
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  758
  548
  150
  60
  548
  150
  698
  1
  1
  1481/274
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> display <-) \"Cat's game.\\n\") (env (())))\""
  758
  548
  150
  60
  548
  150
  698
  1
  1
  1481/274
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env (())))\""
  759
  549
  150
  60
  549
  150
  699
  1
  1
  2966/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (let (... () (co (-> (app action bo) <-)) () ...) ...) (env (() ())))\""
  759
  549
  150
  60
  549
  150
  699
  1
  1
  2966/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  759
  549
  150
  60
  549
  150
  699
  1
  1
  2966/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env (())))\""
  759
  549
  150
  60
  549
  150
  699
  1
  1
  2966/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  759
  549
  150
  60
  549
  150
  699
  1
  1
  2966/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env (())))\""
  759
  549
  150
  60
  549
  150
  699
  1
  1
  2966/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env (() ())))\""
  759
  549
  150
  60
  549
  150
  699
  1
  1
  2966/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  759
  549
  150
  60
  549
  150
  699
  1
  1
  2966/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env (() ())))\""
  759
  549
  150
  60
  549
  150
  699
  1
  1
  2966/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  759
  549
  150
  60
  549
  150
  699
  1
  1
  2966/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (())))\""
  759
  549
  150
  60
  549
  150
  699
  1
  1
  2966/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env (())))\""
  759
  549
  150
  60
  549
  150
  699
  1
  1
  2966/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  759
  549
  150
  60
  549
  150
  699
  1
  1
  2966/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin bo that-mark (-> this-mark <-)) (env (() ())))\""
  759
  549
  150
  60
  549
  150
  699
  1
  1
  2966/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  760
  550
  150
  60
  550
  150
  700
  1
  1
  2971/550
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  761
  551
  150
  60
  551
  150
  701
  1
  1
  2975/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env (())))\""
  761
  551
  150
  60
  551
  150
  701
  1
  1
  2975/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  761
  551
  150
  60
  551
  150
  701
  1
  1
  2975/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  761
  551
  150
  60
  551
  150
  701
  1
  1
  2975/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env (())))\""
  761
  551
  150
  60
  551
  150
  701
  1
  1
  2975/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env (())))\""
  761
  551
  150
  60
  551
  150
  701
  1
  1
  2975/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (())))\""
  761
  551
  150
  60
  551
  150
  701
  1
  1
  2975/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo that-mark this-mark) (env (() ())))\""
  761
  551
  150
  60
  551
  150
  701
  1
  1
  2975/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  761
  551
  150
  60
  551
  150
  701
  1
  1
  2975/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  761
  551
  150
  60
  551
  150
  701
  1
  1
  2975/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app horizon (-> (app lose) <-) 0) (env (() ())))\""
  762
  552
  150
  60
  552
  150
  702
  1
  1
  745/138
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env (())))\""
  762
  552
  150
  60
  552
  150
  702
  1
  1
  745/138
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env (())))\""
  762
  552
  150
  60
  552
  150
  702
  1
  1
  745/138
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env (())))\""
  762
  552
  150
  60
  552
  150
  702
  1
  1
  745/138
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  764
  553
  151
  60
  553
  151
  704
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env (())))\""
  764
  553
  151
  60
  553
  151
  704
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env (())))\""
  764
  553
  151
  60
  553
  151
  704
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval (λ () (-> (let (co) ...) <-)) (env (() ())))\""
  764
  553
  151
  60
  553
  151
  704
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  764
  553
  151
  60
  553
  151
  704
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  764
  553
  151
  60
  553
  151
  704
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  764
  553
  151
  60
  553
  151
  704
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env (())))\""
  764
  553
  151
  60
  553
  151
  704
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  764
  553
  151
  60
  553
  151
  704
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env (())))\""
  764
  553
  151
  60
  553
  151
  704
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  1497/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  1497/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app some-v (-> (app minimax bo that-mark this-mark) <-)) (env (() ())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  1497/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  1497/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  1497/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env (() ())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  1497/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  1497/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  1497/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  1497/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  1497/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  768
  556
  152
  60
  556
  152
  708
  1
  1
  3003/556
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env (())))\""
  768
  556
  152
  60
  556
  152
  708
  1
  1
  3003/556
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (-> (app X) <-) (app make-ai-action (app X))) (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark co mark (-> bo <-)) (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env (() ())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env (())))\""
  590
  407
  133
  50
  407
  133
  540
  1
  1
  2270/407
  ((60 60 1) (60 60 1) (60 60 1)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app play-turn empty-board (-> player-one <-) player-two) (env (())))\""
  590
  407
  133
  50
  407
  133
  540
  1
  1
  2270/407
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  591
  408
  133
  50
  408
  133
  541
  1
  1
  2275/408
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  596
  412
  133
  51
  412
  133
  545
  1
  1
  573/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  596
  412
  133
  51
  412
  133
  545
  1
  1
  573/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  596
  412
  133
  51
  412
  133
  545
  1
  1
  573/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  596
  412
  133
  51
  412
  133
  545
  1
  1
  573/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env (())))\""
  596
  412
  133
  51
  412
  133
  545
  1
  1
  573/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  596
  412
  133
  51
  412
  133
  545
  1
  1
  573/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  596
  412
  133
  51
  412
  133
  545
  1
  1
  573/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env (())))\""
  596
  412
  133
  51
  412
  133
  545
  1
  1
  573/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  596
  412
  133
  51
  412
  133
  545
  1
  1
  573/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  596
  412
  133
  51
  412
  133
  545
  1
  1
  573/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁)) (env (())))\""
  599
  415
  133
  51
  415
  133
  548
  1
  1
  461/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs)) (env (())))\""
  601
  417
  133
  51
  417
  133
  550
  1
  1
  2315/417
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  603
  419
  133
  51
  419
  133
  552
  1
  1
  2325/419
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  603
  419
  133
  51
  419
  133
  552
  1
  1
  2325/419
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  618
  431
  133
  54
  431
  133
  564
  1
  1
  2375/431
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env (())))\""
  619
  432
  133
  54
  432
  133
  565
  1
  1
  2381/432
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  619
  432
  133
  54
  432
  133
  565
  1
  1
  2381/432
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (())))\""
  619
  432
  133
  54
  432
  133
  565
  1
  1
  2381/432
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  620
  433
  133
  54
  433
  133
  566
  1
  1
  2385/433
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env (())))\""
  622
  435
  133
  54
  435
  133
  568
  1
  1
  798/145
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env (())))\""
  624
  437
  133
  54
  437
  133
  570
  1
  1
  2404/437
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  624
  437
  133
  54
  437
  133
  570
  1
  1
  2404/437
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env (())))\""
  624
  437
  133
  54
  437
  133
  570
  1
  1
  2404/437
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  624
  437
  133
  54
  437
  133
  570
  1
  1
  2404/437
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> move-coord-v <-) (move move-coord-x _) _) (env (())))\""
  624
  437
  133
  54
  437
  133
  570
  1
  1
  2404/437
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  624
  437
  133
  54
  437
  133
  570
  1
  1
  2404/437
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env (())))\""
  626
  439
  133
  54
  439
  133
  572
  1
  1
  2414/439
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (() ())))\""
  627
  440
  133
  54
  440
  133
  573
  1
  1
  2419/440
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  627
  440
  133
  54
  440
  133
  573
  1
  1
  2419/440
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  627
  440
  133
  54
  440
  133
  573
  1
  1
  2419/440
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  628
  441
  133
  54
  441
  133
  574
  1
  1
  808/147
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env (())))\""
  628
  441
  133
  54
  441
  133
  574
  1
  1
  808/147
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  629
  442
  133
  54
  442
  133
  575
  1
  1
  1214/221
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env (())))\""
  629
  442
  133
  54
  442
  133
  575
  1
  1
  1214/221
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (())))\""
  629
  442
  133
  54
  442
  133
  575
  1
  1
  1214/221
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  629
  442
  133
  54
  442
  133
  575
  1
  1
  1214/221
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  629
  442
  133
  54
  442
  133
  575
  1
  1
  1214/221
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  630
  443
  133
  54
  443
  133
  576
  1
  1
  2433/443
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env (() ())))\""
  631
  444
  133
  54
  444
  133
  577
  1
  1
  1219/222
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env (())))\""
  636
  447
  135
  54
  447
  135
  582
  1
  1
  817/149
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  636
  447
  135
  54
  447
  135
  582
  1
  1
  817/149
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  636
  447
  135
  54
  447
  135
  582
  1
  1
  817/149
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  636
  447
  135
  54
  447
  135
  582
  1
  1
  817/149
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  636
  447
  135
  54
  447
  135
  582
  1
  1
  817/149
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  636
  447
  135
  54
  447
  135
  582
  1
  1
  817/149
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  638
  449
  135
  54
  449
  135
  584
  1
  1
  2460/449
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  650
  457
  138
  55
  457
  138
  595
  1
  1
  2498/457
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  653
  459
  138
  56
  459
  138
  597
  1
  1
  836/153
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env (())))\""
  654
  460
  138
  56
  460
  138
  598
  1
  1
  503/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-)) (env (())))\""
  657
  463
  138
  56
  463
  138
  601
  1
  1
  2528/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  657
  463
  138
  56
  463
  138
  601
  1
  1
  2528/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (() ())))\""
  658
  464
  138
  56
  464
  138
  602
  1
  1
  2533/464
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  660
  466
  138
  56
  466
  138
  604
  1
  1
  2543/466
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app minimax bo that-mark this-mark)) (env (() ())))\""
  660
  466
  138
  56
  466
  138
  604
  1
  1
  2543/466
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (move-horizon-v) (-> (match move-horizon-v ...) <-)) (env (())))\""
  660
  466
  138
  56
  466
  138
  604
  1
  1
  2543/466
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  660
  466
  138
  56
  466
  138
  604
  1
  1
  2543/466
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env (())))\""
  661
  467
  138
  56
  467
  138
  605
  1
  1
  2548/467
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env (())))\""
  662
  468
  138
  56
  468
  138
  606
  1
  1
  851/156
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (-> (app X) <-) (app make-ai-action (app X))) (env (())))\""
  662
  468
  138
  56
  468
  138
  606
  1
  1
  851/156
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  662
  468
  138
  56
  468
  138
  606
  1
  1
  851/156
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  662
  468
  138
  56
  468
  138
  606
  1
  1
  851/156
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env (())))\""
  662
  468
  138
  56
  468
  138
  606
  1
  1
  851/156
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  662
  468
  138
  56
  468
  138
  606
  1
  1
  851/156
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  663
  469
  138
  56
  469
  138
  607
  1
  1
  2559/469
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-))) (env (())))\""
  664
  470
  138
  56
  470
  138
  608
  1
  1
  2563/470
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  664
  470
  138
  56
  470
  138
  608
  1
  1
  2563/470
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  664
  470
  138
  56
  470
  138
  608
  1
  1
  2563/470
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  664
  470
  138
  56
  470
  138
  608
  1
  1
  2563/470
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  670
  472
  141
  57
  472
  141
  613
  1
  1
  2577/472
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env (())))\""
  672
  474
  141
  57
  474
  141
  615
  1
  1
  2587/474
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env (())))\""
  673
  475
  141
  57
  475
  141
  616
  1
  1
  2592/475
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  673
  475
  141
  57
  475
  141
  616
  1
  1
  2592/475
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  673
  475
  141
  57
  475
  141
  616
  1
  1
  2592/475
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  673
  475
  141
  57
  475
  141
  616
  1
  1
  2592/475
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (())))\""
  673
  475
  141
  57
  475
  141
  616
  1
  1
  2592/475
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  673
  475
  141
  57
  475
  141
  616
  1
  1
  2592/475
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (c x) (-> (app f (app coord r c) x) <-)) (env (() () ())))\""
  673
  475
  141
  57
  475
  141
  616
  1
  1
  2592/475
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env (())))\""
  673
  475
  141
  57
  475
  141
  616
  1
  1
  2592/475
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env (() ())))\""
  673
  475
  141
  57
  475
  141
  616
  1
  1
  2592/475
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env (())))\""
  675
  477
  141
  57
  477
  141
  618
  1
  1
  2602/477
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  682
  480
  144
  58
  480
  144
  624
  1
  1
  2621/480
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env (())))\""
  682
  480
  144
  58
  480
  144
  624
  1
  1
  2621/480
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env (() ())))\""
  682
  480
  144
  58
  480
  144
  624
  1
  1
  2621/480
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  682
  480
  144
  58
  480
  144
  624
  1
  1
  2621/480
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env (())))\""
  682
  480
  144
  58
  480
  144
  624
  1
  1
  2621/480
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  682
  480
  144
  58
  480
  144
  624
  1
  1
  2621/480
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  683
  481
  144
  58
  481
  144
  625
  1
  1
  2628/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  683
  481
  144
  58
  481
  144
  625
  1
  1
  2628/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  683
  481
  144
  58
  481
  144
  625
  1
  1
  2628/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env (())))\""
  683
  481
  144
  58
  481
  144
  625
  1
  1
  2628/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env (() ())))\""
  683
  481
  144
  58
  481
  144
  625
  1
  1
  2628/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  685
  483
  144
  58
  483
  144
  627
  1
  1
  2636/483
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app horizon (-> (app lose) <-) 0) (env (() ())))\""
  686
  484
  144
  58
  484
  144
  628
  1
  1
  2641/484
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env (())))\""
  687
  485
  144
  58
  485
  144
  629
  1
  1
  2646/485
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env (())))\""
  689
  487
  144
  58
  487
  144
  631
  1
  1
  2654/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  689
  487
  144
  58
  487
  144
  631
  1
  1
  2654/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env (())))\""
  689
  487
  144
  58
  487
  144
  631
  1
  1
  2654/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  689
  487
  144
  58
  487
  144
  631
  1
  1
  2654/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env (())))\""
  689
  487
  144
  58
  487
  144
  631
  1
  1
  2654/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  689
  487
  144
  58
  487
  144
  631
  1
  1
  2654/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env (())))\""
  689
  487
  144
  58
  487
  144
  631
  1
  1
  2654/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env (())))\""
  689
  487
  144
  58
  487
  144
  631
  1
  1
  2654/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app some-v (-> (app minimax bo that-mark this-mark) <-)) (env (() ())))\""
  689
  487
  144
  58
  487
  144
  631
  1
  1
  2654/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  689
  487
  144
  58
  487
  144
  631
  1
  1
  2654/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  689
  487
  144
  58
  487
  144
  631
  1
  1
  2654/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env (() ())))\""
  689
  487
  144
  58
  487
  144
  631
  1
  1
  2654/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env (())))\""
  689
  487
  144
  58
  487
  144
  631
  1
  1
  2654/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env (())))\""
  689
  487
  144
  58
  487
  144
  631
  1
  1
  2654/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env (())))\""
  689
  487
  144
  58
  487
  144
  631
  1
  1
  2654/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  689
  487
  144
  58
  487
  144
  631
  1
  1
  2654/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  689
  487
  144
  58
  487
  144
  631
  1
  1
  2654/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env (())))\""
  691
  489
  144
  58
  489
  144
  633
  1
  1
  2663/489
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env (() ())))\""
  691
  489
  144
  58
  489
  144
  633
  1
  1
  2663/489
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> mark <-) bo) (env (())))\""
  691
  489
  144
  58
  489
  144
  633
  1
  1
  2663/489
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  691
  489
  144
  58
  489
  144
  633
  1
  1
  2663/489
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  691
  489
  144
  58
  489
  144
  633
  1
  1
  2663/489
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  letrec
  "\"'(eval (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...) (env (())))\""
  691
  489
  144
  58
  489
  144
  633
  1
  1
  2663/489
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  691
  489
  144
  58
  489
  144
  633
  1
  1
  2663/489
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  693
  491
  144
  58
  491
  144
  635
  1
  1
  2673/491
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env (())))\""
  693
  491
  144
  58
  491
  144
  635
  1
  1
  2673/491
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  693
  491
  144
  58
  491
  144
  635
  1
  1
  2673/491
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  693
  491
  144
  58
  491
  144
  635
  1
  1
  2673/491
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  693
  491
  144
  58
  491
  144
  635
  1
  1
  2673/491
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  693
  491
  144
  58
  491
  144
  635
  1
  1
  2673/491
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env (())))\""
  694
  492
  144
  58
  492
  144
  636
  1
  1
  2677/492
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env (())))\""
  706
  501
  147
  58
  501
  147
  648
  1
  1
  2728/501
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  706
  501
  147
  58
  501
  147
  648
  1
  1
  2728/501
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env (())))\""
  711
  505
  147
  59
  505
  147
  652
  1
  1
  549/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  712
  506
  147
  59
  506
  147
  653
  1
  1
  125/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  712
  506
  147
  59
  506
  147
  653
  1
  1
  125/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env (() ())))\""
  712
  506
  147
  59
  506
  147
  653
  1
  1
  125/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env (())))\""
  712
  506
  147
  59
  506
  147
  653
  1
  1
  125/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  712
  506
  147
  59
  506
  147
  653
  1
  1
  125/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  713
  507
  147
  59
  507
  147
  654
  1
  1
  919/169
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval (λ () (-> (let (co) ...) <-)) (env (() ())))\""
  713
  507
  147
  59
  507
  147
  654
  1
  1
  919/169
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma))) (env (() ())))\""
  713
  507
  147
  59
  507
  147
  654
  1
  1
  919/169
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  713
  507
  147
  59
  507
  147
  654
  1
  1
  919/169
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo that-mark this-mark)) (env (() ())))\""
  713
  507
  147
  59
  507
  147
  654
  1
  1
  919/169
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env (())))\""
  714
  508
  147
  59
  508
  147
  655
  1
  1
  2761/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  714
  508
  147
  59
  508
  147
  655
  1
  1
  2761/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  714
  508
  147
  59
  508
  147
  655
  1
  1
  2761/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env (())))\""
  714
  508
  147
  59
  508
  147
  655
  1
  1
  2761/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-)) (env (() ())))\""
  714
  508
  147
  59
  508
  147
  655
  1
  1
  2761/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  714
  508
  147
  59
  508
  147
  655
  1
  1
  2761/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  714
  508
  147
  59
  508
  147
  655
  1
  1
  2761/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env (())))\""
  714
  508
  147
  59
  508
  147
  655
  1
  1
  2761/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app f (app coord r c) (-> x <-)) (env (() () ())))\""
  714
  508
  147
  59
  508
  147
  655
  1
  1
  2761/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env (())))\""
  714
  508
  147
  59
  508
  147
  655
  1
  1
  2761/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env (() ())))\""
  714
  508
  147
  59
  508
  147
  655
  1
  1
  2761/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  714
  508
  147
  59
  508
  147
  655
  1
  1
  2761/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  714
  508
  147
  59
  508
  147
  655
  1
  1
  2761/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env (() ())))\""
  714
  508
  147
  59
  508
  147
  655
  1
  1
  2761/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  714
  508
  147
  59
  508
  147
  655
  1
  1
  2761/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  714
  508
  147
  59
  508
  147
  655
  1
  1
  2761/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  714
  508
  147
  59
  508
  147
  655
  1
  1
  2761/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (let (bo) (-> (match (app wins? bo mark) ...) <-)) (env (())))\""
  714
  508
  147
  59
  508
  147
  655
  1
  1
  2761/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env (())))\""
  714
  508
  147
  59
  508
  147
  655
  1
  1
  2761/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  714
  508
  147
  59
  508
  147
  655
  1
  1
  2761/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env (() ())))\""
  716
  510
  147
  59
  510
  147
  657
  1
  1
  163/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  716
  510
  147
  59
  510
  147
  657
  1
  1
  163/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env (())))\""
  716
  510
  147
  59
  510
  147
  657
  1
  1
  163/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  716
  510
  147
  59
  510
  147
  657
  1
  1
  163/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  716
  510
  147
  59
  510
  147
  657
  1
  1
  163/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  716
  510
  147
  59
  510
  147
  657
  1
  1
  163/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  716
  510
  147
  59
  510
  147
  657
  1
  1
  163/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  718
  511
  148
  59
  511
  148
  659
  1
  1
  2778/511
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env (())))\""
  718
  511
  148
  59
  511
  148
  659
  1
  1
  2778/511
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  718
  511
  148
  59
  511
  148
  659
  1
  1
  2778/511
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  718
  511
  148
  59
  511
  148
  659
  1
  1
  2778/511
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  718
  511
  148
  59
  511
  148
  659
  1
  1
  2778/511
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env (())))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (r) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env (())))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env (() ())))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env (())))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env (() ())))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env (())))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env (() () ())))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env (() ())))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env (() ())))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env (())))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env (())))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env (() ())))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env (())))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env (())))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  719
  512
  148
  59
  512
  148
  660
  1
  1
  1391/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env (())))\""
  720
  513
  148
  59
  513
  148
  661
  1
  1
  2788/513
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (() ())))\""
  720
  513
  148
  59
  513
  148
  661
  1
  1
  2788/513
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  720
  513
  148
  59
  513
  148
  661
  1
  1
  2788/513
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  720
  513
  148
  59
  513
  148
  661
  1
  1
  2788/513
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose)) (env (())))\""
  722
  515
  148
  59
  515
  148
  663
  1
  1
  2798/515
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs)) (env (())))\""
  724
  517
  148
  59
  517
  148
  665
  1
  1
  2808/517
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (())))\""
  724
  517
  148
  59
  517
  148
  665
  1
  1
  2808/517
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  724
  517
  148
  59
  517
  148
  665
  1
  1
  2808/517
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env (())))\""
  724
  517
  148
  59
  517
  148
  665
  1
  1
  2808/517
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env (())))\""
  725
  518
  148
  59
  518
  148
  666
  1
  1
  38/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env (())))\""
  726
  519
  148
  59
  519
  148
  667
  1
  1
  2816/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env (())))\""
  726
  519
  148
  59
  519
  148
  667
  1
  1
  2816/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (co) (-> (match (app equal? co₀ co) ...) <-)) (env (() ())))\""
  726
  519
  148
  59
  519
  148
  667
  1
  1
  2816/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env (() ())))\""
  726
  519
  148
  59
  519
  148
  667
  1
  1
  2816/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env (())))\""
  726
  519
  148
  59
  519
  148
  667
  1
  1
  2816/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  728
  521
  148
  59
  521
  148
  669
  1
  1
  2826/521
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env (())))\""
  730
  523
  148
  59
  523
  148
  671
  1
  1
  2835/523
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> this-play <-) (player mark action)) (env (())))\""
  730
  523
  148
  59
  523
  148
  671
  1
  1
  2835/523
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  730
  523
  148
  59
  523
  148
  671
  1
  1
  2835/523
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  730
  523
  148
  59
  523
  148
  671
  1
  1
  2835/523
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  730
  523
  148
  59
  523
  148
  671
  1
  1
  2835/523
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  730
  523
  148
  59
  523
  148
  671
  1
  1
  2835/523
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env (())))\""
  730
  523
  148
  59
  523
  148
  671
  1
  1
  2835/523
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  731
  524
  148
  59
  524
  148
  672
  1
  1
  710/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env (())))\""
  731
  524
  148
  59
  524
  148
  672
  1
  1
  710/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env (())))\""
  731
  524
  148
  59
  524
  148
  672
  1
  1
  710/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env (())))\""
  731
  524
  148
  59
  524
  148
  672
  1
  1
  710/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  731
  524
  148
  59
  524
  148
  672
  1
  1
  710/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  731
  524
  148
  59
  524
  148
  672
  1
  1
  710/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env (())))\""
  731
  524
  148
  59
  524
  148
  672
  1
  1
  710/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env (())))\""
  731
  524
  148
  59
  524
  148
  672
  1
  1
  710/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  731
  524
  148
  59
  524
  148
  672
  1
  1
  710/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  731
  524
  148
  59
  524
  148
  672
  1
  1
  710/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env (())))\""
  731
  524
  148
  59
  524
  148
  672
  1
  1
  710/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  731
  524
  148
  59
  524
  148
  672
  1
  1
  710/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env (())))\""
  731
  524
  148
  59
  524
  148
  672
  1
  1
  710/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env (())))\""
  731
  524
  148
  59
  524
  148
  672
  1
  1
  710/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-)) (env (() ())))\""
  731
  524
  148
  59
  524
  148
  672
  1
  1
  710/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-)) (env (() ())))\""
  731
  524
  148
  59
  524
  148
  672
  1
  1
  710/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env (())))\""
  731
  524
  148
  59
  524
  148
  672
  1
  1
  710/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env (())))\""
  733
  526
  148
  59
  526
  148
  674
  1
  1
  1424/263
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env (() ())))\""
  733
  526
  148
  59
  526
  148
  674
  1
  1
  1424/263
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  733
  526
  148
  59
  526
  148
  674
  1
  1
  1424/263
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env (())))\""
  733
  526
  148
  59
  526
  148
  674
  1
  1
  1424/263
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env (())))\""
  733
  526
  148
  59
  526
  148
  674
  1
  1
  1424/263
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  733
  526
  148
  59
  526
  148
  674
  1
  1
  1424/263
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env (() ())))\""
  735
  528
  148
  59
  528
  148
  676
  1
  1
  1429/264
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  735
  528
  148
  59
  528
  148
  676
  1
  1
  1429/264
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env (() ())))\""
  737
  529
  149
  59
  529
  149
  678
  1
  1
  2865/529
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord rc rc) m) (env (() ())))\""
  737
  529
  149
  59
  529
  149
  678
  1
  1
  2865/529
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env (() ())))\""
  737
  529
  149
  59
  529
  149
  678
  1
  1
  2865/529
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  737
  529
  149
  59
  529
  149
  678
  1
  1
  2865/529
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env (() ())))\""
  737
  529
  149
  59
  529
  149
  678
  1
  1
  2865/529
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  737
  529
  149
  59
  529
  149
  678
  1
  1
  2865/529
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  739
  531
  149
  59
  531
  149
  680
  1
  1
  958/177
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval (match (app full? bo) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  743
  535
  149
  59
  535
  149
  684
  1
  1
  2893/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  743
  535
  149
  59
  535
  149
  684
  1
  1
  2893/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  743
  535
  149
  59
  535
  149
  684
  1
  1
  2893/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁)) (env (())))\""
  743
  535
  149
  59
  535
  149
  684
  1
  1
  2893/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  743
  535
  149
  59
  535
  149
  684
  1
  1
  2893/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  743
  535
  149
  59
  535
  149
  684
  1
  1
  2893/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  743
  535
  149
  59
  535
  149
  684
  1
  1
  2893/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  743
  535
  149
  59
  535
  149
  684
  1
  1
  2893/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  743
  535
  149
  59
  535
  149
  684
  1
  1
  2893/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env (() () ())))\""
  743
  535
  149
  59
  535
  149
  684
  1
  1
  2893/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env (())))\""
  743
  535
  149
  59
  535
  149
  684
  1
  1
  2893/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  743
  535
  149
  59
  535
  149
  684
  1
  1
  2893/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  743
  535
  149
  59
  535
  149
  684
  1
  1
  2893/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  743
  535
  149
  59
  535
  149
  684
  1
  1
  2893/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env (())))\""
  743
  535
  149
  59
  535
  149
  684
  1
  1
  2893/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  743
  535
  149
  59
  535
  149
  684
  1
  1
  2893/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  743
  535
  149
  59
  535
  149
  684
  1
  1
  2893/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env (())))\""
  743
  535
  149
  59
  535
  149
  684
  1
  1
  2893/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  743
  535
  149
  59
  535
  149
  684
  1
  1
  2893/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app wins? bo mark) <-) (#f) _) (env (())))\""
  743
  535
  149
  59
  535
  149
  684
  1
  1
  2893/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env (() ())))\""
  745
  537
  149
  59
  537
  149
  686
  1
  1
  2903/537
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  747
  539
  149
  59
  539
  149
  688
  1
  1
  416/77
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  747
  539
  149
  59
  539
  149
  688
  1
  1
  416/77
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  747
  539
  149
  59
  539
  149
  688
  1
  1
  416/77
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  747
  539
  149
  59
  539
  149
  688
  1
  1
  416/77
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  747
  539
  149
  59
  539
  149
  688
  1
  1
  416/77
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  747
  539
  149
  59
  539
  149
  688
  1
  1
  416/77
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (() ())))\""
  747
  539
  149
  59
  539
  149
  688
  1
  1
  416/77
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env (())))\""
  747
  539
  149
  59
  539
  149
  688
  1
  1
  416/77
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) bo that-play this-play) (env (())))\""
  747
  539
  149
  59
  539
  149
  688
  1
  1
  416/77
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co mark bo) (env (())))\""
  747
  539
  149
  59
  539
  149
  688
  1
  1
  416/77
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env (())))\""
  747
  539
  149
  59
  539
  149
  688
  1
  1
  416/77
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  749
  540
  150
  59
  540
  150
  690
  1
  1
  973/180
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app play-turn bo that-play (-> this-play <-)) (env (())))\""
  749
  540
  150
  59
  540
  150
  690
  1
  1
  973/180
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark co mark (-> bo <-)) (env (())))\""
  749
  540
  150
  59
  540
  150
  690
  1
  1
  973/180
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  749
  540
  150
  59
  540
  150
  690
  1
  1
  973/180
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env (() ())))\""
  749
  540
  150
  59
  540
  150
  690
  1
  1
  973/180
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env (())))\""
  751
  542
  150
  59
  542
  150
  692
  1
  1
  1464/271
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  751
  542
  150
  59
  542
  150
  692
  1
  1
  1464/271
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> minimax <-) bo that-mark this-mark) (env (() ())))\""
  751
  542
  150
  59
  542
  150
  692
  1
  1
  1464/271
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> display <-) \"Cat's game.\\n\") (env (())))\""
  751
  542
  150
  59
  542
  150
  692
  1
  1
  1464/271
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (())))\""
  753
  544
  150
  59
  544
  150
  694
  1
  1
  367/68
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  755
  545
  151
  59
  545
  151
  696
  1
  1
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  755
  545
  151
  59
  545
  151
  696
  1
  1
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (app b co) ((blank) (-> (app #f) <-)) (marked m*)) (env (())))\""
  755
  545
  151
  59
  545
  151
  696
  1
  1
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env (() ())))\""
  755
  545
  151
  59
  545
  151
  696
  1
  1
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  755
  545
  151
  59
  545
  151
  696
  1
  1
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  756
  546
  151
  59
  546
  151
  697
  1
  1
  1474/273
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (let (_) (-> (app display \"Cat's game.\\n\") <-)) (env (())))\""
  756
  546
  151
  59
  546
  151
  697
  1
  1
  1474/273
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  756
  546
  151
  59
  546
  151
  697
  1
  1
  1474/273
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  756
  546
  151
  59
  546
  151
  697
  1
  1
  1474/273
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env (())))\""
  756
  546
  151
  59
  546
  151
  697
  1
  1
  1474/273
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env (())))\""
  756
  546
  151
  59
  546
  151
  697
  1
  1
  1474/273
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  756
  546
  151
  59
  546
  151
  697
  1
  1
  1474/273
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env (())))\""
  757
  547
  151
  59
  547
  151
  698
  1
  1
  2952/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app minimax bo that-mark (-> this-mark <-)) (env (() ())))\""
  757
  547
  151
  59
  547
  151
  698
  1
  1
  2952/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env (())))\""
  757
  547
  151
  59
  547
  151
  698
  1
  1
  2952/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  757
  547
  151
  59
  547
  151
  698
  1
  1
  2952/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env (())))\""
  757
  547
  151
  59
  547
  151
  698
  1
  1
  2952/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app play-turn (-> empty-board <-) player-one player-two) (env (())))\""
  757
  547
  151
  59
  547
  151
  698
  1
  1
  2952/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app equal? co₀ co) <-) (#f) _) (env (() ())))\""
  757
  547
  151
  59
  547
  151
  698
  1
  1
  2952/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env (() ())))\""
  757
  547
  151
  59
  547
  151
  698
  1
  1
  2952/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  757
  547
  151
  59
  547
  151
  698
  1
  1
  2952/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord rc rc) (-> m <-)) (env (() ())))\""
  757
  547
  151
  59
  547
  151
  698
  1
  1
  2952/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env (())))\""
  757
  547
  151
  59
  547
  151
  698
  1
  1
  2952/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app f (-> (app coord r c) <-) x) (env (() () ())))\""
  757
  547
  151
  59
  547
  151
  698
  1
  1
  2952/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  757
  547
  151
  59
  547
  151
  698
  1
  1
  2952/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  757
  547
  151
  59
  547
  151
  698
  1
  1
  2952/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env (())))\""
  757
  547
  151
  59
  547
  151
  698
  1
  1
  2952/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (bo) (-> (app error 'human-action \"not implemented\") <-)) (env (())))\""
  757
  547
  151
  59
  547
  151
  698
  1
  1
  2952/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  757
  547
  151
  59
  547
  151
  698
  1
  1
  2952/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env (() ())))\""
  757
  547
  151
  59
  547
  151
  698
  1
  1
  2952/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env (())))\""
  757
  547
  151
  59
  547
  151
  698
  1
  1
  2952/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env (())))\""
  757
  547
  151
  59
  547
  151
  698
  1
  1
  2952/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env (())))\""
  757
  547
  151
  59
  547
  151
  698
  1
  1
  2952/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  759
  548
  152
  59
  548
  152
  700
  1
  1
  2959/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env (())))\""
  760
  549
  152
  59
  549
  152
  701
  1
  1
  988/183
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env (() ())))\""
  761
  550
  152
  59
  550
  152
  702
  1
  1
  2971/550
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  761
  550
  152
  59
  550
  152
  702
  1
  1
  2971/550
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app play-turn bo (-> that-play <-) this-play) (env (())))\""
  761
  550
  152
  59
  550
  152
  702
  1
  1
  2971/550
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env (())))\""
  762
  551
  152
  59
  551
  152
  703
  1
  1
  2975/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env (() ())))\""
  764
  552
  152
  60
  552
  152
  704
  1
  1
  497/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  764
  552
  152
  60
  552
  152
  704
  1
  1
  497/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  764
  552
  152
  60
  552
  152
  704
  1
  1
  497/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  764
  552
  152
  60
  552
  152
  704
  1
  1
  497/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  764
  552
  152
  60
  552
  152
  704
  1
  1
  497/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app horizon (-> (app win) <-) 0) (env (() ())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env (())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env (())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env (() ())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> move-horizon-v <-) (move _ move-horizon-x) _) (env (())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env (())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env (())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) (app make-ai-action (app X))) (env (())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env (())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env (())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app play-turn empty-board player-one (-> player-two <-)) (env (())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env (())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env (())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env (())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env (())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env (())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env (())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo that-mark this-mark) (env (() ())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) mark bo) (env (())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2987/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env (() ())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  1497/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  1497/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  1497/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  1497/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  1497/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (letrec (loop) (-> (app loop) <-)) (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  1497/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  1497/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  1497/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env (() ())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  1497/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app lose) 0) (env (() ())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  1497/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  1497/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  1497/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  1497/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-coord\") (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-horizon\") (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) empty-board player-one player-two) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (let (_) (-> (match this-play ...) <-)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (c) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app win) 0) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (move-coord-v) (-> (match move-coord-v ...) <-)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match some-v-v ((some some-v-x) (-> some-v-x <-)) _) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> that-mark <-) this-mark) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app some-v (-> (app maximin bo that-mark this-mark) <-)) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (let (... () (co (-> (app action bo) <-)) () ...) ...) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app play-turn (-> bo <-) that-play this-play) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (app X) (-> (app make-ai-action (app X)) <-)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (c) (-> (app marked? (app b (app coord r c))) <-)) (env (() () ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> marked? <-) (app b (app coord r c))) (env (() () ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin bo that-mark (-> this-mark <-)) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord rc rc) m) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord rc rc) <-) m) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) that-mark this-mark) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app marked? (-> (app b (app coord r c)) <-)) (env (() () ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  2998/555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  768
  556
  152
  60
  556
  152
  708
  1
  1
  3003/556
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  768
  556
  152
  60
  556
  152
  708
  1
  1
  3003/556
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app coord r c) x) (env (() () ())))\""
  768
  556
  152
  60
  556
  152
  708
  1
  1
  3003/556
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  768
  556
  152
  60
  556
  152
  708
  1
  1
  3003/556
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env (())))\""
  768
  556
  152
  60
  556
  152
  708
  1
  1
  3003/556
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  768
  556
  152
  60
  556
  152
  708
  1
  1
  3003/556
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  768
  556
  152
  60
  556
  152
  708
  1
  1
  3003/556
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  768
  556
  152
  60
  556
  152
  708
  1
  1
  3003/556
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env (() ())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app minimax bo (-> that-mark <-) this-mark) (env (() ())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval (λ (bo this-play that-play) (-> (let (_) ...) <-)) (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env (() ())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app minimax (-> bo <-) that-mark this-mark) (env (() ())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  11
  5
  3
  3
  2
  1
  3
  1
  2/9
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  14
  8
  3
  3
  4
  1
  5
  1
  1/3
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  20
  14
  3
  3
  8
  1
  9
  1
  4/9
  71/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  133
  90
  28
  15
  58
  19
  77
  1
  2381/2970
  499/90
  ((13/2 13/2 0) (13/2 13/2 0) (7 7 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  135
  92
  28
  15
  58
  19
  77
  1
  211/270
  515/92
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  135
  92
  28
  15
  58
  19
  77
  1
  211/270
  515/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env ((□? (x1 x2)))))\""
  142
  98
  28
  16
  58
  19
  77
  1
  2051/2970
  549/98
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  145
  100
  28
  17
  60
  19
  79
  1
  2231/3150
  561/100
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  145
  100
  28
  17
  60
  19
  79
  1
  2231/3150
  561/100
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  154
  108
  28
  18
  60
  19
  79
  1
  2201/3150
  605/108
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  155
  109
  28
  18
  60
  19
  79
  1
  2171/3150
  611/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2)))))\""
  155
  109
  28
  18
  60
  19
  79
  1
  2171/3150
  611/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env ((□? (x1 x2)))))\""
  155
  109
  28
  18
  60
  19
  79
  1
  2171/3150
  611/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env ((□? (x1 x2)))))\""
  155
  109
  28
  18
  60
  19
  79
  1
  2171/3150
  611/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  156
  110
  28
  18
  60
  19
  79
  1
  2141/3150
  617/110
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2)))))\""
  156
  110
  28
  18
  60
  19
  79
  1
  2141/3150
  617/110
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  159
  113
  28
  18
  60
  19
  79
  1
  212/315
  634/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  159
  113
  28
  18
  60
  19
  79
  1
  212/315
  634/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  159
  113
  28
  18
  60
  19
  79
  1
  212/315
  634/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env ((□? (x1 x2)))))\""
  159
  113
  28
  18
  60
  19
  79
  1
  212/315
  634/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  183
  130
  31
  22
  60
  19
  79
  1
  83/126
  369/65
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  201
  145
  34
  22
  60
  19
  79
  1
  409/630
  818/145
  ((3 3 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  201
  145
  34
  22
  60
  19
  79
  1
  409/630
  818/145
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  203
  147
  34
  22
  60
  19
  79
  1
  397/630
  276/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  203
  147
  34
  22
  60
  19
  79
  1
  397/630
  276/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  203
  147
  34
  22
  60
  19
  79
  1
  397/630
  276/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  126
  82
  28
  16
  53
  19
  72
  1
  233/288
  453/82
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  126
  82
  28
  16
  53
  19
  72
  1
  233/288
  453/82
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  135
  90
  28
  17
  59
  19
  78
  1
  2501/3060
  50/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  136
  91
  28
  17
  59
  19
  78
  1
  2471/3060
  510/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env ((□? (x1 x2)))))\""
  141
  96
  28
  17
  59
  19
  78
  1
  1123/1530
  539/96
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env ((□? (x1 x2)))))\""
  141
  96
  28
  17
  59
  19
  78
  1
  1123/1530
  539/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  144
  99
  28
  17
  59
  19
  78
  1
  445/612
  556/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  145
  100
  28
  17
  59
  19
  78
  1
  439/612
  281/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  146
  101
  28
  17
  59
  19
  78
  1
  215/306
  568/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  146
  101
  28
  17
  59
  19
  78
  1
  215/306
  568/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  147
  102
  28
  17
  60
  19
  79
  1
  32/45
  287/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env ((□? (x1 x2)))))\""
  147
  102
  28
  17
  60
  19
  79
  1
  32/45
  287/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  149
  104
  28
  17
  60
  19
  79
  1
  218/315
  73/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env ((□? (x1 x2)))))\""
  149
  104
  28
  17
  60
  19
  79
  1
  218/315
  73/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  150
  105
  28
  17
  60
  19
  79
  1
  43/63
  118/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2)))))\""
  150
  105
  28
  17
  60
  19
  79
  1
  43/63
  118/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  155
  108
  29
  18
  60
  19
  79
  1
  214/315
  101/18
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  159
  112
  29
  18
  60
  19
  79
  1
  85/126
  313/56
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  195
  139
  34
  22
  60
  19
  79
  1
  137/210
  782/139
  ((5 5 0) (5 11/2 0) (5 5 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  195
  139
  34
  22
  60
  19
  79
  1
  137/210
  782/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  201
  145
  34
  22
  60
  19
  79
  1
  409/630
  818/145
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  201
  145
  34
  22
  60
  19
  79
  1
  409/630
  818/145
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  100
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  203
  147
  34
  22
  60
  19
  79
  1
  397/630
  276/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  24
  9
  3
  12
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  27
  12
  3
  12
  5
  2
  7
  1
  5/8
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  30
  15
  3
  12
  5
  2
  7
  1
  5/9
  76/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  266
  164
  49
  53
  40
  15
  55
  1
  443/720
  429/82
  ((43 43 0) (43 43 0) (43 43 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  372
  219
  100
  53
  59
  31
  90
  1
  17/29
  472/73
  ((57/2 57/2 0) (57/2 57/2 0) (57/2 57/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  378
  225
  100
  53
  62
  31
  93
  1
  37/64
  58/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  380
  227
  100
  53
  63
  31
  94
  1
  19/33
  1462/227
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  380
  227
  100
  53
  63
  31
  94
  1
  19/33
  1462/227
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  380
  227
  100
  53
  63
  31
  94
  1
  19/33
  1462/227
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  382
  229
  100
  53
  64
  31
  95
  1
  39/68
  1474/229
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  34
  19
  8
  7
  10
  4
  14
  1
  5/8
  98/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  20
  9
  3
  8
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  18
  7
  2
  9
  3
  2
  5
  1
  3/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  39
  23
  6
  10
  7
  4
  11
  1
  7/11
  117/23
  ((3/2 3/2 0) (2 2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  39
  23
  6
  10
  7
  4
  11
  1
  7/11
  117/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  97
  60
  22
  15
  18
  8
  26
  1
  25/38
  311/60
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  228
  156
  51
  21
  23
  10
  33
  1
  13/22
  407/78
  ((23 23 0) (23 23 0) (23 23 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  230
  158
  51
  21
  23
  10
  33
  1
  25/44
  412/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  232
  160
  51
  21
  24
  10
  34
  1
  13/23
  417/80
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  234
  162
  51
  21
  25
  10
  35
  1
  9/16
  47/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  234
  162
  51
  21
  25
  10
  35
  1
  9/16
  47/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  238
  166
  51
  21
  28
  10
  38
  1
  57/100
  433/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  240
  168
  51
  21
  29
  10
  39
  1
  59/104
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  73
  43
  19
  11
  17
  6
  23
  1
  11/17
  227/43
  ((6 6 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  106
  60
  32
  14
  22
  8
  30
  1
  123/220
  343/60
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  sat-1
  1
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  22
  9
  3
  10
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  90
  45
  20
  25
  16
  6
  22
  1
  21/32
  236/45
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  100
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  96
  51
  20
  25
  19
  6
  25
  1
  12/19
  90/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  87
  51
  19
  17
  21
  6
  27
  1
  13/21
  271/51
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  90
  54
  19
  17
  23
  6
  29
  1
  41/66
  143/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  90
  54
  19
  17
  23
  6
  29
  1
  41/66
  143/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  103
  64
  19
  20
  23
  6
  29
  1
  41/69
  21/4
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  1
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  34
  17
  8
  9
  8
  4
  12
  1
  13/22
  88/17
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  41
  21
  9
  11
  8
  4
  12
  1
  13/22
  109/21
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  88
  53
  20
  15
  17
  6
  23
  1
  31/54
  278/53
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  sat-1
  1
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  34
  15
  8
  11
  10
  4
  14
  1
  19/24
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  36
  17
  8
  11
  11
  4
  15
  1
  10/13
  88/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  222
  131
  48
  43
  35
  15
  50
  1
  317/468
  694/131
  ((34 34 0) (34 34 0) (34 34 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  228
  137
  48
  43
  38
  15
  53
  1
  172/261
  728/137
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  230
  138
  48
  44
  38
  15
  53
  1
  341/522
  733/138
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  230
  138
  48
  44
  38
  15
  53
  1
  341/522
  733/138
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  230
  138
  48
  44
  38
  15
  53
  1
  341/522
  733/138
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  232
  140
  48
  44
  39
  15
  54
  1
  35/54
  743/140
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  21
  10
  5
  6
  4
  1
  5
  1
  2/15
  53/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  15
  8
  9
  9
  4
  13
  1
  8/11
  26/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  34
  17
  8
  9
  10
  4
  14
  1
  17/24
  90/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  24
  9
  3
  12
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  20
  9
  3
  8
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  22
  10
  3
  9
  5
  2
  7
  1
  5/8
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  38
  21
  8
  9
  13
  4
  17
  1
  11/15
  110/21
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  40
  23
  8
  9
  14
  4
  18
  1
  23/32
  120/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  83
  47
  19
  17
  19
  6
  25
  1
  12/19
  247/47
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  15
  4
  2
  9
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  45
  21
  6
  18
  7
  4
  11
  1
  7/10
  107/21
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  47
  22
  6
  19
  7
  4
  11
  1
  7/11
  56/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  49
  24
  6
  19
  7
  4
  11
  1
  6/11
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  112
  57
  22
  33
  18
  11
  29
  1
  65/96
  98/19
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  182
  96
  53
  33
  33
  19
  52
  1
  397/630
  77/12
  ((12 12 0) (12 12 0) (12 12 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  70
  15
  13
  42
  7
  5
  12
  1
  7/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  145
  41
  30
  74
  14
  10
  24
  1
  2/3
  219/41
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  340
  121
  78
  141
  18
  12
  30
  1
  26/45
  641/121
  ((95 95 1/2) (95 95 1/2) (95 95 1/2)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  344
  125
  78
  141
  18
  12
  30
  1
  13/24
  661/125
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  113
  37
  20
  56
  9
  6
  15
  1
  9/14
  202/37
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  194
  67
  43
  84
  14
  9
  23
  1
  10/17
  365/67
  ((16 16 0) (16 16 0) (33/2 33/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  275
  134
  45
  96
  21
  11
  32
  1
  17/30
  350/67
  ((37/2 37/2 0) (18 18 0) (18 18 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  10
  2
  17
  4
  2
  6
  1
  4/7
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  304
  133
  62
  109
  17
  11
  28
  1
  13/24
  719/133
  ((66 66 1/2) (133/2 133/2 1/2) (133/2 133/2 1/2)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  307
  136
  62
  109
  19
  11
  30
  1
  41/75
  367/68
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  224
  99
  43
  82
  13
  8
  21
  1
  3/7
  541/99
  ((61/2 61/2 0) (61/2 61/2 0) (31 31 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  3
  0
  5
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  26
  9
  2
  15
  3
  2
  5
  1
  1/2
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  9
  2
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  95
  19
  20
  56
  7
  6
  13
  1
  7/10
  104/19
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  103
  27
  20
  56
  7
  6
  13
  1
  7/11
  152/27
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  136
  48
  22
  66
  12
  8
  20
  1
  3/5
  257/48
  ((4 4 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  239
  102
  45
  92
  16
  10
  26
  1
  12/23
  90/17
  ((73/2 73/2 0) (37 37 0) (37 37 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  241
  104
  45
  92
  17
  10
  27
  1
  25/48
  275/52
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x3 x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  9
  2
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  41
  10
  3
  28
  5
  2
  7
  1
  5/8
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  218
  71
  44
  103
  14
  9
  23
  1
  19/34
  378/71
  ((38 38 0) (38 38 0) (77/2 77/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  218
  71
  44
  103
  14
  9
  23
  1
  19/34
  378/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  70
  15
  13
  42
  7
  5
  12
  1
  7/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  109
  41
  15
  53
  13
  7
  20
  1
  13/21
  210/41
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  166
  73
  40
  53
  21
  9
  30
  1
  115/232
  437/73
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  170
  77
  40
  53
  21
  9
  30
  1
  23/48
  457/77
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  184
  91
  40
  53
  23
  9
  32
  1
  131/280
  535/91
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  293
  131
  60
  102
  14
  10
  24
  1
  10/19
  725/131
  ((107/2 107/2 0) (107/2 107/2 0) (107/2 107/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  23
  9
  3
  11
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  74
  19
  13
  42
  9
  5
  14
  1
  2/3
  100/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  229
  69
  60
  100
  13
  9
  22
  1
  5/9
  383/69
  ((33 33 0) (33 33 0) (33 33 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  7
  2
  16
  3
  2
  5
  1
  3/5
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  28
  10
  2
  16
  4
  2
  6
  1
  4/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x4 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  36
  11
  2
  23
  4
  2
  6
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  146
  31
  31
  84
  7
  7
  14
  1
  7/11
  172/31
  ((23/2 23/2 0) (23/2 23/2 0) (23/2 23/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  196
  81
  31
  84
  9
  7
  16
  1
  9/16
  454/81
  ((13 13 0) (13 13 0) (13 13 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  196
  81
  31
  84
  9
  7
  16
  1
  9/16
  454/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  198
  83
  31
  84
  9
  7
  16
  1
  9/17
  464/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  155
  51
  30
  74
  16
  10
  26
  1
  32/51
  91/17
  ((15 15 0) (29/2 29/2 0) (15 15 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  177
  55
  31
  91
  16
  10
  26
  1
  21/34
  294/55
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  9
  3
  17
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  132
  39
  20
  73
  12
  7
  19
  1
  2/3
  68/13
  ((17 17 0) (33/2 33/2 0) (33/2 33/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  257
  105
  79
  73
  22
  11
  33
  1
  79/160
  157/21
  ((65/2 65/2 0) (65/2 65/2 0) (65/2 65/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  80
  25
  13
  42
  9
  5
  14
  1
  9/14
  134/25
  ((4 4 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  86
  29
  13
  44
  9
  5
  14
  1
  3/5
  154/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  90
  33
  13
  44
  9
  5
  14
  1
  9/16
  58/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x4) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  94
  37
  13
  44
  9
  5
  14
  1
  9/17
  194/37
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  94
  37
  13
  44
  9
  5
  14
  1
  9/17
  194/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  211
  84
  43
  84
  13
  8
  21
  1
  9/19
  75/14
  ((21 21 0) (21 21 0) (21 21 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  213
  86
  43
  84
  13
  8
  21
  1
  25/57
  230/43
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  304
  164
  45
  95
  21
  10
  31
  1
  49/102
  425/82
  ((20 20 0) (39/2 39/2 0) (39/2 39/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  28
  10
  2
  16
  4
  2
  6
  1
  4/7
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  138
  52
  22
  64
  12
  8
  20
  1
  3/5
  277/52
  ((23/2 23/2 0) (12 12 0) (23/2 23/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  144
  57
  22
  65
  13
  8
  21
  1
  13/22
  302/57
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x4 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  152
  65
  22
  65
  13
  8
  21
  1
  13/23
  342/65
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  45
  22
  2
  21
  8
  2
  10
  1
  8/15
  5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  115
  63
  6
  46
  14
  5
  19
  1
  27/44
  317/63
  ((17/2 9 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  293
  131
  60
  102
  14
  10
  24
  1
  10/19
  725/131
  ((54 54 1/2) (107/2 107/2 0) (107/2 107/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  309
  147
  60
  102
  14
  10
  24
  1
  1/2
  821/147
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  27
  9
  3
  15
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  155
  51
  31
  73
  13
  7
  20
  1
  9/16
  90/17
  ((43/2 43/2 0) (43/2 43/2 0) (43/2 43/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  309
  135
  61
  113
  13
  9
  22
  1
  9/19
  746/135
  ((105/2 105/2 0) (52 52 0) (52 52 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  74
  19
  13
  42
  7
  5
  12
  1
  7/11
  100/19
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  78
  23
  13
  42
  7
  5
  12
  1
  7/12
  120/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  163
  59
  30
  74
  16
  10
  26
  1
  32/57
  313/59
  ((12 12 0) (12 12 0) (12 12 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  11
  3
  0
  8
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  9
  3
  9
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  199
  53
  61
  85
  11
  9
  20
  1
  7/12
  288/53
  ((65/2 65/2 0) (33 33 0) (65/2 65/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  215
  69
  61
  85
  11
  9
  20
  1
  7/13
  128/23
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  301
  148
  63
  90
  18
  11
  29
  1
  7/13
  779/148
  ((37/2 37/2 0) (37/2 37/2 0) (37/2 37/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  11
  3
  19
  7
  2
  9
  1
  7/9
  56/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  33
  11
  3
  19
  7
  2
  9
  1
  7/9
  56/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  41
  12
  3
  26
  7
  2
  9
  1
  7/10
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  108
  35
  14
  59
  11
  5
  16
  1
  11/17
  37/7
  ((15/2 15/2 0) (8 8 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x4) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  112
  39
  14
  59
  11
  5
  16
  1
  11/18
  205/39
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  118
  45
  14
  59
  11
  5
  16
  1
  11/19
  47/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  9
  3
  13
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  33
  10
  3
  20
  5
  2
  7
  1
  5/8
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  32
  12
  3
  17
  5
  2
  7
  1
  5/8
  61/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  55
  13
  8
  34
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  88
  34
  10
  44
  13
  7
  20
  1
  13/19
  173/34
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  149
  68
  37
  44
  23
  11
  34
  1
  119/216
  209/34
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  360
  170
  96
  94
  29
  15
  44
  1
  135/272
  1083/170
  ((121/2 121/2 1/2) (60 60 1/2) (60 60 1/2)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  368
  178
  96
  94
  36
  15
  51
  1
  71/140
  1215/178
  ((11/2 11/2 0) (6 6 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  40
  19
  2
  19
  7
  2
  9
  1
  7/13
  5
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  48
  20
  2
  26
  7
  2
  9
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  117
  49
  15
  53
  13
  7
  20
  1
  13/23
  250/49
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  121
  53
  15
  53
  13
  7
  20
  1
  13/24
  274/53
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  213
  119
  33
  61
  17
  9
  26
  1
  1/2
  610/119
  ((25 25 0) (25 25 0) (49/2 49/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  213
  119
  33
  61
  17
  9
  26
  1
  1/2
  610/119
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  217
  123
  33
  61
  17
  9
  26
  1
  13/27
  210/41
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  219
  125
  33
  61
  17
  9
  26
  1
  37/81
  128/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  219
  125
  33
  61
  17
  9
  26
  1
  37/81
  128/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  223
  129
  33
  61
  17
  9
  26
  1
  37/84
  220/43
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x3 x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  227
  133
  33
  61
  17
  9
  26
  1
  37/87
  680/133
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  57
  15
  8
  34
  9
  5
  14
  1
  17/22
  26/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  58
  16
  8
  34
  9
  5
  14
  1
  8/11
  83/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  149
  45
  30
  74
  16
  10
  26
  1
  53/84
  239/45
  ((23/2 23/2 0) (23/2 23/2 0) (23/2 23/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  153
  49
  30
  74
  16
  10
  26
  1
  53/90
  37/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  95
  19
  20
  56
  7
  6
  13
  1
  7/10
  104/19
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  8
  6
  0
  2
  4
  0
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  38
  17
  3
  18
  11
  2
  13
  1
  10/13
  86/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  135
  55
  20
  60
  24
  6
  30
  1
  95/132
  26/5
  ((33/2 33/2 0) (17 17 0) (33/2 33/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  138
  58
  20
  60
  27
  6
  33
  1
  113/150
  301/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  138
  58
  20
  60
  27
  6
  33
  1
  113/150
  301/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  49
  17
  8
  24
  8
  4
  12
  1
  15/22
  88/17
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  9
  5
  14
  1
  17/20
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  108
  43
  19
  46
  18
  7
  25
  1
  12/17
  227/43
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  44
  14
  8
  22
  10
  5
  15
  1
  19/22
  73/14
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  48
  23
  8
  17
  14
  4
  18
  1
  25/36
  120/23
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  50
  25
  8
  17
  15
  4
  19
  1
  13/19
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  34
  10
  3
  21
  6
  2
  8
  1
  3/4
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  36
  11
  3
  22
  6
  2
  8
  1
  2/3
  56/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  133
  42
  20
  71
  17
  9
  26
  1
  61/84
  73/14
  ((18 18 0) (18 18 0) (18 18 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  136
  45
  20
  71
  20
  9
  29
  1
  79/102
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  9
  5
  14
  1
  17/20
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  15
  8
  22
  10
  5
  15
  1
  9/11
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  17
  8
  22
  11
  5
  16
  1
  19/24
  88/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  54
  21
  8
  25
  11
  5
  16
  1
  19/26
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  118
  55
  35
  28
  21
  9
  30
  1
  13/24
  353/55
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  120
  57
  35
  28
  22
  9
  31
  1
  95/176
  121/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  124
  61
  35
  28
  22
  9
  31
  1
  95/184
  383/61
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  163
  87
  47
  29
  26
  11
  37
  1
  19/40
  173/29
  ((8 8 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  187
  101
  56
  30
  36
  19
  55
  1
  57/116
  580/101
  ((1 1 0) (3/2 3/2 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  15
  8
  20
  9
  4
  13
  1
  8/11
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  102
  39
  19
  44
  14
  6
  20
  1
  17/28
  69/13
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  56
  19
  10
  27
  10
  6
  16
  1
  19/26
  98/19
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  115
  49
  21
  45
  15
  8
  23
  1
  5/8
  255/49
  ((29/2 29/2 0) (29/2 29/2 0) (29/2 29/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  125
  59
  21
  45
  21
  8
  29
  1
  7/11
  311/59
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  9
  5
  2
  2
  1
  1
  2
  1
  1/8
  22/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  11
  17
  10
  6
  16
  1
  5/8
  94/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ((□? (s)))))\""
  49
  21
  11
  17
  11
  6
  17
  1
  8/13
  104/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  98
  43
  31
  24
  16
  6
  22
  1
  71/144
  277/43
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  185
  85
  59
  41
  20
  8
  28
  1
  71/160
  581/85
  ((23 23 0) (47/2 47/2 0) (47/2 47/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  187
  87
  59
  41
  21
  8
  29
  1
  25/56
  197/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env ((□? (f)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  26
  12
  3
  11
  7
  2
  9
  1
  13/18
  61/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  27
  13
  3
  11
  7
  2
  9
  1
  13/20
  66/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  11
  3
  15
  7
  2
  9
  1
  7/9
  56/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  31
  12
  3
  16
  7
  2
  9
  1
  7/10
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  57
  19
  9
  29
  9
  4
  13
  1
  8/11
  99/19
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  63
  25
  9
  29
  9
  4
  13
  1
  2/3
  129/25
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  326
  166
  49
  111
  27
  8
  35
  1
  7/13
  435/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  5
  3
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env ((□? (s)))))\""
  8
  5
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  53
  26
  8
  19
  14
  4
  18
  1
  21/34
  135/26
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  55
  28
  8
  19
  15
  4
  19
  1
  11/18
  145/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  58
  31
  8
  19
  15
  4
  19
  1
  11/21
  160/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  60
  33
  8
  19
  16
  4
  20
  1
  23/44
  170/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  49
  21
  8
  20
  13
  4
  17
  1
  11/15
  110/21
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  11
  8
  0
  3
  4
  0
  4
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env ((□? (s)))))\""
  13
  9
  0
  4
  4
  0
  4
  1
  4/9
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  54
  26
  8
  20
  16
  4
  20
  1
  27/38
  133/26
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  125
  68
  31
  26
  36
  6
  42
  1
  125/216
  201/34
  ((19/2 19/2 0) (19/2 19/2 0) (9 9 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  129
  72
  31
  26
  36
  6
  42
  1
  125/224
  211/36
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  296
  146
  83
  67
  43
  11
  54
  1
  79/144
  503/73
  ((52 52 1/2) (105/2 105/2 1/2) (52 52 1/2)))
'(shuffled-cache
  1
  sat-3
  1
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  11
  3
  0
  8
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  18
  6
  2
  10
  2
  1
  3
  1
  3/10
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  118
  55
  19
  44
  23
  6
  29
  1
  14/23
  291/55
  ((9 9 0) (9 9 0) (19/2 19/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  120
  57
  19
  44
  23
  6
  29
  1
  40/69
  301/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  98
  43
  19
  36
  17
  6
  23
  1
  11/17
  227/43
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  287
  123
  49
  115
  21
  8
  29
  1
  11/19
  649/123
  ((76 76 1/2) (77 77 1/2) (76 76 1/2)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  289
  125
  49
  115
  22
  8
  30
  1
  23/40
  661/125
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  292
  128
  49
  115
  22
  8
  30
  1
  23/40
  169/32
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  5
  4
  0
  1
  3
  0
  3
  1
  3/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  24
  7
  2
  15
  4
  2
  6
  1
  7/10
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  24
  7
  2
  15
  4
  2
  6
  1
  7/10
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  49
  23
  6
  20
  8
  4
  12
  1
  15/22
  117/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  48
  17
  8
  23
  8
  4
  12
  1
  15/22
  88/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  119
  53
  19
  47
  17
  6
  23
  1
  11/18
  277/53
  ((8 8 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  119
  53
  19
  47
  17
  6
  23
  1
  11/18
  277/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  121
  55
  19
  47
  19
  6
  25
  1
  13/20
  287/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  123
  57
  19
  47
  20
  6
  26
  1
  9/14
  299/57
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  100
  43
  19
  38
  17
  6
  23
  1
  11/17
  227/43
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  15
  8
  16
  9
  4
  13
  1
  8/11
  26/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  17
  8
  16
  10
  4
  14
  1
  17/24
  90/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  96
  41
  19
  36
  15
  6
  21
  1
  3/5
  217/41
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  98
  43
  19
  36
  16
  6
  22
  1
  19/32
  227/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  269
  121
  48
  100
  22
  9
  31
  1
  11/19
  640/121
  ((46 46 0) (91/2 91/2 0) (91/2 91/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  271
  123
  48
  100
  22
  9
  31
  1
  21/38
  650/123
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  39
  15
  8
  16
  9
  4
  13
  1
  8/11
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  95
  40
  19
  36
  15
  6
  21
  1
  13/21
  21/4
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  99
  43
  19
  37
  15
  6
  21
  1
  26/51
  225/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  107
  51
  19
  37
  20
  6
  26
  1
  73/132
  269/51
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  9
  3
  17
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  41
  17
  6
  18
  9
  4
  13
  1
  7/11
  83/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  88
  40
  12
  36
  14
  7
  21
  1
  43/78
  101/20
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  11
  6
  0
  5
  5
  0
  5
  1
  5/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  12
  4
  16
  1
  3/4
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  114
  43
  19
  52
  20
  9
  29
  1
  38/51
  227/43
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env ((□? (f)))))\""
  118
  47
  19
  52
  23
  9
  32
  1
  43/57
  247/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  276
  128
  49
  99
  28
  11
  39
  1
  173/252
  337/64
  ((57 57 0) (113/2 113/2 0) (56 56 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  277
  129
  49
  99
  28
  11
  39
  1
  19/28
  679/129
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  279
  131
  49
  99
  29
  11
  40
  1
  59/88
  691/131
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  281
  133
  49
  99
  30
  11
  41
  1
  61/92
  701/133
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  49
  20
  8
  21
  12
  4
  16
  1
  7/10
  21/4
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  51
  22
  8
  21
  13
  4
  17
  1
  11/16
  115/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  114
  54
  33
  27
  21
  6
  27
  1
  33/64
  19/3
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  4
  3
  0
  1
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  10
  5
  0
  5
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  19
  10
  7
  2
  6
  4
  10
  1
  3/8
  27/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  28
  14
  9
  5
  7
  5
  12
  1
  2/7
  37/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  30
  16
  9
  5
  8
  5
  13
  1
  1/3
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  211
  109
  58
  44
  25
  15
  40
  1
  359/1740
  631/109
  ((18 18 0) (18 18 0) (18 18 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env ((□? (r x)) (□? (f x)))))\""
  215
  111
  58
  46
  26
  15
  41
  1
  389/1800
  641/111
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  215
  111
  58
  46
  26
  15
  41
  1
  389/1800
  641/111
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  218
  113
  58
  47
  27
  15
  42
  1
  419/1860
  651/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ((□? (i)))))\""
  220
  114
  58
  48
  27
  15
  42
  1
  419/1890
  328/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  232
  125
  58
  49
  35
  15
  50
  1
  539/2040
  711/125
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  236
  126
  58
  52
  35
  15
  50
  1
  539/2070
  358/63
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  239
  128
  58
  53
  36
  15
  51
  1
  569/2130
  363/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  241
  130
  58
  53
  36
  15
  51
  1
  569/2160
  368/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app minimax bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  245
  134
  58
  53
  37
  15
  52
  1
  599/2220
  378/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  11
  6
  0
  5
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  18
  11
  0
  7
  5
  0
  5
  1
  5/11
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  19
  12
  0
  7
  5
  0
  5
  1
  5/12
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  20
  13
  0
  7
  5
  0
  5
  1
  5/13
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  23
  15
  0
  8
  5
  0
  5
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  65
  30
  20
  15
  7
  4
  11
  1
  7/18
  27/5
  ((4 4 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  11
  7
  0
  4
  3
  0
  3
  1
  3/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env ((□? (some-v-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env ((□? (f acc l)))))\""
  5
  3
  0
  2
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  54
  32
  15
  7
  22
  8
  30
  1
  13/24
  21/4
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  95
  57
  28
  10
  39
  16
  55
  1
  27/44
  102/19
  ((5/2 5/2 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  4
  3
  0
  1
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-horizon\")\n  (env ((□? (move-horizon-v)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env ((□? ()))))\""
  6
  3
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  8
  4
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  10
  6
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  13
  8
  0
  5
  1
  0
  1
  1
  1/8
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  18
  11
  0
  7
  3
  0
  3
  1
  3/11
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env ((□? ()))))\""
  20
  13
  0
  7
  4
  0
  4
  1
  4/13
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  14
  6
  2
  6
  1
  1
  2
  1
  1/10
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  28
  14
  5
  9
  2
  1
  3
  1
  3/20
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  30
  15
  5
  10
  2
  1
  3
  1
  3/22
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  66
  35
  10
  21
  6
  2
  8
  1
  7/46
  36/7
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app lose) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  10
  5
  0
  5
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  74
  45
  21
  8
  33
  12
  45
  1
  25/36
  238/45
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  79
  49
  20
  10
  35
  12
  47
  1
  83/128
  258/49
  ((5 5 0) (5 5 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  9
  6
  0
  3
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo)))))\""
  11
  7
  0
  4
  2
  0
  2
  1
  2/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  55
  22
  15
  18
  2
  3
  5
  1
  1/8
  58/11
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  96
  44
  30
  22
  16
  11
  27
  1
  5/32
  123/22
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  99
  46
  30
  23
  17
  11
  28
  1
  19/104
  128/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  124
  61
  37
  26
  24
  15
  39
  1
  85/372
  334/61
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  7
  3
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  35
  21
  7
  7
  14
  4
  18
  1
  19/30
  113/21
  ((3/2 3/2 0) (3/2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env ((□? (co)))))\""
  37
  22
  7
  8
  14
  4
  18
  1
  19/32
  59/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  27
  16
  5
  6
  9
  3
  12
  1
  5/8
  81/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env ((□? (rc)) (□? (b m)))))\""
  30
  17
  5
  8
  9
  3
  12
  1
  5/9
  86/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  32
  18
  5
  9
  9
  3
  12
  1
  1/2
  91/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  35
  19
  5
  11
  9
  3
  12
  1
  5/11
  96/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  11
  7
  0
  4
  3
  0
  3
  1
  3/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  15
  9
  0
  6
  3
  0
  3
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  20
  11
  0
  9
  3
  0
  3
  1
  3/11
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  26
  15
  0
  11
  5
  0
  5
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  96
  65
  12
  19
  26
  7
  33
  1
  77/270
  372/65
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  115
  75
  16
  24
  26
  8
  34
  1
  77/312
  141/25
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  115
  75
  16
  24
  26
  8
  34
  1
  77/312
  141/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  118
  76
  16
  26
  26
  8
  34
  1
  77/318
  107/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (c)) (□? (b m)))))\""
  12
  7
  0
  5
  3
  0
  3
  1
  3/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  14
  8
  0
  6
  3
  0
  3
  1
  3/8
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  159
  94
  41
  24
  21
  14
  35
  1
  67/336
  539/94
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> minimax <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  4
  0
  4
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  11
  6
  0
  5
  3
  0
  3
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  23
  13
  2
  8
  4
  0
  4
  1
  4/11
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  46
  25
  11
  10
  11
  5
  16
  1
  2/5
  143/25
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env ((□? (bo)) (□? (ma)))))\""
  50
  27
  11
  12
  12
  5
  17
  1
  7/17
  17/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  54
  31
  11
  12
  12
  5
  17
  1
  7/19
  174/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env ((□? (bo this-play that-play)))))\""
  5
  4
  0
  1
  3
  0
  3
  1
  3/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  40
  21
  4
  15
  7
  1
  8
  1
  5/16
  107/21
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  115
  62
  27
  26
  14
  5
  19
  1
  12/35
  163/31
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  118
  64
  27
  27
  14
  5
  19
  1
  12/37
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  19
  8
  7
  4
  3
  4
  7
  1
  3/20
  21/4
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  22
  10
  7
  5
  3
  4
  7
  1
  3/28
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  24
  11
  7
  6
  3
  4
  7
  1
  3/32
  57/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env ((□? (h)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  7
  4
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  48
  30
  12
  6
  10
  7
  17
  1
  17/120
  89/15
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  61
  36
  14
  11
  11
  7
  18
  1
  23/150
  52/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  64
  38
  14
  12
  11
  7
  18
  1
  23/162
  109/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  64
  38
  14
  12
  11
  7
  18
  1
  23/162
  109/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  64
  38
  14
  12
  11
  7
  18
  1
  23/162
  109/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  68
  40
  14
  14
  12
  7
  19
  1
  1/6
  57/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  73
  43
  14
  16
  14
  7
  21
  1
  41/192
  243/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  74
  44
  14
  16
  14
  7
  21
  1
  41/198
  62/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  77
  46
  14
  17
  15
  7
  22
  1
  47/210
  129/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> empty-board <-) player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  80
  36
  32
  12
  20
  18
  38
  1
  241/432
  46/9
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  157
  82
  55
  20
  54
  31
  85
  1
  703/1104
  431/82
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  6
  5
  0
  1
  3
  0
  3
  1
  3/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  9
  7
  0
  2
  3
  0
  3
  1
  3/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env ((□? (bo this-play that-play)))))\""
  12
  9
  0
  3
  4
  0
  4
  1
  4/9
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  20
  14
  0
  6
  6
  0
  6
  1
  3/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> display <-) \"Cat's game.\\n\")\n  (env ((□? (bo this-play that-play)))))\""
  15
  7
  2
  6
  1
  0
  1
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  17
  8
  2
  7
  1
  0
  1
  1
  1/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  6
  3
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  10
  6
  0
  4
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  56
  25
  15
  16
  2
  3
  5
  1
  2/15
  131/25
  ((3 3 0) (3 3 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  11
  6
  0
  5
  1
  0
  1
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) empty-board player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  14
  8
  0
  6
  2
  0
  2
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  17
  10
  0
  7
  3
  0
  3
  1
  3/10
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  173
  78
  69
  26
  28
  27
  55
  1
  1381/3840
  139/26
  ((31/2 31/2 0) (31/2 31/2 0) (31/2 31/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  5
  3
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  8
  5
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-coord\")\n  (env ((□? (move-coord-v)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  7
  0
  5
  3
  0
  3
  1
  3/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  41
  19
  9
  13
  4
  2
  6
  1
  7/30
  98/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  67
  32
  14
  21
  8
  3
  11
  1
  43/240
  83/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  70
  34
  14
  22
  8
  3
  11
  1
  43/260
  88/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  74
  37
  14
  23
  10
  3
  13
  1
  63/290
  191/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  47
  18
  15
  14
  0
  3
  3
  1
  0
  11/2
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  47
  18
  15
  14
  0
  3
  3
  1
  0
  11/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? (bo this-play that-play)))))\""
  50
  20
  15
  15
  0
  3
  3
  1
  0
  109/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  54
  21
  15
  18
  0
  3
  3
  1
  0
  38/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (oc₀ oc₁)))))\""
  56
  22
  15
  19
  0
  3
  3
  1
  0
  119/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  58
  24
  15
  19
  2
  3
  5
  1
  1/8
  43/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  61
  25
  15
  21
  2
  3
  5
  1
  2/17
  134/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  64
  27
  15
  22
  2
  3
  5
  1
  2/19
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env ((□? (bo)))))\""
  66
  28
  15
  23
  2
  3
  5
  1
  1/10
  149/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env ((□? (f x)))))\""
  68
  30
  15
  23
  3
  3
  6
  1
  3/22
  53/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  71
  32
  15
  24
  3
  3
  6
  1
  1/8
  169/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo this-play that-play)))))\""
  72
  33
  15
  24
  3
  3
  6
  1
  3/25
  58/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  76
  36
  15
  25
  5
  3
  8
  1
  5/28
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  196
  120
  41
  35
  35
  14
  49
  1
  227/852
  169/30
  ((23/2 23/2 0) (23/2 23/2 0) (23/2 23/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  223
  137
  47
  39
  45
  18
  63
  1
  271/912
  761/137
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  91
  60
  23
  8
  41
  13
  54
  1
  13/20
  107/20
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  93
  61
  23
  9
  41
  13
  54
  1
  91/144
  326/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  42
  25
  9
  8
  7
  2
  9
  1
  7/16
  132/25
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  192
  102
  65
  25
  40
  30
  70
  1
  113/264
  268/51
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  194
  104
  65
  25
  40
  30
  70
  1
  113/276
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) bo that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  74
  46
  20
  8
  34
  12
  46
  1
  79/116
  243/46
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  275
  161
  76
  38
  69
  35
  104
  1
  821/1992
  899/161
  ((18 18 0) (18 18 0) (18 18 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  295
  180
  76
  39
  83
  35
  118
  1
  25/56
  199/36
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  298
  182
  76
  40
  83
  35
  118
  1
  325/744
  1005/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  7
  4
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  9
  5
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  103
  43
  42
  18
  21
  22
  43
  1
  241/528
  222/43
  ((7 7 0) (15/2 15/2 0) (7 7 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  131
  61
  49
  21
  35
  26
  61
  1
  469/816
  320/61
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  32
  17
  4
  11
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  35
  19
  4
  12
  5
  1
  6
  1
  3/14
  97/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> maximin <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  37
  21
  4
  12
  6
  1
  7
  1
  1/4
  107/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  50
  26
  4
  20
  7
  1
  8
  1
  5/18
  66/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  76
  38
  17
  21
  16
  11
  27
  1
  29/84
  109/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  159
  95
  41
  23
  22
  14
  36
  1
  73/336
  544/95
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  251
  155
  70
  26
  56
  32
  88
  1
  571/1800
  857/155
  ((10 10 0) (10 10 0) (10 10 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  253
  156
  70
  27
  56
  32
  88
  1
  571/1824
  431/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  258
  160
  70
  28
  58
  32
  90
  1
  619/1920
  441/80
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  259
  161
  70
  28
  59
  32
  91
  1
  643/1944
  887/161
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  260
  162
  70
  28
  59
  32
  91
  1
  643/1968
  446/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  339
  203
  97
  39
  86
  46
  132
  1
  889/2328
  1105/203
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  369
  219
  110
  40
  98
  56
  154
  1
  961/2424
  1193/219
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env ((□? (f xs)))))\""
  374
  224
  110
  40
  102
  56
  158
  1
  1003/2472
  87/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  384
  234
  110
  40
  103
  56
  159
  1
  1003/2544
  634/117
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  387
  237
  110
  40
  105
  56
  161
  1
  1019/2568
  428/79
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  389
  239
  110
  40
  107
  56
  163
  1
  1067/2616
  1294/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  5
  4
  0
  1
  3
  0
  3
  1
  3/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  37
  28
  7
  2
  23
  4
  27
  1
  65/76
  151/28
  ((5/2 5/2 0) (2 2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env ((□? (b co m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  61
  44
  12
  5
  14
  7
  21
  1
  5/36
  131/22
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env ((□? (oc₀ oc₁)))))\""
  63
  45
  12
  6
  14
  7
  21
  1
  25/186
  89/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  67
  49
  12
  6
  17
  7
  24
  1
  35/198
  41/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  68
  50
  12
  6
  17
  7
  24
  1
  35/204
  146/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env ((□? (b m)))))\""
  73
  46
  20
  7
  34
  12
  46
  1
  79/116
  243/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  82
  51
  23
  8
  36
  14
  50
  1
  79/124
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  6
  0
  2
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  5
  4
  0
  1
  3
  0
  3
  1
  3/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  10
  6
  0
  4
  1
  0
  1
  1
  1/6
  29/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  18
  11
  0
  7
  3
  0
  3
  1
  3/11
  54/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  20
  12
  0
  8
  3
  0
  3
  1
  1/4
  59/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  89
  56
  20
  13
  36
  12
  48
  1
  29/52
  73/14
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  7
  2
  6
  2
  1
  3
  1
  1/3
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  17
  9
  2
  6
  2
  1
  3
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  38
  28
  7
  3
  23
  4
  27
  1
  65/76
  151/28
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  27
  16
  5
  6
  9
  3
  12
  1
  5/8
  81/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b)))))\""
  31
  18
  5
  8
  10
  3
  13
  1
  3/5
  91/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  35
  20
  5
  10
  11
  3
  14
  1
  7/12
  101/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  39
  24
  5
  10
  14
  3
  17
  1
  13/21
  121/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  42
  26
  5
  11
  15
  3
  18
  1
  29/48
  131/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  45
  29
  5
  11
  17
  3
  20
  1
  35/57
  146/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  47
  30
  5
  12
  17
  3
  20
  1
  7/12
  151/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  7
  4
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env ((□? (h₀ h₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  88
  57
  23
  8
  42
  13
  55
  1
  111/152
  102/19
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  69
  34
  20
  15
  8
  4
  12
  1
  2/5
  91/17
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app win) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  10
  6
  0
  4
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  12
  7
  0
  5
  2
  0
  2
  1
  2/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  5
  3
  0
  2
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  52
  34
  12
  6
  25
  8
  33
  1
  37/50
  183/34
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  7
  2
  6
  2
  1
  3
  1
  1/3
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  16
  8
  2
  6
  2
  1
  3
  1
  2/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  18
  10
  4
  4
  3
  1
  4
  1
  3/28
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app X) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  5
  3
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (b)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  11
  7
  0
  4
  1
  0
  1
  1
  1/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  12
  6
  2
  4
  1
  1
  2
  1
  1/10
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  169
  100
  44
  25
  22
  15
  37
  1
  35/177
  143/25
  ((14 14 0) (14 14 0) (14 14 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  172
  102
  44
  26
  23
  15
  38
  1
  38/183
  97/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  175
  104
  44
  27
  23
  15
  38
  1
  38/189
  74/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  36
  17
  4
  15
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  48
  21
  4
  23
  4
  1
  5
  1
  2/13
  107/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  9
  6
  0
  3
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  14
  9
  0
  5
  4
  0
  4
  1
  4/9
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env ((□? (h)))))\""
  16
  10
  0
  6
  4
  0
  4
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma)))\n  (env ((□? (bo)) (□? (ma)))))\""
  9
  4
  0
  5
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  35
  14
  15
  6
  7
  8
  15
  1
  1/8
  40/7
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  44
  18
  17
  9
  8
  9
  17
  1
  11/80
  50/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  48
  20
  17
  11
  9
  9
  18
  1
  19/96
  11/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  50
  22
  17
  11
  10
  9
  19
  1
  23/104
  60/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (oc₀ oc₁)))))\""
  52
  23
  17
  12
  10
  9
  19
  1
  23/112
  125/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  16
  8
  2
  6
  1
  0
  1
  1
  1/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  65
  44
  15
  6
  35
  8
  43
  1
  133/184
  21/4
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  68
  46
  15
  7
  35
  8
  43
  1
  133/200
  241/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  51
  33
  13
  5
  25
  8
  33
  1
  37/46
  178/33
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  69
  43
  17
  9
  28
  9
  37
  1
  77/120
  230/43
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  134
  75
  37
  22
  35
  13
  48
  1
  15/28
  404/75
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  177
  98
  51
  28
  44
  23
  67
  1
  349/624
  272/49
  ((9/2 9/2 0) (5 5 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  184
  104
  51
  29
  44
  23
  67
  1
  313/624
  72/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  8
  6
  0
  2
  3
  0
  3
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  11
  8
  0
  3
  3
  0
  3
  1
  3/8
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  9
  7
  0
  2
  5
  0
  5
  1
  5/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  12
  9
  0
  3
  5
  0
  5
  1
  5/9
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked? <-) (app b (app coord r c)))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  17
  11
  0
  6
  6
  0
  6
  1
  6/11
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  27
  18
  7
  2
  14
  4
  18
  1
  19/24
  49/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  90
  36
  21
  33
  8
  2
  10
  1
  7/45
  11/2
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  48
  32
  12
  4
  25
  8
  33
  1
  37/46
  173/32
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  80
  49
  16
  15
  29
  9
  38
  1
  41/70
  260/49
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  135
  76
  34
  25
  29
  12
  41
  1
  41/90
  101/19
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo this-play that-play)))))\""
  5
  3
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env ((□? (h)))))\""
  7
  4
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  10
  5
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  7
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  8
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  41
  26
  5
  10
  11
  3
  14
  1
  17/48
  131/26
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) bo that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  104
  44
  42
  18
  21
  22
  43
  1
  233/528
  227/44
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  114
  53
  42
  19
  28
  22
  50
  1
  337/648
  272/53
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  17
  5
  3
  9
  0
  1
  1
  1
  0
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  20
  7
  3
  10
  1
  1
  2
  1
  1/5
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-horizon\")\n  (env ((□? (move-horizon-v)))))\""
  22
  8
  3
  11
  1
  1
  2
  1
  1/6
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  20
  8
  7
  5
  3
  4
  7
  1
  3/20
  21/4
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  24
  11
  7
  6
  3
  4
  7
  1
  3/32
  57/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  90
  61
  19
  10
  23
  11
  34
  1
  83/456
  353/61
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) empty-board player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  95
  66
  19
  10
  27
  11
  38
  1
  13/60
  63/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  97
  67
  19
  11
  27
  11
  38
  1
  26/123
  383/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  97
  67
  19
  11
  27
  11
  38
  1
  26/123
  383/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  97
  67
  19
  11
  27
  11
  38
  1
  26/123
  383/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  162
  99
  39
  24
  34
  15
  49
  1
  47/180
  557/99
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  162
  99
  39
  24
  34
  15
  49
  1
  47/180
  557/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  168
  105
  39
  24
  34
  15
  49
  1
  47/186
  587/105
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> empty-board <-) player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  10
  6
  0
  4
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  11
  7
  0
  4
  3
  0
  3
  1
  3/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  36
  17
  4
  15
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  61
  31
  11
  19
  13
  6
  19
  1
  17/48
  158/31
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  63
  33
  11
  19
  13
  6
  19
  1
  17/54
  56/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  69
  37
  11
  21
  15
  6
  21
  1
  23/66
  188/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  71
  39
  11
  21
  15
  6
  21
  1
  23/72
  66/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  75
  42
  11
  22
  17
  6
  23
  1
  29/81
  71/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  48
  32
  12
  4
  25
  8
  33
  1
  37/46
  173/32
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  11
  6
  2
  3
  1
  1
  2
  1
  1/10
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  96
  40
  23
  33
  9
  3
  12
  1
  11/70
  109/20
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  102
  46
  23
  33
  14
  3
  17
  1
  121/480
  124/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  105
  48
  23
  34
  14
  3
  17
  1
  121/520
  43/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  108
  50
  23
  35
  14
  3
  17
  1
  121/560
  134/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  126
  60
  27
  39
  17
  4
  21
  1
  34/175
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app X) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  11
  5
  2
  4
  1
  1
  2
  1
  1/8
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  7
  2
  4
  2
  1
  3
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  18
  9
  2
  7
  3
  1
  4
  1
  5/16
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  20
  10
  2
  8
  3
  1
  4
  1
  5/18
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  23
  12
  2
  9
  3
  1
  4
  1
  5/22
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  10
  7
  0
  3
  3
  0
  3
  1
  3/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma)))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  165
  97
  41
  27
  22
  14
  36
  1
  73/336
  554/97
  ((14 14 0) (14 14 0) (14 14 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  169
  101
  41
  27
  25
  14
  39
  1
  83/348
  574/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  280
  166
  76
  38
  70
  35
  105
  1
  169/408
  462/83
  ((9 9 0) (9 9 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  15
  7
  2
  6
  1
  0
  1
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  76
  51
  14
  11
  15
  7
  22
  1
  31/216
  99/17
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  80
  55
  14
  11
  15
  7
  22
  1
  31/228
  318/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  121
  81
  21
  19
  25
  10
  35
  1
  11/60
  50/9
  ((5/2 5/2 0) (2 2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  65
  30
  20
  15
  7
  4
  11
  1
  7/18
  27/5
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  72
  36
  20
  16
  9
  4
  13
  1
  9/22
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  6
  0
  3
  3
  0
  3
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  13
  7
  0
  6
  3
  0
  3
  1
  3/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  16
  9
  0
  7
  3
  0
  3
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  37
  17
  9
  11
  3
  2
  5
  1
  5/26
  88/17
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  39
  19
  9
  11
  4
  2
  6
  1
  7/30
  98/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  49
  32
  12
  5
  25
  8
  33
  1
  37/46
  173/32
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  27
  18
  7
  2
  14
  4
  18
  1
  19/24
  49/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  36
  22
  9
  5
  15
  5
  20
  1
  2/3
  59/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  43
  27
  9
  7
  17
  5
  22
  1
  3/5
  143/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  46
  29
  9
  8
  18
  5
  23
  1
  13/22
  153/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  88
  51
  24
  13
  32
  13
  45
  1
  59/120
  271/51
  ((4 4 0) (7/2 7/2 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  88
  51
  24
  13
  32
  13
  45
  1
  59/120
  271/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  88
  51
  24
  13
  32
  13
  45
  1
  59/120
  271/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  152
  81
  46
  25
  46
  26
  72
  1
  71/148
  47/9
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  155
  83
  46
  26
  46
  26
  72
  1
  71/156
  433/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  159
  87
  46
  26
  49
  26
  75
  1
  37/80
  151/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  170
  94
  49
  27
  51
  27
  78
  1
  23/54
  244/47
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  217
  121
  61
  35
  68
  37
  105
  1
  703/1344
  640/121
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  439
  259
  124
  56
  105
  54
  159
  1
  5351/13440
  1426/259
  ((24 24 0) (24 24 0) (24 24 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> display <-) \"Cat's game.\\n\")\n  (env ((□? (bo this-play that-play)))))\""
  10
  6
  0
  4
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  11
  7
  0
  4
  2
  0
  2
  1
  2/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  14
  9
  0
  5
  2
  0
  2
  1
  2/9
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  27
  15
  2
  10
  3
  0
  3
  1
  3/14
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  11
  8
  0
  3
  6
  0
  6
  1
  3/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  13
  9
  0
  4
  6
  0
  6
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  73
  45
  20
  8
  33
  12
  45
  1
  75/112
  238/45
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ((□? (i)))))\""
  75
  46
  20
  9
  33
  12
  45
  1
  75/116
  243/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  95
  56
  27
  12
  39
  16
  55
  1
  27/44
  43/8
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  98
  58
  27
  13
  39
  16
  55
  1
  81/140
  311/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  178
  94
  59
  25
  59
  34
  93
  1
  727/1272
  495/94
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  180
  96
  59
  25
  60
  34
  94
  1
  751/1320
  505/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  182
  98
  59
  25
  60
  34
  94
  1
  751/1368
  515/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  224
  118
  74
  32
  63
  39
  102
  1
  19/39
  625/118
  ((9/2 9/2 0) (9/2 9/2 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  46
  32
  7
  7
  24
  4
  28
  1
  3/4
  171/32
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  61
  39
  13
  9
  27
  8
  35
  1
  77/108
  70/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  64
  41
  13
  10
  27
  8
  35
  1
  77/116
  220/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  32
  17
  4
  11
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  47
  30
  9
  8
  8
  2
  10
  1
  4/9
  157/30
  ((5/2 5/2 0) (5/2 5/2 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  91
  59
  21
  11
  20
  9
  29
  1
  23/70
  342/59
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  7
  3
  0
  4
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  9
  4
  0
  5
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  6
  2
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  35
  14
  15
  6
  7
  8
  15
  1
  1/8
  40/7
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  37
  15
  15
  7
  7
  8
  15
  1
  7/64
  17/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  77
  46
  23
  8
  34
  13
  47
  1
  11/16
  247/46
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  80
  48
  23
  9
  34
  13
  47
  1
  77/120
  257/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  89
  53
  26
  10
  36
  15
  51
  1
  77/128
  286/53
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? (ma)))))\""
  9
  5
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  16
  9
  2
  5
  1
  1
  2
  1
  1/16
  5
  ((1/2 1/2 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  18
  11
  2
  5
  2
  1
  3
  1
  1/9
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  45
  31
  7
  7
  17
  4
  21
  1
  8/17
  158/31
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  106
  45
  42
  19
  21
  22
  43
  1
  241/576
  232/45
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  161
  94
  41
  26
  21
  14
  35
  1
  67/336
  539/94
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  180
  104
  48
  28
  27
  18
  45
  1
  19/90
  593/104
  ((1 1 0) (3/2 3/2 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  180
  104
  48
  28
  27
  18
  45
  1
  19/90
  593/104
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  183
  107
  48
  28
  29
  18
  47
  1
  44/189
  608/107
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  192
  113
  48
  31
  31
  18
  49
  1
  46/195
  642/113
  ((1/2 1/2 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env ((□? (co)))))\""
  7
  3
  0
  4
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  9
  6
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  12
  8
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked? <-) (app b (app coord r c)))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  17
  10
  0
  7
  1
  0
  1
  1
  1/10
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  74
  45
  20
  9
  33
  12
  45
  1
  75/112
  238/45
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  98
  61
  25
  12
  44
  15
  59
  1
  293/432
  319/61
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  104
  65
  25
  14
  45
  15
  60
  1
  293/468
  339/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  108
  67
  25
  16
  45
  15
  60
  1
  293/492
  349/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  147
  89
  34
  24
  51
  17
  68
  1
  329/648
  464/89
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? (ma)))))\""
  147
  89
  34
  24
  51
  17
  68
  1
  329/648
  464/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  149
  90
  34
  25
  51
  17
  68
  1
  329/660
  469/90
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  152
  92
  34
  26
  51
  17
  68
  1
  329/684
  479/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  154
  94
  34
  26
  52
  17
  69
  1
  341/708
  489/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  74
  45
  21
  8
  33
  12
  45
  1
  25/36
  238/45
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  5
  3
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> minimax <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env ((□? (bo)))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app minimax bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  12
  7
  0
  5
  1
  0
  1
  1
  1/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  145
  65
  56
  24
  24
  26
  50
  1
  257/672
  339/65
  ((11 11 0) (11 11 0) (11 11 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env ((□? (h₀ h₁)))))\""
  147
  66
  56
  25
  24
  26
  50
  1
  257/696
  172/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  151
  68
  56
  27
  25
  26
  51
  1
  281/744
  177/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  221
  112
  76
  33
  58
  38
  96
  1
  731/1392
  587/112
  ((9/2 9/2 0) (9/2 9/2 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  224
  114
  76
  34
  59
  38
  97
  1
  151/288
  199/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  91
  60
  23
  8
  41
  13
  54
  1
  13/20
  107/20
  ((11/2 11/2 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  16
  8
  2
  6
  2
  0
  2
  1
  2/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env ((□? (b co m)))))\""
  18
  9
  2
  7
  2
  0
  2
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  20
  11
  2
  7
  4
  0
  4
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  223
  110
  82
  31
  46
  35
  81
  1
  727/1680
  53/10
  ((21 21 0) (21 21 0) (21 21 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  225
  112
  82
  31
  48
  35
  83
  1
  807/1760
  593/112
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  276
  156
  87
  33
  66
  37
  103
  1
  3211/8520
  215/39
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (b)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  6
  3
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  11
  6
  0
  5
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  52
  31
  12
  9
  12
  7
  19
  1
  29/126
  183/31
  ((4 4 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  160
  92
  41
  27
  21
  14
  35
  1
  67/324
  23/4
  ((15 15 0) (15 15 0) (14 14 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  160
  92
  41
  27
  21
  14
  35
  1
  67/324
  23/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  164
  94
  41
  29
  22
  14
  36
  1
  73/336
  539/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  167
  97
  41
  29
  24
  14
  38
  1
  41/174
  554/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app lose) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  17
  8
  2
  7
  2
  0
  2
  1
  2/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  7
  0
  5
  3
  0
  3
  1
  3/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  57
  33
  15
  9
  23
  8
  31
  1
  43/76
  173/33
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  60
  35
  15
  10
  23
  8
  31
  1
  43/84
  183/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  15
  14
  0
  3
  3
  1
  0
  27/5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  28
  18
  7
  3
  14
  4
  18
  1
  19/24
  49/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  23
  12
  4
  7
  3
  1
  4
  1
  1/12
  31/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env ((□? (f acc l)))))\""
  26
  14
  4
  8
  4
  1
  5
  1
  7/44
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  28
  15
  4
  9
  4
  1
  5
  1
  7/48
  77/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  31
  17
  4
  10
  4
  1
  5
  1
  1/8
  87/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  32
  18
  4
  10
  4
  1
  5
  1
  7/60
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  35
  19
  4
  12
  4
  1
  5
  1
  7/64
  97/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  20
  10
  7
  3
  6
  4
  10
  1
  3/8
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env ((□? (oc₀ oc₁)))))\""
  22
  11
  7
  4
  6
  4
  10
  1
  3/10
  59/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env ((□? ()))))\""
  25
  13
  7
  5
  7
  4
  11
  1
  5/14
  69/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  69
  28
  22
  19
  7
  7
  14
  1
  5/32
  75/14
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env ((□? (f xs)))))\""
  72
  30
  22
  20
  8
  7
  15
  1
  7/36
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  67
  32
  20
  15
  7
  4
  11
  1
  7/19
  87/16
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (c)) (□? (b m)))))\""
  71
  34
  20
  17
  8
  4
  12
  1
  8/21
  92/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? (bo this-play that-play)))))\""
  74
  36
  20
  18
  8
  4
  12
  1
  8/23
  97/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (oc₀ oc₁)))))\""
  76
  37
  20
  19
  8
  4
  12
  1
  1/3
  199/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  11
  5
  2
  4
  1
  1
  2
  1
  1/8
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  8
  4
  0
  4
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo)))))\""
  9
  6
  0
  3
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (oc₀ oc₁)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env ((□? (bo)) (□? (ma)))))\""
  12
  7
  0
  5
  3
  0
  3
  1
  3/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  15
  9
  0
  6
  3
  0
  3
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  65
  44
  15
  6
  35
  8
  43
  1
  133/184
  21/4
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env ((□? (bo this-play that-play)))))\""
  68
  46
  15
  7
  36
  8
  44
  1
  141/200
  241/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-coord\")\n  (env ((□? (move-coord-v)))))\""
  70
  47
  15
  8
  36
  8
  44
  1
  141/208
  246/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> maximin <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  10
  6
  0
  4
  3
  0
  3
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  12
  8
  0
  4
  4
  0
  4
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  57
  27
  15
  15
  4
  3
  7
  1
  2/9
  16/3
  ((3 3 0) (3 3 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  37
  28
  7
  2
  23
  4
  27
  1
  65/76
  151/28
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  52
  35
  9
  8
  25
  5
  30
  1
  73/100
  186/35
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  46
  28
  12
  6
  11
  7
  18
  1
  23/108
  6
  ((7/2 7/2 0) (4 4 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  65
  30
  20
  15
  7
  4
  11
  1
  7/18
  27/5
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  69
  33
  20
  16
  9
  4
  13
  1
  3/7
  59/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  74
  38
  20
  16
  10
  4
  14
  1
  10/23
  101/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  26
  14
  4
  8
  2
  1
  3
  1
  2/11
  71/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  29
  16
  4
  9
  2
  1
  3
  1
  2/13
  81/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  33
  18
  4
  11
  3
  1
  4
  1
  1/5
  91/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  36
  20
  4
  12
  3
  1
  4
  1
  3/17
  101/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  124
  77
  27
  20
  45
  14
  59
  1
  119/212
  37/7
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  127
  79
  27
  21
  46
  14
  60
  1
  123/220
  417/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env ((□? (oc₀ oc₁)))))\""
  129
  80
  27
  22
  46
  14
  60
  1
  123/224
  211/40
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  129
  80
  27
  22
  46
  14
  60
  1
  123/224
  211/40
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  132
  81
  27
  24
  46
  14
  60
  1
  41/76
  427/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  134
  83
  27
  24
  47
  14
  61
  1
  127/236
  437/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  330
  207
  85
  38
  91
  39
  130
  1
  71/156
  1153/207
  ((43/2 43/2 0) (43/2 43/2 0) (43/2 43/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  4
  0
  4
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  35
  22
  7
  6
  16
  4
  20
  1
  23/32
  59/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  38
  24
  7
  7
  17
  4
  21
  1
  25/36
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env ((□? (f x)))))\""
  41
  26
  7
  8
  18
  4
  22
  1
  27/40
  69/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  17
  9
  2
  6
  3
  0
  3
  1
  3/8
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ((□? (i)))))\""
  19
  10
  2
  7
  3
  0
  3
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  23
  12
  2
  9
  4
  0
  4
  1
  4/11
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b m)))))\""
  27
  14
  2
  11
  5
  0
  5
  1
  5/13
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  30
  17
  2
  11
  6
  0
  6
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env ((□? (r x)) (□? (f x)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env ((□? (some-v-v)))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  12
  6
  0
  6
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ((□? (i)))))\""
  14
  7
  0
  7
  2
  0
  2
  1
  2/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  23
  11
  2
  10
  3
  1
  4
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  26
  13
  5
  8
  4
  1
  5
  1
  4/45
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  5
  3
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  20
  11
  2
  7
  3
  1
  4
  1
  5/18
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  25
  15
  2
  8
  3
  1
  4
  1
  5/26
  74/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env ((□? (oc₀ oc₁)))))\""
  27
  16
  2
  9
  3
  1
  4
  1
  5/28
  79/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app win) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  28
  17
  2
  9
  3
  1
  4
  1
  1/6
  84/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  156
  92
  41
  23
  21
  14
  35
  1
  67/324
  23/4
  ((31/2 31/2 0) (14 14 0) (29/2 29/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  159
  95
  41
  23
  22
  14
  36
  1
  73/336
  544/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  162
  97
  41
  24
  23
  14
  37
  1
  79/348
  554/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  36
  17
  4
  15
  4
  1
  5
  1
  1/6
  87/17
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  37
  18
  4
  15
  5
  1
  6
  1
  3/13
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  42
  23
  4
  15
  6
  1
  7
  1
  4/15
  117/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  25
  4
  15
  6
  1
  7
  1
  4/17
  127/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  47
  27
  4
  16
  7
  1
  8
  1
  5/19
  137/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  73
  39
  17
  17
  16
  11
  27
  1
  29/88
  223/39
  ((5/2 5/2 0) (3 3 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  76
  41
  17
  18
  17
  11
  28
  1
  11/32
  233/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env ((□? (rc)) (□? (b m)))))\""
  84
  45
  17
  22
  17
  11
  28
  1
  33/100
  253/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  87
  47
  17
  23
  17
  11
  28
  1
  11/36
  263/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env ((□? (f xs)))))\""
  5
  4
  0
  1
  3
  0
  3
  1
  3/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  8
  6
  0
  2
  3
  0
  3
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  75
  46
  20
  9
  34
  12
  46
  1
  79/116
  243/46
  ((5 5 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  78
  48
  20
  10
  35
  12
  47
  1
  83/124
  253/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  100
  70
  20
  10
  49
  12
  61
  1
  15/26
  383/70
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  103
  72
  20
  11
  50
  12
  62
  1
  47/82
  131/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  105
  73
  20
  12
  50
  12
  62
  1
  47/84
  398/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  69
  41
  10
  18
  17
  6
  23
  1
  9/14
  195/41
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  77
  49
  10
  18
  19
  6
  25
  1
  14/23
  235/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  185
  127
  32
  26
  64
  21
  85
  1
  4021/5760
  671/127
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  197
  138
  32
  27
  75
  21
  96
  1
  551/765
  727/138
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  205
  146
  32
  27
  75
  21
  96
  1
  3524/5355
  384/73
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env ((□? (x1 x2)))))\""
  207
  148
  32
  27
  75
  21
  96
  1
  6943/10710
  195/37
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  209
  150
  32
  27
  75
  21
  96
  1
  27457/42840
  133/25
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  209
  150
  32
  27
  75
  21
  96
  1
  27457/42840
  133/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env ((□? (x1 x2)))))\""
  210
  151
  32
  27
  75
  21
  96
  1
  27247/42840
  804/151
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  218
  159
  32
  27
  75
  21
  96
  1
  473/765
  282/53
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  219
  160
  32
  27
  76
  21
  97
  1
  991/1575
  851/160
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  219
  160
  32
  27
  76
  21
  97
  1
  991/1575
  851/160
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  238
  173
  32
  33
  76
  21
  97
  1
  391/630
  921/173
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2)))))\""
  238
  173
  32
  33
  76
  21
  97
  1
  391/630
  921/173
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  238
  173
  32
  33
  76
  21
  97
  1
  391/630
  921/173
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  238
  173
  32
  33
  76
  21
  97
  1
  391/630
  921/173
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env ((□? (x1 x2)))))\""
  239
  174
  32
  33
  76
  21
  97
  1
  194/315
  463/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  243
  178
  32
  33
  76
  21
  97
  1
  379/630
  473/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  247
  181
  33
  33
  76
  21
  97
  1
  377/630
  962/181
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  247
  181
  33
  33
  76
  21
  97
  1
  377/630
  962/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env ((□? (x1 x2)))))\""
  248
  182
  33
  33
  76
  21
  97
  1
  187/315
  484/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  248
  182
  33
  33
  76
  21
  97
  1
  187/315
  484/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  250
  184
  33
  33
  76
  21
  97
  1
  926/1575
  489/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  250
  184
  33
  33
  76
  21
  97
  1
  926/1575
  489/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  302
  221
  40
  41
  76
  21
  97
  1
  359/630
  70/13
  ((25/2 25/2 0) (13 13 0) (12 12 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env ((□? (x1 x2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  20
  12
  3
  5
  10
  1
  11
  1
  5/6
  55/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  22
  14
  3
  5
  12
  1
  13
  1
  6/7
  65/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env ((□? (x1 x2)))))\""
  69
  45
  13
  11
  29
  4
  33
  1
  37/52
  74/15
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  216
  152
  32
  32
  75
  21
  96
  1
  277/408
  101/19
  ((23/2 23/2 0) (23/2 23/2 0) (23/2 23/2 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  259
  181
  37
  41
  75
  21
  96
  1
  1279/2040
  975/181
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  259
  181
  37
  41
  75
  21
  96
  1
  1279/2040
  975/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  265
  187
  37
  41
  75
  21
  96
  1
  1277/2040
  1005/187
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  266
  188
  37
  41
  75
  21
  96
  1
  3827/6120
  505/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  274
  196
  37
  41
  75
  21
  96
  1
  3701/6120
  529/98
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  274
  196
  37
  41
  75
  21
  96
  1
  3701/6120
  529/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env ((□? (x1 x2)))))\""
  275
  197
  37
  41
  75
  21
  96
  1
  3671/6120
  1064/197
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2)))))\""
  275
  197
  37
  41
  75
  21
  96
  1
  3671/6120
  1064/197
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  275
  197
  37
  41
  75
  21
  96
  1
  3671/6120
  1064/197
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  275
  197
  37
  41
  75
  21
  96
  1
  3671/6120
  1064/197
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  277
  199
  37
  41
  75
  21
  96
  1
  727/1224
  1074/199
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  277
  199
  37
  41
  75
  21
  96
  1
  727/1224
  1074/199
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  278
  200
  37
  41
  75
  21
  96
  1
  709/1224
  1079/200
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  279
  201
  37
  41
  76
  21
  97
  1
  149/252
  1084/201
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  279
  201
  37
  41
  76
  21
  97
  1
  149/252
  1084/201
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  281
  203
  37
  41
  76
  21
  97
  1
  929/1575
  1094/203
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  299
  218
  40
  41
  76
  21
  97
  1
  914/1575
  587/109
  ((4 4 0) (9/2 9/2 0) (4 4 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env ((□? (x1 x2)))))\""
  300
  219
  40
  41
  76
  21
  97
  1
  259/450
  1180/219
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  300
  219
  40
  41
  76
  21
  97
  1
  259/450
  1180/219
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  2
  100
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  302
  221
  40
  41
  76
  21
  97
  1
  359/630
  70/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  26
  11
  5
  10
  0
  1
  1
  1
  0
  58/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  81
  41
  21
  19
  9
  4
  13
  1
  47/160
  241/41
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  172
  89
  50
  33
  32
  19
  51
  1
  347/690
  564/89
  ((14 14 0) (14 14 0) (14 14 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  174
  91
  50
  33
  32
  19
  51
  1
  347/720
  82/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  239
  142
  52
  45
  39
  21
  60
  1
  517/1110
  813/142
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  305
  198
  52
  55
  67
  21
  88
  1
  125/234
  359/66
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  418
  279
  52
  87
  80
  21
  101
  1
  4429/8800
  490/93
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  420
  281
  52
  87
  80
  21
  101
  1
  4429/9020
  1480/281
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  423
  284
  52
  87
  81
  21
  102
  1
  4429/9240
  1493/284
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  425
  285
  52
  88
  82
  21
  103
  1
  4649/9460
  499/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  425
  285
  52
  88
  82
  21
  103
  1
  4649/9460
  499/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  431
  291
  52
  88
  82
  21
  103
  1
  4649/10120
  1531/291
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  3
  0
  4
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  9
  4
  0
  5
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  10
  5
  0
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  34
  17
  3
  14
  1
  0
  1
  1
  1/11
  86/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  122
  68
  22
  32
  10
  5
  15
  1
  41/114
  351/68
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  124
  70
  22
  32
  10
  5
  15
  1
  41/120
  363/70
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  130
  76
  22
  32
  12
  5
  17
  1
  43/126
  393/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  375
  236
  51
  88
  45
  11
  56
  1
  1835/4059
  307/59
  ((30 30 0) (59/2 30 0) (30 30 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  389
  250
  51
  88
  53
  11
  64
  1
  1868/4059
  649/125
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  547
  382
  51
  114
  81
  11
  92
  1
  239/516
  1941/382
  ((41/2 41/2 0) (41/2 41/2 0) (41/2 21 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  547
  382
  51
  114
  81
  11
  92
  1
  239/516
  1941/382
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  549
  384
  51
  114
  81
  11
  92
  1
  233/516
  1951/384
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  84
  51
  19
  14
  13
  2
  15
  1
  7/17
  90/17
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  88
  55
  19
  14
  15
  2
  17
  1
  5/12
  294/55
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  235
  151
  57
  27
  31
  10
  41
  1
  137/280
  796/151
  ((26 26 0) (26 26 0) (26 53/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  263
  179
  57
  27
  45
  10
  55
  1
  31/63
  952/179
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  267
  183
  57
  27
  47
  10
  57
  1
  193/392
  16/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-1
  2
  49
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  34
  13
  8
  13
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  36
  15
  8
  13
  3
  2
  5
  1
  3/11
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  38
  17
  8
  13
  3
  2
  5
  1
  1/4
  90/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  87
  49
  20
  18
  9
  2
  11
  1
  9/28
  260/49
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  87
  49
  20
  18
  9
  2
  11
  1
  9/28
  260/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  15
  4
  2
  9
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  17
  5
  2
  10
  2
  2
  4
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  49
  24
  11
  14
  7
  4
  11
  1
  29/78
  113/24
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  67
  39
  11
  17
  10
  4
  14
  1
  71/224
  67/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  83
  53
  11
  19
  24
  4
  28
  1
  149/264
  262/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  121
  77
  21
  23
  30
  6
  36
  1
  11/24
  395/77
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  135
  91
  21
  23
  36
  6
  42
  1
  185/384
  465/91
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  249
  159
  49
  41
  53
  10
  63
  1
  7213/13530
  868/159
  ((17 17 0) (17 17 0) (17 17 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  25
  9
  3
  13
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  77
  39
  12
  26
  9
  4
  13
  1
  1/3
  67/13
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  79
  41
  12
  26
  11
  4
  15
  1
  5/11
  211/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  81
  42
  12
  27
  11
  4
  15
  1
  5/12
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  315
  169
  76
  70
  25
  21
  46
  1
  191/405
  890/169
  ((81/2 81/2 0) (81/2 81/2 0) (81/2 81/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  440
  275
  76
  89
  57
  21
  78
  1
  721/1350
  1459/275
  ((16 16 0) (16 16 0) (16 16 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  682
  429
  127
  126
  101
  37
  138
  1
  383/720
  2390/429
  ((91 91 1) (91 91 1) (91 91 1/2)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  696
  443
  127
  126
  107
  37
  144
  1
  3199/6120
  2539/443
  ((5 5 0) (11/2 11/2 0) (5 5 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  698
  445
  127
  126
  107
  37
  144
  1
  457/900
  2549/445
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  706
  453
  127
  126
  111
  37
  148
  1
  796/1575
  863/151
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  718
  465
  127
  126
  118
  37
  155
  1
  3289/6480
  932/155
  ((11 11 0) (11 11 0) (23/2 23/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  724
  471
  127
  126
  120
  37
  157
  1
  3649/7200
  2830/471
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  726
  473
  127
  126
  120
  37
  157
  1
  89/180
  2842/473
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  38
  19
  8
  11
  5
  2
  7
  1
  5/14
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  44
  25
  8
  11
  5
  2
  7
  1
  5/17
  134/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  34
  15
  8
  11
  3
  2
  5
  1
  3/11
  26/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  70
  33
  19
  18
  7
  4
  11
  1
  5/19
  161/33
  ((2 2 0) (3/2 3/2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  126
  71
  35
  20
  19
  8
  27
  1
  8/21
  359/71
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  127
  72
  35
  20
  19
  8
  27
  1
  8/21
  91/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  131
  76
  35
  20
  21
  8
  29
  1
  17/44
  96/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  34
  13
  8
  13
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  182
  114
  23
  45
  35
  6
  41
  1
  157/340
  557/114
  ((10 10 0) (10 10 0) (10 10 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  184
  116
  23
  45
  35
  6
  41
  1
  157/350
  567/116
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  331
  214
  47
  70
  52
  10
  62
  1
  359/720
  546/107
  ((43/2 43/2 0) (43/2 43/2 0) (43/2 43/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  338
  221
  47
  70
  54
  10
  64
  1
  1283/2640
  1127/221
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  350
  233
  47
  70
  54
  10
  64
  1
  1283/2640
  1187/233
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  450
  313
  47
  90
  65
  10
  75
  1
  301/648
  1580/313
  ((29/2 29/2 0) (29/2 29/2 0) (29/2 29/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  452
  315
  47
  90
  65
  10
  75
  1
  301/666
  106/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  456
  319
  47
  90
  65
  10
  75
  1
  301/666
  1610/319
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  468
  331
  47
  90
  71
  10
  81
  1
  301/666
  1670/331
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  133
  87
  14
  32
  29
  6
  35
  1
  115/243
  410/87
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  137
  91
  14
  32
  31
  6
  37
  1
  124/261
  428/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  312
  205
  44
  63
  49
  10
  59
  1
  3989/9900
  1044/205
  ((21 21 0) (21 21 0) (21 21 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  315
  207
  44
  64
  51
  10
  61
  1
  4429/10340
  1052/207
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  315
  207
  44
  64
  51
  10
  61
  1
  4429/10340
  1052/207
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  315
  207
  44
  64
  51
  10
  61
  1
  4429/10340
  1052/207
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  668
  423
  103
  142
  112
  37
  149
  1
  537/1120
  2294/423
  ((187/2 187/2 1/2) (93 93 1/2) (187/2 187/2 1/2)))
'(shuffled-cache
  1
  sat-1
  2
  49
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  21
  10
  5
  6
  10
  1
  11
  1
  1
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  22
  11
  5
  6
  10
  1
  11
  1
  19/20
  50/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  68
  28
  21
  19
  17
  4
  21
  1
  12/19
  135/28
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  69
  29
  21
  19
  17
  4
  21
  1
  71/114
  140/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x3 x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  325
  147
  60
  118
  10
  5
  15
  1
  2/5
  115/21
  ((61 61 1/2) (61 61 1/2) (121/2 121/2 1/2)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  331
  151
  60
  120
  10
  5
  15
  1
  8/21
  825/151
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  59
  23
  2
  34
  2
  2
  4
  1
  1/8
  5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  165
  63
  22
  80
  5
  4
  9
  1
  5/26
  36/7
  ((13 13 0) (13 13 0) (13 13 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  227
  96
  45
  86
  9
  6
  15
  1
  127/748
  137/24
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  46
  19
  2
  25
  2
  2
  4
  1
  2/13
  5
  ((5/2 5/2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  48
  20
  2
  26
  2
  2
  4
  1
  1/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  111
  58
  6
  47
  3
  2
  5
  1
  1/7
  146/29
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  249
  131
  26
  92
  23
  13
  36
  1
  101/260
  664/131
  ((46 46 0) (46 46 0) (46 46 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  32
  14
  8
  10
  5
  1
  6
  1
  3/10
  9/2
  ((1 1 0) (1 1 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  47
  27
  8
  12
  9
  1
  10
  1
  3/13
  121/27
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  199
  75
  43
  81
  11
  4
  15
  1
  5/22
  374/75
  ((16 16 0) (16 16 0) (16 16 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  217
  93
  43
  81
  13
  4
  17
  1
  7/26
  472/93
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  244
  114
  45
  85
  15
  6
  21
  1
  9/35
  577/114
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  503
  327
  45
  131
  63
  6
  69
  1
  469/1298
  1612/327
  ((83/2 83/2 1/2) (83/2 83/2 1/2) (83/2 83/2 1/2)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  511
  335
  45
  131
  63
  6
  69
  1
  469/1320
  1652/335
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  526
  349
  45
  132
  77
  6
  83
  1
  18397/45760
  1713/349
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  5
  4
  0
  1
  3
  0
  3
  1
  3/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  188
  63
  31
  94
  6
  2
  8
  1
  11/30
  116/21
  ((39/2 39/2 0) (39/2 39/2 0) (39/2 39/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x4) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  34
  10
  3
  21
  1
  0
  1
  1
  1/8
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  35
  11
  3
  21
  1
  0
  1
  1
  1/9
  56/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  63
  24
  15
  24
  5
  1
  6
  1
  1/6
  19/4
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  64
  25
  15
  24
  5
  1
  6
  1
  3/19
  119/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  207
  123
  34
  50
  29
  6
  35
  1
  5/11
  605/123
  ((21 21 0) (21 21 0) (41/2 41/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  209
  125
  34
  50
  29
  6
  35
  1
  4/9
  123/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  210
  126
  34
  50
  29
  6
  35
  1
  10/23
  310/63
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  210
  126
  34
  50
  29
  6
  35
  1
  10/23
  310/63
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  400
  232
  74
  94
  29
  6
  35
  1
  293/720
  1177/232
  ((103/2 103/2 1/2) (103/2 103/2 1/2) (103/2 103/2 1/2)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x4 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  404
  236
  74
  94
  29
  6
  35
  1
  293/735
  1197/236
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  406
  238
  74
  94
  29
  6
  35
  1
  293/735
  71/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  408
  240
  74
  94
  29
  6
  35
  1
  293/735
  1217/240
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  124
  39
  20
  65
  5
  2
  7
  1
  1/3
  212/39
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  286
  107
  64
  115
  13
  6
  19
  1
  7/17
  589/107
  ((99/2 99/2 0) (99/2 99/2 0) (99/2 99/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  331
  141
  66
  124
  15
  8
  23
  1
  3/8
  253/47
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  347
  157
  66
  124
  15
  8
  23
  1
  9/25
  839/157
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  363
  173
  66
  124
  15
  8
  23
  1
  9/26
  935/173
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  171
  59
  34
  78
  20
  11
  31
  1
  29/51
  313/59
  ((17 17 0) (17 17 0) (17 17 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  327
  139
  82
  106
  20
  11
  31
  1
  136/285
  735/139
  ((133/2 133/2 1/2) (67 67 1/2) (133/2 133/2 1/2)))
'(shuffled-cache
  0
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  34
  9
  3
  22
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  188
  53
  37
  98
  18
  11
  29
  1
  197/360
  276/53
  ((59/2 59/2 0) (59/2 59/2 0) (59/2 59/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  248
  170
  20
  58
  47
  6
  53
  1
  283/705
  81/17
  ((20 20 0) (20 20 0) (20 20 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  256
  171
  20
  65
  47
  6
  53
  1
  283/720
  815/171
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  257
  172
  20
  65
  47
  6
  53
  1
  283/735
  205/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  436
  296
  38
  102
  51
  6
  57
  1
  19/54
  1467/296
  ((34 34 0) (67/2 67/2 0) (67/2 67/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  440
  300
  38
  102
  51
  6
  57
  1
  19/54
  99/20
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  440
  300
  38
  102
  51
  6
  57
  1
  19/54
  99/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  451
  311
  38
  102
  54
  6
  60
  1
  212/605
  1586/311
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  457
  317
  38
  102
  54
  6
  60
  1
  212/605
  1616/317
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  33
  15
  8
  10
  5
  1
  6
  1
  3/10
  68/15
  ((1 1 0) (1 1 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  127
  45
  35
  47
  12
  9
  21
  1
  10/19
  223/45
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  129
  47
  35
  47
  12
  9
  21
  1
  1/2
  233/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  318
  131
  91
  96
  24
  19
  43
  1
  35/81
  682/131
  ((81/2 81/2 1/2) (81/2 81/2 1/2) (81/2 81/2 1/2)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  371
  177
  91
  103
  54
  19
  73
  1
  8371/17472
  902/177
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  375
  181
  91
  103
  54
  19
  73
  1
  761/1638
  926/181
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  402
  204
  93
  105
  56
  21
  77
  1
  9463/20748
  347/68
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  152
  27
  31
  94
  3
  2
  5
  1
  3/10
  152/27
  ((10 10 0) (10 10 0) (10 10 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  191
  53
  33
  105
  5
  4
  9
  1
  5/21
  282/53
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  sat-2
  2
  100
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  229
  67
  54
  108
  19
  6
  25
  1
  15/31
  344/67
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  40
  17
  8
  15
  2
  1
  3
  1
  1/5
  91/17
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  79
  35
  17
  27
  6
  4
  10
  1
  83/306
  202/35
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  82
  38
  17
  27
  7
  4
  11
  1
  101/342
  217/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  239
  76
  54
  109
  9
  6
  15
  1
  127/572
  112/19
  ((17 17 0) (17 17 0) (17 17 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  56
  13
  8
  35
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  123
  41
  35
  47
  12
  9
  21
  1
  10/19
  203/41
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  28
  9
  3
  16
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  215
  71
  48
  96
  13
  6
  19
  1
  7/16
  378/71
  ((35 35 0) (35 35 0) (35 35 1/2)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  352
  159
  65
  128
  13
  6
  19
  1
  7/20
  294/53
  ((109/2 109/2 0) (109/2 109/2 0) (109/2 109/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  368
  175
  65
  128
  13
  6
  19
  1
  1/3
  962/175
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  380
  187
  65
  128
  13
  6
  19
  1
  7/22
  1022/187
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  396
  203
  65
  128
  13
  6
  19
  1
  7/23
  38/7
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  32
  14
  8
  10
  5
  1
  6
  1
  3/10
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  406
  169
  105
  132
  18
  9
  27
  1
  16/45
  909/169
  ((161/2 161/2 1) (161/2 81 1) (161/2 161/2 1)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  413
  176
  105
  132
  18
  9
  27
  1
  16/45
  59/11
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x3 x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  10
  3
  0
  7
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  42
  17
  8
  17
  7
  1
  8
  1
  5/13
  78/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  63
  31
  8
  24
  7
  1
  8
  1
  1/4
  154/31
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  257
  96
  52
  109
  21
  4
  25
  1
  689/1914
  269/48
  ((22 45/2 0) (22 22 0) (22 22 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  273
  112
  52
  109
  21
  4
  25
  1
  689/1980
  309/56
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  286
  121
  54
  111
  21
  6
  27
  1
  689/2178
  663/121
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  445
  202
  107
  136
  35
  11
  46
  1
  200/481
  605/101
  ((133/2 67 1/2) (65 65 1/2) (129/2 65 1/2)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  461
  218
  107
  136
  35
  11
  46
  1
  100/247
  645/109
  ((7/2 7/2 0) (7/2 7/2 0) (4 4 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  519
  266
  107
  146
  39
  11
  50
  1
  587/1638
  757/133
  ((21/2 21/2 0) (11 11 0) (11 11 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  51
  22
  2
  27
  2
  2
  4
  1
  2/15
  5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  86
  39
  17
  30
  19
  4
  23
  1
  15/28
  187/39
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x4 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  94
  40
  17
  37
  19
  4
  23
  1
  15/29
  24/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  415
  207
  98
  110
  29
  10
  39
  1
  37/92
  1073/207
  ((161/2 161/2 1) (81 81 1) (161/2 161/2 1)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  423
  215
  98
  110
  29
  10
  39
  1
  37/94
  1121/215
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  465
  251
  98
  116
  41
  10
  51
  1
  17/55
  1290/251
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  56
  13
  8
  35
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  243
  65
  60
  118
  8
  5
  13
  1
  6/13
  363/65
  ((36 36 0) (71/2 71/2 0) (71/2 71/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  121
  37
  20
  64
  5
  2
  7
  1
  5/14
  202/37
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  229
  91
  47
  91
  13
  6
  19
  1
  7/19
  493/91
  ((21 21 0) (43/2 43/2 0) (21 21 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  237
  99
  47
  91
  13
  6
  19
  1
  7/20
  541/99
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  28
  11
  8
  9
  11
  1
  12
  1
  1
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x4) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  36
  12
  8
  16
  11
  1
  12
  1
  11/12
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  245
  159
  20
  66
  51
  6
  57
  1
  359/780
  760/159
  ((35/2 35/2 0) (35/2 35/2 0) (35/2 35/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  246
  160
  20
  66
  51
  6
  57
  1
  703/1560
  153/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  423
  249
  45
  129
  53
  6
  59
  1
  47/116
  1235/249
  ((25 25 0) (25 25 0) (25 25 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  428
  253
  45
  130
  53
  6
  59
  1
  47/116
  1255/253
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  46
  19
  2
  25
  2
  2
  4
  1
  2/13
  5
  ((2 2 0) (2 2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  105
  56
  6
  43
  3
  2
  5
  1
  3/20
  141/28
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  296
  198
  14
  84
  13
  2
  15
  1
  16481/76230
  197/33
  ((46 46 0) (46 46 0) (93/2 93/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  230
  152
  20
  58
  45
  6
  51
  1
  191/441
  729/152
  ((35/2 35/2 0) (35/2 35/2 0) (35/2 35/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  246
  168
  20
  58
  49
  6
  55
  1
  373/882
  267/56
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  248
  170
  20
  58
  49
  6
  55
  1
  373/882
  811/170
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  426
  272
  40
  114
  57
  6
  63
  1
  41681/108900
  671/136
  ((61/2 61/2 0) (61/2 61/2 0) (61/2 61/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  44
  14
  2
  28
  2
  2
  4
  1
  1/5
  5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  87
  42
  20
  25
  16
  6
  22
  1
  16/31
  29/6
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  89
  43
  20
  26
  16
  6
  22
  1
  16/31
  208/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  91
  45
  20
  26
  16
  6
  22
  1
  1/2
  218/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  93
  47
  20
  26
  16
  6
  22
  1
  16/33
  228/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  101
  48
  20
  33
  16
  6
  22
  1
  8/17
  233/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  103
  50
  20
  33
  16
  6
  22
  1
  4/9
  243/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  282
  197
  20
  65
  49
  6
  55
  1
  3421/9000
  943/197
  ((39/2 39/2 0) (39/2 39/2 0) (39/2 39/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  283
  198
  20
  65
  49
  6
  55
  1
  3421/9180
  158/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  284
  199
  20
  65
  49
  6
  55
  1
  3331/9180
  953/199
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  285
  200
  20
  65
  49
  6
  55
  1
  3331/9360
  479/100
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  463
  309
  40
  114
  57
  6
  63
  1
  12317/36960
  1525/309
  ((35 35 0) (71/2 71/2 0) (35 35 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  493
  333
  40
  120
  57
  6
  63
  1
  1571/5280
  1645/333
  ((11 11 0) (11 11 0) (11 11 0)))
'(shuffled-cache
  1
  sat-2
  2
  100
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  513
  353
  40
  120
  63
  6
  69
  1
  11357/36960
  1745/353
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  54
  18
  11
  25
  10
  7
  17
  1
  53/72
  44/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  111
  44
  23
  44
  11
  7
  18
  1
  41/90
  223/44
  ((7 7 0) (7 15/2 0) (7 7 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  112
  45
  23
  44
  12
  7
  19
  1
  47/96
  76/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  114
  47
  23
  44
  12
  7
  19
  1
  47/102
  238/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env ((□? (s)))))\""
  118
  51
  23
  44
  14
  7
  21
  1
  25/54
  86/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  130
  63
  23
  44
  20
  7
  27
  1
  59/126
  328/63
  ((1 1 0) (1/2 1/2 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  289
  155
  78
  56
  57
  15
  72
  1
  1481/3393
  968/155
  ((31 31 0) (31 31 0) (31 31 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  230
  157
  20
  53
  48
  6
  54
  1
  20/57
  730/157
  ((18 18 0) (18 18 0) (18 18 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  434
  274
  46
  114
  53
  6
  59
  1
  161/516
  1357/274
  ((67/2 67/2 0) (67/2 67/2 0) (67/2 67/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  436
  275
  46
  115
  53
  6
  59
  1
  161/528
  1362/275
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  721
  448
  85
  188
  68
  10
  78
  1
  3583/11220
  585/112
  ((183/2 183/2 1) (91 183/2 1) (91 91 1)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  723
  450
  85
  188
  68
  10
  78
  1
  3583/11424
  47/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  725
  452
  85
  188
  68
  10
  78
  1
  3583/11628
  590/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  725
  452
  85
  188
  68
  10
  78
  1
  3583/11628
  590/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  749
  476
  85
  188
  68
  10
  78
  1
  3583/11628
  617/119
  ((23 23 0) (23 23 0) (23 23 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  749
  476
  85
  188
  68
  10
  78
  1
  3583/11628
  617/119
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  750
  477
  85
  188
  69
  10
  79
  1
  3787/11832
  2473/477
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  9
  6
  0
  3
  1
  0
  1
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  37
  20
  3
  14
  5
  0
  5
  1
  7/26
  51/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  21
  3
  15
  5
  0
  5
  1
  1/4
  107/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  61
  31
  13
  17
  15
  1
  16
  1
  9/16
  151/31
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  63
  33
  13
  17
  17
  1
  18
  1
  31/52
  160/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  385
  196
  114
  75
  50
  8
  58
  1
  314/615
  997/196
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  431
  236
  114
  81
  65
  8
  73
  1
  157/360
  591/118
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  16
  11
  2
  3
  4
  1
  5
  1
  1/2
  53/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  64
  28
  11
  25
  16
  7
  23
  1
  3/4
  141/28
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  129
  56
  23
  50
  19
  7
  26
  1
  71/126
  36/7
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  328
  150
  60
  118
  32
  13
  45
  1
  127/230
  389/75
  ((80 80 1/2) (80 80 1/2) (159/2 159/2 1/2)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  330
  152
  60
  118
  32
  13
  45
  1
  127/240
  395/76
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  336
  158
  60
  118
  34
  13
  47
  1
  21/40
  411/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ((□? (s)))))\""
  341
  163
  60
  118
  37
  13
  50
  1
  153/290
  847/163
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  343
  165
  60
  118
  37
  13
  50
  1
  51/100
  857/165
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  349
  171
  60
  118
  37
  13
  50
  1
  51/110
  99/19
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  355
  177
  60
  118
  37
  13
  50
  1
  17/40
  925/177
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  103
  43
  19
  41
  5
  2
  7
  1
  5/17
  227/43
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  105
  45
  19
  41
  5
  2
  7
  1
  5/18
  79/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  107
  47
  19
  41
  7
  2
  9
  1
  7/20
  247/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  277
  135
  53
  89
  15
  6
  21
  1
  43/110
  709/135
  ((66 66 1/2) (133/2 133/2 1/2) (133/2 133/2 1/2)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  279
  137
  53
  89
  15
  6
  21
  1
  43/115
  721/137
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  281
  139
  53
  89
  15
  6
  21
  1
  43/120
  731/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  455
  212
  136
  107
  30
  8
  38
  1
  13/40
  277/53
  ((49 49 1/2) (49 49 1/2) (49 49 1/2)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  459
  216
  136
  107
  31
  8
  39
  1
  121/380
  47/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  459
  216
  136
  107
  31
  8
  39
  1
  121/380
  47/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  461
  218
  136
  107
  33
  8
  41
  1
  141/400
  569/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  40
  17
  8
  15
  1
  1
  2
  1
  1/10
  91/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  119
  52
  33
  34
  7
  4
  11
  1
  83/418
  165/26
  ((10 10 0) (10 10 0) (10 10 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  108
  47
  19
  42
  10
  5
  15
  1
  8/19
  249/47
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  113
  51
  19
  43
  12
  5
  17
  1
  17/40
  269/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  126
  61
  19
  46
  12
  5
  17
  1
  17/42
  319/61
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  126
  61
  19
  46
  12
  5
  17
  1
  17/42
  319/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  128
  63
  19
  46
  12
  5
  17
  1
  17/44
  47/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  130
  65
  19
  46
  12
  5
  17
  1
  17/46
  339/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  132
  67
  19
  46
  12
  5
  17
  1
  17/48
  351/67
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  135
  70
  19
  46
  15
  5
  20
  1
  23/54
  183/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  336
  171
  52
  113
  23
  11
  34
  1
  119/290
  298/57
  ((57 57 1/2) (57 57 1/2) (57 57 1/2)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  338
  173
  52
  113
  23
  11
  34
  1
  119/300
  906/173
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  342
  177
  52
  113
  23
  11
  34
  1
  119/320
  928/177
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  344
  179
  52
  113
  23
  11
  34
  1
  117/320
  938/179
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  346
  181
  52
  113
  23
  11
  34
  1
  23/64
  948/181
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  375
  209
  52
  114
  23
  11
  34
  1
  23/66
  1088/209
  ((10 10 0) (10 10 0) (10 10 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  540
  254
  163
  123
  55
  19
  74
  1
  209/460
  1295/254
  ((55 55 0) (55 55 0) (111/2 111/2 1/2)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env ((□? (f)))))\""
  547
  261
  163
  123
  59
  19
  78
  1
  7/15
  1330/261
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  553
  267
  163
  123
  59
  19
  78
  1
  112/255
  1364/267
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  553
  267
  163
  123
  59
  19
  78
  1
  112/255
  1364/267
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  555
  269
  163
  123
  59
  19
  78
  1
  28/65
  1374/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  555
  269
  163
  123
  59
  19
  78
  1
  28/65
  1374/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  600
  285
  178
  137
  59
  19
  78
  1
  215/546
  1456/285
  ((59/2 59/2 0) (29 59/2 0) (29 29 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  634
  317
  180
  137
  61
  21
  82
  1
  472/1155
  1616/317
  ((67/2 67/2 0) (67/2 67/2 0) (67/2 67/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  795
  447
  180
  168
  66
  21
  87
  1
  463/1239
  791/149
  ((133/2 133/2 0) (133/2 133/2 0) (66 133/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  798
  450
  180
  168
  66
  21
  87
  1
  1541/4130
  398/75
  ((2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  30
  9
  3
  18
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  139
  53
  24
  62
  13
  6
  19
  1
  7/16
  276/53
  ((39/2 39/2 0) (39/2 39/2 0) (39/2 39/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  32
  10
  3
  19
  1
  0
  1
  1
  1/8
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  127
  49
  24
  54
  11
  6
  17
  1
  5/13
  254/49
  ((33/2 33/2 0) (33/2 33/2 0) (33/2 33/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  129
  51
  24
  54
  11
  6
  17
  1
  5/14
  88/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  51
  17
  8
  26
  3
  2
  5
  1
  3/11
  88/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  144
  63
  23
  58
  20
  11
  31
  1
  29/57
  47/9
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  164
  69
  24
  71
  20
  11
  31
  1
  1/2
  120/23
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  164
  69
  24
  71
  20
  11
  31
  1
  1/2
  120/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  166
  71
  24
  71
  22
  11
  33
  1
  23/42
  370/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  168
  73
  24
  71
  22
  11
  33
  1
  23/44
  380/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  348
  169
  53
  126
  22
  11
  33
  1
  109/250
  883/169
  ((167/2 167/2 1/2) (84 84 1/2) (84 84 1/2)))
'(shuffled-cache
  1
  sat-3
  2
  86
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  3
  0
  4
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  52
  19
  8
  25
  8
  5
  13
  1
  2/3
  98/19
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  59
  23
  8
  28
  8
  5
  13
  1
  8/13
  118/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  119
  53
  19
  47
  8
  5
  13
  1
  3/8
  275/53
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  121
  55
  19
  47
  8
  5
  13
  1
  6/17
  57/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  229
  105
  64
  60
  13
  9
  22
  1
  17/52
  542/105
  ((21 21 0) (21 21 0) (21 21 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  202
  130
  20
  52
  45
  6
  51
  1
  33/80
  613/130
  ((29/2 15 0) (31/2 31/2 0) (29/2 29/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  204
  132
  20
  52
  47
  6
  53
  1
  337/760
  623/132
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  312
  193
  35
  84
  49
  6
  55
  1
  203/528
  951/193
  ((15 15 0) (15 15 0) (15 15 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  314
  195
  35
  84
  49
  6
  55
  1
  203/540
  321/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  334
  215
  35
  84
  53
  6
  59
  1
  191/540
  1053/215
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  44
  13
  8
  23
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  121
  50
  35
  36
  14
  9
  23
  1
  17/33
  164/25
  ((10 10 0) (10 10 0) (10 10 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  141
  70
  35
  36
  18
  9
  27
  1
  43/99
  214/35
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  171
  95
  35
  41
  23
  9
  32
  1
  163/429
  538/95
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  172
  96
  35
  41
  24
  9
  33
  1
  359/891
  181/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  293
  155
  70
  68
  34
  9
  43
  1
  2966/8463
  971/155
  ((31 31 0) (32 32 0) (31 31 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env ((□? (f)))))\""
  307
  169
  70
  68
  40
  9
  49
  1
  304/819
  1041/169
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  310
  171
  70
  69
  40
  9
  49
  1
  3344/9555
  1051/171
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  312
  173
  70
  69
  40
  9
  49
  1
  836/2457
  1061/173
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  314
  175
  70
  69
  40
  9
  49
  1
  3344/10101
  153/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  329
  187
  72
  70
  42
  11
  53
  1
  389/1092
  1131/187
  ((9/2 9/2 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  330
  188
  72
  70
  42
  11
  53
  1
  7507/21840
  284/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  332
  190
  72
  70
  42
  11
  53
  1
  7507/22386
  573/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  385
  228
  86
  71
  68
  17
  85
  1
  2997/7826
  443/76
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ((□? (s)))))\""
  385
  228
  86
  71
  68
  17
  85
  1
  2997/7826
  443/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env ((□? (s)))))\""
  394
  237
  86
  71
  75
  17
  92
  1
  28247/72072
  458/79
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  431
  270
  86
  75
  96
  17
  113
  1
  38848/94185
  253/45
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  433
  272
  86
  75
  96
  17
  113
  1
  77696/192465
  191/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  435
  274
  86
  75
  96
  17
  113
  1
  4856/12285
  769/137
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  449
  286
  86
  77
  101
  17
  118
  1
  22327/57330
  1589/286
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  30
  13
  8
  9
  13
  1
  14
  1
  1
  58/13
  ((1/2 1/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  56
  21
  17
  18
  13
  1
  14
  1
  13/19
  33/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  132
  43
  46
  43
  13
  1
  14
  1
  5/8
  214/43
  ((12 12 0) (12 12 0) (12 12 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  132
  43
  46
  43
  13
  1
  14
  1
  5/8
  214/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  274
  89
  100
  85
  33
  9
  42
  1
  55/81
  5
  ((46 46 0) (46 46 0) (46 46 1/2)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  294
  107
  100
  87
  42
  9
  51
  1
  131/198
  537/107
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  312
  125
  100
  87
  42
  9
  51
  1
  131/204
  627/125
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  28
  11
  8
  9
  11
  1
  12
  1
  1
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  231
  158
  20
  53
  51
  6
  57
  1
  49/117
  733/158
  ((35/2 35/2 0) (35/2 35/2 0) (35/2 35/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  551
  348
  64
  139
  63
  6
  69
  1
  6323/17340
  1775/348
  ((67 67 1/2) (67 67 1/2) (67 67 1/2)))
'(shuffled-cache
  1
  sat-3
  2
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  34
  16
  8
  10
  6
  1
  7
  1
  7/22
  71/16
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  56
  24
  15
  17
  6
  1
  7
  1
  7/32
  14/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  322
  211
  34
  77
  59
  6
  65
  1
  1583/4257
  1022/211
  ((33 33 0) (67/2 67/2 0) (33 33 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  324
  212
  34
  78
  59
  6
  65
  1
  1583/4356
  1027/212
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  333
  221
  34
  78
  61
  6
  67
  1
  775/2178
  1072/221
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  333
  221
  34
  78
  61
  6
  67
  1
  775/2178
  1072/221
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  538
  360
  64
  114
  78
  10
  88
  1
  2092/5265
  61/12
  ((62 62 1/2) (63 63 1/2) (123/2 123/2 1/2)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  574
  396
  64
  114
  78
  10
  88
  1
  10252/26325
  502/99
  ((59/2 59/2 0) (59/2 59/2 0) (59/2 59/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  6
  5
  0
  1
  4
  0
  4
  1
  4/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  40
  21
  8
  11
  10
  1
  11
  1
  15/32
  32/7
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  44
  24
  8
  12
  10
  1
  11
  1
  15/38
  37/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  45
  25
  8
  12
  10
  1
  11
  1
  3/8
  116/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  48
  27
  8
  13
  10
  1
  11
  1
  15/44
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  132
  64
  33
  35
  14
  4
  18
  1
  23/66
  159/32
  ((9 9 0) (19/2 19/2 0) (9 9 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  270
  132
  72
  66
  22
  8
  30
  1
  133/360
  679/132
  ((59/2 59/2 0) (28 28 0) (28 28 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  272
  134
  72
  66
  22
  8
  30
  1
  133/370
  691/134
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  305
  160
  78
  67
  36
  11
  47
  1
  167/410
  827/160
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  46
  16
  8
  22
  6
  2
  8
  1
  6/13
  83/16
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  54
  24
  8
  22
  8
  2
  10
  1
  4/9
  127/24
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  39
  24
  10
  5
  14
  4
  18
  1
  31/42
  43/8
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env ((□? ()))))\""
  42
  26
  10
  6
  15
  4
  19
  1
  69/98
  139/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  45
  27
  10
  8
  15
  4
  19
  1
  23/35
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  53
  18
  15
  20
  0
  3
  3
  1
  0
  11/2
  ((3 3 0) (7/2 7/2 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env ((□? (oc₀ oc₁)))))\""
  55
  19
  15
  21
  0
  3
  3
  1
  0
  104/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  57
  21
  15
  21
  0
  3
  3
  1
  0
  38/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  198
  114
  37
  47
  20
  11
  31
  1
  55/416
  215/38
  ((31/2 31/2 0) (31/2 31/2 0) (31/2 31/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  209
  120
  40
  49
  20
  12
  32
  1
  1/8
  113/20
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  209
  120
  40
  49
  20
  12
  32
  1
  1/8
  113/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  239
  148
  40
  51
  38
  12
  50
  1
  25/144
  411/74
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app win) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  242
  151
  40
  51
  38
  12
  50
  1
  125/732
  837/151
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  242
  151
  40
  51
  38
  12
  50
  1
  125/732
  837/151
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma)))\n  (env ((□? (bo)) (□? (ma)))))\""
  247
  156
  40
  51
  39
  12
  51
  1
  137/756
  431/78
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b m)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  188
  146
  21
  21
  66
  8
  74
  1
  203/720
  735/146
  ((30 30 0) (30 30 0) (30 30 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  190
  148
  21
  21
  68
  8
  76
  1
  227/744
  745/148
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  306
  218
  43
  45
  69
  17
  86
  1
  891/1820
  587/109
  ((89/2 89/2 0) (89/2 89/2 0) (89/2 89/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  535
  365
  79
  91
  135
  32
  167
  1
  4657/9765
  422/73
  ((68 68 1/2) (137/2 137/2 1/2) (137/2 137/2 1/2)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  535
  365
  79
  91
  135
  32
  167
  1
  4657/9765
  422/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  569
  385
  89
  95
  143
  33
  176
  1
  5287/11655
  314/55
  ((11/2 11/2 0) (5 5 0) (5 11/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  583
  393
  93
  97
  143
  34
  177
  1
  10574/24255
  748/131
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  609
  412
  98
  99
  144
  35
  179
  1
  10889/27405
  1173/206
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  612
  415
  98
  99
  145
  35
  180
  1
  11204/28035
  2361/415
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env ((□? (f xs)))))\""
  615
  417
  98
  100
  146
  35
  181
  1
  11519/28665
  2371/417
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  619
  419
  98
  102
  147
  35
  182
  1
  11834/29295
  2381/419
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  629
  429
  98
  102
  153
  35
  188
  1
  12023/29610
  2434/429
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  632
  432
  98
  102
  154
  35
  189
  1
  6169/15120
  2449/432
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  632
  432
  98
  102
  154
  35
  189
  1
  6169/15120
  2449/432
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  645
  443
  98
  104
  155
  35
  190
  1
  12653/31815
  2504/443
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  648
  445
  98
  105
  155
  35
  190
  1
  12653/32445
  2514/445
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  33
  12
  9
  12
  0
  2
  2
  1
  0
  21/4
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  89
  33
  27
  29
  9
  5
  14
  1
  9/29
  157/33
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  94
  37
  27
  30
  10
  5
  15
  1
  10/33
  177/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  113
  47
  31
  35
  13
  6
  19
  1
  13/43
  221/47
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  114
  48
  31
  35
  13
  6
  19
  1
  13/44
  113/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  279
  177
  46
  56
  66
  12
  78
  1
  1432/3645
  297/59
  ((59/2 59/2 0) (59/2 59/2 0) (59/2 59/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  285
  180
  46
  59
  66
  12
  78
  1
  1432/3645
  907/180
  ((1 1 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  285
  180
  46
  59
  66
  12
  78
  1
  1432/3645
  907/180
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  287
  182
  46
  59
  67
  12
  79
  1
  1477/3735
  131/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  653
  410
  113
  130
  116
  30
  146
  1
  7063/23220
  2221/410
  ((84 84 1) (84 84 1) (84 84 1)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  424
  306
  53
  65
  98
  16
  114
  1
  12739/39744
  776/153
  ((79 79 1) (79 79 1) (79 79 1)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  424
  306
  53
  65
  98
  16
  114
  1
  12739/39744
  776/153
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  425
  307
  53
  65
  98
  16
  114
  1
  12739/40296
  1557/307
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  604
  409
  103
  92
  134
  30
  164
  1
  100403/309120
  2029/409
  ((33/2 33/2 0) (16 16 0) (16 16 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  604
  409
  103
  92
  134
  30
  164
  1
  100403/309120
  2029/409
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  704
  471
  137
  96
  157
  37
  194
  1
  49721/123280
  791/157
  ((13 13 0) (13 13 0) (13 13 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  733
  484
  142
  107
  157
  38
  195
  1
  49721/131560
  2441/484
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  780
  507
  162
  111
  167
  45
  212
  1
  159743/416760
  2567/507
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  780
  507
  162
  111
  167
  45
  212
  1
  159743/416760
  2567/507
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  11
  7
  0
  4
  2
  0
  2
  1
  2/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  67
  28
  22
  17
  9
  8
  17
  1
  37/210
  155/28
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  14
  7
  2
  5
  0
  1
  1
  1
  0
  34/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  97
  64
  19
  14
  25
  8
  33
  1
  25/176
  183/32
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  102
  66
  19
  17
  25
  8
  33
  1
  25/192
  188/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  106
  68
  19
  19
  25
  8
  33
  1
  25/208
  193/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  580
  308
  165
  107
  132
  32
  164
  1
  30671/75600
  815/154
  ((119/2 119/2 1/2) (60 60 1/2) (119/2 119/2 1/2)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  10
  6
  0
  4
  3
  0
  3
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  12
  7
  0
  5
  3
  0
  3
  1
  3/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  166
  97
  38
  31
  33
  11
  44
  1
  212/615
  455/97
  ((14 14 0) (14 14 0) (29/2 29/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  169
  100
  38
  31
  34
  11
  45
  1
  31/90
  47/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  180
  110
  38
  32
  36
  11
  47
  1
  211/690
  513/110
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  228
  132
  51
  45
  46
  13
  59
  1
  361/1020
  205/44
  ((5/2 5/2 0) (5/2 5/2 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  244
  146
  51
  47
  48
  13
  61
  1
  371/1110
  339/73
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env ((□? (rc)) (□? (b m)))))\""
  245
  147
  51
  47
  48
  13
  61
  1
  371/1125
  683/147
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  249
  151
  51
  47
  48
  13
  61
  1
  53/165
  703/151
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  252
  154
  51
  47
  49
  13
  62
  1
  386/1185
  359/77
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  253
  155
  51
  47
  49
  13
  62
  1
  193/600
  723/155
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> minimax <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  256
  158
  51
  47
  50
  13
  63
  1
  401/1230
  369/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  259
  160
  51
  48
  50
  13
  63
  1
  401/1260
  187/40
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  270
  169
  51
  50
  52
  13
  65
  1
  847/2670
  795/169
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env ((□? (bo)))))\""
  272
  170
  51
  51
  52
  13
  65
  1
  847/2700
  80/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  276
  173
  51
  52
  52
  13
  65
  1
  121/390
  815/173
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env ((□? (b co m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (c)) (□? (b m)))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  9
  5
  0
  4
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  34
  21
  4
  9
  11
  1
  12
  1
  10/19
  100/21
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  36
  23
  4
  9
  13
  1
  14
  1
  4/7
  110/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  51
  33
  4
  14
  19
  1
  20
  1
  49/87
  155/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  60
  38
  4
  18
  20
  1
  21
  1
  26/51
  90/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  200
  137
  29
  34
  54
  10
  64
  1
  37/102
  651/137
  ((31/2 31/2 0) (31/2 31/2 0) (31/2 31/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  202
  138
  29
  35
  54
  10
  64
  1
  37/105
  328/69
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? (ma)))))\""
  204
  139
  29
  36
  54
  10
  64
  1
  37/108
  661/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  208
  141
  29
  38
  55
  10
  65
  1
  20/57
  671/141
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  212
  143
  29
  40
  56
  10
  66
  1
  43/120
  681/143
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  282
  187
  46
  49
  71
  17
  88
  1
  389/1368
  962/187
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  296
  194
  48
  54
  72
  17
  89
  1
  413/1488
  997/194
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  298
  196
  48
  54
  72
  17
  89
  1
  413/1536
  1007/196
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  300
  198
  48
  54
  72
  17
  89
  1
  413/1584
  113/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  461
  294
  90
  77
  107
  31
  138
  1
  3541/12000
  1459/294
  ((31/2 31/2 0) (31/2 31/2 0) (31/2 31/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  512
  335
  90
  87
  126
  31
  157
  1
  227/720
  1673/335
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) bo that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  521
  344
  90
  87
  132
  31
  163
  1
  1427/4400
  859/172
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env ((□? (f xs)))))\""
  536
  359
  90
  87
  139
  31
  170
  1
  4337/13320
  1793/359
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  543
  365
  90
  88
  140
  31
  171
  1
  1443/4520
  1824/365
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-horizon\")\n  (env ((□? (move-horizon-v)))))\""
  545
  366
  90
  89
  140
  31
  171
  1
  481/1520
  1829/366
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  549
  370
  90
  89
  140
  31
  171
  1
  1443/4640
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  591
  400
  98
  93
  157
  32
  189
  1
  5509/15600
  1989/400
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  960
  610
  218
  132
  176
  57
  233
  1
  2089/6006
  1597/305
  ((93 93 3/2) (93 187/2 3/2) (93 93 3/2)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  32
  16
  10
  6
  6
  4
  10
  1
  3/14
  43/8
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  34
  17
  10
  7
  6
  4
  10
  1
  6/35
  91/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  65
  26
  18
  21
  10
  4
  14
  1
  5/13
  58/13
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  67
  28
  18
  21
  10
  4
  14
  1
  5/14
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  93
  37
  26
  30
  14
  5
  19
  1
  14/37
  166/37
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  48
  24
  9
  15
  0
  2
  2
  1
  0
  125/24
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  107
  54
  25
  28
  8
  5
  13
  1
  1/4
  259/54
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  128
  65
  29
  34
  12
  6
  18
  1
  12/43
  308/65
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  214
  133
  39
  42
  43
  8
  51
  1
  451/1420
  622/133
  ((17/2 17/2 0) (17/2 17/2 0) (8 8 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  217
  136
  39
  42
  45
  8
  53
  1
  491/1480
  637/136
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  252
  151
  53
  48
  46
  10
  56
  1
  511/1580
  721/151
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  640
  335
  200
  105
  84
  22
  106
  1
  1439/3870
  1687/335
  ((139/2 139/2 1/2) (139/2 139/2 1/2) (139/2 139/2 1/2)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  723
  375
  237
  111
  101
  33
  134
  1
  1789/4350
  1897/375
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  726
  377
  237
  112
  101
  33
  134
  1
  1789/4410
  1907/377
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  887
  494
  271
  122
  125
  35
  160
  1
  16/41
  1208/247
  ((49/2 49/2 0) (24 24 0) (24 24 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  35
  18
  10
  7
  6
  4
  10
  1
  1/7
  16/3
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  38
  20
  10
  8
  6
  4
  10
  1
  3/28
  53/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  52
  31
  10
  11
  10
  4
  14
  1
  34/133
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  157
  90
  38
  29
  30
  11
  41
  1
  59/180
  14/3
  ((14 14 0) (14 14 0) (14 14 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  165
  95
  38
  32
  31
  11
  42
  1
  64/205
  89/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  168
  97
  38
  33
  32
  11
  43
  1
  69/215
  455/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  201
  122
  44
  35
  44
  14
  58
  1
  167/490
  563/122
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (oc₀ oc₁)))))\""
  205
  126
  44
  35
  46
  14
  60
  1
  43/125
  583/126
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  207
  127
  44
  36
  46
  14
  60
  1
  86/255
  588/127
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  210
  130
  44
  36
  47
  14
  61
  1
  263/780
  603/130
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  210
  130
  44
  36
  47
  14
  61
  1
  263/780
  603/130
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  214
  133
  44
  37
  49
  14
  63
  1
  293/825
  618/133
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  21
  10
  4
  7
  4
  1
  5
  1
  2/5
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  71
  27
  19
  25
  4
  4
  8
  1
  4/19
  5
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  74
  30
  19
  25
  6
  4
  10
  1
  3/11
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  74
  30
  19
  25
  6
  4
  10
  1
  3/11
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env ((□? (oc₀ oc₁)))))\""
  76
  31
  19
  26
  6
  4
  10
  1
  6/23
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  186
  93
  49
  44
  20
  8
  28
  1
  16/55
  428/93
  ((15/2 15/2 0) (15/2 8 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  190
  95
  49
  46
  20
  8
  28
  1
  16/57
  438/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  190
  95
  49
  46
  20
  8
  28
  1
  16/57
  438/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (oc₀ oc₁)))))\""
  191
  96
  49
  46
  20
  8
  28
  1
  8/29
  443/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  231
  116
  59
  56
  28
  10
  38
  1
  4/13
  134/29
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  240
  125
  59
  56
  28
  10
  38
  1
  8/27
  23/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  243
  127
  59
  57
  28
  10
  38
  1
  24/83
  585/127
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  245
  129
  59
  57
  28
  10
  38
  1
  24/85
  595/129
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  252
  134
  59
  59
  29
  10
  39
  1
  5/18
  310/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  254
  136
  59
  59
  29
  10
  39
  1
  25/92
  315/68
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  254
  136
  59
  59
  29
  10
  39
  1
  25/92
  315/68
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  456
  270
  100
  86
  72
  18
  90
  1
  12179/37800
  427/90
  ((19 19 0) (19 19 0) (19 19 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  507
  309
  106
  92
  85
  21
  106
  1
  13004/40635
  1465/309
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  508
  310
  106
  92
  85
  21
  106
  1
  6502/20475
  147/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  205
  114
  51
  40
  21
  17
  38
  1
  7/108
  331/57
  ((21 21 0) (21 21 0) (21 21 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  326
  171
  93
  62
  64
  27
  91
  1
  325/972
  929/171
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  337
  180
  93
  64
  67
  27
  94
  1
  337/1032
  323/60
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo this-play that-play)))))\""
  345
  188
  93
  64
  72
  27
  99
  1
  689/2088
  1009/188
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  444
  262
  117
  65
  112
  44
  156
  1
  1447/3636
  704/131
  ((31/2 31/2 0) (31/2 31/2 0) (31/2 31/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  453
  271
  117
  65
  118
  44
  162
  1
  3011/7416
  1453/271
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  502
  305
  129
  68
  137
  53
  190
  1
  39503/98280
  1632/305
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  541
  341
  129
  71
  147
  53
  200
  1
  36149/98280
  164/31
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  541
  341
  129
  71
  147
  53
  200
  1
  36149/98280
  164/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b)))))\""
  542
  342
  129
  71
  147
  53
  200
  1
  36149/99216
  201/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  639
  433
  129
  77
  201
  53
  254
  1
  2169/5824
  2321/433
  ((24 24 0) (23 23 0) (23 23 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  642
  435
  129
  78
  201
  53
  254
  1
  723/1976
  777/145
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  655
  442
  129
  84
  202
  53
  255
  1
  2221/6032
  91/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env ((□? (bo)) (□? (ma)))))\""
  660
  447
  129
  84
  203
  53
  256
  1
  2273/6136
  797/149
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  745
  512
  143
  90
  229
  61
  290
  1
  142159/402948
  2727/512
  ((27 27 0) (27 27 0) (27 27 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  812
  573
  143
  96
  248
  61
  309
  1
  23293/67158
  3017/573
  ((35 35 0) (35 35 0) (35 35 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  1101
  768
  185
  148
  315
  72
  387
  1
  293809/829920
  4075/768
  ((89/2 89/2 0) (44 44 0) (44 44 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  1103
  770
  185
  148
  316
  72
  388
  1
  299269/840840
  817/154
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  1103
  770
  185
  148
  316
  72
  388
  1
  299269/840840
  817/154
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env ((□? (h)))))\""
  1105
  771
  185
  149
  316
  72
  388
  1
  299269/846300
  4090/771
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  1109
  775
  185
  149
  316
  72
  388
  1
  299269/857220
  822/155
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  1109
  775
  185
  149
  316
  72
  388
  1
  299269/857220
  822/155
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> empty-board <-) player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  170
  108
  29
  33
  41
  10
  51
  1
  62/165
  521/108
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env ((□? (f acc l)))))\""
  173
  110
  29
  34
  42
  10
  52
  1
  67/175
  531/110
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  245
  140
  49
  56
  43
  14
  57
  1
  72/265
  99/20
  ((9/2 9/2 0) (9/2 9/2 0) (5 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  248
  143
  49
  56
  43
  14
  57
  1
  4/15
  708/143
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  324
  192
  68
  64
  69
  22
  91
  1
  193/456
  487/96
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  325
  193
  68
  64
  69
  22
  91
  1
  193/462
  979/193
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  328
  195
  68
  65
  69
  22
  91
  1
  193/474
  989/195
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  35
  14
  8
  13
  6
  1
  7
  1
  3/7
  65/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  44
  26
  7
  11
  10
  3
  13
  1
  29/60
  139/26
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  47
  28
  7
  12
  10
  3
  13
  1
  29/75
  149/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  124
  82
  15
  27
  27
  4
  31
  1
  403/900
  397/82
  ((5 5 0) (5 5 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  142
  90
  19
  33
  31
  5
  36
  1
  583/1260
  433/90
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  149
  94
  19
  36
  32
  5
  37
  1
  157/360
  453/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  151
  95
  19
  37
  32
  5
  37
  1
  628/1485
  458/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  173
  107
  23
  43
  36
  6
  42
  1
  763/1845
  512/107
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  175
  109
  23
  43
  37
  6
  43
  1
  808/1935
  522/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  6
  4
  0
  2
  3
  0
  3
  1
  3/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  9
  6
  0
  3
  3
  0
  3
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  36
  15
  8
  13
  7
  1
  8
  1
  7/15
  14/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  90
  46
  18
  26
  14
  4
  18
  1
  5/17
  101/23
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  264
  180
  39
  45
  73
  12
  85
  1
  583/2136
  59/12
  ((59/2 30 0) (59/2 59/2 0) (59/2 59/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env ((□? (r x)) (□? (f x)))))\""
  265
  181
  39
  45
  73
  12
  85
  1
  583/2160
  890/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  412
  248
  88
  76
  112
  27
  139
  1
  1297/3570
  1233/248
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  418
  254
  88
  76
  114
  27
  141
  1
  1307/3600
  1263/254
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  485
  283
  106
  96
  125
  29
  154
  1
  1457/4080
  1396/283
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  512
  308
  106
  98
  142
  29
  171
  1
  1043/2820
  377/77
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  582
  363
  118
  101
  178
  38
  216
  1
  15919/39520
  1795/363
  ((23/2 23/2 0) (23/2 23/2 0) (11 11 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  754
  445
  187
  122
  193
  53
  246
  1
  60689/150150
  2216/445
  ((25 25 0) (25 25 0) (25 25 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> maximin <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  19
  8
  2
  9
  2
  0
  2
  1
  2/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  40
  18
  6
  16
  6
  1
  7
  1
  6/17
  85/18
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  41
  19
  6
  16
  7
  1
  8
  1
  7/18
  90/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  66
  33
  10
  23
  8
  2
  10
  1
  1/3
  54/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  73
  37
  10
  26
  9
  2
  11
  1
  9/28
  182/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  78
  41
  10
  27
  9
  2
  11
  1
  9/31
  202/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app lose) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  82
  45
  10
  27
  9
  2
  11
  1
  9/32
  74/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  188
  93
  49
  46
  34
  18
  52
  1
  169/460
  476/93
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  191
  95
  49
  47
  35
  18
  53
  1
  179/480
  486/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  194
  97
  49
  48
  35
  18
  53
  1
  179/500
  496/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  105
  66
  17
  22
  17
  7
  24
  1
  31/240
  403/66
  ((23/2 23/2 0) (23/2 23/2 0) (23/2 23/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  174
  98
  37
  39
  18
  11
  29
  1
  39/392
  577/98
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  217
  119
  47
  51
  19
  11
  30
  1
  47/432
  691/119
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app minimax bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  224
  126
  47
  51
  20
  11
  31
  1
  55/448
  121/21
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  329
  191
  65
  73
  39
  17
  56
  1
  41/272
  1069/191
  ((10 10 0) (10 10 0) (10 10 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  100
  73
  17
  10
  26
  7
  33
  1
  33/256
  429/73
  ((23/2 23/2 0) (23/2 23/2 0) (23/2 23/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  27
  13
  4
  10
  8
  1
  9
  1
  8/13
  60/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  31
  16
  4
  11
  10
  1
  11
  1
  5/8
  75/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  34
  18
  4
  12
  11
  1
  12
  1
  11/18
  85/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  35
  19
  4
  12
  11
  1
  12
  1
  11/19
  90/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  99
  52
  26
  21
  33
  9
  42
  1
  27/40
  265/52
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) empty-board player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (b)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  231
  173
  29
  29
  101
  10
  111
  1
  1204/2565
  838/173
  ((61/2 61/2 0) (61/2 61/2 0) (61/2 31 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  6
  2
  7
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  18
  8
  2
  8
  1
  0
  1
  1
  1/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  39
  18
  6
  15
  1
  1
  2
  1
  1/14
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  43
  19
  6
  18
  1
  1
  2
  1
  1/15
  97/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? (ma)))))\""
  45
  20
  6
  19
  1
  1
  2
  1
  1/16
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  122
  64
  28
  30
  23
  9
  32
  1
  149/480
  331/64
  ((8 8 0) (8 8 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  123
  65
  28
  30
  23
  9
  32
  1
  149/495
  336/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  197
  93
  51
  53
  23
  12
  35
  1
  149/615
  490/93
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env ((□? (some-v-v)))))\""
  199
  94
  51
  54
  23
  12
  35
  1
  149/630
  495/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env ((□? (b m)))))\""
  5
  3
  0
  2
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  160
  92
  38
  30
  30
  11
  41
  1
  117/370
  215/46
  ((14 14 0) (14 14 0) (14 14 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  40
  24
  10
  6
  14
  4
  18
  1
  31/42
  43/8
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  98
  50
  24
  24
  24
  7
  31
  1
  251/518
  49/10
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  205
  129
  37
  39
  60
  11
  71
  1
  2899/6390
  219/43
  ((29/2 29/2 0) (29/2 29/2 0) (29/2 29/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  51
  22
  10
  19
  8
  3
  11
  1
  2/5
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  75
  31
  20
  24
  11
  7
  18
  1
  59/161
  146/31
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  77
  33
  20
  24
  13
  7
  20
  1
  73/175
  52/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  116
  59
  27
  30
  25
  10
  35
  1
  1543/3465
  5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-coord\")\n  (env ((□? (move-coord-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  139
  86
  19
  34
  20
  8
  28
  1
  55/312
  497/86
  ((14 14 0) (14 14 0) (27/2 27/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  381
  263
  53
  65
  98
  16
  114
  1
  589/1680
  1340/263
  ((23 23 0) (49/2 49/2 0) (23 23 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  419
  283
  61
  75
  106
  18
  124
  1
  757/2064
  1429/283
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  422
  285
  61
  76
  106
  18
  124
  1
  733/2064
  1439/285
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  515
  337
  88
  90
  130
  23
  153
  1
  1141/2808
  1687/337
  ((9 9 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  516
  338
  88
  90
  130
  23
  153
  1
  1141/2832
  846/169
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  517
  339
  88
  90
  130
  23
  153
  1
  163/408
  1697/339
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  521
  341
  88
  92
  130
  23
  153
  1
  1141/2904
  1707/341
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  524
  343
  88
  93
  130
  23
  153
  1
  1141/2952
  1717/343
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  531
  349
  88
  94
  132
  23
  155
  1
  1141/3000
  1744/349
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  531
  349
  88
  94
  132
  23
  155
  1
  1141/3000
  1744/349
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  557
  370
  88
  99
  141
  23
  164
  1
  461/1200
  917/185
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  798
  497
  187
  114
  153
  38
  191
  1
  1303/3408
  2500/497
  ((58 58 1/2) (58 58 1/2) (58 58 1/2)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  798
  497
  187
  114
  153
  38
  191
  1
  1303/3408
  2500/497
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  798
  497
  187
  114
  153
  38
  191
  1
  1303/3408
  2500/497
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env ((□? (f x)))))\""
  800
  499
  187
  114
  153
  38
  191
  1
  6467/17040
  2510/499
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  824
  523
  187
  114
  168
  38
  206
  1
  1673/4350
  2654/523
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  829
  527
  187
  115
  168
  38
  206
  1
  661/1740
  2672/527
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  831
  529
  187
  115
  168
  38
  206
  1
  661/1764
  2682/529
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  38
  17
  4
  17
  1
  1
  2
  1
  1/12
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  40
  18
  4
  18
  1
  1
  2
  1
  1/13
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  43
  20
  4
  19
  1
  1
  2
  1
  1/15
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> display <-) \"Cat's game.\\n\")\n  (env ((□? (bo this-play that-play)))))\""
  44
  21
  4
  19
  1
  1
  2
  1
  1/16
  107/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  288
  137
  76
  75
  21
  18
  39
  1
  7/116
  797/137
  ((30 30 0) (30 30 0) (30 30 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  205
  114
  51
  40
  21
  17
  38
  1
  7/108
  331/57
  ((21 21 0) (21 21 0) (21 21 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  238
  137
  55
  46
  39
  18
  57
  1
  43/154
  765/137
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  238
  137
  55
  46
  39
  18
  57
  1
  43/154
  765/137
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  61
  32
  8
  21
  14
  2
  16
  1
  8/21
  143/32
  ((3/2 3/2 0) (2 2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  281
  158
  65
  58
  35
  19
  54
  1
  23/146
  859/158
  ((25 25 0) (49/2 25 0) (25 25 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  294
  169
  65
  60
  36
  19
  55
  1
  25/156
  914/169
  ((1 1 0) (1 1 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env ((□? ()))))\""
  296
  171
  65
  60
  37
  19
  56
  1
  27/160
  308/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  640
  422
  113
  105
  118
  28
  146
  1
  751/3013
  2141/422
  ((127/2 127/2 1) (127/2 127/2 1) (127/2 127/2 1)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  640
  422
  113
  105
  118
  28
  146
  1
  751/3013
  2141/422
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  773
  491
  151
  131
  157
  50
  207
  1
  132/391
  2505/491
  ((13 13 0) (13 13 0) (13 13 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  779
  497
  151
  131
  157
  50
  207
  1
  54/161
  2535/497
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  779
  497
  151
  131
  157
  50
  207
  1
  54/161
  2535/497
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  787
  504
  151
  132
  157
  50
  207
  1
  11857/36110
  1285/252
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  787
  504
  151
  132
  157
  50
  207
  1
  11857/36110
  1285/252
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  792
  509
  151
  132
  157
  50
  207
  1
  11857/36570
  2595/509
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  795
  512
  151
  132
  157
  50
  207
  1
  11857/36800
  1305/256
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  807
  518
  151
  138
  157
  50
  207
  1
  11857/37030
  2645/518
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  7
  3
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  88
  47
  21
  20
  16
  5
  21
  1
  11/29
  225/47
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  90
  49
  21
  20
  18
  5
  23
  1
  13/31
  235/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  152
  85
  38
  29
  28
  11
  39
  1
  57/175
  80/17
  ((27/2 27/2 0) (14 14 0) (27/2 27/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  77
  34
  20
  23
  2
  4
  6
  1
  2/21
  92/17
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  7
  3
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  5
  3
  0
  2
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  23
  12
  3
  8
  6
  1
  7
  1
  1/2
  55/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  24
  13
  3
  8
  7
  1
  8
  1
  7/13
  60/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  95
  49
  25
  21
  21
  9
  30
  1
  17/45
  270/49
  ((8 8 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  397
  267
  68
  62
  91
  26
  117
  1
  655/1428
  481/89
  ((89/2 89/2 0) (44 44 0) (89/2 89/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  399
  269
  68
  62
  91
  26
  117
  1
  131/294
  1453/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  406
  274
  68
  64
  92
  26
  118
  1
  676/1575
  739/137
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env ((□? (co)))))\""
  408
  275
  68
  65
  92
  26
  118
  1
  169/399
  1483/275
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  17
  9
  2
  6
  1
  1
  2
  1
  1/8
  5
  ((0 0 0) (1/2 1/2 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  20
  11
  2
  7
  1
  1
  2
  1
  1/10
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  111
  75
  19
  17
  21
  8
  29
  1
  7/80
  439/75
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  360
  198
  102
  60
  51
  28
  79
  1
  19/115
  563/99
  ((61/2 61/2 0) (61/2 61/2 0) (61/2 61/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  20
  12
  3
  5
  12
  1
  13
  1
  1
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  45
  21
  13
  11
  15
  5
  20
  1
  29/35
  34/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  72
  29
  21
  22
  19
  6
  25
  1
  5/7
  138/29
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  74
  31
  21
  22
  21
  6
  27
  1
  129/175
  146/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  7
  0
  5
  2
  0
  2
  1
  2/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  13
  8
  0
  5
  3
  0
  3
  1
  3/8
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  16
  10
  0
  6
  3
  0
  3
  1
  3/10
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  39
  20
  4
  15
  3
  1
  4
  1
  3/17
  101/20
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  42
  22
  4
  16
  3
  1
  4
  1
  3/19
  111/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  45
  24
  4
  17
  4
  1
  5
  1
  4/21
  121/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  48
  24
  12
  12
  10
  2
  12
  1
  5/12
  113/24
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  48
  24
  12
  12
  10
  2
  12
  1
  5/12
  113/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  94
  41
  22
  31
  11
  3
  14
  1
  11/36
  200/41
  ((2 2 0) (5/2 5/2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  95
  42
  22
  31
  11
  3
  14
  1
  11/37
  205/42
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  97
  44
  22
  31
  12
  3
  15
  1
  4/13
  215/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  99
  46
  22
  31
  13
  3
  16
  1
  13/41
  225/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  101
  48
  22
  31
  13
  3
  16
  1
  13/43
  235/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  430
  314
  49
  67
  119
  15
  134
  1
  229/660
  782/157
  ((63 63 1/2) (63 63 1/2) (63 63 1/2)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  88
  43
  18
  27
  15
  4
  19
  1
  1/3
  190/43
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  137
  66
  31
  40
  26
  6
  32
  1
  11/28
  9/2
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  250
  122
  59
  69
  45
  7
  52
  1
  55/136
  285/61
  ((23/2 23/2 0) (23/2 23/2 0) (23/2 23/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  270
  135
  62
  73
  58
  8
  66
  1
  1/2
  628/135
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  272
  137
  62
  73
  59
  8
  67
  1
  1/2
  638/137
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  342
  185
  83
  74
  75
  14
  89
  1
  1441/2716
  179/37
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  345
  186
  83
  76
  75
  14
  89
  1
  1441/2744
  150/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  381
  208
  93
  80
  84
  15
  99
  1
  1171/2340
  499/104
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  382
  209
  93
  80
  84
  15
  99
  1
  1171/2360
  1003/209
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  389
  214
  93
  82
  85
  15
  100
  1
  397/820
  514/107
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  391
  216
  93
  82
  86
  15
  101
  1
  1211/2500
  173/36
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  400
  220
  97
  83
  86
  16
  102
  1
  1211/2560
  529/110
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env ((□? (bo)) (□? (ma)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  10
  6
  0
  4
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  55
  28
  12
  15
  12
  2
  14
  1
  3/7
  19/4
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  92
  53
  22
  17
  28
  8
  36
  1
  29/56
  262/53
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  95
  54
  22
  19
  28
  8
  36
  1
  87/172
  89/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  138
  74
  32
  32
  36
  11
  47
  1
  119/244
  355/74
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  189
  110
  43
  36
  49
  15
  64
  1
  517/1125
  276/55
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  192
  112
  43
  37
  49
  15
  64
  1
  47/105
  281/56
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  194
  114
  43
  37
  49
  15
  64
  1
  517/1185
  286/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  200
  118
  43
  39
  50
  15
  65
  1
  532/1245
  296/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  202
  120
  43
  39
  50
  15
  65
  1
  532/1275
  301/60
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  21
  11
  3
  7
  5
  1
  6
  1
  5/11
  50/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  43
  22
  7
  14
  9
  2
  11
  1
  9/22
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env ((□? ()))))\""
  45
  23
  7
  15
  9
  2
  11
  1
  9/23
  104/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  49
  25
  7
  17
  10
  2
  12
  1
  2/5
  114/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  60
  34
  16
  10
  24
  7
  31
  1
  7/9
  87/17
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  277
  154
  80
  43
  64
  27
  91
  1
  63/122
  379/77
  ((53/2 53/2 0) (53/2 53/2 0) (53/2 53/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  422
  247
  99
  76
  84
  35
  119
  1
  307/800
  1289/247
  ((15 15 0) (15 15 0) (29/2 29/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  428
  253
  99
  76
  86
  35
  121
  1
  937/2448
  1322/253
  ((1/2 1/2 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ((□? (i)))))\""
  430
  254
  99
  77
  86
  35
  121
  1
  937/2472
  1327/254
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  432
  256
  99
  77
  86
  35
  121
  1
  937/2496
  1337/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  707
  371
  195
  141
  125
  59
  184
  1
  4325/11004
  1986/371
  ((77/2 77/2 0) (77/2 77/2 0) (77/2 77/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  709
  373
  195
  141
  125
  59
  184
  1
  4325/11088
  1996/373
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  709
  373
  195
  141
  125
  59
  184
  1
  4325/11088
  1996/373
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  713
  377
  195
  141
  127
  59
  186
  1
  4367/11172
  2012/377
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  716
  380
  195
  141
  128
  59
  187
  1
  1465/3752
  2029/380
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  719
  383
  195
  141
  129
  59
  188
  1
  4423/11340
  2044/383
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  791
  440
  201
  150
  158
  60
  218
  1
  2227/5425
  1157/220
  ((11 11 0) (11 11 0) (11 11 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  794
  442
  201
  151
  158
  60
  218
  1
  2227/5495
  1162/221
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  794
  442
  201
  151
  158
  60
  218
  1
  2227/5495
  1162/221
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  797
  444
  201
  152
  158
  60
  218
  1
  2227/5565
  389/74
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app X) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  797
  444
  201
  152
  158
  60
  218
  1
  2227/5565
  389/74
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  798
  445
  201
  152
  158
  60
  218
  1
  2227/5600
  2339/445
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  798
  445
  201
  152
  158
  60
  218
  1
  2227/5600
  2339/445
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  127
  78
  35
  14
  33
  14
  47
  1
  421/780
  64/13
  ((12 12 0) (12 12 0) (12 12 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  130
  80
  35
  15
  33
  14
  47
  1
  421/840
  197/40
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  79
  44
  22
  13
  22
  8
  30
  1
  67/120
  229/44
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ((□? (i)))))\""
  5
  3
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  10
  6
  0
  4
  1
  0
  1
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env ((□? (oc₀ oc₁)))))\""
  12
  7
  0
  5
  1
  0
  1
  1
  1/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  26
  14
  2
  10
  2
  0
  2
  1
  1/6
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env ((□? (h₀ h₁)))))\""
  28
  15
  2
  11
  2
  0
  2
  1
  2/13
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  62
  32
  20
  10
  23
  7
  30
  1
  53/66
  41/8
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  91
  48
  25
  18
  27
  8
  35
  1
  43/74
  59/12
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  164
  77
  41
  46
  31
  10
  41
  1
  17/38
  373/77
  ((3 3 0) (7/2 7/2 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  217
  114
  54
  49
  43
  14
  57
  1
  839/2040
  191/38
  ((4 4 0) (9/2 9/2 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  220
  117
  54
  49
  44
  14
  58
  1
  869/2100
  196/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  223
  119
  54
  50
  45
  14
  59
  1
  899/2160
  598/119
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  223
  119
  54
  50
  45
  14
  59
  1
  899/2160
  598/119
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  223
  119
  54
  50
  45
  14
  59
  1
  899/2160
  598/119
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  226
  122
  54
  50
  46
  14
  60
  1
  929/2220
  613/122
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  226
  122
  54
  50
  46
  14
  60
  1
  929/2220
  613/122
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  226
  122
  54
  50
  46
  14
  60
  1
  929/2220
  613/122
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  339
  202
  69
  68
  76
  19
  95
  1
  3431/7380
  499/101
  ((11 11 0) (11 11 0) (11 11 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  65
  36
  8
  21
  14
  2
  16
  1
  4/11
  53/12
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  160
  120
  21
  19
  53
  8
  61
  1
  491/1464
  26/5
  ((43/2 43/2 0) (43/2 43/2 0) (43/2 43/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  498
  358
  71
  69
  131
  25
  156
  1
  5359/13440
  942/179
  ((121/2 121/2 1/2) (121/2 121/2 1/2) (121/2 121/2 1/2)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  530
  390
  71
  69
  151
  25
  176
  1
  5659/13920
  206/39
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked? <-) (app b (app coord r c)))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  5
  3
  0
  2
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  13
  7
  0
  6
  1
  0
  1
  1
  1/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  39
  15
  8
  16
  5
  1
  6
  1
  1/3
  71/15
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  249
  184
  29
  36
  105
  10
  115
  1
  7343/16830
  889/184
  ((32 32 0) (65/2 65/2 0) (65/2 65/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  252
  186
  29
  37
  105
  10
  115
  1
  7343/17340
  29/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  268
  195
  31
  42
  106
  11
  117
  1
  3799/9435
  944/195
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  271
  198
  31
  42
  106
  11
  117
  1
  7598/19635
  479/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  399
  301
  48
  50
  155
  18
  173
  1
  24993/72760
  219/43
  ((14 14 0) (14 14 0) (14 14 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  431
  317
  58
  56
  161
  22
  183
  1
  59677/176120
  1622/317
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  602
  430
  82
  90
  194
  27
  221
  1
  277909/813960
  1114/215
  ((39/2 39/2 0) (39/2 39/2 0) (39/2 39/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app minimax bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env ((□? ()))))\""
  9
  6
  0
  3
  3
  0
  3
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  6
  2
  7
  1
  0
  1
  1
  1/5
  5
  ((1/2 1/2 0) (1/2 1/2 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  27
  13
  4
  10
  8
  1
  9
  1
  8/13
  60/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  35
  17
  6
  12
  8
  2
  10
  1
  1/2
  80/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env ((□? (bo this-play that-play)))))\""
  38
  19
  6
  13
  9
  2
  11
  1
  1/2
  90/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  41
  21
  6
  14
  9
  2
  11
  1
  9/20
  100/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  44
  23
  6
  15
  9
  2
  11
  1
  9/22
  110/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  547
  277
  168
  102
  119
  32
  151
  1
  3227/5820
  1456/277
  ((129/2 129/2 1) (65 65 1) (65 65 1)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  547
  277
  168
  102
  119
  32
  151
  1
  3227/5820
  1456/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma)))\n  (env ((□? (bo)) (□? (ma)))))\""
  556
  286
  168
  102
  120
  32
  152
  1
  3287/5940
  1501/286
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  619
  314
  192
  113
  124
  37
  161
  1
  3527/6900
  817/157
  ((6 6 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env ((□? (f x)))))\""
  624
  319
  192
  113
  126
  37
  163
  1
  3497/6900
  1659/319
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo this-play that-play)))))\""
  629
  324
  192
  113
  130
  37
  167
  1
  709/1392
  421/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (oc₀ oc₁)))))\""
  631
  325
  192
  114
  130
  37
  167
  1
  709/1404
  1689/325
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  633
  327
  192
  114
  130
  37
  167
  1
  709/1428
  1699/327
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (c)) (□? (b m)))))\""
  636
  330
  192
  114
  130
  37
  167
  1
  709/1440
  857/165
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  836
  466
  241
  129
  175
  52
  227
  1
  4613/9420
  2375/466
  ((37 37 0) (37 37 0) (37 37 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  838
  468
  241
  129
  175
  52
  227
  1
  4613/9540
  265/52
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  208
  117
  51
  40
  22
  17
  39
  1
  9/112
  677/117
  ((43/2 43/2 0) (43/2 43/2 0) (21 21 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  650
  356
  191
  103
  85
  50
  135
  1
  2003/6720
  479/89
  ((151/2 151/2 1/2) (151/2 151/2 1/2) (77 77 1/2)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  741
  385
  224
  132
  85
  51
  136
  1
  2003/6960
  2087/385
  ((31/2 31/2 0) (31/2 31/2 0) (31/2 31/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  869
  455
  272
  142
  105
  57
  162
  1
  911/2760
  342/65
  ((35/2 35/2 0) (35/2 35/2 0) (35/2 35/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  304
  217
  43
  44
  69
  17
  86
  1
  297/595
  167/31
  ((44 44 0) (45 45 0) (89/2 89/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  304
  217
  43
  44
  69
  17
  86
  1
  297/595
  167/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  306
  218
  43
  45
  69
  17
  86
  1
  891/1820
  587/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  113
  81
  18
  14
  48
  5
  53
  1
  613/952
  394/81
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env ((□? (bo)) (□? (ma)))))\""
  117
  83
  18
  16
  49
  5
  54
  1
  641/1008
  404/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  120
  85
  18
  17
  49
  5
  54
  1
  641/1064
  414/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  194
  138
  32
  24
  72
  12
  84
  1
  181039/342720
  691/138
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  206
  146
  32
  28
  75
  12
  87
  1
  33241/68040
  363/73
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  370
  244
  72
  54
  108
  25
  133
  1
  11621/27720
  1179/244
  ((31/2 31/2 0) (31/2 31/2 0) (31/2 31/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  53
  18
  15
  20
  0
  3
  3
  1
  0
  11/2
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  55
  20
  15
  20
  1
  3
  4
  1
  1/12
  109/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> display <-) \"Cat's game.\\n\")\n  (env ((□? (bo this-play that-play)))))\""
  57
  21
  15
  21
  1
  3
  4
  1
  1/13
  38/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  59
  23
  15
  21
  3
  3
  6
  1
  1/5
  124/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  130
  69
  29
  32
  17
  5
  22
  1
  11/35
  109/23
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  216
  123
  51
  42
  46
  13
  59
  1
  88/189
  613/123
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  216
  123
  51
  42
  46
  13
  59
  1
  88/189
  613/123
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  273
  155
  67
  51
  48
  15
  63
  1
  94/231
  753/155
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  274
  156
  67
  51
  48
  15
  63
  1
  47/117
  379/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  277
  159
  67
  51
  48
  15
  63
  1
  94/237
  770/159
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env ((□? (co)))))\""
  9
  6
  0
  3
  2
  0
  2
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  480
  240
  145
  95
  103
  28
  131
  1
  793/1600
  1259/240
  ((60 60 1/2) (60 60 1/2) (60 60 1/2)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  510
  264
  145
  101
  103
  28
  131
  1
  6593/14400
  685/132
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  520
  274
  145
  101
  107
  28
  135
  1
  6737/14760
  710/137
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  711
  411
  181
  119
  176
  40
  216
  1
  10637/20340
  2119/411
  ((65/2 65/2 0) (65/2 65/2 0) (65/2 65/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  966
  581
  240
  145
  223
  48
  271
  1
  63293/138600
  3008/581
  ((68 68 1) (68 68 1) (68 68 1)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  966
  581
  240
  145
  223
  48
  271
  1
  63293/138600
  3008/581
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  968
  583
  240
  145
  223
  48
  271
  1
  379/840
  3018/583
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  971
  586
  240
  145
  223
  48
  271
  1
  63293/141120
  3033/586
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? (bo this-play that-play)))))\""
  971
  586
  240
  145
  223
  48
  271
  1
  63293/141120
  3033/586
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  971
  586
  240
  145
  223
  48
  271
  1
  63293/141120
  3033/586
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  973
  588
  240
  145
  223
  48
  271
  1
  63293/142800
  3043/588
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  976
  591
  240
  145
  224
  48
  272
  1
  21191/47880
  3058/591
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  979
  594
  240
  145
  224
  48
  272
  1
  21191/48160
  3073/594
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  983
  597
  240
  146
  224
  48
  272
  1
  21099/48160
  1030/199
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  986
  599
  240
  147
  224
  48
  272
  1
  7033/16240
  3100/599
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  987
  600
  240
  147
  224
  48
  272
  1
  21099/49000
  207/40
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  990
  602
  240
  148
  224
  48
  272
  1
  7033/16520
  445/86
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  130
  49
  49
  32
  22
  17
  39
  1
  13/33
  262/49
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  131
  50
  49
  32
  22
  17
  39
  1
  26/69
  267/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  181
  73
  62
  46
  33
  19
  52
  1
  59/138
  374/73
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  183
  75
  62
  46
  34
  19
  53
  1
  31/72
  128/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  185
  77
  62
  46
  34
  19
  53
  1
  31/75
  394/77
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  23
  10
  4
  9
  3
  1
  4
  1
  3/10
  22/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  45
  23
  8
  14
  7
  2
  9
  1
  7/23
  101/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  47
  25
  8
  14
  8
  2
  10
  1
  8/25
  111/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  75
  32
  20
  23
  1
  4
  5
  1
  1/20
  43/8
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  337
  233
  49
  55
  90
  14
  104
  1
  67/185
  1137/233
  ((87/2 87/2 0) (87/2 87/2 0) (87/2 87/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  359
  245
  53
  61
  96
  15
  111
  1
  159/410
  1191/245
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  88
  44
  18
  26
  14
  4
  18
  1
  5/16
  48/11
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  210
  93
  61
  56
  23
  6
  29
  1
  17/48
  488/93
  ((39/2 39/2 0) (39/2 39/2 0) (39/2 39/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  299
  139
  98
  62
  46
  17
  63
  1
  191/372
  728/139
  ((8 8 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  299
  139
  98
  62
  46
  17
  63
  1
  191/372
  728/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  347
  164
  113
  70
  57
  22
  79
  1
  259/510
  431/82
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  807
  422
  255
  130
  85
  35
  120
  1
  547/1344
  2169/422
  ((179/2 179/2 3/2) (179/2 179/2 3/2) (179/2 179/2 3/2)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  848
  447
  267
  134
  100
  40
  140
  1
  9563/22050
  2281/447
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  851
  449
  267
  135
  101
  40
  141
  1
  9773/22470
  2291/449
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  881
  475
  267
  139
  115
  40
  155
  1
  3827/8330
  2408/475
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  905
  490
  274
  141
  116
  41
  157
  1
  11551/25620
  2507/490
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  1068
  617
  296
  155
  184
  51
  235
  1
  2011/5040
  3188/617
  ((25 25 0) (25 25 0) (25 25 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  1070
  618
  296
  156
  184
  51
  235
  1
  38209/96390
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  1070
  618
  296
  156
  184
  51
  235
  1
  38209/96390
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  1134
  642
  324
  168
  195
  56
  251
  1
  87023/215460
  3299/642
  ((11/2 11/2 0) (11/2 11/2 0) (6 6 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  30
  10
  8
  12
  5
  1
  6
  1
  1/2
  23/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  32
  11
  8
  13
  5
  1
  6
  1
  5/11
  51/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? (ma)))))\""
  6
  3
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  69
  36
  22
  11
  24
  8
  32
  1
  3/4
  95/18
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  25
  9
  10
  6
  3
  4
  7
  1
  1/7
  16/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  27
  11
  10
  6
  5
  4
  9
  1
  17/35
  58/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  9
  6
  0
  3
  3
  0
  3
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  6
  3
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  85
  47
  22
  16
  22
  8
  30
  1
  134/285
  244/47
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  87
  48
  22
  17
  22
  8
  30
  1
  67/150
  83/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env ((□? (b co m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  6
  3
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  217
  119
  51
  47
  21
  17
  38
  1
  7/114
  688/119
  ((43/2 43/2 0) (43/2 43/2 0) (43/2 43/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  6
  2
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  68
  38
  17
  13
  10
  7
  17
  1
  5/72
  116/19
  ((15/2 15/2 0) (15/2 15/2 0) (8 8 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  11
  7
  0
  4
  1
  0
  1
  1
  1/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  94
  48
  18
  28
  15
  4
  19
  1
  11/38
  215/48
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  133
  72
  28
  33
  29
  8
  37
  1
  139/350
  43/9
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  133
  72
  28
  33
  29
  8
  37
  1
  139/350
  43/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  137
  75
  28
  34
  29
  8
  37
  1
  139/371
  359/75
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  215
  122
  50
  43
  53
  16
  69
  1
  725/1638
  306/61
  ((9/2 9/2 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  297
  165
  77
  55
  53
  19
  72
  1
  25/63
  826/165
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env ((□? (f xs)))))\""
  305
  173
  77
  55
  57
  19
  76
  1
  755/1869
  866/173
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  486
  299
  116
  71
  83
  24
  107
  1
  6567/15260
  1505/299
  ((63/2 63/2 0) (32 32 0) (63/2 63/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  498
  311
  116
  71
  86
  24
  110
  1
  417/980
  1557/311
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  41
  19
  4
  18
  1
  1
  2
  1
  1/14
  97/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  296
  152
  82
  62
  58
  21
  79
  1
  141/335
  92/19
  ((25 25 0) (51/2 51/2 0) (25 25 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  389
  214
  106
  69
  94
  38
  132
  1
  24851/51030
  1065/214
  ((13 13 0) (13 13 0) (13 13 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-coord\")\n  (env ((□? (move-coord-v)))))\""
  391
  215
  106
  70
  94
  38
  132
  1
  24851/51660
  214/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  392
  216
  106
  70
  94
  38
  132
  1
  24851/52290
  1075/216
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) empty-board player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  395
  218
  106
  71
  95
  38
  133
  1
  25481/53550
  1085/218
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env ((□? (r x)) (□? (f x)))))\""
  400
  222
  106
  72
  96
  38
  134
  1
  26111/54810
  1105/222
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  12
  7
  0
  5
  1
  0
  1
  1
  1/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  14
  8
  0
  6
  1
  0
  1
  1
  1/8
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  16
  10
  0
  6
  3
  0
  3
  1
  3/10
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  49
  22
  9
  18
  3
  2
  5
  1
  1/6
  113/22
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  211
  138
  31
  42
  40
  10
  50
  1
  149/684
  763/138
  ((37/2 37/2 0) (18 18 0) (37/2 37/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  215
  140
  31
  44
  41
  10
  51
  1
  161/708
  773/140
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  257
  160
  43
  54
  49
  12
  61
  1
  257/948
  433/80
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  259
  162
  43
  54
  49
  12
  61
  1
  257/972
  146/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  275
  178
  43
  54
  54
  12
  66
  1
  529/1992
  490/89
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env ((□? (bo)) (□? (ma)))))\""
  279
  182
  43
  54
  54
  12
  66
  1
  529/1992
  500/91
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  279
  182
  43
  54
  54
  12
  66
  1
  529/1992
  500/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  280
  183
  43
  54
  54
  12
  66
  1
  529/2016
  335/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  280
  183
  43
  54
  54
  12
  66
  1
  529/2016
  335/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  288
  191
  43
  54
  59
  12
  71
  1
  4/15
  1047/191
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  102
  41
  39
  22
  22
  16
  38
  1
  1/2
  215/41
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  104
  42
  39
  23
  22
  16
  38
  1
  9/19
  110/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  114
  46
  41
  27
  22
  17
  39
  1
  9/22
  120/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  157
  78
  50
  29
  28
  18
  46
  1
  11/35
  68/13
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  162
  82
  50
  30
  28
  18
  46
  1
  16/57
  214/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  166
  84
  50
  32
  29
  18
  47
  1
  7/24
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  170
  86
  50
  34
  30
  18
  48
  1
  19/63
  224/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  209
  117
  54
  38
  54
  19
  73
  1
  326/795
  5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  255
  148
  64
  43
  76
  25
  101
  1
  2239/4320
  186/37
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  482
  311
  97
  74
  125
  32
  157
  1
  249619/529620
  1518/311
  ((99/2 99/2 1/2) (99/2 99/2 1/2) (99/2 99/2 1/2)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  76
  41
  18
  17
  14
  5
  19
  1
  30/91
  194/41
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  113
  57
  26
  30
  22
  7
  29
  1
  86/203
  14/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  258
  168
  43
  47
  69
  14
  83
  1
  1307/3696
  845/168
  ((41/2 41/2 0) (21 21 0) (41/2 41/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env ((□? (h)))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env ((□? (h)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  22
  10
  2
  10
  2
  0
  2
  1
  2/9
  5
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  68
  38
  15
  15
  18
  5
  23
  1
  11/21
  199/38
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  71
  40
  15
  16
  18
  5
  23
  1
  11/23
  209/40
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  76
  42
  15
  19
  19
  5
  24
  1
  12/25
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  145
  78
  37
  30
  33
  13
  46
  1
  194/495
  11/2
  ((8 8 0) (17/2 17/2 0) (8 8 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  148
  80
  37
  31
  33
  13
  46
  1
  194/525
  439/80
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  150
  81
  37
  32
  33
  13
  46
  1
  97/270
  148/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  473
  256
  128
  89
  73
  43
  116
  1
  251/1218
  1711/256
  ((109/2 109/2 0) (109/2 109/2 0) (55 55 1/2)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  45
  18
  10
  17
  8
  3
  11
  1
  8/17
  40/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  53
  22
  12
  19
  8
  4
  12
  1
  2/5
  50/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  56
  24
  12
  20
  8
  4
  12
  1
  4/11
  55/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  114
  56
  30
  28
  31
  11
  42
  1
  7/12
  137/28
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  295
  198
  51
  46
  95
  19
  114
  1
  487/1200
  989/198
  ((30 30 0) (30 30 0) (30 30 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  6
  3
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  22
  14
  3
  5
  14
  1
  15
  1
  1
  31/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  77
  46
  19
  12
  37
  8
  45
  1
  95/108
  113/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  302
  176
  71
  55
  71
  25
  96
  1
  289/636
  961/176
  ((47/2 47/2 0) (47/2 47/2 0) (47/2 47/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  302
  176
  71
  55
  71
  25
  96
  1
  289/636
  961/176
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  305
  178
  71
  56
  71
  25
  96
  1
  289/648
  971/178
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  62
  32
  20
  10
  23
  7
  30
  1
  53/66
  41/8
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  183
  104
  55
  24
  50
  21
  71
  1
  257/420
  259/52
  ((12 12 0) (12 12 0) (12 12 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  25
  12
  4
  9
  7
  1
  8
  1
  7/12
  55/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  27
  14
  4
  9
  8
  1
  9
  1
  4/7
  65/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  77
  37
  17
  23
  19
  3
  22
  1
  19/37
  172/37
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  162
  84
  40
  38
  35
  8
  43
  1
  29/60
  395/84
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  42
  17
  4
  21
  1
  1
  2
  1
  1/12
  87/17
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  44
  19
  4
  21
  1
  1
  2
  1
  1/14
  97/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  47
  21
  4
  22
  1
  1
  2
  1
  1/16
  107/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  49
  22
  4
  23
  1
  1
  2
  1
  1/17
  56/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  52
  24
  4
  24
  2
  1
  3
  1
  2/19
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  106
  60
  15
  31
  19
  6
  25
  1
  31/115
  323/60
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  158
  92
  29
  37
  42
  13
  55
  1
  358/675
  487/92
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  193
  108
  37
  48
  50
  15
  65
  1
  478/915
  559/108
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  271
  162
  45
  64
  67
  16
  83
  1
  1663/3195
  269/54
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  284
  168
  50
  66
  67
  17
  84
  1
  1663/3285
  279/56
  ((1 1 0) (1 1 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  287
  170
  50
  67
  67
  17
  84
  1
  1663/3375
  847/170
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  60
  23
  15
  22
  1
  3
  4
  1
  1/13
  121/23
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  68
  28
  15
  25
  2
  3
  5
  1
  1/9
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  72
  32
  15
  25
  3
  3
  6
  1
  3/20
  83/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env ((□? (f xs)))))\""
  75
  34
  15
  26
  4
  3
  7
  1
  2/11
  88/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  94
  44
  19
  31
  4
  4
  8
  1
  4/29
  57/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-horizon\")\n  (env ((□? (move-horizon-v)))))\""
  96
  45
  19
  32
  4
  4
  8
  1
  2/15
  233/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  24
  11
  4
  9
  7
  1
  8
  1
  7/11
  50/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  31
  15
  4
  12
  8
  1
  9
  1
  8/15
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  33
  16
  4
  13
  8
  1
  9
  1
  8/15
  75/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  87
  41
  19
  27
  8
  4
  12
  1
  8/25
  206/41
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  186
  91
  42
  53
  25
  9
  34
  1
  59/141
  444/91
  ((15/2 15/2 0) (15/2 15/2 0) (8 8 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  191
  93
  42
  56
  25
  9
  34
  1
  59/147
  454/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  253
  128
  62
  63
  35
  11
  46
  1
  113/320
  153/32
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  18
  9
  3
  6
  5
  1
  6
  1
  5/9
  40/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) bo that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  19
  10
  3
  6
  5
  1
  6
  1
  1/2
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  21
  11
  3
  7
  5
  1
  6
  1
  5/11
  50/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  23
  12
  3
  8
  5
  1
  6
  1
  5/12
  55/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  72
  35
  16
  21
  16
  3
  19
  1
  16/35
  162/35
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  170
  73
  44
  53
  17
  4
  21
  1
  17/47
  354/73
  ((7 7 0) (7 7 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  172
  74
  44
  54
  17
  4
  21
  1
  17/48
  359/74
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  174
  76
  44
  54
  18
  4
  22
  1
  9/25
  369/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env ((□? (oc₀ oc₁)))))\""
  176
  77
  44
  55
  18
  4
  22
  1
  6/17
  34/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  178
  79
  44
  55
  19
  4
  23
  1
  19/53
  384/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  181
  81
  44
  56
  19
  4
  23
  1
  19/55
  394/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  183
  83
  44
  56
  19
  4
  23
  1
  1/3
  404/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  223
  100
  55
  68
  21
  6
  27
  1
  389/1220
  247/50
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env ((□? (oc₀ oc₁)))))\""
  224
  101
  55
  68
  21
  6
  27
  1
  389/1240
  499/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  7
  0
  6
  1
  0
  1
  1
  1/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  40
  16
  8
  16
  5
  1
  6
  1
  5/16
  75/16
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  157
  90
  38
  29
  30
  11
  41
  1
  59/180
  14/3
  ((14 14 0) (14 14 0) (14 14 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  168
  99
  38
  31
  32
  11
  43
  1
  133/410
  467/99
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  171
  101
  38
  32
  32
  11
  43
  1
  133/430
  477/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  173
  103
  38
  32
  34
  11
  45
  1
  17/50
  487/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env ((□? (rc)) (□? (b m)))))\""
  175
  104
  38
  33
  34
  11
  45
  1
  153/460
  123/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  178
  106
  38
  34
  35
  11
  46
  1
  163/480
  251/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  184
  111
  38
  35
  37
  11
  48
  1
  61/170
  527/111
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app lose) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  186
  113
  38
  35
  37
  11
  48
  1
  183/520
  537/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  231
  138
  47
  46
  38
  13
  51
  1
  193/680
  223/46
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  266
  157
  55
  54
  45
  14
  59
  1
  253/850
  757/157
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  282
  171
  55
  56
  47
  14
  61
  1
  749/2850
  820/171
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  309
  187
  60
  62
  51
  15
  66
  1
  859/3090
  892/187
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  311
  189
  60
  62
  51
  15
  66
  1
  859/3120
  902/189
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  393
  242
  77
  74
  76
  17
  93
  1
  2363/7380
  1139/242
  ((8 8 0) (15/2 15/2 0) (8 8 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  395
  244
  77
  74
  78
  17
  95
  1
  2483/7500
  1149/244
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  395
  244
  77
  74
  78
  17
  95
  1
  2483/7500
  1149/244
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env ((□? ()))))\""
  397
  245
  77
  75
  78
  17
  95
  1
  2483/7560
  1154/245
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  398
  246
  77
  75
  78
  17
  95
  1
  2483/7620
  1159/246
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env ((□? (oc₀ oc₁)))))\""
  400
  247
  77
  76
  78
  17
  95
  1
  2483/7680
  1164/247
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  404
  251
  77
  76
  80
  17
  97
  1
  2563/7800
  1184/251
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  487
  310
  99
  78
  94
  23
  117
  1
  2981/8400
  1511/310
  ((13 13 0) (13 13 0) (13 13 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  490
  313
  99
  78
  94
  23
  117
  1
  2981/8460
  1529/313
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  491
  314
  99
  78
  94
  23
  117
  1
  2981/8520
  767/157
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  494
  317
  99
  78
  94
  23
  117
  1
  271/780
  1554/317
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> empty-board <-) player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  497
  319
  99
  79
  95
  23
  118
  1
  3041/8700
  1564/319
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  503
  325
  99
  79
  95
  23
  118
  1
  3041/8820
  1597/325
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  520
  336
  102
  82
  106
  24
  130
  1
  3701/9480
  235/48
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  18
  9
  3
  6
  5
  1
  6
  1
  5/9
  40/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  27
  14
  3
  10
  6
  1
  7
  1
  3/7
  65/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  31
  17
  3
  11
  8
  1
  9
  1
  8/17
  80/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  56
  26
  11
  19
  12
  2
  14
  1
  6/13
  60/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  60
  28
  11
  21
  12
  2
  14
  1
  3/7
  65/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  484
  339
  65
  80
  121
  18
  139
  1
  8469/20608
  567/113
  ((77 77 1) (77 77 1) (155/2 155/2 1)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  484
  339
  65
  80
  121
  18
  139
  1
  8469/20608
  567/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  484
  339
  65
  80
  121
  18
  139
  1
  8469/20608
  567/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  573
  385
  97
  91
  122
  22
  144
  1
  8653/24104
  1942/385
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? (ma)))))\""
  575
  386
  97
  92
  122
  22
  144
  1
  8653/24104
  1947/386
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  578
  388
  97
  93
  122
  22
  144
  1
  8653/24472
  1957/388
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  945
  586
  215
  144
  162
  31
  193
  1
  12195/31648
  2997/586
  ((159/2 159/2 1) (78 78 1) (78 78 1)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  987
  624
  215
  148
  178
  31
  209
  1
  36953/99360
  3175/624
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  1075
  696
  223
  156
  208
  36
  244
  1
  12563/33856
  3553/696
  ((29/2 29/2 0) (29/2 29/2 0) (29/2 29/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  22
  14
  3
  5
  14
  1
  15
  1
  1
  32/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  26
  16
  3
  7
  15
  1
  16
  1
  15/16
  37/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  202
  133
  32
  37
  57
  8
  65
  1
  1369/2115
  632/133
  ((14 14 0) (14 14 0) (14 14 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  279
  175
  54
  50
  77
  16
  93
  1
  1681/2745
  851/175
  ((8 8 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  31
  13
  10
  8
  4
  4
  8
  1
  10/49
  68/13
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  54
  25
  14
  15
  7
  5
  12
  1
  31/133
  24/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  83
  38
  19
  26
  7
  6
  13
  1
  31/196
  94/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  44
  26
  7
  11
  10
  3
  13
  1
  29/60
  139/26
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  47
  28
  7
  12
  11
  3
  14
  1
  73/150
  149/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  52
  33
  7
  12
  13
  3
  16
  1
  79/165
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  8
  6
  0
  2
  3
  0
  3
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  28
  18
  4
  6
  9
  1
  10
  1
  1/2
  85/18
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  32
  20
  4
  8
  10
  1
  11
  1
  1/2
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  67
  40
  14
  13
  20
  5
  25
  1
  97/182
  51/10
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  191
  92
  47
  52
  33
  13
  46
  1
  100/273
  241/46
  ((11 11 0) (11 11 0) (11 11 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  195
  94
  47
  54
  34
  13
  47
  1
  213/572
  246/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app X) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  5
  3
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  8
  5
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  16
  10
  0
  6
  1
  0
  1
  1
  1/10
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  20
  11
  0
  9
  1
  0
  1
  1
  1/11
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  23
  13
  0
  10
  1
  0
  1
  1
  1/13
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  28
  15
  0
  13
  1
  0
  1
  1
  1/15
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  48
  27
  4
  17
  5
  1
  6
  1
  5/27
  128/27
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  140
  64
  34
  42
  19
  3
  22
  1
  19/56
  311/64
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  185
  95
  44
  46
  36
  7
  43
  1
  66/161
  478/95
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  527
  344
  83
  100
  119
  22
  141
  1
  806/2079
  1773/344
  ((43 43 0) (85/2 85/2 0) (43 43 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  564
  365
  89
  110
  128
  24
  152
  1
  1951/4998
  1867/365
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  564
  365
  89
  110
  128
  24
  152
  1
  1951/4998
  1867/365
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  6
  2
  7
  1
  0
  1
  1
  1/5
  5
  ((1/2 1/2 0) (1/2 1/2 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  19
  10
  2
  7
  1
  0
  1
  1
  1/7
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  22
  12
  2
  8
  2
  0
  2
  1
  2/9
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  100
  62
  13
  25
  29
  2
  31
  1
  23/45
  142/31
  ((4 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  100
  62
  13
  25
  29
  2
  31
  1
  23/45
  142/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  107
  66
  13
  28
  30
  2
  32
  1
  97/200
  152/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  109
  67
  13
  29
  30
  2
  32
  1
  97/205
  309/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  275
  173
  42
  60
  70
  12
  82
  1
  77/180
  820/173
  ((27/2 27/2 0) (13 13 0) (27/2 27/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  345
  207
  59
  79
  79
  14
  93
  1
  2069/5220
  326/69
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  741
  499
  113
  129
  173
  28
  201
  1
  537133/1437040
  2466/499
  ((155/2 155/2 1) (155/2 155/2 1) (155/2 155/2 1)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  742
  500
  113
  129
  173
  28
  201
  1
  537133/1447160
  2471/500
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  768
  518
  117
  133
  181
  29
  210
  1
  597853/1558480
  2551/518
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1027
  663
  214
  150
  196
  45
  241
  1
  13817383/36128400
  3304/663
  ((52 52 1/2) (52 52 1/2) (103/2 103/2 1/2)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  1028
  664
  214
  150
  197
  45
  242
  1
  14029903/36340920
  3309/664
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1135
  736
  244
  155
  204
  47
  251
  1
  4936381/12963720
  3629/736
  ((15 15 0) (15 15 0) (15 15 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  1167
  768
  244
  155
  224
  47
  271
  1
  300793/779240
  3805/768
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  1189
  789
  244
  156
  226
  47
  273
  1
  3022751/8075760
  3901/789
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  1192
  791
  244
  157
  227
  47
  274
  1
  3065255/8160768
  3911/791
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  1297
  860
  273
  164
  248
  56
  304
  1
  15992171/43779120
  214/43
  ((29 29 0) (59/2 59/2 0) (59/2 59/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  1297
  860
  273
  164
  248
  56
  304
  1
  15992171/43779120
  214/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  1300
  862
  273
  165
  248
  56
  304
  1
  1230167/3400320
  2145/431
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  1301
  863
  273
  165
  248
  56
  304
  1
  15992171/44416680
  4295/863
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1303
  865
  273
  165
  248
  56
  304
  1
  15992171/44629200
  861/173
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  1304
  866
  273
  165
  248
  56
  304
  1
  15992171/44841720
  2155/433
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  1797
  1166
  370
  261
  332
  84
  416
  1
  4479059/11847990
  3040/583
  ((94 94 1/2) (94 94 1/2) (94 94 1/2)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  1800
  1169
  370
  261
  333
  84
  417
  1
  1498923/3967040
  6117/1169
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  1802
  1171
  370
  261
  333
  84
  417
  1
  1498923/4002460
  6127/1171
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  1803
  1172
  370
  261
  334
  84
  418
  1
  1516633/4020170
  1533/293
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked? <-) (app b (app coord r c)))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  1804
  1173
  370
  261
  334
  84
  418
  1
  1516633/4020170
  361/69
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  1839
  1203
  370
  266
  357
  84
  441
  1
  202403/516120
  6275/1203
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  1869
  1233
  370
  266
  371
  84
  455
  1
  173782/459195
  6404/1233
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1882
  1245
  370
  267
  374
  84
  458
  1
  347311/929775
  6454/1245
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  1885
  1248
  370
  267
  375
  84
  459
  1
  58096/155595
  6469/1248
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1885
  1248
  370
  267
  375
  84
  459
  1
  58096/155595
  6469/1248
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app win) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1895
  1258
  370
  267
  375
  84
  459
  1
  116192/312455
  6519/1258
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> maximin <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  62
  34
  18
  10
  24
  7
  31
  1
  7/9
  87/17
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  63
  35
  18
  10
  24
  7
  31
  1
  56/75
  179/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  66
  37
  18
  11
  25
  7
  32
  1
  59/81
  189/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  89
  47
  22
  20
  25
  8
  33
  1
  59/102
  240/47
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ((□? (i)))))\""
  91
  48
  22
  21
  25
  8
  33
  1
  59/105
  245/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  19
  5
  3
  11
  0
  1
  1
  1
  0
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  185
  110
  44
  31
  40
  14
  54
  1
  143/410
  254/55
  ((31/2 31/2 0) (16 16 0) (31/2 31/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  5
  3
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  8
  4
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  9
  5
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  180
  137
  21
  22
  59
  8
  67
  1
  343/1392
  698/137
  ((59/2 59/2 0) (59/2 59/2 0) (59/2 59/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env ((□? (f acc l)))))\""
  183
  139
  21
  23
  60
  8
  68
  1
  367/1440
  708/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  187
  141
  21
  25
  61
  8
  69
  1
  391/1488
  718/141
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  190
  143
  21
  26
  61
  8
  69
  1
  391/1536
  56/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  190
  143
  21
  26
  61
  8
  69
  1
  391/1536
  56/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  206
  151
  21
  34
  61
  8
  69
  1
  391/1560
  780/151
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  209
  153
  21
  35
  61
  8
  69
  1
  391/1608
  790/153
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  255
  190
  27
  38
  84
  11
  95
  1
  5149/14280
  987/190
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  258
  192
  27
  39
  84
  11
  95
  1
  5149/14616
  997/192
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  555
  400
  77
  78
  141
  28
  169
  1
  6829/20496
  53/10
  ((46 46 0) (46 93/2 0) (46 46 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env ((□? (some-v-v)))))\""
  557
  401
  77
  79
  141
  28
  169
  1
  6829/20664
  2125/401
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> minimax <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  559
  403
  77
  79
  142
  28
  170
  1
  6997/21000
  2135/403
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  578
  413
  81
  84
  142
  29
  171
  1
  6997/22176
  2186/413
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  808
  568
  118
  122
  209
  44
  253
  1
  23567/72576
  1583/284
  ((139/2 139/2 1/2) (139/2 139/2 1/2) (69 69 1/2)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  811
  571
  118
  122
  210
  44
  254
  1
  24071/73584
  3181/571
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  814
  573
  118
  123
  211
  44
  255
  1
  24575/74592
  3191/573
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  827
  585
  118
  124
  213
  44
  257
  1
  8089/25368
  1081/195
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  835
  593
  118
  124
  218
  44
  262
  1
  4097/12768
  3283/593
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  850
  607
  118
  125
  225
  44
  269
  1
  4237/13104
  3343/607
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  863
  619
  118
  126
  227
  44
  271
  1
  63107/199080
  3396/619
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (b)))))\""
  866
  621
  118
  127
  228
  44
  272
  1
  64367/201600
  3406/621
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  891
  644
  118
  129
  243
  44
  287
  1
  3131/9450
  3523/644
  ((3/2 3/2 0) (3/2 2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ((□? (i)))))\""
  893
  645
  118
  130
  243
  44
  287
  1
  34441/104580
  1176/215
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  896
  647
  118
  131
  243
  44
  287
  1
  34441/104580
  3538/647
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b m)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  62
  35
  18
  9
  24
  7
  31
  1
  56/75
  179/35
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  64
  36
  18
  10
  24
  7
  31
  1
  28/39
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  67
  38
  18
  11
  25
  7
  32
  1
  59/84
  97/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  340
  182
  94
  64
  46
  28
  74
  1
  139/492
  1021/182
  ((63/2 63/2 0) (63/2 32 0) (32 32 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  340
  182
  94
  64
  46
  28
  74
  1
  139/492
  1021/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  349
  191
  94
  64
  52
  28
  80
  1
  85/288
  1066/191
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  390
  213
  108
  69
  62
  33
  95
  1
  271/816
  1166/213
  ((4 4 0) (4 4 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  58
  32
  18
  8
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  97
  48
  26
  23
  31
  9
  40
  1
  77/114
  59/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  97
  48
  26
  23
  31
  9
  40
  1
  77/114
  59/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env ((□? (bo this-play that-play)))))\""
  100
  50
  26
  24
  32
  9
  41
  1
  2/3
  123/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  103
  52
  26
  25
  33
  9
  42
  1
  83/126
  64/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  180
  103
  43
  34
  53
  16
  69
  1
  181/354
  572/103
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  60
  33
  18
  9
  23
  7
  30
  1
  53/69
  169/33
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b)))))\""
  60
  33
  18
  9
  23
  7
  30
  1
  53/69
  169/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  62
  35
  18
  9
  23
  7
  30
  1
  53/75
  179/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  62
  35
  18
  9
  23
  7
  30
  1
  53/75
  179/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  65
  37
  18
  10
  23
  7
  30
  1
  53/81
  189/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  128
  73
  35
  20
  33
  14
  47
  1
  227/516
  411/73
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  138
  77
  37
  24
  33
  15
  48
  1
  227/552
  431/77
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  381
  192
  120
  69
  63
  35
  98
  1
  1609/4500
  539/96
  ((30 30 0) (30 30 0) (59/2 59/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  390
  201
  120
  69
  64
  35
  99
  1
  1669/4620
  1123/201
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  396
  207
  120
  69
  64
  35
  99
  1
  1669/4740
  385/69
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  396
  207
  120
  69
  64
  35
  99
  1
  1669/4740
  385/69
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  398
  209
  120
  69
  64
  35
  99
  1
  1669/4860
  1165/209
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  465
  259
  131
  75
  81
  40
  121
  1
  1673/5580
  1438/259
  ((14 14 0) (29/2 29/2 0) (14 14 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  557
  313
  159
  85
  95
  43
  138
  1
  257/740
  1677/313
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  945
  545
  279
  121
  138
  59
  197
  1
  773/2100
  2942/545
  ((88 88 1) (177/2 177/2 1) (88 88 1)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1015
  604
  288
  123
  145
  60
  205
  1
  24097/68460
  3267/604
  ((27/2 27/2 0) (13 13 0) (27/2 27/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env ((□? (b m)))))\""
  1016
  605
  288
  123
  145
  60
  205
  1
  4811/13692
  3272/605
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1022
  611
  288
  123
  145
  60
  205
  1
  4811/13776
  3304/611
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1032
  621
  288
  123
  145
  60
  205
  1
  4811/13860
  1118/207
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1038
  627
  288
  123
  145
  60
  205
  1
  4811/13944
  1128/209
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1044
  633
  288
  123
  145
  60
  205
  1
  4811/14028
  1138/211
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1044
  633
  288
  123
  145
  60
  205
  1
  4811/14028
  1138/211
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (oc₀ oc₁)))))\""
  1046
  634
  288
  124
  145
  60
  205
  1
  4811/14112
  3419/634
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  1047
  635
  288
  124
  145
  60
  205
  1
  4811/14196
  3424/635
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  1050
  637
  288
  125
  146
  60
  206
  1
  4895/14364
  3434/637
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env (() () ())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env (() () ())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env (() () ())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env (() () ())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env (() () ())))\""
  12
  8
  3
  1
  8
  3
  11
  1
  1
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  14
  10
  3
  1
  10
  3
  13
  1
  1
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env (() () ())))\""
  35
  23
  9
  3
  23
  9
  32
  1
  1
  122/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  51
  33
  12
  6
  33
  12
  45
  1
  1
  179/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  51
  33
  12
  6
  33
  12
  45
  1
  1
  179/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env (() () ())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env (() () ())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4) (env (() () () () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-)) (env (() () () () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  app
  "\"'(eval (λ (n4) (-> (app p n1 n2 n3 n4) <-)) (env (() () () () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4) (env (() () () () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4) (env (() () () () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4) (env (() () () () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4) (env (() () () () ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4) (env (() () () () ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4) (env (() () () () ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  app
  "\"'(eval (λ (n4) (-> (app p n1 n2 n3 n4) <-)) (env (() () () () ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4) (env (() () () () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-)) (env (() () () () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (app (app p n1) n2) (-> n3 <-)) (env (() () () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (app p n1) (-> n2 <-)) (env (() () () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-)) (env (() () () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env (() () () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env (() () () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env (() () () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval (app (-> (app p n1) <-) n2) (env (() () () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env (() () () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval (app (-> (app (app p n1) n2) <-) n3) (env (() () () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env (() () () () () () () ())))\""
  138
  94
  27
  17
  94
  27
  121
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (() () () () () () ())))\""
  138
  94
  27
  17
  94
  27
  121
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  138
  94
  27
  17
  94
  27
  121
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (() () () () () () ())))\""
  138
  94
  27
  17
  94
  27
  121
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  138
  94
  27
  17
  94
  27
  121
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env (() () () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1) (env (() () () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env (() () () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env (() () () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env (() () () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (() () () () () () ())))\""
  71
  54
  15
  2
  54
  15
  69
  1
  1
  299/54
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env (() () () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env (() () () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env (() () () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env (() () () () () () () ())))\""
  138
  94
  27
  17
  94
  27
  121
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (() () () () () () ())))\""
  138
  94
  27
  17
  94
  27
  121
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  138
  94
  27
  17
  94
  27
  121
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (() () () () () () ())))\""
  138
  94
  27
  17
  94
  27
  121
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  138
  94
  27
  17
  94
  27
  121
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  138
  94
  27
  17
  94
  27
  121
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env (() () () () () () () ())))\""
  138
  94
  27
  17
  94
  27
  121
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  138
  94
  27
  17
  94
  27
  121
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-)) (env (() () () () () () () ())))\""
  138
  94
  27
  17
  94
  27
  121
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval (app (-> (app p n1) <-) n2) (env (() () () () () () () ())))\""
  138
  94
  27
  17
  94
  27
  121
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval (app (-> (app (app p n1) n2) <-) n3) (env (() () () () () () () ())))\""
  138
  94
  27
  17
  94
  27
  121
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  138
  94
  27
  17
  94
  27
  121
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env (() () () () () () () ())))\""
  140
  95
  28
  17
  95
  28
  123
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  140
  95
  28
  17
  95
  28
  123
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1) (env (() () () () () () () ())))\""
  140
  95
  28
  17
  95
  28
  123
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  140
  95
  28
  17
  95
  28
  123
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (() () () () () () ())))\""
  140
  95
  28
  17
  95
  28
  123
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env (() () () () () () () ())))\""
  140
  95
  28
  17
  95
  28
  123
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env (() () () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (app p n1) (-> n2 <-)) (env (() () () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (app (app p n1) n2) (-> n3 <-)) (env (() () () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env (() () () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  500
  78
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  15
  9
  5
  1
  9
  5
  14
  1
  1
  44/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  16
  10
  5
  1
  10
  5
  15
  1
  1
  49/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  20
  14
  5
  1
  14
  5
  19
  1
  1
  69/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  21
  15
  5
  1
  15
  5
  20
  1
  1
  74/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  31
  20
  9
  2
  20
  9
  29
  1
  1
  101/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  121
  88
  22
  11
  88
  22
  110
  1
  1
  491/88
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env (())))\""
  122
  89
  22
  11
  89
  22
  111
  1
  1
  496/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  122
  89
  22
  11
  89
  22
  111
  1
  1
  496/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  122
  89
  22
  11
  89
  22
  111
  1
  1
  496/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  122
  89
  22
  11
  89
  22
  111
  1
  1
  496/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  128
  94
  22
  12
  94
  22
  116
  1
  1
  521/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  128
  94
  22
  12
  94
  22
  116
  1
  1
  521/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  128
  94
  22
  12
  94
  22
  116
  1
  1
  521/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  128
  94
  22
  12
  94
  22
  116
  1
  1
  521/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (())))\""
  128
  94
  22
  12
  94
  22
  116
  1
  1
  521/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  128
  94
  22
  12
  94
  22
  116
  1
  1
  521/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  128
  94
  22
  12
  94
  22
  116
  1
  1
  521/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  130
  95
  23
  12
  95
  23
  118
  1
  1
  527/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  130
  95
  23
  12
  95
  23
  118
  1
  1
  527/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  130
  95
  23
  12
  95
  23
  118
  1
  1
  527/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  130
  95
  23
  12
  95
  23
  118
  1
  1
  527/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  130
  95
  23
  12
  95
  23
  118
  1
  1
  527/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (())))\""
  130
  95
  23
  12
  95
  23
  118
  1
  1
  527/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  130
  95
  23
  12
  95
  23
  118
  1
  1
  527/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  130
  95
  23
  12
  95
  23
  118
  1
  1
  527/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  132
  97
  23
  12
  97
  23
  120
  1
  1
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  132
  97
  23
  12
  97
  23
  120
  1
  1
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  132
  97
  23
  12
  97
  23
  120
  1
  1
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  132
  97
  23
  12
  97
  23
  120
  1
  1
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  132
  97
  23
  12
  97
  23
  120
  1
  1
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  133
  98
  23
  12
  98
  23
  121
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  133
  98
  23
  12
  98
  23
  121
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  133
  98
  23
  12
  98
  23
  121
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  133
  98
  23
  12
  98
  23
  121
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  133
  98
  23
  12
  98
  23
  121
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  133
  98
  23
  12
  98
  23
  121
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  133
  98
  23
  12
  98
  23
  121
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  133
  98
  23
  12
  98
  23
  121
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  133
  98
  23
  12
  98
  23
  121
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  133
  98
  23
  12
  98
  23
  121
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  133
  98
  23
  12
  98
  23
  121
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  133
  98
  23
  12
  98
  23
  121
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  133
  98
  23
  12
  98
  23
  121
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env (())))\""
  133
  98
  23
  12
  98
  23
  121
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  17
  9
  8
  0
  9
  8
  17
  1
  1
  17/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  51
  33
  16
  2
  33
  16
  49
  1
  1
  60/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  113
  83
  19
  11
  83
  19
  102
  1
  1
  467/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  113
  83
  19
  11
  83
  19
  102
  1
  1
  467/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  113
  83
  19
  11
  83
  19
  102
  1
  1
  467/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  113
  83
  19
  11
  83
  19
  102
  1
  1
  467/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  113
  83
  19
  11
  83
  19
  102
  1
  1
  467/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  113
  83
  19
  11
  83
  19
  102
  1
  1
  467/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  113
  83
  19
  11
  83
  19
  102
  1
  1
  467/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env (())))\""
  114
  84
  19
  11
  84
  19
  103
  1
  1
  118/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  118
  86
  21
  11
  86
  21
  107
  1
  1
  240/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  120
  87
  22
  11
  87
  22
  109
  1
  1
  162/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  121
  88
  22
  11
  88
  22
  110
  1
  1
  491/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  121
  88
  22
  11
  88
  22
  110
  1
  1
  491/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  121
  88
  22
  11
  88
  22
  110
  1
  1
  491/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  122
  89
  22
  11
  89
  22
  111
  1
  1
  496/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  122
  89
  22
  11
  89
  22
  111
  1
  1
  496/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (())))\""
  122
  89
  22
  11
  89
  22
  111
  1
  1
  496/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (())))\""
  122
  89
  22
  11
  89
  22
  111
  1
  1
  496/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  122
  89
  22
  11
  89
  22
  111
  1
  1
  496/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  122
  89
  22
  11
  89
  22
  111
  1
  1
  496/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  122
  89
  22
  11
  89
  22
  111
  1
  1
  496/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  122
  89
  22
  11
  89
  22
  111
  1
  1
  496/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  122
  89
  22
  11
  89
  22
  111
  1
  1
  496/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  124
  90
  23
  11
  90
  23
  113
  1
  1
  251/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  124
  90
  23
  11
  90
  23
  113
  1
  1
  251/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  124
  90
  23
  11
  90
  23
  113
  1
  1
  251/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  124
  90
  23
  11
  90
  23
  113
  1
  1
  251/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  124
  90
  23
  11
  90
  23
  113
  1
  1
  251/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  124
  90
  23
  11
  90
  23
  113
  1
  1
  251/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  124
  90
  23
  11
  90
  23
  113
  1
  1
  251/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  126
  92
  23
  11
  92
  23
  115
  1
  1
  128/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  126
  92
  23
  11
  92
  23
  115
  1
  1
  128/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env (())))\""
  126
  92
  23
  11
  92
  23
  115
  1
  1
  128/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  126
  92
  23
  11
  92
  23
  115
  1
  1
  128/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  126
  92
  23
  11
  92
  23
  115
  1
  1
  128/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  126
  92
  23
  11
  92
  23
  115
  1
  1
  128/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  126
  92
  23
  11
  92
  23
  115
  1
  1
  128/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  126
  92
  23
  11
  92
  23
  115
  1
  1
  128/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  126
  92
  23
  11
  92
  23
  115
  1
  1
  128/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  126
  92
  23
  11
  92
  23
  115
  1
  1
  128/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  128
  93
  24
  11
  93
  24
  117
  1
  1
  518/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  128
  93
  24
  11
  93
  24
  117
  1
  1
  518/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  128
  93
  24
  11
  93
  24
  117
  1
  1
  518/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  128
  93
  24
  11
  93
  24
  117
  1
  1
  518/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  131
  95
  24
  12
  95
  24
  119
  1
  1
  106/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  131
  95
  24
  12
  95
  24
  119
  1
  1
  106/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  131
  95
  24
  12
  95
  24
  119
  1
  1
  106/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  131
  95
  24
  12
  95
  24
  119
  1
  1
  106/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  132
  96
  24
  12
  96
  24
  120
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  132
  96
  24
  12
  96
  24
  120
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  132
  96
  24
  12
  96
  24
  120
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  132
  96
  24
  12
  96
  24
  120
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (())))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (())))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  138
  101
  24
  13
  101
  24
  125
  1
  1
  560/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  138
  101
  24
  13
  101
  24
  125
  1
  1
  560/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  138
  101
  24
  13
  101
  24
  125
  1
  1
  560/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  138
  101
  24
  13
  101
  24
  125
  1
  1
  560/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env (() ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app play-turn empty-board (-> player-one <-) player-two) (env (())))\""
  50
  34
  15
  1
  34
  15
  49
  1
  1
  181/34
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  593
  406
  136
  51
  406
  136
  542
  1
  1
  1135/203
  ((117/2 117/2 1/2) (117/2 117/2 1/2) (117/2 117/2 1/2)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  593
  406
  136
  51
  406
  136
  542
  1
  1
  1135/203
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env (())))\""
  593
  406
  136
  51
  406
  136
  542
  1
  1
  1135/203
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env (())))\""
  596
  407
  138
  51
  407
  138
  545
  1
  1
  207/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  596
  407
  138
  51
  407
  138
  545
  1
  1
  207/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env (())))\""
  597
  408
  138
  51
  408
  138
  546
  1
  1
  1141/204
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env (() ())))\""
  597
  408
  138
  51
  408
  138
  546
  1
  1
  1141/204
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs)) (env (())))\""
  599
  410
  138
  51
  410
  138
  548
  1
  1
  1146/205
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  599
  410
  138
  51
  410
  138
  548
  1
  1
  1146/205
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  599
  410
  138
  51
  410
  138
  548
  1
  1
  1146/205
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark co mark (-> bo <-)) (env (())))\""
  599
  410
  138
  51
  410
  138
  548
  1
  1
  1146/205
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (() ())))\""
  600
  411
  138
  51
  411
  138
  549
  1
  1
  2297/411
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  600
  411
  138
  51
  411
  138
  549
  1
  1
  2297/411
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> move-coord-v <-) (move move-coord-x _) _) (env (())))\""
  600
  411
  138
  51
  411
  138
  549
  1
  1
  2297/411
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env (())))\""
  601
  412
  138
  51
  412
  138
  550
  1
  1
  1151/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  608
  415
  141
  52
  415
  141
  556
  1
  1
  2321/415
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env (())))\""
  609
  416
  141
  52
  416
  141
  557
  1
  1
  1163/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  609
  416
  141
  52
  416
  141
  557
  1
  1
  1163/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  609
  416
  141
  52
  416
  141
  557
  1
  1
  1163/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  609
  416
  141
  52
  416
  141
  557
  1
  1
  1163/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  609
  416
  141
  52
  416
  141
  557
  1
  1
  1163/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  609
  416
  141
  52
  416
  141
  557
  1
  1
  1163/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-)) (env (() ())))\""
  609
  416
  141
  52
  416
  141
  557
  1
  1
  1163/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  609
  416
  141
  52
  416
  141
  557
  1
  1
  1163/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  613
  419
  141
  53
  419
  141
  560
  1
  1
  2339/419
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env (() ())))\""
  613
  419
  141
  53
  419
  141
  560
  1
  1
  2339/419
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env (() ())))\""
  615
  421
  141
  53
  421
  141
  562
  1
  1
  2349/421
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  615
  421
  141
  53
  421
  141
  562
  1
  1
  2349/421
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  617
  423
  141
  53
  423
  141
  564
  1
  1
  2359/423
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  630
  432
  144
  54
  432
  144
  576
  1
  1
  1201/216
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  630
  432
  144
  54
  432
  144
  576
  1
  1
  1201/216
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  630
  432
  144
  54
  432
  144
  576
  1
  1
  1201/216
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo that-mark this-mark) (env (() ())))\""
  630
  432
  144
  54
  432
  144
  576
  1
  1
  1201/216
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  630
  432
  144
  54
  432
  144
  576
  1
  1
  1201/216
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  630
  432
  144
  54
  432
  144
  576
  1
  1
  1201/216
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  630
  432
  144
  54
  432
  144
  576
  1
  1
  1201/216
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (())))\""
  630
  432
  144
  54
  432
  144
  576
  1
  1
  1201/216
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  630
  432
  144
  54
  432
  144
  576
  1
  1
  1201/216
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env (())))\""
  630
  432
  144
  54
  432
  144
  576
  1
  1
  1201/216
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (())))\""
  631
  433
  144
  54
  433
  144
  577
  1
  1
  2407/433
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env (())))\""
  631
  433
  144
  54
  433
  144
  577
  1
  1
  2407/433
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env (() ())))\""
  631
  433
  144
  54
  433
  144
  577
  1
  1
  2407/433
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  631
  433
  144
  54
  433
  144
  577
  1
  1
  2407/433
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env (() ())))\""
  631
  433
  144
  54
  433
  144
  577
  1
  1
  2407/433
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env (())))\""
  631
  433
  144
  54
  433
  144
  577
  1
  1
  2407/433
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env (())))\""
  633
  435
  144
  54
  435
  144
  579
  1
  1
  2417/435
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  633
  435
  144
  54
  435
  144
  579
  1
  1
  2417/435
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env (())))\""
  633
  435
  144
  54
  435
  144
  579
  1
  1
  2417/435
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app horizon (-> (app lose) <-) 0) (env (() ())))\""
  635
  437
  144
  54
  437
  144
  581
  1
  1
  2427/437
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env (())))\""
  636
  438
  144
  54
  438
  144
  582
  1
  1
  1216/219
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  636
  438
  144
  54
  438
  144
  582
  1
  1
  1216/219
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match some-v-v ((some some-v-x) (-> some-v-x <-)) _) (env (())))\""
  636
  438
  144
  54
  438
  144
  582
  1
  1
  1216/219
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env (())))\""
  636
  438
  144
  54
  438
  144
  582
  1
  1
  1216/219
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env (())))\""
  643
  443
  146
  54
  443
  146
  589
  1
  1
  2455/443
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  643
  443
  146
  54
  443
  146
  589
  1
  1
  2455/443
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  643
  443
  146
  54
  443
  146
  589
  1
  1
  2455/443
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env (() ())))\""
  643
  443
  146
  54
  443
  146
  589
  1
  1
  2455/443
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  643
  443
  146
  54
  443
  146
  589
  1
  1
  2455/443
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env (())))\""
  643
  443
  146
  54
  443
  146
  589
  1
  1
  2455/443
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) mark bo) (env (())))\""
  643
  443
  146
  54
  443
  146
  589
  1
  1
  2455/443
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env (())))\""
  643
  443
  146
  54
  443
  146
  589
  1
  1
  2455/443
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env (() ())))\""
  644
  444
  146
  54
  444
  146
  590
  1
  1
  1231/222
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  644
  444
  146
  54
  444
  146
  590
  1
  1
  1231/222
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (())))\""
  645
  445
  146
  54
  445
  146
  591
  1
  1
  2467/445
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  645
  445
  146
  54
  445
  146
  591
  1
  1
  2467/445
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  645
  445
  146
  54
  445
  146
  591
  1
  1
  2467/445
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env (())))\""
  647
  447
  146
  54
  447
  146
  593
  1
  1
  2477/447
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env (())))\""
  647
  447
  146
  54
  447
  146
  593
  1
  1
  2477/447
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env (())))\""
  647
  447
  146
  54
  447
  146
  593
  1
  1
  2477/447
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  647
  447
  146
  54
  447
  146
  593
  1
  1
  2477/447
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  651
  450
  146
  55
  450
  146
  596
  1
  1
  1246/225
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  651
  450
  146
  55
  450
  146
  596
  1
  1
  1246/225
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  651
  450
  146
  55
  450
  146
  596
  1
  1
  1246/225
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval (match (app full? bo) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  655
  454
  146
  55
  454
  146
  600
  1
  1
  2511/454
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (c) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  655
  454
  146
  55
  454
  146
  600
  1
  1
  2511/454
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env (() ())))\""
  655
  454
  146
  55
  454
  146
  600
  1
  1
  2511/454
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  655
  454
  146
  55
  454
  146
  600
  1
  1
  2511/454
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env (())))\""
  655
  454
  146
  55
  454
  146
  600
  1
  1
  2511/454
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env (())))\""
  656
  455
  146
  55
  455
  146
  601
  1
  1
  2516/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  656
  455
  146
  55
  455
  146
  601
  1
  1
  2516/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  656
  455
  146
  55
  455
  146
  601
  1
  1
  2516/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  656
  455
  146
  55
  455
  146
  601
  1
  1
  2516/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env (())))\""
  657
  456
  146
  55
  456
  146
  602
  1
  1
  2521/456
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  657
  456
  146
  55
  456
  146
  602
  1
  1
  2521/456
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (())))\""
  658
  457
  146
  55
  457
  146
  603
  1
  1
  2525/457
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  658
  457
  146
  55
  457
  146
  603
  1
  1
  2525/457
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  658
  457
  146
  55
  457
  146
  603
  1
  1
  2525/457
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env (() ())))\""
  658
  457
  146
  55
  457
  146
  603
  1
  1
  2525/457
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env (() ())))\""
  658
  457
  146
  55
  457
  146
  603
  1
  1
  2525/457
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env (())))\""
  658
  457
  146
  55
  457
  146
  603
  1
  1
  2525/457
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  658
  457
  146
  55
  457
  146
  603
  1
  1
  2525/457
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env (() ())))\""
  658
  457
  146
  55
  457
  146
  603
  1
  1
  2525/457
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env (() ())))\""
  658
  457
  146
  55
  457
  146
  603
  1
  1
  2525/457
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  658
  457
  146
  55
  457
  146
  603
  1
  1
  2525/457
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  658
  457
  146
  55
  457
  146
  603
  1
  1
  2525/457
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  658
  457
  146
  55
  457
  146
  603
  1
  1
  2525/457
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env (())))\""
  659
  458
  146
  55
  458
  146
  604
  1
  1
  1265/229
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  659
  458
  146
  55
  458
  146
  604
  1
  1
  1265/229
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (move-coord-v) (-> (match move-coord-v ...) <-)) (env (())))\""
  659
  458
  146
  55
  458
  146
  604
  1
  1
  1265/229
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env (())))\""
  661
  460
  146
  55
  460
  146
  606
  1
  1
  127/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (move-horizon-v) (-> (match move-horizon-v ...) <-)) (env (())))\""
  661
  460
  146
  55
  460
  146
  606
  1
  1
  127/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env (() ())))\""
  664
  462
  147
  55
  462
  147
  609
  1
  1
  116/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  664
  462
  147
  55
  462
  147
  609
  1
  1
  116/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval (λ () (-> (let (co) ...) <-)) (env (() ())))\""
  664
  462
  147
  55
  462
  147
  609
  1
  1
  116/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app horizon (-> (app win) <-) 0) (env (() ())))\""
  665
  463
  147
  55
  463
  147
  610
  1
  1
  2557/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env (() ())))\""
  665
  463
  147
  55
  463
  147
  610
  1
  1
  2557/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  665
  463
  147
  55
  463
  147
  610
  1
  1
  2557/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env (() ())))\""
  665
  463
  147
  55
  463
  147
  610
  1
  1
  2557/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) that-mark this-mark) (env (() ())))\""
  665
  463
  147
  55
  463
  147
  610
  1
  1
  2557/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env (())))\""
  666
  464
  147
  55
  464
  147
  611
  1
  1
  2563/464
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  676
  472
  147
  57
  472
  147
  619
  1
  1
  2595/472
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  676
  472
  147
  57
  472
  147
  619
  1
  1
  2595/472
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env (())))\""
  676
  472
  147
  57
  472
  147
  619
  1
  1
  2595/472
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  676
  472
  147
  57
  472
  147
  619
  1
  1
  2595/472
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env (())))\""
  676
  472
  147
  57
  472
  147
  619
  1
  1
  2595/472
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  676
  472
  147
  57
  472
  147
  619
  1
  1
  2595/472
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app some-v (-> (app maximin bo that-mark this-mark) <-)) (env (() ())))\""
  676
  472
  147
  57
  472
  147
  619
  1
  1
  2595/472
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  678
  474
  147
  57
  474
  147
  621
  1
  1
  2605/474
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  678
  474
  147
  57
  474
  147
  621
  1
  1
  2605/474
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env (())))\""
  685
  480
  147
  58
  480
  147
  627
  1
  1
  263/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env (())))\""
  686
  481
  147
  58
  481
  147
  628
  1
  1
  2635/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (app b co) ((blank) (-> (app #f) <-)) (marked m*)) (env (())))\""
  686
  481
  147
  58
  481
  147
  628
  1
  1
  2635/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  686
  481
  147
  58
  481
  147
  628
  1
  1
  2635/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> that-mark <-) this-mark) (env (() ())))\""
  686
  481
  147
  58
  481
  147
  628
  1
  1
  2635/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (() ())))\""
  686
  481
  147
  58
  481
  147
  628
  1
  1
  2635/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env (())))\""
  686
  481
  147
  58
  481
  147
  628
  1
  1
  2635/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env (())))\""
  686
  481
  147
  58
  481
  147
  628
  1
  1
  2635/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  686
  481
  147
  58
  481
  147
  628
  1
  1
  2635/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env (())))\""
  687
  482
  147
  58
  482
  147
  629
  1
  1
  1320/241
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  687
  482
  147
  58
  482
  147
  629
  1
  1
  1320/241
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  687
  482
  147
  58
  482
  147
  629
  1
  1
  1320/241
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  689
  484
  147
  58
  484
  147
  631
  1
  1
  1325/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (())))\""
  689
  484
  147
  58
  484
  147
  631
  1
  1
  1325/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env (())))\""
  689
  484
  147
  58
  484
  147
  631
  1
  1
  1325/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  689
  484
  147
  58
  484
  147
  631
  1
  1
  1325/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  689
  484
  147
  58
  484
  147
  631
  1
  1
  1325/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (let (bo) (-> (match (app wins? bo mark) ...) <-)) (env (())))\""
  689
  484
  147
  58
  484
  147
  631
  1
  1
  1325/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  689
  484
  147
  58
  484
  147
  631
  1
  1
  1325/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  689
  484
  147
  58
  484
  147
  631
  1
  1
  1325/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env (() ())))\""
  689
  484
  147
  58
  484
  147
  631
  1
  1
  1325/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  689
  484
  147
  58
  484
  147
  631
  1
  1
  1325/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  689
  484
  147
  58
  484
  147
  631
  1
  1
  1325/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env (())))\""
  689
  484
  147
  58
  484
  147
  631
  1
  1
  1325/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env (() ())))\""
  690
  485
  147
  58
  485
  147
  632
  1
  1
  2657/485
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env (())))\""
  690
  485
  147
  58
  485
  147
  632
  1
  1
  2657/485
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env (())))\""
  690
  485
  147
  58
  485
  147
  632
  1
  1
  2657/485
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-)) (env (() ())))\""
  690
  485
  147
  58
  485
  147
  632
  1
  1
  2657/485
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose)) (env (())))\""
  692
  487
  147
  58
  487
  147
  634
  1
  1
  2667/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  692
  487
  147
  58
  487
  147
  634
  1
  1
  2667/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  692
  487
  147
  58
  487
  147
  634
  1
  1
  2667/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app play-turn (-> empty-board <-) player-one player-two) (env (())))\""
  692
  487
  147
  58
  487
  147
  634
  1
  1
  2667/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  693
  488
  147
  58
  488
  147
  635
  1
  1
  2673/488
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env (() ())))\""
  693
  488
  147
  58
  488
  147
  635
  1
  1
  2673/488
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env (())))\""
  693
  488
  147
  58
  488
  147
  635
  1
  1
  2673/488
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  693
  488
  147
  58
  488
  147
  635
  1
  1
  2673/488
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env (())))\""
  693
  488
  147
  58
  488
  147
  635
  1
  1
  2673/488
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  693
  488
  147
  58
  488
  147
  635
  1
  1
  2673/488
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env (())))\""
  693
  488
  147
  58
  488
  147
  635
  1
  1
  2673/488
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env (() ())))\""
  693
  488
  147
  58
  488
  147
  635
  1
  1
  2673/488
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env (())))\""
  694
  489
  147
  58
  489
  147
  636
  1
  1
  2677/489
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  694
  489
  147
  58
  489
  147
  636
  1
  1
  2677/489
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  letrec
  "\"'(eval (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...) (env (())))\""
  694
  489
  147
  58
  489
  147
  636
  1
  1
  2677/489
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  694
  489
  147
  58
  489
  147
  636
  1
  1
  2677/489
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env (())))\""
  695
  490
  147
  58
  490
  147
  637
  1
  1
  383/70
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  697
  491
  148
  58
  491
  148
  639
  1
  1
  2688/491
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) (app make-ai-action (app X))) (env (())))\""
  697
  491
  148
  58
  491
  148
  639
  1
  1
  2688/491
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (app X) (-> (app make-ai-action (app X)) <-)) (env (())))\""
  697
  491
  148
  58
  491
  148
  639
  1
  1
  2688/491
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  697
  491
  148
  58
  491
  148
  639
  1
  1
  2688/491
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  697
  491
  148
  58
  491
  148
  639
  1
  1
  2688/491
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env (())))\""
  697
  491
  148
  58
  491
  148
  639
  1
  1
  2688/491
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  697
  491
  148
  58
  491
  148
  639
  1
  1
  2688/491
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app play-turn (-> bo <-) that-play this-play) (env (())))\""
  697
  491
  148
  58
  491
  148
  639
  1
  1
  2688/491
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  697
  491
  148
  58
  491
  148
  639
  1
  1
  2688/491
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env (() ())))\""
  697
  491
  148
  58
  491
  148
  639
  1
  1
  2688/491
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  697
  491
  148
  58
  491
  148
  639
  1
  1
  2688/491
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord rc rc) m) (env (() ())))\""
  697
  491
  148
  58
  491
  148
  639
  1
  1
  2688/491
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs)) (env (())))\""
  699
  493
  148
  58
  493
  148
  641
  1
  1
  2698/493
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  699
  493
  148
  58
  493
  148
  641
  1
  1
  2698/493
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env (())))\""
  700
  494
  148
  58
  494
  148
  642
  1
  1
  1351/247
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env (())))\""
  700
  494
  148
  58
  494
  148
  642
  1
  1
  1351/247
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  700
  494
  148
  58
  494
  148
  642
  1
  1
  1351/247
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  702
  495
  149
  58
  495
  149
  644
  1
  1
  301/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-)) (env (() ())))\""
  702
  495
  149
  58
  495
  149
  644
  1
  1
  301/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  702
  495
  149
  58
  495
  149
  644
  1
  1
  301/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env (())))\""
  702
  495
  149
  58
  495
  149
  644
  1
  1
  301/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env (())))\""
  702
  495
  149
  58
  495
  149
  644
  1
  1
  301/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (())))\""
  702
  495
  149
  58
  495
  149
  644
  1
  1
  301/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env (())))\""
  702
  495
  149
  58
  495
  149
  644
  1
  1
  301/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  704
  497
  149
  58
  497
  149
  646
  1
  1
  2717/497
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  704
  497
  149
  58
  497
  149
  646
  1
  1
  2717/497
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env (())))\""
  704
  497
  149
  58
  497
  149
  646
  1
  1
  2717/497
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app marked? (-> (app b (app coord r c)) <-)) (env (() () ())))\""
  704
  497
  149
  58
  497
  149
  646
  1
  1
  2717/497
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env (())))\""
  704
  497
  149
  58
  497
  149
  646
  1
  1
  2717/497
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  704
  497
  149
  58
  497
  149
  646
  1
  1
  2717/497
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  705
  498
  149
  58
  498
  149
  647
  1
  1
  1361/249
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-)) (env (())))\""
  706
  499
  149
  58
  499
  149
  648
  1
  1
  2726/499
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  706
  499
  149
  58
  499
  149
  648
  1
  1
  2726/499
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  706
  499
  149
  58
  499
  149
  648
  1
  1
  2726/499
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env (())))\""
  706
  499
  149
  58
  499
  149
  648
  1
  1
  2726/499
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (() ())))\""
  706
  499
  149
  58
  499
  149
  648
  1
  1
  2726/499
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  707
  500
  149
  58
  500
  149
  649
  1
  1
  273/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  708
  501
  149
  58
  501
  149
  650
  1
  1
  2735/501
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  708
  501
  149
  58
  501
  149
  650
  1
  1
  2735/501
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env (())))\""
  708
  501
  149
  58
  501
  149
  650
  1
  1
  2735/501
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app f (-> (app coord r c) <-) x) (env (() () ())))\""
  708
  501
  149
  58
  501
  149
  650
  1
  1
  2735/501
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  708
  501
  149
  58
  501
  149
  650
  1
  1
  2735/501
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env (())))\""
  708
  501
  149
  58
  501
  149
  650
  1
  1
  2735/501
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env (() ())))\""
  708
  501
  149
  58
  501
  149
  650
  1
  1
  2735/501
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env (() ())))\""
  710
  503
  149
  58
  503
  149
  652
  1
  1
  2745/503
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env (() ())))\""
  710
  503
  149
  58
  503
  149
  652
  1
  1
  2745/503
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env (())))\""
  710
  503
  149
  58
  503
  149
  652
  1
  1
  2745/503
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> this-play <-) (player mark action)) (env (())))\""
  710
  503
  149
  58
  503
  149
  652
  1
  1
  2745/503
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord rc rc) m) (env (() ())))\""
  710
  503
  149
  58
  503
  149
  652
  1
  1
  2745/503
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app maximin bo that-mark (-> this-mark <-)) (env (() ())))\""
  710
  503
  149
  58
  503
  149
  652
  1
  1
  2745/503
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env (())))\""
  710
  503
  149
  58
  503
  149
  652
  1
  1
  2745/503
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  710
  503
  149
  58
  503
  149
  652
  1
  1
  2745/503
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app minimax bo (-> that-mark <-) this-mark) (env (() ())))\""
  710
  503
  149
  58
  503
  149
  652
  1
  1
  2745/503
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  714
  506
  149
  59
  506
  149
  655
  1
  1
  2757/506
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  714
  506
  149
  59
  506
  149
  655
  1
  1
  2757/506
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  714
  506
  149
  59
  506
  149
  655
  1
  1
  2757/506
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  714
  506
  149
  59
  506
  149
  655
  1
  1
  2757/506
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env (() ())))\""
  714
  506
  149
  59
  506
  149
  655
  1
  1
  2757/506
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app equal? co₀ co) <-) (#f) _) (env (() ())))\""
  714
  506
  149
  59
  506
  149
  655
  1
  1
  2757/506
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  714
  506
  149
  59
  506
  149
  655
  1
  1
  2757/506
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  714
  506
  149
  59
  506
  149
  655
  1
  1
  2757/506
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env (())))\""
  714
  506
  149
  59
  506
  149
  655
  1
  1
  2757/506
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (c x) (-> (app f (app coord r c) x) <-)) (env (() () ())))\""
  714
  506
  149
  59
  506
  149
  655
  1
  1
  2757/506
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env (() ())))\""
  716
  508
  149
  59
  508
  149
  657
  1
  1
  2767/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env (())))\""
  716
  508
  149
  59
  508
  149
  657
  1
  1
  2767/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  716
  508
  149
  59
  508
  149
  657
  1
  1
  2767/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  716
  508
  149
  59
  508
  149
  657
  1
  1
  2767/508
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env (())))\""
  717
  509
  149
  59
  509
  149
  658
  1
  1
  2774/509
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env (())))\""
  718
  510
  149
  59
  510
  149
  659
  1
  1
  2779/510
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  718
  510
  149
  59
  510
  149
  659
  1
  1
  2779/510
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env (())))\""
  718
  510
  149
  59
  510
  149
  659
  1
  1
  2779/510
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  718
  510
  149
  59
  510
  149
  659
  1
  1
  2779/510
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env (())))\""
  722
  514
  149
  59
  514
  149
  663
  1
  1
  2801/514
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  722
  514
  149
  59
  514
  149
  663
  1
  1
  2801/514
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (bo) (-> (app error 'human-action \"not implemented\") <-)) (env (())))\""
  722
  514
  149
  59
  514
  149
  663
  1
  1
  2801/514
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env (())))\""
  722
  514
  149
  59
  514
  149
  663
  1
  1
  2801/514
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  722
  514
  149
  59
  514
  149
  663
  1
  1
  2801/514
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app minimax bo that-mark (-> this-mark <-)) (env (() ())))\""
  722
  514
  149
  59
  514
  149
  663
  1
  1
  2801/514
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app play-turn bo that-play (-> this-play <-)) (env (())))\""
  722
  514
  149
  59
  514
  149
  663
  1
  1
  2801/514
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  722
  514
  149
  59
  514
  149
  663
  1
  1
  2801/514
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env (())))\""
  722
  514
  149
  59
  514
  149
  663
  1
  1
  2801/514
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env (())))\""
  722
  514
  149
  59
  514
  149
  663
  1
  1
  2801/514
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env (())))\""
  723
  515
  149
  59
  515
  149
  664
  1
  1
  561/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env (())))\""
  723
  515
  149
  59
  515
  149
  664
  1
  1
  561/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env (() ())))\""
  723
  515
  149
  59
  515
  149
  664
  1
  1
  561/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  723
  515
  149
  59
  515
  149
  664
  1
  1
  561/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env (())))\""
  723
  515
  149
  59
  515
  149
  664
  1
  1
  561/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  723
  515
  149
  59
  515
  149
  664
  1
  1
  561/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  723
  515
  149
  59
  515
  149
  664
  1
  1
  561/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  723
  515
  149
  59
  515
  149
  664
  1
  1
  561/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (() ())))\""
  723
  515
  149
  59
  515
  149
  664
  1
  1
  561/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app lose) 0) (env (() ())))\""
  723
  515
  149
  59
  515
  149
  664
  1
  1
  561/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env (() ())))\""
  723
  515
  149
  59
  515
  149
  664
  1
  1
  561/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  723
  515
  149
  59
  515
  149
  664
  1
  1
  561/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app some-v (-> (app minimax bo that-mark this-mark) <-)) (env (() ())))\""
  723
  515
  149
  59
  515
  149
  664
  1
  1
  561/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env (())))\""
  723
  515
  149
  59
  515
  149
  664
  1
  1
  561/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  723
  515
  149
  59
  515
  149
  664
  1
  1
  561/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env (())))\""
  723
  515
  149
  59
  515
  149
  664
  1
  1
  561/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (let (_) (-> (match this-play ...) <-)) (env (())))\""
  723
  515
  149
  59
  515
  149
  664
  1
  1
  561/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  723
  515
  149
  59
  515
  149
  664
  1
  1
  561/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env (())))\""
  724
  516
  149
  59
  516
  149
  665
  1
  1
  1405/258
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  724
  516
  149
  59
  516
  149
  665
  1
  1
  1405/258
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  724
  516
  149
  59
  516
  149
  665
  1
  1
  1405/258
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  725
  517
  149
  59
  517
  149
  666
  1
  1
  2817/517
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env (())))\""
  726
  518
  149
  59
  518
  149
  667
  1
  1
  1411/259
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  726
  518
  149
  59
  518
  149
  667
  1
  1
  1411/259
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env (())))\""
  726
  518
  149
  59
  518
  149
  667
  1
  1
  1411/259
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  726
  518
  149
  59
  518
  149
  667
  1
  1
  1411/259
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env (())))\""
  726
  518
  149
  59
  518
  149
  667
  1
  1
  1411/259
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (c) (-> (app marked? (app b (app coord r c))) <-)) (env (() () ())))\""
  726
  518
  149
  59
  518
  149
  667
  1
  1
  1411/259
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env (() ())))\""
  726
  518
  149
  59
  518
  149
  667
  1
  1
  1411/259
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  726
  518
  149
  59
  518
  149
  667
  1
  1
  1411/259
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  726
  518
  149
  59
  518
  149
  667
  1
  1
  1411/259
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  726
  518
  149
  59
  518
  149
  667
  1
  1
  1411/259
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  726
  518
  149
  59
  518
  149
  667
  1
  1
  1411/259
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  726
  518
  149
  59
  518
  149
  667
  1
  1
  1411/259
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  727
  519
  149
  59
  519
  149
  668
  1
  1
  2827/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  727
  519
  149
  59
  519
  149
  668
  1
  1
  2827/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  727
  519
  149
  59
  519
  149
  668
  1
  1
  2827/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  727
  519
  149
  59
  519
  149
  668
  1
  1
  2827/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  727
  519
  149
  59
  519
  149
  668
  1
  1
  2827/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  727
  519
  149
  59
  519
  149
  668
  1
  1
  2827/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  727
  519
  149
  59
  519
  149
  668
  1
  1
  2827/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (())))\""
  727
  519
  149
  59
  519
  149
  668
  1
  1
  2827/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env (())))\""
  727
  519
  149
  59
  519
  149
  668
  1
  1
  2827/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  727
  519
  149
  59
  519
  149
  668
  1
  1
  2827/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env (())))\""
  728
  520
  149
  59
  520
  149
  669
  1
  1
  354/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  728
  520
  149
  59
  520
  149
  669
  1
  1
  354/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  728
  520
  149
  59
  520
  149
  669
  1
  1
  354/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env (() ())))\""
  728
  520
  149
  59
  520
  149
  669
  1
  1
  354/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  728
  520
  149
  59
  520
  149
  669
  1
  1
  354/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env (())))\""
  728
  520
  149
  59
  520
  149
  669
  1
  1
  354/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env (() () ())))\""
  728
  520
  149
  59
  520
  149
  669
  1
  1
  354/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  728
  520
  149
  59
  520
  149
  669
  1
  1
  354/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  728
  520
  149
  59
  520
  149
  669
  1
  1
  354/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  728
  520
  149
  59
  520
  149
  669
  1
  1
  354/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env (())))\""
  728
  520
  149
  59
  520
  149
  669
  1
  1
  354/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env (())))\""
  729
  521
  149
  59
  521
  149
  670
  1
  1
  2836/521
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app play-turn empty-board player-one (-> player-two <-)) (env (())))\""
  729
  521
  149
  59
  521
  149
  670
  1
  1
  2836/521
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (letrec (loop) (-> (app loop) <-)) (env (())))\""
  729
  521
  149
  59
  521
  149
  670
  1
  1
  2836/521
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) empty-board player-one player-two) (env (())))\""
  729
  521
  149
  59
  521
  149
  670
  1
  1
  2836/521
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁)) (env (())))\""
  730
  522
  149
  59
  522
  149
  671
  1
  1
  947/174
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  730
  522
  149
  59
  522
  149
  671
  1
  1
  947/174
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  730
  522
  149
  59
  522
  149
  671
  1
  1
  947/174
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env (())))\""
  730
  522
  149
  59
  522
  149
  671
  1
  1
  947/174
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-horizon\") (env (())))\""
  730
  522
  149
  59
  522
  149
  671
  1
  1
  947/174
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env (() ())))\""
  730
  522
  149
  59
  522
  149
  671
  1
  1
  947/174
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (-> (app X) <-) (app make-ai-action (app X))) (env (())))\""
  730
  522
  149
  59
  522
  149
  671
  1
  1
  947/174
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  730
  522
  149
  59
  522
  149
  671
  1
  1
  947/174
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env (() ())))\""
  730
  522
  149
  59
  522
  149
  671
  1
  1
  947/174
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  730
  522
  149
  59
  522
  149
  671
  1
  1
  947/174
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env (())))\""
  731
  523
  149
  59
  523
  149
  672
  1
  1
  2845/523
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> mark <-) bo) (env (())))\""
  731
  523
  149
  59
  523
  149
  672
  1
  1
  2845/523
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  731
  523
  149
  59
  523
  149
  672
  1
  1
  2845/523
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env (())))\""
  732
  524
  149
  59
  524
  149
  673
  1
  1
  2849/524
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  732
  524
  149
  59
  524
  149
  673
  1
  1
  2849/524
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env (() ())))\""
  732
  524
  149
  59
  524
  149
  673
  1
  1
  2849/524
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env (())))\""
  732
  524
  149
  59
  524
  149
  673
  1
  1
  2849/524
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma))) (env (() ())))\""
  732
  524
  149
  59
  524
  149
  673
  1
  1
  2849/524
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env (())))\""
  733
  525
  149
  59
  525
  149
  674
  1
  1
  951/175
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env (())))\""
  733
  525
  149
  59
  525
  149
  674
  1
  1
  951/175
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env (())))\""
  734
  526
  149
  59
  526
  149
  675
  1
  1
  2859/526
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app play-turn bo (-> that-play <-) this-play) (env (())))\""
  734
  526
  149
  59
  526
  149
  675
  1
  1
  2859/526
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord rc rc) (-> m <-)) (env (() ())))\""
  734
  526
  149
  59
  526
  149
  675
  1
  1
  2859/526
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  734
  526
  149
  59
  526
  149
  675
  1
  1
  2859/526
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env (())))\""
  734
  526
  149
  59
  526
  149
  675
  1
  1
  2859/526
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env (())))\""
  734
  526
  149
  59
  526
  149
  675
  1
  1
  2859/526
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  734
  526
  149
  59
  526
  149
  675
  1
  1
  2859/526
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  734
  526
  149
  59
  526
  149
  675
  1
  1
  2859/526
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval (λ (bo this-play that-play) (-> (let (_) ...) <-)) (env (())))\""
  734
  526
  149
  59
  526
  149
  675
  1
  1
  2859/526
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  734
  526
  149
  59
  526
  149
  675
  1
  1
  2859/526
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env (())))\""
  734
  526
  149
  59
  526
  149
  675
  1
  1
  2859/526
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  736
  527
  150
  59
  527
  150
  677
  1
  1
  2866/527
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  738
  528
  151
  59
  528
  151
  679
  1
  1
  2873/528
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  738
  528
  151
  59
  528
  151
  679
  1
  1
  2873/528
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  738
  528
  151
  59
  528
  151
  679
  1
  1
  2873/528
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co mark bo) (env (())))\""
  738
  528
  151
  59
  528
  151
  679
  1
  1
  2873/528
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env (())))\""
  739
  529
  151
  59
  529
  151
  680
  1
  1
  2878/529
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  739
  529
  151
  59
  529
  151
  680
  1
  1
  2878/529
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env (())))\""
  739
  529
  151
  59
  529
  151
  680
  1
  1
  2878/529
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  739
  529
  151
  59
  529
  151
  680
  1
  1
  2878/529
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env (())))\""
  740
  530
  151
  59
  530
  151
  681
  1
  1
  1441/265
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  740
  530
  151
  59
  530
  151
  681
  1
  1
  1441/265
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> marked? <-) (app b (app coord r c))) (env (() () ())))\""
  740
  530
  151
  59
  530
  151
  681
  1
  1
  1441/265
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (let (_) (-> (app display \"Cat's game.\\n\") <-)) (env (())))\""
  740
  530
  151
  59
  530
  151
  681
  1
  1
  1441/265
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env (())))\""
  740
  530
  151
  59
  530
  151
  681
  1
  1
  1441/265
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env (())))\""
  740
  530
  151
  59
  530
  151
  681
  1
  1
  1441/265
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (() ())))\""
  740
  530
  151
  59
  530
  151
  681
  1
  1
  1441/265
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  740
  530
  151
  59
  530
  151
  681
  1
  1
  1441/265
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env (())))\""
  741
  531
  151
  59
  531
  151
  682
  1
  1
  962/177
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  741
  531
  151
  59
  531
  151
  682
  1
  1
  962/177
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  741
  531
  151
  59
  531
  151
  682
  1
  1
  962/177
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  742
  532
  151
  59
  532
  151
  683
  1
  1
  413/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  742
  532
  151
  59
  532
  151
  683
  1
  1
  413/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  742
  532
  151
  59
  532
  151
  683
  1
  1
  413/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> display <-) \"Cat's game.\\n\") (env (())))\""
  742
  532
  151
  59
  532
  151
  683
  1
  1
  413/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  742
  532
  151
  59
  532
  151
  683
  1
  1
  413/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  742
  532
  151
  59
  532
  151
  683
  1
  1
  413/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  742
  532
  151
  59
  532
  151
  683
  1
  1
  413/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  742
  532
  151
  59
  532
  151
  683
  1
  1
  413/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  742
  532
  151
  59
  532
  151
  683
  1
  1
  413/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env (())))\""
  743
  533
  151
  59
  533
  151
  684
  1
  1
  2895/533
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-coord\") (env (())))\""
  743
  533
  151
  59
  533
  151
  684
  1
  1
  2895/533
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env (())))\""
  744
  534
  151
  59
  534
  151
  685
  1
  1
  2899/534
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env (())))\""
  744
  534
  151
  59
  534
  151
  685
  1
  1
  2899/534
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  744
  534
  151
  59
  534
  151
  685
  1
  1
  2899/534
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  744
  534
  151
  59
  534
  151
  685
  1
  1
  2899/534
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  744
  534
  151
  59
  534
  151
  685
  1
  1
  2899/534
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  744
  534
  151
  59
  534
  151
  685
  1
  1
  2899/534
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env (())))\""
  744
  534
  151
  59
  534
  151
  685
  1
  1
  2899/534
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  744
  534
  151
  59
  534
  151
  685
  1
  1
  2899/534
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (())))\""
  744
  534
  151
  59
  534
  151
  685
  1
  1
  2899/534
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  744
  534
  151
  59
  534
  151
  685
  1
  1
  2899/534
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  744
  534
  151
  59
  534
  151
  685
  1
  1
  2899/534
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo that-mark this-mark)) (env (() ())))\""
  744
  534
  151
  59
  534
  151
  685
  1
  1
  2899/534
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app coord r c) x) (env (() () ())))\""
  744
  534
  151
  59
  534
  151
  685
  1
  1
  2899/534
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env (() ())))\""
  744
  534
  151
  59
  534
  151
  685
  1
  1
  2899/534
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  745
  535
  151
  59
  535
  151
  686
  1
  1
  2904/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  745
  535
  151
  59
  535
  151
  686
  1
  1
  2904/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  745
  535
  151
  59
  535
  151
  686
  1
  1
  2904/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env (() ())))\""
  745
  535
  151
  59
  535
  151
  686
  1
  1
  2904/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  745
  535
  151
  59
  535
  151
  686
  1
  1
  2904/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord rc rc) <-) m) (env (() ())))\""
  745
  535
  151
  59
  535
  151
  686
  1
  1
  2904/535
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env (() ())))\""
  747
  536
  151
  60
  536
  151
  687
  1
  1
  2911/536
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env (() ())))\""
  748
  537
  151
  60
  537
  151
  688
  1
  1
  972/179
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app wins? bo mark) <-) (#f) _) (env (())))\""
  748
  537
  151
  60
  537
  151
  688
  1
  1
  972/179
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  748
  537
  151
  60
  537
  151
  688
  1
  1
  972/179
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app minimax (-> bo <-) that-mark this-mark) (env (() ())))\""
  748
  537
  151
  60
  537
  151
  688
  1
  1
  972/179
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (let (... () (co (-> (app action bo) <-)) () ...) ...) (env (() ())))\""
  748
  537
  151
  60
  537
  151
  688
  1
  1
  972/179
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  750
  539
  151
  60
  539
  151
  690
  1
  1
  38/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-))) (env (())))\""
  751
  540
  151
  60
  540
  151
  691
  1
  1
  293/54
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env (())))\""
  751
  540
  151
  60
  540
  151
  691
  1
  1
  293/54
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app win) 0) (env (() ())))\""
  751
  540
  151
  60
  540
  151
  691
  1
  1
  293/54
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app minimax bo that-mark this-mark)) (env (() ())))\""
  751
  540
  151
  60
  540
  151
  691
  1
  1
  293/54
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  752
  541
  151
  60
  541
  151
  692
  1
  1
  2934/541
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  752
  541
  151
  60
  541
  151
  692
  1
  1
  2934/541
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  752
  541
  151
  60
  541
  151
  692
  1
  1
  2934/541
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env (())))\""
  752
  541
  151
  60
  541
  151
  692
  1
  1
  2934/541
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  752
  541
  151
  60
  541
  151
  692
  1
  1
  2934/541
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env (())))\""
  753
  542
  151
  60
  542
  151
  693
  1
  1
  1469/271
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  753
  542
  151
  60
  542
  151
  693
  1
  1
  1469/271
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env (() ())))\""
  753
  542
  151
  60
  542
  151
  693
  1
  1
  1469/271
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env (())))\""
  753
  542
  151
  60
  542
  151
  693
  1
  1
  1469/271
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  754
  543
  151
  60
  543
  151
  694
  1
  1
  2945/543
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env (())))\""
  755
  544
  151
  60
  544
  151
  695
  1
  1
  2949/544
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  755
  544
  151
  60
  544
  151
  695
  1
  1
  2949/544
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env (())))\""
  757
  546
  151
  60
  546
  151
  697
  1
  1
  2957/546
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  757
  546
  151
  60
  546
  151
  697
  1
  1
  2957/546
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  757
  546
  151
  60
  546
  151
  697
  1
  1
  2957/546
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  757
  546
  151
  60
  546
  151
  697
  1
  1
  2957/546
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  757
  546
  151
  60
  546
  151
  697
  1
  1
  2957/546
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env (())))\""
  758
  547
  151
  60
  547
  151
  698
  1
  1
  2962/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env (())))\""
  758
  547
  151
  60
  547
  151
  698
  1
  1
  2962/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env (())))\""
  758
  547
  151
  60
  547
  151
  698
  1
  1
  2962/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  760
  549
  151
  60
  549
  151
  700
  1
  1
  2972/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env (())))\""
  760
  549
  151
  60
  549
  151
  700
  1
  1
  2972/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  760
  549
  151
  60
  549
  151
  700
  1
  1
  2972/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env (())))\""
  760
  549
  151
  60
  549
  151
  700
  1
  1
  2972/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  760
  549
  151
  60
  549
  151
  700
  1
  1
  2972/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  760
  549
  151
  60
  549
  151
  700
  1
  1
  2972/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  760
  549
  151
  60
  549
  151
  700
  1
  1
  2972/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env (())))\""
  760
  549
  151
  60
  549
  151
  700
  1
  1
  2972/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  760
  549
  151
  60
  549
  151
  700
  1
  1
  2972/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env (())))\""
  761
  550
  151
  60
  550
  151
  701
  1
  1
  2977/550
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  761
  550
  151
  60
  550
  151
  701
  1
  1
  2977/550
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  761
  550
  151
  60
  550
  151
  701
  1
  1
  2977/550
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env (())))\""
  762
  551
  151
  60
  551
  151
  702
  1
  1
  2981/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env (())))\""
  762
  551
  151
  60
  551
  151
  702
  1
  1
  2981/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (co) (-> (match (app equal? co₀ co) ...) <-)) (env (() ())))\""
  762
  551
  151
  60
  551
  151
  702
  1
  1
  2981/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  762
  551
  151
  60
  551
  151
  702
  1
  1
  2981/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  762
  551
  151
  60
  551
  151
  702
  1
  1
  2981/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  762
  551
  151
  60
  551
  151
  702
  1
  1
  2981/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  762
  551
  151
  60
  551
  151
  702
  1
  1
  2981/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  762
  551
  151
  60
  551
  151
  702
  1
  1
  2981/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  762
  551
  151
  60
  551
  151
  702
  1
  1
  2981/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  762
  551
  151
  60
  551
  151
  702
  1
  1
  2981/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  762
  551
  151
  60
  551
  151
  702
  1
  1
  2981/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  762
  551
  151
  60
  551
  151
  702
  1
  1
  2981/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env (())))\""
  762
  551
  151
  60
  551
  151
  702
  1
  1
  2981/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁)) (env (())))\""
  762
  551
  151
  60
  551
  151
  702
  1
  1
  2981/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env (())))\""
  762
  551
  151
  60
  551
  151
  702
  1
  1
  2981/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  762
  551
  151
  60
  551
  151
  702
  1
  1
  2981/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env (())))\""
  762
  551
  151
  60
  551
  151
  702
  1
  1
  2981/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  762
  551
  151
  60
  551
  151
  702
  1
  1
  2981/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env (())))\""
  762
  551
  151
  60
  551
  151
  702
  1
  1
  2981/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env (())))\""
  762
  551
  151
  60
  551
  151
  702
  1
  1
  2981/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env (())))\""
  762
  551
  151
  60
  551
  151
  702
  1
  1
  2981/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env (())))\""
  762
  551
  151
  60
  551
  151
  702
  1
  1
  2981/551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  763
  552
  151
  60
  552
  151
  703
  1
  1
  995/184
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env (())))\""
  763
  552
  151
  60
  552
  151
  703
  1
  1
  995/184
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env (() () ())))\""
  763
  552
  151
  60
  552
  151
  703
  1
  1
  995/184
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  763
  552
  151
  60
  552
  151
  703
  1
  1
  995/184
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  763
  552
  151
  60
  552
  151
  703
  1
  1
  995/184
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env (())))\""
  763
  552
  151
  60
  552
  151
  703
  1
  1
  995/184
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  763
  552
  151
  60
  552
  151
  703
  1
  1
  995/184
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  763
  552
  151
  60
  552
  151
  703
  1
  1
  995/184
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env (())))\""
  763
  552
  151
  60
  552
  151
  703
  1
  1
  995/184
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  763
  552
  151
  60
  552
  151
  703
  1
  1
  995/184
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  763
  552
  151
  60
  552
  151
  703
  1
  1
  995/184
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env (())))\""
  763
  552
  151
  60
  552
  151
  703
  1
  1
  995/184
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env (() ())))\""
  763
  552
  151
  60
  552
  151
  703
  1
  1
  995/184
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (r) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  763
  552
  151
  60
  552
  151
  703
  1
  1
  995/184
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> move-horizon-v <-) (move _ move-horizon-x) _) (env (())))\""
  763
  552
  151
  60
  552
  151
  703
  1
  1
  995/184
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env (())))\""
  764
  553
  151
  60
  553
  151
  704
  1
  1
  427/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env (() ())))\""
  764
  553
  151
  60
  553
  151
  704
  1
  1
  427/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env (())))\""
  764
  553
  151
  60
  553
  151
  704
  1
  1
  427/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  765
  554
  151
  60
  554
  151
  705
  1
  1
  2993/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env (())))\""
  765
  554
  151
  60
  554
  151
  705
  1
  1
  2993/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  765
  554
  151
  60
  554
  151
  705
  1
  1
  2993/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  765
  554
  151
  60
  554
  151
  705
  1
  1
  2993/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env (())))\""
  765
  554
  151
  60
  554
  151
  705
  1
  1
  2993/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  765
  554
  151
  60
  554
  151
  705
  1
  1
  2993/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env (())))\""
  765
  554
  151
  60
  554
  151
  705
  1
  1
  2993/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env (() ())))\""
  765
  554
  151
  60
  554
  151
  705
  1
  1
  2993/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env (())))\""
  765
  554
  151
  60
  554
  151
  705
  1
  1
  2993/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  765
  554
  151
  60
  554
  151
  705
  1
  1
  2993/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) bo that-play this-play) (env (())))\""
  765
  554
  151
  60
  554
  151
  705
  1
  1
  2993/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app f (app coord r c) (-> x <-)) (env (() () ())))\""
  765
  554
  151
  60
  554
  151
  705
  1
  1
  2993/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env (())))\""
  765
  554
  151
  60
  554
  151
  705
  1
  1
  2993/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  765
  554
  151
  60
  554
  151
  705
  1
  1
  2993/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (())))\""
  766
  555
  151
  60
  555
  151
  706
  1
  1
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> minimax <-) bo that-mark this-mark) (env (() ())))\""
  766
  555
  151
  60
  555
  151
  706
  1
  1
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env (() ())))\""
  766
  555
  151
  60
  555
  151
  706
  1
  1
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  766
  555
  151
  60
  555
  151
  706
  1
  1
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  766
  555
  151
  60
  555
  151
  706
  1
  1
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env (())))\""
  766
  555
  151
  60
  555
  151
  706
  1
  1
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  766
  555
  151
  60
  555
  151
  706
  1
  1
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env (())))\""
  766
  555
  151
  60
  555
  151
  706
  1
  1
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  766
  555
  151
  60
  555
  151
  706
  1
  1
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  766
  555
  151
  60
  555
  151
  706
  1
  1
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  766
  555
  151
  60
  555
  151
  706
  1
  1
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env (() ())))\""
  766
  555
  151
  60
  555
  151
  706
  1
  1
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env (())))\""
  766
  555
  151
  60
  555
  151
  706
  1
  1
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  766
  555
  151
  60
  555
  151
  706
  1
  1
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  768
  556
  152
  60
  556
  152
  708
  1
  1
  751/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  768
  556
  152
  60
  556
  152
  708
  1
  1
  751/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  593
  407
  135
  51
  407
  135
  542
  1
  1
  2267/407
  ((60 60 1) (60 60 1) (60 60 1)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  593
  407
  135
  51
  407
  135
  542
  1
  1
  2267/407
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app some-v (-> (app minimax bo that-mark this-mark) <-)) (env (() ())))\""
  593
  407
  135
  51
  407
  135
  542
  1
  1
  2267/407
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  593
  407
  135
  51
  407
  135
  542
  1
  1
  2267/407
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app minimax (-> bo <-) that-mark this-mark) (env (() ())))\""
  593
  407
  135
  51
  407
  135
  542
  1
  1
  2267/407
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  593
  407
  135
  51
  407
  135
  542
  1
  1
  2267/407
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env (())))\""
  602
  413
  138
  51
  413
  138
  551
  1
  1
  328/59
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env (())))\""
  613
  422
  138
  53
  422
  138
  560
  1
  1
  2333/422
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  613
  422
  138
  53
  422
  138
  560
  1
  1
  2333/422
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  613
  422
  138
  53
  422
  138
  560
  1
  1
  2333/422
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs)) (env (())))\""
  615
  424
  138
  53
  424
  138
  562
  1
  1
  2343/424
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env (() ())))\""
  615
  424
  138
  53
  424
  138
  562
  1
  1
  2343/424
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (let (_) (-> (app display \"Cat's game.\\n\") <-)) (env (())))\""
  618
  427
  138
  53
  427
  138
  565
  1
  1
  2357/427
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  619
  428
  138
  53
  428
  138
  566
  1
  1
  1181/214
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  619
  428
  138
  53
  428
  138
  566
  1
  1
  1181/214
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  619
  428
  138
  53
  428
  138
  566
  1
  1
  1181/214
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  619
  428
  138
  53
  428
  138
  566
  1
  1
  1181/214
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval (λ () (-> (let (co) ...) <-)) (env (() ())))\""
  619
  428
  138
  53
  428
  138
  566
  1
  1
  1181/214
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  619
  428
  138
  53
  428
  138
  566
  1
  1
  1181/214
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  619
  428
  138
  53
  428
  138
  566
  1
  1
  1181/214
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env (())))\""
  621
  430
  138
  53
  430
  138
  568
  1
  1
  2371/430
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  621
  430
  138
  53
  430
  138
  568
  1
  1
  2371/430
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  623
  432
  138
  53
  432
  138
  570
  1
  1
  2381/432
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  623
  432
  138
  53
  432
  138
  570
  1
  1
  2381/432
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env (())))\""
  625
  434
  138
  53
  434
  138
  572
  1
  1
  2391/434
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  625
  434
  138
  53
  434
  138
  572
  1
  1
  2391/434
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env (())))\""
  625
  434
  138
  53
  434
  138
  572
  1
  1
  2391/434
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env (())))\""
  626
  435
  138
  53
  435
  138
  573
  1
  1
  2396/435
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  626
  435
  138
  53
  435
  138
  573
  1
  1
  2396/435
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env (() ())))\""
  626
  435
  138
  53
  435
  138
  573
  1
  1
  2396/435
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env (())))\""
  635
  444
  138
  53
  444
  138
  582
  1
  1
  1219/222
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env (() ())))\""
  635
  444
  138
  53
  444
  138
  582
  1
  1
  1219/222
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  637
  446
  138
  53
  446
  138
  584
  1
  1
  1224/223
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (move-coord-v) (-> (match move-coord-v ...) <-)) (env (())))\""
  637
  446
  138
  53
  446
  138
  584
  1
  1
  1224/223
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env (())))\""
  637
  446
  138
  53
  446
  138
  584
  1
  1
  1224/223
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  639
  448
  138
  53
  448
  138
  586
  1
  1
  1231/224
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env (())))\""
  639
  448
  138
  53
  448
  138
  586
  1
  1
  1231/224
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  letrec
  "\"'(eval (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...) (env (())))\""
  639
  448
  138
  53
  448
  138
  586
  1
  1
  1231/224
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  639
  448
  138
  53
  448
  138
  586
  1
  1
  1231/224
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app f (-> (app coord r c) <-) x) (env (() () ())))\""
  639
  448
  138
  53
  448
  138
  586
  1
  1
  1231/224
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  639
  448
  138
  53
  448
  138
  586
  1
  1
  1231/224
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  639
  448
  138
  53
  448
  138
  586
  1
  1
  1231/224
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env (())))\""
  641
  450
  138
  53
  450
  138
  588
  1
  1
  2471/450
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  647
  452
  141
  54
  452
  141
  593
  1
  1
  2485/452
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  647
  452
  141
  54
  452
  141
  593
  1
  1
  2485/452
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env (())))\""
  648
  453
  141
  54
  453
  141
  594
  1
  1
  2489/453
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env (())))\""
  648
  453
  141
  54
  453
  141
  594
  1
  1
  2489/453
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env (() ())))\""
  648
  453
  141
  54
  453
  141
  594
  1
  1
  2489/453
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env (())))\""
  648
  453
  141
  54
  453
  141
  594
  1
  1
  2489/453
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  648
  453
  141
  54
  453
  141
  594
  1
  1
  2489/453
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env (())))\""
  649
  454
  141
  54
  454
  141
  595
  1
  1
  1247/227
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app maximin bo that-mark (-> this-mark <-)) (env (() ())))\""
  649
  454
  141
  54
  454
  141
  595
  1
  1
  1247/227
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env (())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo that-mark this-mark) (env (() ())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (bo) (-> (app error 'human-action \"not implemented\") <-)) (env (())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env (() ())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env (())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env (() ())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env (())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (r) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env (())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env (())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env (() ())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env (() ())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env (() ())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env (())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env (())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app minimax bo that-mark this-mark)) (env (() ())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  650
  455
  141
  54
  455
  141
  596
  1
  1
  2498/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env (())))\""
  651
  456
  141
  54
  456
  141
  597
  1
  1
  417/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  651
  456
  141
  54
  456
  141
  597
  1
  1
  417/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env (())))\""
  651
  456
  141
  54
  456
  141
  597
  1
  1
  417/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  651
  456
  141
  54
  456
  141
  597
  1
  1
  417/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env (())))\""
  651
  456
  141
  54
  456
  141
  597
  1
  1
  417/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  651
  456
  141
  54
  456
  141
  597
  1
  1
  417/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app some-v (-> (app maximin bo that-mark this-mark) <-)) (env (() ())))\""
  651
  456
  141
  54
  456
  141
  597
  1
  1
  417/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env (() ())))\""
  651
  456
  141
  54
  456
  141
  597
  1
  1
  417/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  651
  456
  141
  54
  456
  141
  597
  1
  1
  417/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env (() ())))\""
  653
  458
  141
  54
  458
  141
  599
  1
  1
  1256/229
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env (())))\""
  655
  460
  141
  54
  460
  141
  601
  1
  1
  1261/230
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  655
  460
  141
  54
  460
  141
  601
  1
  1
  1261/230
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env (())))\""
  655
  460
  141
  54
  460
  141
  601
  1
  1
  1261/230
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (())))\""
  655
  460
  141
  54
  460
  141
  601
  1
  1
  1261/230
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  655
  460
  141
  54
  460
  141
  601
  1
  1
  1261/230
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  655
  460
  141
  54
  460
  141
  601
  1
  1
  1261/230
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  655
  460
  141
  54
  460
  141
  601
  1
  1
  1261/230
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  655
  460
  141
  54
  460
  141
  601
  1
  1
  1261/230
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env (())))\""
  656
  461
  141
  54
  461
  141
  602
  1
  1
  2526/461
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app horizon (-> (app win) <-) 0) (env (() ())))\""
  658
  463
  141
  54
  463
  141
  604
  1
  1
  2536/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env (())))\""
  660
  465
  141
  54
  465
  141
  606
  1
  1
  509/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env (())))\""
  661
  466
  141
  54
  466
  141
  607
  1
  1
  1275/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  661
  466
  141
  54
  466
  141
  607
  1
  1
  1275/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  661
  466
  141
  54
  466
  141
  607
  1
  1
  1275/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  661
  466
  141
  54
  466
  141
  607
  1
  1
  1275/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  661
  466
  141
  54
  466
  141
  607
  1
  1
  1275/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  661
  466
  141
  54
  466
  141
  607
  1
  1
  1275/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env (())))\""
  661
  466
  141
  54
  466
  141
  607
  1
  1
  1275/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env (())))\""
  661
  466
  141
  54
  466
  141
  607
  1
  1
  1275/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord rc rc) (-> m <-)) (env (() ())))\""
  661
  466
  141
  54
  466
  141
  607
  1
  1
  1275/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  661
  466
  141
  54
  466
  141
  607
  1
  1
  1275/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  663
  468
  141
  54
  468
  141
  609
  1
  1
  853/156
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env (())))\""
  663
  468
  141
  54
  468
  141
  609
  1
  1
  853/156
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose)) (env (())))\""
  665
  470
  141
  54
  470
  141
  611
  1
  1
  2569/470
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord rc rc) <-) m) (env (() ())))\""
  665
  470
  141
  54
  470
  141
  611
  1
  1
  2569/470
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) mark bo) (env (())))\""
  665
  470
  141
  54
  470
  141
  611
  1
  1
  2569/470
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env (())))\""
  666
  471
  141
  54
  471
  141
  612
  1
  1
  858/157
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  666
  471
  141
  54
  471
  141
  612
  1
  1
  858/157
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env (())))\""
  666
  471
  141
  54
  471
  141
  612
  1
  1
  858/157
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> minimax <-) bo that-mark this-mark) (env (() ())))\""
  666
  471
  141
  54
  471
  141
  612
  1
  1
  858/157
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env (())))\""
  666
  471
  141
  54
  471
  141
  612
  1
  1
  858/157
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  666
  471
  141
  54
  471
  141
  612
  1
  1
  858/157
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval (match (app full? bo) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  667
  472
  141
  54
  472
  141
  613
  1
  1
  2579/472
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord rc rc) m) (env (() ())))\""
  667
  472
  141
  54
  472
  141
  613
  1
  1
  2579/472
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  667
  472
  141
  54
  472
  141
  613
  1
  1
  2579/472
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env (())))\""
  668
  473
  141
  54
  473
  141
  614
  1
  1
  2584/473
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env (())))\""
  668
  473
  141
  54
  473
  141
  614
  1
  1
  2584/473
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env (() ())))\""
  668
  473
  141
  54
  473
  141
  614
  1
  1
  2584/473
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (() ())))\""
  668
  473
  141
  54
  473
  141
  614
  1
  1
  2584/473
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  673
  477
  141
  55
  477
  141
  618
  1
  1
  2602/477
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  673
  477
  141
  55
  477
  141
  618
  1
  1
  2602/477
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  673
  477
  141
  55
  477
  141
  618
  1
  1
  2602/477
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  673
  477
  141
  55
  477
  141
  618
  1
  1
  2602/477
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  673
  477
  141
  55
  477
  141
  618
  1
  1
  2602/477
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env (())))\""
  673
  477
  141
  55
  477
  141
  618
  1
  1
  2602/477
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env (())))\""
  673
  477
  141
  55
  477
  141
  618
  1
  1
  2602/477
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  673
  477
  141
  55
  477
  141
  618
  1
  1
  2602/477
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env (())))\""
  675
  479
  141
  55
  479
  141
  620
  1
  1
  2612/479
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  675
  479
  141
  55
  479
  141
  620
  1
  1
  2612/479
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  675
  479
  141
  55
  479
  141
  620
  1
  1
  2612/479
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  675
  479
  141
  55
  479
  141
  620
  1
  1
  2612/479
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  675
  479
  141
  55
  479
  141
  620
  1
  1
  2612/479
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (let (bo) (-> (match (app wins? bo mark) ...) <-)) (env (())))\""
  675
  479
  141
  55
  479
  141
  620
  1
  1
  2612/479
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env (() () ())))\""
  675
  479
  141
  55
  479
  141
  620
  1
  1
  2612/479
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  675
  479
  141
  55
  479
  141
  620
  1
  1
  2612/479
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  675
  479
  141
  55
  479
  141
  620
  1
  1
  2612/479
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  675
  479
  141
  55
  479
  141
  620
  1
  1
  2612/479
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env (())))\""
  677
  481
  141
  55
  481
  141
  622
  1
  1
  2621/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord rc rc) m) (env (() ())))\""
  677
  481
  141
  55
  481
  141
  622
  1
  1
  2621/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env (())))\""
  677
  481
  141
  55
  481
  141
  622
  1
  1
  2621/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app play-turn empty-board (-> player-one <-) player-two) (env (())))\""
  677
  481
  141
  55
  481
  141
  622
  1
  1
  2621/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env (())))\""
  677
  481
  141
  55
  481
  141
  622
  1
  1
  2621/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env (() ())))\""
  677
  481
  141
  55
  481
  141
  622
  1
  1
  2621/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app play-turn empty-board player-one (-> player-two <-)) (env (())))\""
  677
  481
  141
  55
  481
  141
  622
  1
  1
  2621/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app wins? bo mark) <-) (#f) _) (env (())))\""
  677
  481
  141
  55
  481
  141
  622
  1
  1
  2621/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  677
  481
  141
  55
  481
  141
  622
  1
  1
  2621/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  677
  481
  141
  55
  481
  141
  622
  1
  1
  2621/481
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env (() ())))\""
  679
  483
  141
  55
  483
  141
  624
  1
  1
  877/161
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app win) 0) (env (() ())))\""
  680
  484
  141
  55
  484
  141
  625
  1
  1
  659/121
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  680
  484
  141
  55
  484
  141
  625
  1
  1
  659/121
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  680
  484
  141
  55
  484
  141
  625
  1
  1
  659/121
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (())))\""
  680
  484
  141
  55
  484
  141
  625
  1
  1
  659/121
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env (())))\""
  680
  484
  141
  55
  484
  141
  625
  1
  1
  659/121
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-))) (env (())))\""
  681
  485
  141
  55
  485
  141
  626
  1
  1
  528/97
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  681
  485
  141
  55
  485
  141
  626
  1
  1
  528/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  681
  485
  141
  55
  485
  141
  626
  1
  1
  528/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env (())))\""
  681
  485
  141
  55
  485
  141
  626
  1
  1
  528/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> marked? <-) (app b (app coord r c))) (env (() () ())))\""
  681
  485
  141
  55
  485
  141
  626
  1
  1
  528/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  681
  485
  141
  55
  485
  141
  626
  1
  1
  528/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app play-turn (-> empty-board <-) player-one player-two) (env (())))\""
  681
  485
  141
  55
  485
  141
  626
  1
  1
  528/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env (() ())))\""
  683
  487
  141
  55
  487
  141
  628
  1
  1
  2650/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  683
  487
  141
  55
  487
  141
  628
  1
  1
  2650/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env (())))\""
  684
  488
  141
  55
  488
  141
  629
  1
  1
  332/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env (())))\""
  684
  488
  141
  55
  488
  141
  629
  1
  1
  332/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) bo that-play this-play) (env (())))\""
  684
  488
  141
  55
  488
  141
  629
  1
  1
  332/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  686
  489
  142
  55
  489
  142
  631
  1
  1
  2663/489
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env (())))\""
  686
  489
  142
  55
  489
  142
  631
  1
  1
  2663/489
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  689
  492
  142
  55
  492
  142
  634
  1
  1
  1339/246
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  689
  492
  142
  55
  492
  142
  634
  1
  1
  1339/246
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  689
  492
  142
  55
  492
  142
  634
  1
  1
  1339/246
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env (())))\""
  689
  492
  142
  55
  492
  142
  634
  1
  1
  1339/246
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  689
  492
  142
  55
  492
  142
  634
  1
  1
  1339/246
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env (())))\""
  689
  492
  142
  55
  492
  142
  634
  1
  1
  1339/246
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  689
  492
  142
  55
  492
  142
  634
  1
  1
  1339/246
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  689
  492
  142
  55
  492
  142
  634
  1
  1
  1339/246
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  690
  493
  142
  55
  493
  142
  635
  1
  1
  2684/493
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env (())))\""
  690
  493
  142
  55
  493
  142
  635
  1
  1
  2684/493
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  690
  493
  142
  55
  493
  142
  635
  1
  1
  2684/493
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (())))\""
  691
  494
  142
  55
  494
  142
  636
  1
  1
  2689/494
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (())))\""
  691
  494
  142
  55
  494
  142
  636
  1
  1
  2689/494
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (())))\""
  691
  494
  142
  55
  494
  142
  636
  1
  1
  2689/494
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  691
  494
  142
  55
  494
  142
  636
  1
  1
  2689/494
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  691
  494
  142
  55
  494
  142
  636
  1
  1
  2689/494
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env (())))\""
  691
  494
  142
  55
  494
  142
  636
  1
  1
  2689/494
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  691
  494
  142
  55
  494
  142
  636
  1
  1
  2689/494
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env (())))\""
  691
  494
  142
  55
  494
  142
  636
  1
  1
  2689/494
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  691
  494
  142
  55
  494
  142
  636
  1
  1
  2689/494
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  691
  494
  142
  55
  494
  142
  636
  1
  1
  2689/494
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  691
  494
  142
  55
  494
  142
  636
  1
  1
  2689/494
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env (())))\""
  692
  495
  142
  55
  495
  142
  637
  1
  1
  898/165
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  692
  495
  142
  55
  495
  142
  637
  1
  1
  898/165
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env (())))\""
  692
  495
  142
  55
  495
  142
  637
  1
  1
  898/165
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  692
  495
  142
  55
  495
  142
  637
  1
  1
  898/165
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env (())))\""
  692
  495
  142
  55
  495
  142
  637
  1
  1
  898/165
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env (())))\""
  693
  496
  142
  55
  496
  142
  638
  1
  1
  2699/496
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (let (_) (-> (match this-play ...) <-)) (env (())))\""
  693
  496
  142
  55
  496
  142
  638
  1
  1
  2699/496
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  695
  497
  142
  56
  497
  142
  639
  1
  1
  2704/497
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  695
  497
  142
  56
  497
  142
  639
  1
  1
  2704/497
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env (() ())))\""
  695
  497
  142
  56
  497
  142
  639
  1
  1
  2704/497
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  698
  499
  142
  57
  499
  142
  641
  1
  1
  2712/499
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env (())))\""
  698
  499
  142
  57
  499
  142
  641
  1
  1
  2712/499
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> this-play <-) (player mark action)) (env (())))\""
  698
  499
  142
  57
  499
  142
  641
  1
  1
  2712/499
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env (())))\""
  698
  499
  142
  57
  499
  142
  641
  1
  1
  2712/499
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env (())))\""
  698
  499
  142
  57
  499
  142
  641
  1
  1
  2712/499
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  698
  499
  142
  57
  499
  142
  641
  1
  1
  2712/499
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  698
  499
  142
  57
  499
  142
  641
  1
  1
  2712/499
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env (())))\""
  698
  499
  142
  57
  499
  142
  641
  1
  1
  2712/499
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  698
  499
  142
  57
  499
  142
  641
  1
  1
  2712/499
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  699
  500
  142
  57
  500
  142
  642
  1
  1
  2717/500
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  699
  500
  142
  57
  500
  142
  642
  1
  1
  2717/500
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  699
  500
  142
  57
  500
  142
  642
  1
  1
  2717/500
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  699
  500
  142
  57
  500
  142
  642
  1
  1
  2717/500
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) empty-board player-one player-two) (env (())))\""
  699
  500
  142
  57
  500
  142
  642
  1
  1
  2717/500
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  699
  500
  142
  57
  500
  142
  642
  1
  1
  2717/500
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env (() ())))\""
  699
  500
  142
  57
  500
  142
  642
  1
  1
  2717/500
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env (())))\""
  700
  501
  142
  57
  501
  142
  643
  1
  1
  2722/501
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  700
  501
  142
  57
  501
  142
  643
  1
  1
  2722/501
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  700
  501
  142
  57
  501
  142
  643
  1
  1
  2722/501
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env (())))\""
  701
  502
  142
  57
  502
  142
  644
  1
  1
  1364/251
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  701
  502
  142
  57
  502
  142
  644
  1
  1
  1364/251
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env (())))\""
  701
  502
  142
  57
  502
  142
  644
  1
  1
  1364/251
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  701
  502
  142
  57
  502
  142
  644
  1
  1
  1364/251
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (-> (app X) <-) (app make-ai-action (app X))) (env (())))\""
  701
  502
  142
  57
  502
  142
  644
  1
  1
  1364/251
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (())))\""
  702
  503
  142
  57
  503
  142
  645
  1
  1
  2732/503
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  702
  503
  142
  57
  503
  142
  645
  1
  1
  2732/503
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  702
  503
  142
  57
  503
  142
  645
  1
  1
  2732/503
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  704
  504
  143
  57
  504
  143
  647
  1
  1
  913/168
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-)) (env (() ())))\""
  704
  504
  143
  57
  504
  143
  647
  1
  1
  913/168
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  704
  504
  143
  57
  504
  143
  647
  1
  1
  913/168
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (())))\""
  705
  505
  143
  57
  505
  143
  648
  1
  1
  2744/505
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  705
  505
  143
  57
  505
  143
  648
  1
  1
  2744/505
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env (() ())))\""
  705
  505
  143
  57
  505
  143
  648
  1
  1
  2744/505
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁)) (env (())))\""
  706
  506
  143
  57
  506
  143
  649
  1
  1
  1374/253
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  706
  506
  143
  57
  506
  143
  649
  1
  1
  1374/253
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  706
  506
  143
  57
  506
  143
  649
  1
  1
  1374/253
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  706
  506
  143
  57
  506
  143
  649
  1
  1
  1374/253
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env (() ())))\""
  706
  506
  143
  57
  506
  143
  649
  1
  1
  1374/253
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  706
  506
  143
  57
  506
  143
  649
  1
  1
  1374/253
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs)) (env (())))\""
  708
  508
  143
  57
  508
  143
  651
  1
  1
  1379/254
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  708
  508
  143
  57
  508
  143
  651
  1
  1
  1379/254
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  710
  510
  143
  57
  510
  143
  653
  1
  1
  1384/255
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  710
  510
  143
  57
  510
  143
  653
  1
  1
  1384/255
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (app X) (-> (app make-ai-action (app X)) <-)) (env (())))\""
  710
  510
  143
  57
  510
  143
  653
  1
  1
  1384/255
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env (())))\""
  710
  510
  143
  57
  510
  143
  653
  1
  1
  1384/255
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env (())))\""
  712
  512
  143
  57
  512
  143
  655
  1
  1
  347/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env (())))\""
  712
  512
  143
  57
  512
  143
  655
  1
  1
  347/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env (())))\""
  712
  512
  143
  57
  512
  143
  655
  1
  1
  347/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo that-mark this-mark)) (env (() ())))\""
  712
  512
  143
  57
  512
  143
  655
  1
  1
  347/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env (())))\""
  712
  512
  143
  57
  512
  143
  655
  1
  1
  347/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env (() () ())))\""
  712
  512
  143
  57
  512
  143
  655
  1
  1
  347/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env (())))\""
  712
  512
  143
  57
  512
  143
  655
  1
  1
  347/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env (())))\""
  712
  512
  143
  57
  512
  143
  655
  1
  1
  347/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (letrec (loop) (-> (app loop) <-)) (env (())))\""
  712
  512
  143
  57
  512
  143
  655
  1
  1
  347/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  712
  512
  143
  57
  512
  143
  655
  1
  1
  347/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  712
  512
  143
  57
  512
  143
  655
  1
  1
  347/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env (())))\""
  712
  512
  143
  57
  512
  143
  655
  1
  1
  347/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  712
  512
  143
  57
  512
  143
  655
  1
  1
  347/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (c) (-> (app marked? (app b (app coord r c))) <-)) (env (() () ())))\""
  712
  512
  143
  57
  512
  143
  655
  1
  1
  347/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env (())))\""
  713
  513
  143
  57
  513
  143
  656
  1
  1
  103/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app f (app coord r c) (-> x <-)) (env (() () ())))\""
  713
  513
  143
  57
  513
  143
  656
  1
  1
  103/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env (())))\""
  714
  514
  143
  57
  514
  143
  657
  1
  1
  1393/257
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env (())))\""
  720
  517
  146
  57
  517
  146
  663
  1
  1
  2807/517
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  720
  517
  146
  57
  517
  146
  663
  1
  1
  2807/517
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env (())))\""
  720
  517
  146
  57
  517
  146
  663
  1
  1
  2807/517
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  720
  517
  146
  57
  517
  146
  663
  1
  1
  2807/517
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env (())))\""
  720
  517
  146
  57
  517
  146
  663
  1
  1
  2807/517
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env (())))\""
  720
  517
  146
  57
  517
  146
  663
  1
  1
  2807/517
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  720
  517
  146
  57
  517
  146
  663
  1
  1
  2807/517
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  720
  517
  146
  57
  517
  146
  663
  1
  1
  2807/517
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env (())))\""
  721
  518
  146
  57
  518
  146
  664
  1
  1
  38/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env (())))\""
  721
  518
  146
  57
  518
  146
  664
  1
  1
  38/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  721
  518
  146
  57
  518
  146
  664
  1
  1
  38/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env (())))\""
  721
  518
  146
  57
  518
  146
  664
  1
  1
  38/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env (() ())))\""
  723
  519
  147
  57
  519
  147
  666
  1
  1
  2819/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  723
  519
  147
  57
  519
  147
  666
  1
  1
  2819/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env (() ())))\""
  724
  520
  147
  57
  520
  147
  667
  1
  1
  1413/260
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  724
  520
  147
  57
  520
  147
  667
  1
  1
  1413/260
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app horizon (-> (app lose) <-) 0) (env (() ())))\""
  726
  522
  147
  57
  522
  147
  669
  1
  1
  1418/261
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  726
  522
  147
  57
  522
  147
  669
  1
  1
  1418/261
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env (())))\""
  726
  522
  147
  57
  522
  147
  669
  1
  1
  1418/261
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env (())))\""
  726
  522
  147
  57
  522
  147
  669
  1
  1
  1418/261
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (())))\""
  727
  523
  147
  57
  523
  147
  670
  1
  1
  2840/523
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env (())))\""
  727
  523
  147
  57
  523
  147
  670
  1
  1
  2840/523
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env (() ())))\""
  727
  523
  147
  57
  523
  147
  670
  1
  1
  2840/523
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env (())))\""
  727
  523
  147
  57
  523
  147
  670
  1
  1
  2840/523
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  727
  523
  147
  57
  523
  147
  670
  1
  1
  2840/523
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  729
  524
  148
  57
  524
  148
  672
  1
  1
  2847/524
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  732
  526
  148
  58
  526
  148
  674
  1
  1
  1428/263
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> mark <-) bo) (env (())))\""
  732
  526
  148
  58
  526
  148
  674
  1
  1
  1428/263
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  732
  526
  148
  58
  526
  148
  674
  1
  1
  1428/263
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  732
  526
  148
  58
  526
  148
  674
  1
  1
  1428/263
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  733
  527
  148
  58
  527
  148
  675
  1
  1
  2863/527
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  733
  527
  148
  58
  527
  148
  675
  1
  1
  2863/527
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> move-coord-v <-) (move move-coord-x _) _) (env (())))\""
  733
  527
  148
  58
  527
  148
  675
  1
  1
  2863/527
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-)) (env (())))\""
  736
  530
  148
  58
  530
  148
  678
  1
  1
  1438/265
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  737
  531
  148
  58
  531
  148
  679
  1
  1
  961/177
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env (())))\""
  737
  531
  148
  58
  531
  148
  679
  1
  1
  961/177
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  737
  531
  148
  58
  531
  148
  679
  1
  1
  961/177
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env (())))\""
  740
  534
  148
  58
  534
  148
  682
  1
  1
  965/178
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  740
  534
  148
  58
  534
  148
  682
  1
  1
  965/178
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  740
  534
  148
  58
  534
  148
  682
  1
  1
  965/178
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env (())))\""
  741
  535
  148
  58
  535
  148
  683
  1
  1
  580/107
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env (())))\""
  742
  536
  148
  58
  536
  148
  684
  1
  1
  2905/536
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  742
  536
  148
  58
  536
  148
  684
  1
  1
  2905/536
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env (() ())))\""
  744
  537
  148
  59
  537
  148
  685
  1
  1
  2912/537
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  744
  537
  148
  59
  537
  148
  685
  1
  1
  2912/537
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  744
  537
  148
  59
  537
  148
  685
  1
  1
  2912/537
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  745
  538
  148
  59
  538
  148
  686
  1
  1
  2917/538
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  745
  538
  148
  59
  538
  148
  686
  1
  1
  2917/538
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  745
  538
  148
  59
  538
  148
  686
  1
  1
  2917/538
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁)) (env (())))\""
  746
  539
  148
  59
  539
  148
  687
  1
  1
  2922/539
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env (() ())))\""
  746
  539
  148
  59
  539
  148
  687
  1
  1
  2922/539
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  751
  540
  151
  60
  540
  151
  691
  1
  1
  2929/540
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  751
  540
  151
  60
  540
  151
  691
  1
  1
  2929/540
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env (() ())))\""
  751
  540
  151
  60
  540
  151
  691
  1
  1
  2929/540
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app coord r c) x) (env (() () ())))\""
  751
  540
  151
  60
  540
  151
  691
  1
  1
  2929/540
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  753
  541
  152
  60
  541
  152
  693
  1
  1
  2936/541
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env (() ())))\""
  753
  541
  152
  60
  541
  152
  693
  1
  1
  2936/541
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  753
  541
  152
  60
  541
  152
  693
  1
  1
  2936/541
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env (())))\""
  754
  542
  152
  60
  542
  152
  694
  1
  1
  1470/271
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env (())))\""
  754
  542
  152
  60
  542
  152
  694
  1
  1
  1470/271
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  754
  542
  152
  60
  542
  152
  694
  1
  1
  1470/271
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co mark bo) (env (())))\""
  754
  542
  152
  60
  542
  152
  694
  1
  1
  1470/271
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env (() ())))\""
  754
  542
  152
  60
  542
  152
  694
  1
  1
  1470/271
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env (() ())))\""
  754
  542
  152
  60
  542
  152
  694
  1
  1
  1470/271
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env (())))\""
  755
  543
  152
  60
  543
  152
  695
  1
  1
  2944/543
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-)) (env (() ())))\""
  755
  543
  152
  60
  543
  152
  695
  1
  1
  2944/543
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  755
  543
  152
  60
  543
  152
  695
  1
  1
  2944/543
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  756
  544
  152
  60
  544
  152
  696
  1
  1
  2949/544
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  756
  544
  152
  60
  544
  152
  696
  1
  1
  2949/544
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  756
  544
  152
  60
  544
  152
  696
  1
  1
  2949/544
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  756
  544
  152
  60
  544
  152
  696
  1
  1
  2949/544
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env (())))\""
  756
  544
  152
  60
  544
  152
  696
  1
  1
  2949/544
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  758
  546
  152
  60
  546
  152
  698
  1
  1
  2957/546
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env (() ())))\""
  758
  546
  152
  60
  546
  152
  698
  1
  1
  2957/546
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env (())))\""
  758
  546
  152
  60
  546
  152
  698
  1
  1
  2957/546
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  758
  546
  152
  60
  546
  152
  698
  1
  1
  2957/546
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  758
  546
  152
  60
  546
  152
  698
  1
  1
  2957/546
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env (() ())))\""
  758
  546
  152
  60
  546
  152
  698
  1
  1
  2957/546
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env (())))\""
  758
  546
  152
  60
  546
  152
  698
  1
  1
  2957/546
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-)) (env (() ())))\""
  758
  546
  152
  60
  546
  152
  698
  1
  1
  2957/546
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  758
  546
  152
  60
  546
  152
  698
  1
  1
  2957/546
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env (())))\""
  758
  546
  152
  60
  546
  152
  698
  1
  1
  2957/546
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> that-mark <-) this-mark) (env (() ())))\""
  758
  546
  152
  60
  546
  152
  698
  1
  1
  2957/546
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env (())))\""
  758
  546
  152
  60
  546
  152
  698
  1
  1
  2957/546
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  758
  546
  152
  60
  546
  152
  698
  1
  1
  2957/546
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env (() ())))\""
  758
  546
  152
  60
  546
  152
  698
  1
  1
  2957/546
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  759
  547
  152
  60
  547
  152
  699
  1
  1
  2962/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  759
  547
  152
  60
  547
  152
  699
  1
  1
  2962/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma))) (env (() ())))\""
  759
  547
  152
  60
  547
  152
  699
  1
  1
  2962/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-horizon\") (env (())))\""
  759
  547
  152
  60
  547
  152
  699
  1
  1
  2962/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env (())))\""
  759
  547
  152
  60
  547
  152
  699
  1
  1
  2962/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  759
  547
  152
  60
  547
  152
  699
  1
  1
  2962/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env (())))\""
  759
  547
  152
  60
  547
  152
  699
  1
  1
  2962/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (() ())))\""
  759
  547
  152
  60
  547
  152
  699
  1
  1
  2962/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env (())))\""
  759
  547
  152
  60
  547
  152
  699
  1
  1
  2962/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (())))\""
  759
  547
  152
  60
  547
  152
  699
  1
  1
  2962/547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env (())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (app b co) ((blank) (-> (app #f) <-)) (marked m*)) (env (())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env (() ())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) that-mark this-mark) (env (() ())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env (())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env (())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env (())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app equal? co₀ co) <-) (#f) _) (env (() ())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env (())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env (())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env (() ())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env (())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env (())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app minimax bo (-> that-mark <-) this-mark) (env (() ())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (move-horizon-v) (-> (match move-horizon-v ...) <-)) (env (())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env (())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app marked? (-> (app b (app coord r c)) <-)) (env (() () ())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env (())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match some-v-v ((some some-v-x) (-> some-v-x <-)) _) (env (())))\""
  760
  548
  152
  60
  548
  152
  700
  1
  1
  2967/548
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env (())))\""
  761
  549
  152
  60
  549
  152
  701
  1
  1
  2971/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  761
  549
  152
  60
  549
  152
  701
  1
  1
  2971/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  761
  549
  152
  60
  549
  152
  701
  1
  1
  2971/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  761
  549
  152
  60
  549
  152
  701
  1
  1
  2971/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app play-turn bo that-play (-> this-play <-)) (env (())))\""
  761
  549
  152
  60
  549
  152
  701
  1
  1
  2971/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app lose) 0) (env (() ())))\""
  761
  549
  152
  60
  549
  152
  701
  1
  1
  2971/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (() ())))\""
  761
  549
  152
  60
  549
  152
  701
  1
  1
  2971/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  761
  549
  152
  60
  549
  152
  701
  1
  1
  2971/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env (())))\""
  761
  549
  152
  60
  549
  152
  701
  1
  1
  2971/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (() ())))\""
  761
  549
  152
  60
  549
  152
  701
  1
  1
  2971/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env (())))\""
  761
  549
  152
  60
  549
  152
  701
  1
  1
  2971/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  761
  549
  152
  60
  549
  152
  701
  1
  1
  2971/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-coord\") (env (())))\""
  761
  549
  152
  60
  549
  152
  701
  1
  1
  2971/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  761
  549
  152
  60
  549
  152
  701
  1
  1
  2971/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env (())))\""
  761
  549
  152
  60
  549
  152
  701
  1
  1
  2971/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (co) (-> (match (app equal? co₀ co) ...) <-)) (env (() ())))\""
  761
  549
  152
  60
  549
  152
  701
  1
  1
  2971/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  761
  549
  152
  60
  549
  152
  701
  1
  1
  2971/549
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env (() ())))\""
  762
  550
  152
  60
  550
  152
  702
  1
  1
  1489/275
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  762
  550
  152
  60
  550
  152
  702
  1
  1
  1489/275
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  762
  550
  152
  60
  550
  152
  702
  1
  1
  1489/275
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> move-horizon-v <-) (move _ move-horizon-x) _) (env (())))\""
  762
  550
  152
  60
  550
  152
  702
  1
  1
  1489/275
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  762
  550
  152
  60
  550
  152
  702
  1
  1
  1489/275
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env (() ())))\""
  763
  551
  152
  60
  551
  152
  703
  1
  1
  157/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  763
  551
  152
  60
  551
  152
  703
  1
  1
  157/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  763
  551
  152
  60
  551
  152
  703
  1
  1
  157/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  763
  551
  152
  60
  551
  152
  703
  1
  1
  157/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env (())))\""
  763
  551
  152
  60
  551
  152
  703
  1
  1
  157/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) (app make-ai-action (app X))) (env (())))\""
  763
  551
  152
  60
  551
  152
  703
  1
  1
  157/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env (() ())))\""
  763
  551
  152
  60
  551
  152
  703
  1
  1
  157/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  763
  551
  152
  60
  551
  152
  703
  1
  1
  157/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env (())))\""
  763
  551
  152
  60
  551
  152
  703
  1
  1
  157/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env (())))\""
  763
  551
  152
  60
  551
  152
  703
  1
  1
  157/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  763
  551
  152
  60
  551
  152
  703
  1
  1
  157/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env (())))\""
  763
  551
  152
  60
  551
  152
  703
  1
  1
  157/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env (() ())))\""
  763
  551
  152
  60
  551
  152
  703
  1
  1
  157/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env (())))\""
  763
  551
  152
  60
  551
  152
  703
  1
  1
  157/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (c) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  763
  551
  152
  60
  551
  152
  703
  1
  1
  157/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env (())))\""
  763
  551
  152
  60
  551
  152
  703
  1
  1
  157/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  763
  551
  152
  60
  551
  152
  703
  1
  1
  157/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  763
  551
  152
  60
  551
  152
  703
  1
  1
  157/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app play-turn bo (-> that-play <-) this-play) (env (())))\""
  763
  551
  152
  60
  551
  152
  703
  1
  1
  157/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  763
  551
  152
  60
  551
  152
  703
  1
  1
  157/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (() ())))\""
  763
  551
  152
  60
  551
  152
  703
  1
  1
  157/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  765
  553
  152
  60
  553
  152
  705
  1
  1
  2991/553
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (c x) (-> (app f (app coord r c) x) <-)) (env (() () ())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env (() ())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> display <-) \"Cat's game.\\n\") (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (let (... () (co (-> (app action bo) <-)) () ...) ...) (env (() ())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env (() ())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark co mark (-> bo <-)) (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env (() ())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env (() ())))\""
  766
  554
  152
  60
  554
  152
  706
  1
  1
  2995/554
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  200/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  200/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  200/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  200/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  200/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval (λ (bo this-play that-play) (-> (let (_) ...) <-)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  200/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app minimax bo that-mark (-> this-mark <-)) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  200/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  200/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  200/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  200/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  767
  555
  152
  60
  555
  152
  707
  1
  1
  200/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  768
  556
  152
  60
  556
  152
  708
  1
  1
  751/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env (())))\""
  768
  556
  152
  60
  556
  152
  708
  1
  1
  751/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  768
  556
  152
  60
  556
  152
  708
  1
  1
  751/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env (())))\""
  768
  556
  152
  60
  556
  152
  708
  1
  1
  751/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env (())))\""
  768
  556
  152
  60
  556
  152
  708
  1
  1
  751/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env (())))\""
  768
  556
  152
  60
  556
  152
  708
  1
  1
  751/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  768
  556
  152
  60
  556
  152
  708
  1
  1
  751/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  768
  556
  152
  60
  556
  152
  708
  1
  1
  751/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env (() ())))\""
  768
  556
  152
  60
  556
  152
  708
  1
  1
  751/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  768
  556
  152
  60
  556
  152
  708
  1
  1
  751/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  768
  556
  152
  60
  556
  152
  708
  1
  1
  751/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app play-turn (-> bo <-) that-play this-play) (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env (() ())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env (())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  769
  557
  152
  60
  557
  152
  709
  1
  1
  3008/557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  5
  3
  0
  2
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  14
  8
  3
  3
  3
  1
  4
  1
  5/18
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  16
  10
  3
  3
  5
  1
  6
  1
  11/24
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2)))))\""
  18
  11
  3
  4
  5
  1
  6
  1
  11/27
  56/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  29
  18
  6
  5
  9
  3
  12
  1
  23/42
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  32
  21
  6
  5
  11
  3
  14
  1
  5/9
  107/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  36
  25
  6
  5
  13
  3
  16
  1
  23/45
  127/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  126
  87
  29
  10
  47
  19
  66
  1
  371/486
  473/87
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  129
  90
  29
  10
  49
  19
  68
  1
  383/504
  497/90
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env ((□? (x1 x2)))))\""
  134
  95
  29
  10
  49
  19
  68
  1
  169/252
  526/95
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2)))))\""
  134
  95
  29
  10
  49
  19
  68
  1
  169/252
  526/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  149
  103
  29
  17
  54
  19
  73
  1
  983/1440
  573/103
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  158
  111
  29
  18
  60
  19
  79
  1
  223/315
  620/111
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  158
  111
  29
  18
  60
  19
  79
  1
  223/315
  620/111
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  160
  113
  29
  18
  60
  19
  79
  1
  443/630
  632/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  160
  113
  29
  18
  60
  19
  79
  1
  443/630
  632/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env ((□? (x1 x2)))))\""
  160
  113
  29
  18
  60
  19
  79
  1
  443/630
  632/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  198
  142
  34
  22
  60
  19
  79
  1
  43/63
  400/71
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env ((□? (x1 x2)))))\""
  198
  142
  34
  22
  60
  19
  79
  1
  43/63
  400/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  199
  143
  34
  22
  60
  19
  79
  1
  212/315
  62/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  201
  145
  34
  22
  60
  19
  79
  1
  206/315
  816/145
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  202
  146
  34
  22
  60
  19
  79
  1
  29/45
  411/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env ((□? (x1 x2)))))\""
  202
  146
  34
  22
  60
  19
  79
  1
  29/45
  411/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  202
  146
  34
  22
  60
  19
  79
  1
  29/45
  411/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  1
  500
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  203
  147
  34
  22
  60
  19
  79
  1
  397/630
  276/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  17
  11
  3
  3
  6
  1
  7
  1
  2/5
  56/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  132
  88
  28
  16
  59
  19
  78
  1
  2591/3060
  489/88
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  133
  89
  28
  16
  59
  19
  78
  1
  1273/1530
  494/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  134
  90
  28
  16
  59
  19
  78
  1
  37/45
  28/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  134
  90
  28
  16
  59
  19
  78
  1
  37/45
  28/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2)))))\""
  136
  91
  28
  17
  59
  19
  78
  1
  2471/3060
  509/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  145
  99
  28
  18
  59
  19
  78
  1
  2441/3060
  553/99
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env ((□? (x1 x2)))))\""
  147
  101
  28
  18
  59
  19
  78
  1
  2351/3060
  565/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  150
  104
  28
  18
  59
  19
  78
  1
  233/306
  291/52
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  151
  105
  28
  18
  59
  19
  78
  1
  115/153
  587/105
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env ((□? (x1 x2)))))\""
  154
  108
  28
  18
  59
  19
  78
  1
  433/612
  151/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  155
  109
  28
  18
  59
  19
  78
  1
  106/153
  610/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  155
  109
  28
  18
  59
  19
  78
  1
  106/153
  610/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  155
  109
  28
  18
  59
  19
  78
  1
  106/153
  610/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  157
  111
  28
  18
  59
  19
  78
  1
  103/153
  620/111
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  158
  112
  28
  18
  59
  19
  78
  1
  203/306
  313/56
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env ((□? (x1 x2)))))\""
  158
  112
  28
  18
  59
  19
  78
  1
  203/306
  313/56
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  158
  112
  28
  18
  59
  19
  78
  1
  203/306
  313/56
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  159
  113
  28
  18
  60
  19
  79
  1
  212/315
  632/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  183
  130
  31
  22
  60
  19
  79
  1
  83/126
  368/65
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  184
  131
  31
  22
  60
  19
  79
  1
  409/630
  742/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  185
  132
  31
  22
  60
  19
  79
  1
  403/630
  17/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  203
  147
  34
  22
  60
  19
  79
  1
  397/630
  276/49
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2)))))\""
  203
  147
  34
  22
  60
  19
  79
  1
  397/630
  276/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env ((□? (x1 x2)))))\""
  203
  147
  34
  22
  60
  19
  79
  1
  397/630
  276/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  901
  631
  178
  92
  213
  59
  272
  1
  22377049/27130950
  3617/631
  ((451/2 451/2 2) (451/2 451/2 5/2) (226 226 5/2)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  903
  632
  178
  93
  213
  59
  272
  1
  88603831/108523800
  1811/316
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  905
  634
  178
  93
  213
  59
  272
  1
  87880339/108523800
  1816/317
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  916
  645
  178
  93
  213
  59
  272
  1
  3021467/3742200
  3697/645
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  916
  645
  178
  93
  213
  59
  272
  1
  3021467/3742200
  3697/645
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  917
  646
  178
  93
  213
  59
  272
  1
  3008993/3742200
  1851/323
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  920
  649
  178
  93
  213
  59
  272
  1
  1457719/1871100
  3719/649
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  942
  663
  181
  98
  213
  59
  272
  1
  11021/14175
  3818/663
  ((11 11 0) (11 11 0) (11 11 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  942
  663
  181
  98
  213
  59
  272
  1
  11021/14175
  3818/663
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  943
  664
  181
  98
  213
  59
  272
  1
  8779/11340
  967/166
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  944
  665
  181
  98
  213
  59
  272
  1
  17369/22680
  3873/665
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  945
  666
  181
  98
  213
  59
  272
  1
  86467/113400
  431/74
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  953
  674
  181
  98
  213
  59
  272
  1
  78907/113400
  3925/674
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  955
  676
  181
  98
  213
  59
  272
  1
  78151/113400
  3981/676
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  955
  676
  181
  98
  213
  59
  272
  1
  78151/113400
  3981/676
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  955
  676
  181
  98
  213
  59
  272
  1
  78151/113400
  3981/676
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  956
  677
  181
  98
  213
  59
  272
  1
  77773/113400
  3987/677
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  1043
  737
  192
  114
  213
  59
  272
  1
  33017/48600
  4394/737
  ((121/2 121/2 1/2) (61 61 1/2) (121/2 121/2 1/2)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  1044
  738
  192
  114
  213
  59
  272
  1
  8153/12150
  4399/738
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  1047
  741
  192
  114
  213
  59
  272
  1
  31397/48600
  4417/741
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  1051
  745
  192
  114
  213
  59
  272
  1
  29777/48600
  888/149
  ((1/2 1/2 0) (1 1 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  1051
  745
  192
  114
  213
  59
  272
  1
  29777/48600
  888/149
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  1053
  747
  192
  114
  213
  59
  272
  1
  14821/24300
  1484/249
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  1053
  747
  192
  114
  213
  59
  272
  1
  14821/24300
  1484/249
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  1054
  748
  192
  114
  213
  59
  272
  1
  29237/48600
  4457/748
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  1056
  750
  192
  114
  213
  59
  272
  1
  28427/48600
  2234/375
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  1128
  813
  201
  114
  213
  59
  272
  1
  28339/48600
  4804/813
  ((173/2 173/2 1/2) (86 86 1/2) (86 86 1/2)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  1128
  813
  201
  114
  213
  59
  272
  1
  28339/48600
  4804/813
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  1128
  813
  201
  114
  213
  59
  272
  1
  28339/48600
  4804/813
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  1128
  813
  201
  114
  213
  59
  272
  1
  28339/48600
  4804/813
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  1128
  813
  201
  114
  213
  59
  272
  1
  28339/48600
  4804/813
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  1128
  813
  201
  114
  213
  59
  272
  1
  28339/48600
  4804/813
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  1128
  813
  201
  114
  213
  59
  272
  1
  28339/48600
  4804/813
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  1128
  813
  201
  114
  213
  59
  272
  1
  28339/48600
  4804/813
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  1128
  813
  201
  114
  213
  59
  272
  1
  28339/48600
  4804/813
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  1128
  813
  201
  114
  213
  59
  272
  1
  28339/48600
  4804/813
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  1128
  813
  201
  114
  213
  59
  272
  1
  28339/48600
  4804/813
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  1128
  813
  201
  114
  213
  59
  272
  1
  28339/48600
  4804/813
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  1132
  817
  201
  114
  213
  59
  272
  1
  7051/12150
  4828/817
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  1132
  817
  201
  114
  213
  59
  272
  1
  7051/12150
  4828/817
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  1134
  819
  201
  114
  213
  59
  272
  1
  697/1215
  4838/819
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  1134
  819
  201
  114
  213
  59
  272
  1
  697/1215
  4838/819
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  1134
  819
  201
  114
  213
  59
  272
  1
  697/1215
  4838/819
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  1206
  891
  201
  114
  213
  59
  272
  1
  694/1215
  5234/891
  ((46 46 0) (46 46 0) (46 46 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  1207
  892
  201
  114
  213
  59
  272
  1
  5471/9720
  1310/223
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  49
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  15
  4
  2
  9
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  48
  25
  10
  13
  14
  6
  20
  1
  25/34
  26/5
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  50
  27
  10
  13
  15
  6
  21
  1
  13/18
  140/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  38
  19
  8
  11
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  80
  45
  20
  15
  16
  6
  22
  1
  21/32
  236/45
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  82
  47
  20
  15
  17
  6
  23
  1
  11/17
  248/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  911
  638
  179
  94
  212
  59
  271
  1
  483061/613305
  3655/638
  ((543/2 543/2 7/2) (545/2 545/2 7/2) (272 272 7/2)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  930
  657
  179
  94
  212
  59
  271
  1
  768617/1226610
  418/73
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  930
  657
  179
  94
  212
  59
  271
  1
  768617/1226610
  418/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  931
  658
  179
  94
  212
  59
  271
  1
  69817/111510
  3767/658
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  931
  658
  179
  94
  212
  59
  271
  1
  69817/111510
  3767/658
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  931
  658
  179
  94
  212
  59
  271
  1
  69817/111510
  3767/658
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  931
  658
  179
  94
  212
  59
  271
  1
  69817/111510
  3767/658
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  931
  658
  179
  94
  212
  59
  271
  1
  69817/111510
  3767/658
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  935
  662
  179
  94
  212
  59
  271
  1
  589/945
  3791/662
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  935
  662
  179
  94
  212
  59
  271
  1
  589/945
  3791/662
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  937
  664
  179
  94
  212
  59
  271
  1
  33806/55755
  1901/332
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  947
  674
  179
  94
  212
  59
  271
  1
  6736/11151
  1931/337
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  947
  674
  179
  94
  212
  59
  271
  1
  6736/11151
  1931/337
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  947
  674
  179
  94
  212
  59
  271
  1
  6736/11151
  1931/337
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  981
  699
  184
  98
  212
  59
  271
  1
  14398/23895
  1340/233
  ((51/2 51/2 0) (51/2 51/2 0) (51/2 51/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  981
  699
  184
  98
  212
  59
  271
  1
  14398/23895
  1340/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  981
  699
  184
  98
  212
  59
  271
  1
  14398/23895
  1340/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  981
  699
  184
  98
  212
  59
  271
  1
  14398/23895
  1340/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  981
  699
  184
  98
  212
  59
  271
  1
  14398/23895
  1340/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  1141
  820
  203
  118
  212
  59
  271
  1
  28159/47790
  2373/410
  ((255/2 255/2 3/2) (255/2 255/2 3/2) (128 128 3/2)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  1141
  820
  203
  118
  212
  59
  271
  1
  28159/47790
  2373/410
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  1141
  820
  203
  118
  212
  59
  271
  1
  28159/47790
  2373/410
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  1147
  826
  203
  118
  212
  59
  271
  1
  27187/47790
  4889/826
  ((22 22 0) (22 22 0) (22 22 0)))
'(shuffled-cache
  1
  sat-1
  1
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  15
  8
  9
  9
  4
  13
  1
  8/11
  26/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  34
  17
  8
  9
  10
  4
  14
  1
  17/24
  88/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  36
  19
  8
  9
  11
  4
  15
  1
  9/13
  98/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  38
  21
  8
  9
  12
  4
  16
  1
  19/28
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  196
  131
  48
  17
  28
  8
  36
  1
  55/96
  690/131
  ((25 25 0) (25 25 0) (25 25 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  198
  133
  48
  17
  29
  8
  37
  1
  57/100
  100/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  234
  163
  50
  21
  31
  10
  41
  1
  65/112
  850/163
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  236
  165
  50
  21
  31
  10
  41
  1
  9/16
  172/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  281
  191
  69
  21
  39
  12
  51
  1
  86/165
  1053/191
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  865
  639
  178
  48
  180
  59
  239
  1
  8362757/11623500
  3643/639
  ((211 211 5/2) (423/2 423/2 5/2) (421/2 421/2 3)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  866
  640
  178
  48
  180
  59
  239
  1
  4123261/5811750
  57/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  867
  641
  178
  48
  180
  59
  239
  1
  8130287/11623500
  3654/641
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  965
  694
  178
  93
  206
  59
  265
  1
  5154401/7364115
  4001/694
  ((61/2 61/2 0) (61/2 61/2 0) (61/2 61/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  966
  695
  178
  93
  206
  59
  265
  1
  10179607/14728230
  4007/695
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  970
  699
  178
  93
  207
  59
  266
  1
  10127929/14728230
  4030/699
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  976
  705
  178
  93
  209
  59
  268
  1
  9990121/14728230
  1369/235
  ((8 8 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  978
  707
  178
  93
  209
  59
  268
  1
  1977353/2945646
  4117/707
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  983
  711
  178
  94
  213
  59
  272
  1
  2132387/3100680
  4141/711
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  983
  711
  178
  94
  213
  59
  272
  1
  2132387/3100680
  4141/711
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  983
  711
  178
  94
  213
  59
  272
  1
  2132387/3100680
  4141/711
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  983
  711
  178
  94
  213
  59
  272
  1
  2132387/3100680
  4141/711
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x3 x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  14
  3
  0
  11
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  81
  23
  13
  45
  7
  5
  12
  1
  7/12
  120/23
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  253
  125
  43
  85
  13
  8
  21
  1
  3/8
  679/125
  ((33 33 0) (33 33 0) (33 33 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x4) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  261
  133
  43
  85
  13
  8
  21
  1
  9/25
  719/133
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  369
  189
  92
  88
  21
  10
  31
  1
  83/264
  398/63
  ((24 24 0) (49/2 49/2 0) (24 24 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  377
  197
  92
  88
  21
  10
  31
  1
  83/272
  1242/197
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  404
  220
  94
  90
  24
  12
  36
  1
  107/312
  1357/220
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  412
  228
  94
  90
  24
  12
  36
  1
  107/320
  1397/228
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  422
  238
  94
  90
  24
  12
  36
  1
  107/328
  1447/238
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  422
  238
  94
  90
  24
  12
  36
  1
  107/328
  1447/238
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  446
  260
  94
  92
  26
  12
  38
  1
  41/120
  1557/260
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  454
  268
  94
  92
  26
  12
  38
  1
  123/368
  1597/268
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  495
  292
  103
  100
  26
  12
  38
  1
  123/368
  883/146
  ((37/2 37/2 0) (37/2 37/2 0) (19 19 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  503
  300
  103
  100
  33
  12
  45
  1
  65/188
  191/30
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  1074
  639
  257
  178
  37
  15
  52
  1
  65/196
  4250/639
  ((873/2 873/2 9/2) (438 438 9/2) (435 435 9/2)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  1084
  649
  257
  178
  45
  15
  60
  1
  16/49
  4300/649
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  1100
  665
  257
  178
  45
  15
  60
  1
  8/25
  876/133
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  1148
  713
  257
  178
  45
  15
  60
  1
  16/53
  4668/713
  ((111/2 111/2 0) (111/2 111/2 0) (111/2 111/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x4 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  9
  2
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  55
  13
  8
  34
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  55
  13
  8
  34
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  70
  19
  10
  41
  10
  7
  17
  1
  10/13
  98/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  248
  77
  62
  109
  14
  12
  26
  1
  5/8
  423/77
  ((41 41 0) (81/2 81/2 0) (81/2 81/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  535
  221
  145
  169
  20
  14
  34
  1
  12/23
  92/17
  ((213 213 3/2) (212 212 3/2) (213 213 2)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  80
  25
  13
  42
  9
  5
  14
  1
  9/14
  134/25
  ((4 4 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  84
  29
  13
  42
  9
  5
  14
  1
  3/5
  154/29
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  179
  55
  31
  93
  16
  10
  26
  1
  61/102
  58/11
  ((21 21 0) (22 22 0) (43/2 43/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  195
  71
  31
  93
  16
  10
  26
  1
  61/126
  382/71
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  295
  163
  33
  99
  24
  12
  36
  1
  109/216
  842/163
  ((26 26 0) (51/2 51/2 0) (26 26 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  307
  175
  33
  99
  24
  12
  36
  1
  109/222
  902/175
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  319
  187
  33
  99
  24
  12
  36
  1
  109/228
  962/187
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  293
  131
  60
  102
  14
  10
  24
  1
  10/19
  725/131
  ((107/2 107/2 0) (54 54 0) (107/2 107/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  294
  132
  60
  102
  14
  10
  24
  1
  1/2
  365/66
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  363
  188
  62
  113
  20
  12
  32
  1
  31/60
  505/94
  ((31/2 31/2 0) (16 16 0) (31/2 31/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  688
  370
  145
  173
  24
  14
  38
  1
  31/66
  1957/370
  ((286 286 3) (573/2 573/2 3) (287 575/2 3)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  688
  370
  145
  173
  24
  14
  38
  1
  31/66
  1957/370
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  688
  370
  145
  173
  24
  14
  38
  1
  31/66
  1957/370
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  704
  386
  145
  173
  24
  14
  38
  1
  31/68
  2037/386
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  720
  402
  145
  173
  24
  14
  38
  1
  31/70
  711/134
  ((19 19 0) (19 19 0) (19 19 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  724
  406
  145
  173
  27
  14
  41
  1
  65/144
  2153/406
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  10
  2
  17
  4
  2
  6
  1
  4/7
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  59
  35
  6
  18
  9
  4
  13
  1
  9/14
  177/35
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  61
  37
  6
  18
  9
  4
  13
  1
  3/5
  187/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  61
  37
  6
  18
  9
  4
  13
  1
  3/5
  187/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  70
  15
  13
  42
  7
  5
  12
  1
  7/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  41
  19
  2
  20
  7
  2
  9
  1
  7/13
  5
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  44
  22
  2
  20
  8
  2
  10
  1
  8/15
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  141
  51
  22
  68
  14
  8
  22
  1
  14/23
  88/17
  ((21/2 21/2 0) (11 11 0) (21/2 21/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  149
  59
  22
  68
  14
  8
  22
  1
  7/12
  304/59
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  11
  3
  0
  8
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  76
  21
  13
  42
  7
  5
  12
  1
  6/11
  110/21
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  23
  9
  3
  11
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  178
  63
  44
  71
  13
  8
  21
  1
  9/16
  338/63
  ((27 27 0) (57/2 29 0) (27 27 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  381
  163
  109
  109
  17
  10
  27
  1
  3/7
  875/163
  ((237/2 237/2 1) (237/2 119 1) (118 118 1)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  416
  181
  112
  123
  17
  10
  27
  1
  3/7
  970/181
  ((69/2 69/2 0) (34 34 0) (69/2 69/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  9
  3
  13
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  116
  39
  20
  57
  12
  7
  19
  1
  2/3
  68/13
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(shuffled-cache
  0
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  293
  131
  60
  102
  14
  10
  24
  1
  10/19
  725/131
  ((107/2 107/2 0) (107/2 107/2 0) (107/2 107/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  295
  133
  60
  102
  14
  10
  24
  1
  28/57
  105/19
  ((0 0 0) (0 0 0) (0 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  299
  134
  60
  105
  14
  10
  24
  1
  28/57
  370/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  487
  214
  144
  129
  18
  12
  30
  1
  19/42
  581/107
  ((271/2 271/2 1) (271/2 271/2 1) (136 136 1)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  491
  218
  144
  129
  21
  12
  33
  1
  41/88
  591/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  507
  234
  144
  129
  21
  12
  33
  1
  41/92
  71/13
  ((17 17 0) (17 17 0) (17 17 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  637
  359
  146
  132
  26
  14
  40
  1
  61/128
  1903/359
  ((44 44 0) (89/2 89/2 0) (44 44 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  653
  375
  146
  132
  26
  14
  40
  1
  61/132
  661/125
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x3 x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  11
  3
  19
  5
  2
  7
  1
  4/7
  56/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  267
  89
  61
  117
  13
  9
  22
  1
  25/48
  484/89
  ((52 52 1/2) (52 52 0) (105/2 105/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  283
  105
  61
  117
  13
  9
  22
  1
  25/51
  188/35
  ((3 3 0) (3 7/2 0) (3 3 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  550
  229
  144
  177
  17
  11
  28
  1
  17/44
  1237/229
  ((437/2 437/2 2) (441/2 221 2) (219 219 2)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  580
  259
  144
  177
  17
  11
  28
  1
  17/46
  1387/259
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  596
  275
  144
  177
  17
  11
  28
  1
  17/48
  1467/275
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  10
  3
  16
  5
  2
  7
  1
  5/8
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  51
  22
  6
  23
  7
  4
  11
  1
  7/11
  56/11
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  119
  74
  14
  31
  11
  6
  17
  1
  7/13
  191/37
  ((12 12 0) (12 12 0) (12 12 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  28
  10
  2
  16
  4
  2
  6
  1
  4/7
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  36
  11
  2
  23
  4
  2
  6
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  109
  44
  15
  50
  12
  7
  19
  1
  4/7
  229/44
  ((8 8 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  113
  48
  15
  50
  12
  7
  19
  1
  6/11
  83/16
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  113
  48
  15
  50
  12
  7
  19
  1
  6/11
  83/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  205
  98
  33
  74
  16
  9
  25
  1
  1/2
  505/98
  ((47/2 47/2 0) (47/2 47/2 0) (47/2 47/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  513
  264
  83
  166
  23
  14
  37
  1
  79/156
  1361/264
  ((198 198 2) (198 198 2) (397/2 397/2 2)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  513
  264
  83
  166
  23
  14
  37
  1
  79/156
  1361/264
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  5
  3
  0
  2
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  262
  103
  60
  99
  14
  9
  23
  1
  1/2
  569/103
  ((91/2 91/2 1/2) (91/2 91/2 1/2) (91/2 91/2 1/2)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x4 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  45
  22
  2
  21
  8
  2
  10
  1
  8/15
  5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  106
  49
  10
  47
  16
  7
  23
  1
  16/25
  248/49
  ((15/2 15/2 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  269
  127
  45
  97
  20
  11
  31
  1
  4/7
  657/127
  ((97/2 97/2 1/2) (97/2 97/2 1/2) (97/2 97/2 1/2)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  39
  16
  8
  15
  7
  1
  8
  1
  7/72
  43/8
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  83
  39
  17
  27
  14
  4
  18
  1
  59/160
  74/13
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  240
  97
  54
  89
  21
  11
  32
  1
  23/48
  553/97
  ((43/2 43/2 0) (43/2 43/2 0) (43/2 43/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  224
  99
  43
  82
  13
  8
  21
  1
  3/7
  541/99
  ((61/2 61/2 0) (31 31 0) (31 31 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  103
  27
  20
  56
  7
  6
  13
  1
  7/11
  16/3
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  182
  57
  43
  82
  11
  8
  19
  1
  1/2
  307/57
  ((31/2 31/2 0) (31/2 31/2 0) (31/2 31/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  184
  59
  43
  82
  13
  8
  21
  1
  9/16
  317/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  478
  175
  143
  160
  17
  11
  28
  1
  9/19
  38/7
  ((160 160 1) (160 160 1) (160 160 1)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  481
  176
  143
  162
  17
  11
  28
  1
  9/19
  955/176
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  698
  286
  246
  166
  25
  13
  38
  1
  83/216
  1054/143
  ((187/2 187/2 1/2) (93 93 1/2) (185/2 185/2 1/2)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  714
  302
  246
  166
  25
  13
  38
  1
  83/224
  1094/151
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  730
  318
  246
  166
  25
  13
  38
  1
  83/232
  1142/159
  ((37/2 37/2 0) (37/2 37/2 0) (37/2 37/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  821
  404
  248
  169
  27
  15
  42
  1
  99/272
  1357/202
  ((44 44 0) (44 44 0) (44 44 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  855
  438
  248
  169
  29
  15
  44
  1
  115/304
  1450/219
  ((8 8 0) (17/2 17/2 0) (8 8 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  903
  486
  248
  169
  29
  15
  44
  1
  115/328
  1586/243
  ((57/2 57/2 0) (57/2 57/2 0) (57/2 57/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  919
  502
  248
  169
  29
  15
  44
  1
  115/336
  1634/251
  ((37/2 37/2 0) (37/2 37/2 0) (37/2 37/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  947
  530
  248
  169
  29
  15
  44
  1
  115/344
  1704/265
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  979
  562
  248
  169
  29
  15
  44
  1
  23/72
  1792/281
  ((8 8 0) (8 8 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x4) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  152
  43
  31
  78
  7
  7
  14
  1
  7/11
  232/43
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  243
  81
  60
  102
  12
  10
  22
  1
  4/7
  443/81
  ((53/2 53/2 0) (53/2 53/2 0) (53/2 53/2 0)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  482
  161
  144
  177
  16
  12
  28
  1
  1/2
  865/161
  ((173 173 3/2) (173 173 3/2) (347/2 347/2 3/2)))
'(shuffled-cache
  1
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  676
  348
  146
  182
  23
  14
  37
  1
  15/29
  150/29
  ((78 78 1/2) (78 78 1/2) (78 78 1/2)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  10
  7
  0
  3
  4
  0
  4
  1
  4/7
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  44
  18
  3
  23
  11
  2
  13
  1
  5/7
  91/18
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  79
  42
  8
  29
  17
  4
  21
  1
  31/48
  36/7
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  210
  120
  19
  71
  23
  6
  29
  1
  7/12
  209/40
  ((51/2 51/2 0) (51/2 51/2 0) (25 25 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  211
  121
  19
  71
  23
  6
  29
  1
  21/38
  632/121
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  426
  227
  61
  138
  35
  11
  46
  1
  107/156
  1193/227
  ((261/2 261/2 1) (130 130 1) (130 130 1)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  12
  4
  16
  1
  3/4
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env ((□? (f)))))\""
  50
  22
  8
  20
  14
  4
  18
  1
  3/4
  115/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  57
  26
  8
  23
  14
  4
  18
  1
  12/17
  135/26
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  58
  27
  8
  23
  15
  4
  19
  1
  13/18
  140/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  132
  58
  19
  55
  24
  9
  33
  1
  46/63
  151/29
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  134
  60
  19
  55
  25
  9
  34
  1
  95/132
  157/30
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  42
  14
  8
  20
  9
  4
  13
  1
  17/22
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  119
  40
  20
  59
  13
  6
  19
  1
  17/26
  209/40
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  131
  52
  20
  59
  13
  6
  19
  1
  17/28
  269/52
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 2 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  133
  54
  20
  59
  14
  6
  20
  1
  3/5
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  35
  19
  8
  8
  11
  1
  12
  1
  13/32
  101/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  66
  34
  17
  15
  16
  3
  19
  1
  79/152
  195/34
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  68
  35
  17
  16
  16
  3
  19
  1
  79/160
  40/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  21
  8
  18
  13
  4
  17
  1
  11/15
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env ((□? (s)))))\""
  49
  22
  8
  19
  13
  4
  17
  1
  11/16
  117/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  52
  25
  8
  19
  13
  4
  17
  1
  11/19
  132/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  67
  31
  10
  26
  15
  6
  21
  1
  13/22
  162/31
  ((1 1 0) (1 1 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  69
  33
  10
  26
  15
  6
  21
  1
  13/23
  172/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  106
  47
  19
  40
  20
  7
  27
  1
  13/19
  249/47
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  108
  49
  19
  40
  21
  7
  28
  1
  27/40
  37/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  110
  51
  19
  40
  22
  7
  29
  1
  2/3
  269/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  111
  52
  19
  40
  22
  7
  29
  1
  9/14
  137/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  111
  52
  19
  40
  22
  7
  29
  1
  9/14
  137/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  111
  52
  19
  40
  22
  7
  29
  1
  9/14
  137/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  290
  136
  48
  106
  32
  11
  43
  1
  97/162
  721/136
  ((47 47 0) (47 47 0) (47 47 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  298
  144
  48
  106
  36
  11
  47
  1
  109/186
  767/144
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  779
  422
  132
  225
  40
  13
  53
  1
  109/198
  2239/422
  ((861/2 431 4) (845/2 845/2 7/2) (421 843/2 7/2)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  114
  51
  19
  44
  21
  6
  27
  1
  13/21
  271/51
  ((19/2 19/2 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  116
  53
  19
  44
  21
  6
  27
  1
  37/63
  281/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  49
  17
  11
  21
  10
  6
  16
  1
  17/24
  84/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  51
  19
  11
  21
  11
  6
  17
  1
  9/13
  96/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  53
  21
  11
  21
  12
  6
  18
  1
  19/28
  106/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  122
  46
  23
  53
  21
  12
  33
  1
  71/102
  237/46
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  98
  43
  19
  36
  17
  6
  23
  1
  11/17
  227/43
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  104
  49
  19
  36
  20
  6
  26
  1
  5/8
  261/49
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  104
  49
  19
  36
  20
  6
  26
  1
  5/8
  261/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  106
  51
  19
  36
  21
  6
  27
  1
  13/21
  271/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  108
  53
  19
  36
  22
  6
  28
  1
  27/44
  283/53
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  110
  55
  19
  36
  23
  6
  29
  1
  14/23
  293/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  112
  57
  19
  36
  24
  6
  30
  1
  29/48
  101/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  281
  135
  48
  98
  29
  8
  37
  1
  5/9
  716/135
  ((93/2 93/2 0) (47 47 0) (47 47 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  283
  137
  48
  98
  30
  8
  38
  1
  31/56
  726/137
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  286
  140
  48
  98
  33
  8
  41
  1
  37/62
  741/140
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  288
  142
  48
  98
  35
  8
  43
  1
  41/66
  751/142
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  507
  252
  151
  104
  43
  10
  53
  1
  175/328
  68/9
  ((193/2 193/2 1/2) (96 96 1/2) (96 96 1/2)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  535
  280
  151
  104
  43
  10
  53
  1
  25/48
  73/10
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  535
  280
  151
  104
  43
  10
  53
  1
  25/48
  73/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  898
  558
  235
  105
  47
  12
  59
  1
  175/352
  586/93
  ((559/2 280 2) (559/2 280 2) (279 279 2)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ((□? (s)))))\""
  900
  559
  235
  106
  47
  12
  59
  1
  35/72
  3521/559
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  901
  560
  235
  106
  47
  12
  59
  1
  175/368
  1763/280
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  903
  562
  235
  106
  48
  12
  60
  1
  179/376
  1769/281
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  11
  7
  2
  2
  3
  1
  4
  1
  3/8
  33/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  49
  21
  11
  17
  12
  6
  18
  1
  19/28
  5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  51
  23
  11
  17
  13
  6
  19
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  53
  25
  11
  17
  14
  6
  20
  1
  21/32
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  63
  29
  11
  23
  14
  6
  20
  1
  21/34
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  36
  11
  3
  22
  5
  2
  7
  1
  5/9
  56/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  134
  49
  20
  65
  19
  7
  26
  1
  2/3
  256/49
  ((35/2 35/2 0) (35/2 35/2 0) (35/2 35/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  136
  51
  20
  65
  20
  7
  27
  1
  25/38
  266/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  138
  53
  20
  65
  21
  7
  28
  1
  13/20
  276/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  138
  53
  20
  65
  21
  7
  28
  1
  13/20
  276/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  8
  6
  0
  2
  4
  0
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  10
  8
  0
  2
  4
  0
  4
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  94
  39
  20
  35
  12
  6
  18
  1
  5/8
  68/13
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  9
  3
  9
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  22
  10
  3
  9
  6
  2
  8
  1
  3/4
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  12
  4
  16
  1
  3/4
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  100
  43
  19
  38
  17
  6
  23
  1
  11/17
  227/43
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  102
  45
  19
  38
  19
  6
  25
  1
  13/19
  79/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  116
  54
  23
  39
  24
  9
  33
  1
  91/138
  139/27
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  120
  58
  23
  39
  26
  9
  35
  1
  97/150
  150/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  126
  62
  23
  41
  26
  9
  35
  1
  97/156
  160/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  309
  147
  53
  109
  39
  15
  54
  1
  1129/1740
  767/147
  ((46 46 0) (46 46 0) (46 46 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  331
  153
  54
  124
  39
  15
  54
  1
  223/348
  266/51
  ((10 10 0) (10 10 0) (10 10 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  333
  155
  54
  124
  41
  15
  56
  1
  247/372
  808/155
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  335
  157
  54
  124
  42
  15
  57
  1
  253/384
  818/157
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  108
  49
  19
  40
  21
  7
  28
  1
  27/40
  37/7
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  111
  52
  19
  40
  23
  7
  30
  1
  85/126
  137/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  15
  8
  16
  9
  4
  13
  1
  8/11
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ((□? (s)))))\""
  41
  16
  8
  17
  9
  4
  13
  1
  2/3
  83/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  49
  20
  8
  21
  9
  4
  13
  1
  8/13
  103/20
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  57
  25
  11
  21
  12
  6
  18
  1
  19/30
  124/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  124
  56
  23
  45
  19
  10
  29
  1
  67/108
  285/56
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  140
  62
  24
  54
  19
  10
  29
  1
  67/108
  158/31
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  142
  64
  24
  54
  20
  10
  30
  1
  35/57
  41/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  53
  24
  8
  21
  13
  4
  17
  1
  11/18
  125/24
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  40
  14
  8
  18
  9
  4
  13
  1
  17/22
  73/14
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  40
  14
  8
  18
  9
  4
  13
  1
  17/22
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  49
  18
  8
  23
  9
  4
  13
  1
  17/24
  31/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  103
  48
  31
  24
  17
  6
  23
  1
  79/160
  151/24
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  107
  52
  31
  24
  17
  6
  23
  1
  79/168
  161/26
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  113
  58
  31
  24
  21
  6
  27
  1
  103/200
  177/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  122
  64
  33
  25
  23
  8
  31
  1
  17/32
  6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  253
  132
  70
  51
  28
  10
  38
  1
  123/248
  289/44
  ((81/2 81/2 1/2) (41 41 1/2) (41 41 1/2)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  255
  134
  70
  51
  29
  10
  39
  1
  127/256
  879/134
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  578
  320
  153
  105
  34
  12
  46
  1
  131/280
  7
  ((381/2 381/2 3/2) (191 191 3/2) (190 190 3/2)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  580
  322
  153
  105
  36
  12
  48
  1
  147/296
  1125/161
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env ((□? (s)))))\""
  582
  323
  153
  106
  36
  12
  48
  1
  147/304
  2255/323
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  583
  324
  153
  106
  37
  12
  49
  1
  155/312
  565/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  15
  8
  20
  8
  4
  12
  1
  13/20
  26/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  17
  8
  20
  9
  4
  13
  1
  7/11
  88/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  120
  49
  19
  52
  22
  9
  31
  1
  13/19
  37/7
  ((8 8 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  313
  141
  48
  124
  38
  15
  53
  1
  317/522
  250/47
  ((103/2 103/2 1/2) (103/2 103/2 1/2) (103/2 103/2 1/2)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  315
  143
  48
  124
  39
  15
  54
  1
  163/270
  760/143
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  318
  145
  48
  125
  39
  15
  54
  1
  163/288
  154/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  799
  423
  132
  244
  43
  17
  60
  1
  1639/3060
  2242/423
  ((428 428 7/2) (430 430 7/2) (429 429 7/2)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  100
  43
  19
  38
  17
  6
  23
  1
  11/17
  227/43
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env ((□? (f)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  42
  16
  8
  18
  10
  4
  14
  1
  3/4
  83/16
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  45
  18
  8
  19
  10
  4
  14
  1
  9/13
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  9
  3
  17
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  86
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  33
  16
  8
  9
  7
  1
  8
  1
  7/72
  43/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  100
  45
  31
  24
  17
  6
  23
  1
  75/152
  287/45
  ((9 9 0) (9 9 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  104
  49
  31
  24
  17
  6
  23
  1
  15/32
  307/49
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1782
  1223
  410
  149
  662
  179
  841
  1
  35933/60795
  7424/1223
  ((693/2 693/2 15/2) (347 347 15/2) (695/2 695/2 8)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1788
  1229
  410
  149
  664
  179
  843
  1
  71971/121905
  7454/1229
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1792
  1233
  410
  149
  665
  179
  844
  1
  288199/488880
  7474/1233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  1803
  1241
  413
  149
  671
  182
  853
  1
  290089/491400
  7537/1241
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1803
  1241
  413
  149
  671
  182
  853
  1
  290089/491400
  7537/1241
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1803
  1241
  413
  149
  671
  182
  853
  1
  290089/491400
  7537/1241
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  1803
  1241
  413
  149
  671
  182
  853
  1
  290089/491400
  7537/1241
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  1803
  1241
  413
  149
  671
  182
  853
  1
  290089/491400
  7537/1241
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  1814
  1251
  413
  150
  677
  182
  859
  1
  292189/495180
  7580/1251
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1814
  1251
  413
  150
  677
  182
  859
  1
  292189/495180
  7580/1251
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  1816
  1253
  413
  150
  678
  182
  860
  1
  292819/496440
  7590/1253
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1830
  1267
  413
  150
  678
  182
  860
  1
  145307/248220
  7682/1267
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  1830
  1267
  413
  150
  678
  182
  860
  1
  145307/248220
  7682/1267
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1830
  1267
  413
  150
  678
  182
  860
  1
  145307/248220
  7682/1267
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  1833
  1270
  413
  150
  680
  182
  862
  1
  145727/248850
  3849/635
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? (ma)))))\""
  1835
  1271
  413
  151
  680
  182
  862
  1
  72706/124425
  7703/1271
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1835
  1271
  413
  151
  680
  182
  862
  1
  72706/124425
  7703/1271
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1847
  1283
  413
  151
  684
  182
  866
  1
  72916/125055
  7772/1283
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  1861
  1296
  413
  152
  696
  182
  878
  1
  18754/31815
  3913/648
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  1879
  1314
  413
  152
  696
  182
  878
  1
  18649/31815
  3965/657
  ((18 18 0) (18 18 0) (18 18 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  1880
  1315
  413
  152
  696
  182
  878
  1
  18649/31815
  7936/1315
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1949
  1371
  424
  154
  724
  186
  910
  1
  77221/131355
  2778/457
  ((25 25 0) (25 25 0) (25 25 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  1951
  1372
  424
  155
  724
  186
  910
  1
  154127/262710
  8349/1372
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1960
  1381
  424
  155
  724
  186
  910
  1
  153497/262710
  8400/1381
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  1990
  1411
  424
  155
  747
  186
  933
  1
  611783/1050840
  8573/1411
  ((17 17 0) (17 17 0) (17 17 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  1990
  1411
  424
  155
  747
  186
  933
  1
  611783/1050840
  8573/1411
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1990
  1411
  424
  155
  747
  186
  933
  1
  611783/1050840
  8573/1411
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  1992
  1413
  424
  155
  748
  186
  934
  1
  610943/1050840
  2861/471
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  1992
  1413
  424
  155
  748
  186
  934
  1
  610943/1050840
  2861/471
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  2006
  1425
  424
  157
  748
  186
  934
  1
  610103/1050840
  8681/1425
  ((25 25 0) (25 25 0) (25 25 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  2037
  1451
  428
  158
  764
  189
  953
  1
  623543/1076040
  8819/1451
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  2041
  1455
  428
  158
  764
  189
  953
  1
  623291/1076040
  8852/1455
  ((8 8 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  2053
  1467
  428
  158
  768
  189
  957
  1
  125263/216216
  8933/1467
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2053
  1467
  428
  158
  768
  189
  957
  1
  125263/216216
  8933/1467
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env ((□? (co)))))\""
  2055
  1468
  428
  159
  768
  189
  957
  1
  125011/216216
  4469/734
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2055
  1468
  428
  159
  768
  189
  957
  1
  125011/216216
  4469/734
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  2055
  1468
  428
  159
  768
  189
  957
  1
  125011/216216
  4469/734
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  2058
  1470
  428
  160
  768
  189
  957
  1
  124759/216216
  4474/735
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  2060
  1472
  428
  160
  768
  189
  957
  1
  124255/216216
  8959/1472
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  2061
  1473
  428
  160
  768
  189
  957
  1
  124255/216216
  2988/491
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  2061
  1473
  428
  160
  768
  189
  957
  1
  124255/216216
  2988/491
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  2061
  1473
  428
  160
  768
  189
  957
  1
  124255/216216
  2988/491
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  2062
  1474
  428
  160
  768
  189
  957
  1
  2389/4158
  8969/1474
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2062
  1474
  428
  160
  768
  189
  957
  1
  2389/4158
  8969/1474
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  2083
  1494
  428
  161
  778
  189
  967
  1
  62267/108864
  9173/1494
  ((39/2 39/2 0) (39/2 39/2 0) (39/2 39/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  2085
  1495
  428
  162
  778
  189
  967
  1
  15551/27216
  9182/1495
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  2087
  1497
  428
  162
  779
  189
  968
  1
  62141/108864
  9194/1497
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  2087
  1497
  428
  162
  779
  189
  968
  1
  62141/108864
  9194/1497
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  2099
  1509
  428
  162
  787
  189
  976
  1
  62813/109872
  3085/503
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  2103
  1513
  428
  162
  787
  189
  976
  1
  62561/109872
  9273/1513
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  2106
  1516
  428
  162
  789
  189
  978
  1
  62729/110124
  9285/1516
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo)))))\""
  2110
  1520
  428
  162
  792
  189
  981
  1
  31459/55188
  1861/304
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2110
  1520
  428
  162
  792
  189
  981
  1
  31459/55188
  1861/304
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2110
  1520
  428
  162
  792
  189
  981
  1
  31459/55188
  1861/304
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  2110
  1520
  428
  162
  792
  189
  981
  1
  31459/55188
  1861/304
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  2114
  1524
  428
  162
  792
  189
  981
  1
  408463/717444
  9325/1524
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  2117
  1527
  428
  162
  792
  189
  981
  1
  203003/358722
  9338/1527
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ((□? (i)))))\""
  2119
  1528
  428
  163
  792
  189
  981
  1
  203003/359541
  9343/1528
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  2119
  1528
  428
  163
  792
  189
  981
  1
  203003/359541
  9343/1528
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  2131
  1540
  428
  163
  798
  189
  987
  1
  201365/359541
  9391/1540
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  2131
  1540
  428
  163
  798
  189
  987
  1
  201365/359541
  9391/1540
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env ((□? (h₀ h₁)))))\""
  2131
  1540
  428
  163
  798
  189
  987
  1
  201365/359541
  9391/1540
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  2131
  1540
  428
  163
  798
  189
  987
  1
  201365/359541
  9391/1540
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  2136
  1545
  428
  163
  798
  189
  987
  1
  398635/719082
  9418/1545
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  2138
  1547
  428
  163
  798
  189
  987
  1
  198908/359541
  9432/1547
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  2141
  1550
  428
  163
  800
  189
  989
  1
  794813/1438164
  61/10
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2142
  1551
  428
  163
  800
  189
  989
  1
  793175/1438164
  860/141
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2148
  1557
  428
  163
  802
  189
  991
  1
  794267/1441440
  9499/1557
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2148
  1557
  428
  163
  802
  189
  991
  1
  794267/1441440
  9499/1557
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2149
  1558
  428
  163
  802
  189
  991
  1
  792629/1441440
  4752/779
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  2157
  1566
  428
  163
  808
  189
  997
  1
  797543/1447992
  4772/783
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  2157
  1566
  428
  163
  808
  189
  997
  1
  797543/1447992
  4772/783
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2157
  1566
  428
  163
  808
  189
  997
  1
  797543/1447992
  4772/783
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  2157
  1566
  428
  163
  808
  189
  997
  1
  797543/1447992
  4772/783
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  2165
  1574
  428
  163
  808
  189
  997
  1
  797543/1447992
  4794/787
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? (ma)))))\""
  2165
  1574
  428
  163
  808
  189
  997
  1
  797543/1447992
  4794/787
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  2165
  1574
  428
  163
  808
  189
  997
  1
  797543/1447992
  4794/787
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  2165
  1574
  428
  163
  808
  189
  997
  1
  797543/1447992
  4794/787
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2165
  1574
  428
  163
  808
  189
  997
  1
  797543/1447992
  4794/787
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  2165
  1574
  428
  163
  808
  189
  997
  1
  797543/1447992
  4794/787
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2165
  1574
  428
  163
  808
  189
  997
  1
  797543/1447992
  4794/787
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  2167
  1575
  428
  164
  808
  189
  997
  1
  795905/1447992
  9599/1575
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  2167
  1575
  428
  164
  808
  189
  997
  1
  795905/1447992
  9599/1575
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  2205
  1609
  428
  168
  832
  189
  1021
  1
  800819/1461096
  9781/1609
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  2205
  1609
  428
  168
  832
  189
  1021
  1
  800819/1461096
  9781/1609
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  2205
  1609
  428
  168
  832
  189
  1021
  1
  800819/1461096
  9781/1609
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2205
  1609
  428
  168
  832
  189
  1021
  1
  800819/1461096
  9781/1609
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  2210
  1614
  428
  168
  832
  189
  1021
  1
  800819/1461096
  1635/269
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2214
  1618
  428
  168
  833
  189
  1022
  1
  400819/732186
  9835/1618
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  2217
  1621
  428
  168
  835
  189
  1024
  1
  401911/733824
  9850/1621
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  2217
  1621
  428
  168
  835
  189
  1024
  1
  401911/733824
  9850/1621
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  2222
  1625
  428
  169
  838
  189
  1027
  1
  404641/737100
  1974/325
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  2222
  1625
  428
  169
  838
  189
  1027
  1
  404641/737100
  1974/325
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  2222
  1625
  428
  169
  838
  189
  1027
  1
  404641/737100
  1974/325
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  2226
  1629
  428
  169
  838
  189
  1027
  1
  404137/737100
  9890/1629
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env ((□? (r x)) (□? (f x)))))\""
  2227
  1630
  428
  169
  838
  189
  1027
  1
  2020139/3685500
  1979/326
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  2227
  1630
  428
  169
  838
  189
  1027
  1
  2020139/3685500
  1979/326
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  2227
  1630
  428
  169
  838
  189
  1027
  1
  2020139/3685500
  1979/326
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2227
  1630
  428
  169
  838
  189
  1027
  1
  2020139/3685500
  1979/326
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  2235
  1638
  428
  169
  838
  189
  1027
  1
  4027993/7371000
  9931/1638
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  2243
  1646
  428
  169
  844
  189
  1033
  1
  4052563/7403760
  9967/1646
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  2243
  1646
  428
  169
  844
  189
  1033
  1
  4052563/7403760
  9967/1646
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2243
  1646
  428
  169
  844
  189
  1033
  1
  4052563/7403760
  9967/1646
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  2287
  1675
  443
  169
  846
  193
  1039
  1
  8125601/14873040
  2031/335
  ((23/2 23/2 0) (23/2 23/2 0) (23/2 23/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  2287
  1675
  443
  169
  846
  193
  1039
  1
  8125601/14873040
  2031/335
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app X) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  2287
  1675
  443
  169
  846
  193
  1039
  1
  8125601/14873040
  2031/335
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2287
  1675
  443
  169
  846
  193
  1039
  1
  8125601/14873040
  2031/335
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2287
  1675
  443
  169
  846
  193
  1039
  1
  8125601/14873040
  2031/335
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env ((□? (bo)) (□? (ma)))))\""
  2292
  1680
  443
  169
  846
  193
  1039
  1
  4052563/7436520
  509/84
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  2306
  1693
  443
  170
  852
  193
  1045
  1
  4055293/7469280
  10246/1693
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  2314
  1701
  443
  170
  852
  193
  1045
  1
  4045213/7469280
  10289/1701
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2314
  1701
  443
  170
  852
  193
  1045
  1
  4045213/7469280
  10289/1701
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  2314
  1701
  443
  170
  852
  193
  1045
  1
  4045213/7469280
  10289/1701
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2314
  1701
  443
  170
  852
  193
  1045
  1
  4045213/7469280
  10289/1701
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  2314
  1701
  443
  170
  852
  193
  1045
  1
  4045213/7469280
  10289/1701
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2314
  1701
  443
  170
  852
  193
  1045
  1
  4045213/7469280
  10289/1701
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env ((□? (f xs)))))\""
  2314
  1701
  443
  170
  852
  193
  1045
  1
  4045213/7469280
  10289/1701
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  2322
  1709
  443
  170
  858
  193
  1051
  1
  4069783/7502040
  10325/1709
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  2327
  1714
  443
  170
  858
  193
  1051
  1
  4062763/7502040
  5177/857
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2327
  1714
  443
  170
  858
  193
  1051
  1
  4062763/7502040
  5177/857
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? (bo this-play that-play)))))\""
  2327
  1714
  443
  170
  858
  193
  1051
  1
  4062763/7502040
  5177/857
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  2327
  1714
  443
  170
  858
  193
  1051
  1
  4062763/7502040
  5177/857
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2327
  1714
  443
  170
  858
  193
  1051
  1
  4062763/7502040
  5177/857
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  2339
  1724
  445
  170
  858
  193
  1051
  1
  101494/187551
  5217/862
  ((20 20 0) (20 20 0) (20 20 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2342
  1727
  445
  170
  858
  193
  1051
  1
  202715/375102
  10449/1727
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  2342
  1727
  445
  170
  858
  193
  1051
  1
  202715/375102
  10449/1727
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  2342
  1727
  445
  170
  858
  193
  1051
  1
  202715/375102
  10449/1727
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  2342
  1727
  445
  170
  858
  193
  1051
  1
  202715/375102
  10449/1727
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env ((□? (h)))))\""
  2345
  1730
  445
  170
  860
  193
  1053
  1
  203261/375921
  5232/865
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2345
  1730
  445
  170
  860
  193
  1053
  1
  203261/375921
  5232/865
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  2347
  1732
  445
  170
  860
  193
  1053
  1
  202442/375921
  5237/866
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  2348
  1733
  445
  170
  860
  193
  1053
  1
  101221/188370
  10479/1733
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2348
  1733
  445
  170
  860
  193
  1053
  1
  101221/188370
  10479/1733
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  2351
  1736
  445
  170
  862
  193
  1055
  1
  202988/377559
  10491/1736
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  2351
  1736
  445
  170
  862
  193
  1055
  1
  202988/377559
  10491/1736
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2355
  1740
  445
  170
  863
  193
  1056
  1
  812771/1513512
  10511/1740
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  2359
  1744
  445
  170
  863
  193
  1056
  1
  809495/1513512
  2639/436
  ((17 17 0) (17 17 0) (17 17 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  2362
  1747
  445
  170
  865
  193
  1058
  1
  18379/34398
  10574/1747
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  2365
  1750
  445
  170
  867
  193
  1060
  1
  202715/379197
  10589/1750
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  2365
  1750
  445
  170
  867
  193
  1060
  1
  202715/379197
  10589/1750
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma)))\n  (env ((□? (bo)) (□? (ma)))))\""
  2365
  1750
  445
  170
  867
  193
  1060
  1
  202715/379197
  10589/1750
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  2365
  1750
  445
  170
  867
  193
  1060
  1
  202715/379197
  10589/1750
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2365
  1750
  445
  170
  867
  193
  1060
  1
  202715/379197
  10589/1750
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2365
  1750
  445
  170
  867
  193
  1060
  1
  202715/379197
  10589/1750
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b)))))\""
  2365
  1750
  445
  170
  867
  193
  1060
  1
  202715/379197
  10589/1750
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (b)))))\""
  2368
  1753
  445
  170
  869
  193
  1062
  1
  810041/1516788
  10604/1753
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  2371
  1756
  445
  170
  871
  193
  1064
  1
  812225/1520064
  2654/439
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  2378
  1763
  445
  170
  876
  193
  1069
  1
  816593/1526616
  10644/1763
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  2381
  1766
  445
  170
  878
  193
  1071
  1
  818777/1529892
  10659/1766
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  2381
  1766
  445
  170
  878
  193
  1071
  1
  818777/1529892
  10659/1766
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env ((□? (b m)))))\""
  2385
  1770
  445
  170
  881
  193
  1074
  1
  410617/766584
  181/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  2389
  1774
  445
  170
  884
  193
  1077
  1
  823691/1536444
  5351/887
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app win) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2389
  1774
  445
  170
  884
  193
  1077
  1
  823691/1536444
  5351/887
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  2462
  1824
  467
  171
  915
  208
  1123
  1
  1716997/3138408
  145/24
  ((14 14 0) (14 14 0) (14 14 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  2481
  1842
  467
  172
  928
  208
  1136
  1
  1758493/3190824
  11099/1842
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  2481
  1842
  467
  172
  928
  208
  1136
  1
  1758493/3190824
  11099/1842
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  2481
  1842
  467
  172
  928
  208
  1136
  1
  1758493/3190824
  11099/1842
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  2485
  1846
  467
  172
  928
  208
  1136
  1
  1756477/3190824
  11131/1846
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  2485
  1846
  467
  172
  928
  208
  1136
  1
  1756477/3190824
  11131/1846
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  2485
  1846
  467
  172
  928
  208
  1136
  1
  1756477/3190824
  11131/1846
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  2486
  1847
  467
  172
  928
  208
  1136
  1
  8775833/15954120
  11137/1847
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  2502
  1863
  467
  172
  942
  208
  1150
  1
  8833163/16019640
  3739/621
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-horizon\")\n  (env ((□? (move-horizon-v)))))\""
  2507
  1868
  467
  172
  946
  208
  1154
  1
  8828483/16019640
  5621/934
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  2509
  1870
  467
  172
  947
  208
  1155
  1
  8844863/16052400
  5629/935
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  2509
  1870
  467
  172
  947
  208
  1155
  1
  8844863/16052400
  5629/935
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  2517
  1876
  467
  174
  953
  208
  1161
  1
  9025043/16216200
  11285/1876
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  2517
  1876
  467
  174
  953
  208
  1161
  1
  9025043/16216200
  11285/1876
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  2523
  1882
  467
  174
  956
  208
  1164
  1
  9074183/16314480
  11311/1882
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  2523
  1882
  467
  174
  956
  208
  1164
  1
  9074183/16314480
  11311/1882
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  2523
  1882
  467
  174
  956
  208
  1164
  1
  9074183/16314480
  11311/1882
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  2523
  1882
  467
  174
  956
  208
  1164
  1
  9074183/16314480
  11311/1882
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  2524
  1883
  467
  174
  956
  208
  1164
  1
  9057803/16314480
  11316/1883
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2524
  1883
  467
  174
  956
  208
  1164
  1
  9057803/16314480
  11316/1883
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  2524
  1883
  467
  174
  956
  208
  1164
  1
  9057803/16314480
  11316/1883
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> empty-board <-) player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  2524
  1883
  467
  174
  956
  208
  1164
  1
  9057803/16314480
  11316/1883
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2524
  1883
  467
  174
  956
  208
  1164
  1
  9057803/16314480
  11316/1883
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  2524
  1883
  467
  174
  956
  208
  1164
  1
  9057803/16314480
  11316/1883
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  2532
  1891
  467
  174
  956
  208
  1164
  1
  9005387/16314480
  11367/1891
  ((39/2 39/2 0) (39/2 39/2 0) (39/2 39/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  2532
  1891
  467
  174
  956
  208
  1164
  1
  9005387/16314480
  11367/1891
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env ((□? (bo this-play that-play)))))\""
  2532
  1891
  467
  174
  956
  208
  1164
  1
  9005387/16314480
  11367/1891
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env ((□? (f xs)))))\""
  2536
  1895
  467
  174
  959
  208
  1167
  1
  9029957/16347240
  11387/1895
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2540
  1899
  467
  174
  960
  208
  1168
  1
  9038147/16380000
  1267/211
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  2540
  1899
  467
  174
  960
  208
  1168
  1
  9038147/16380000
  1267/211
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  2540
  1899
  467
  174
  960
  208
  1168
  1
  9038147/16380000
  1267/211
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  2540
  1899
  467
  174
  960
  208
  1168
  1
  9038147/16380000
  1267/211
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  2544
  1903
  467
  174
  960
  208
  1168
  1
  4512931/8190000
  11427/1903
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  2544
  1903
  467
  174
  960
  208
  1168
  1
  4512931/8190000
  11427/1903
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  2545
  1904
  467
  174
  960
  208
  1168
  1
  1127209/2047500
  2859/476
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  2545
  1904
  467
  174
  960
  208
  1168
  1
  1127209/2047500
  2859/476
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  2550
  1909
  467
  174
  964
  208
  1172
  1
  281656/511875
  11467/1909
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  2551
  1910
  467
  174
  964
  208
  1172
  1
  2249153/4095000
  5736/955
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  2551
  1910
  467
  174
  964
  208
  1172
  1
  2249153/4095000
  5736/955
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2551
  1910
  467
  174
  964
  208
  1172
  1
  2249153/4095000
  5736/955
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2559
  1918
  467
  174
  966
  208
  1174
  1
  563312/1027845
  5756/959
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  2561
  1920
  467
  174
  966
  208
  1174
  1
  1122529/2055690
  6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  2563
  1922
  467
  174
  968
  208
  1176
  1
  1130719/2063880
  5764/961
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  2563
  1922
  467
  174
  968
  208
  1176
  1
  1130719/2063880
  5764/961
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  2563
  1922
  467
  174
  968
  208
  1176
  1
  1130719/2063880
  5764/961
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env ((□? (h)))))\""
  2566
  1925
  467
  174
  970
  208
  1178
  1
  1133449/2067975
  1649/275
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2566
  1925
  467
  174
  970
  208
  1178
  1
  1133449/2067975
  1649/275
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  2566
  1925
  467
  174
  970
  208
  1178
  1
  1133449/2067975
  1649/275
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2566
  1925
  467
  174
  970
  208
  1178
  1
  1133449/2067975
  1649/275
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  2569
  1928
  467
  174
  972
  208
  1180
  1
  103289/188370
  5779/964
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2569
  1928
  467
  174
  972
  208
  1180
  1
  103289/188370
  5779/964
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2569
  1928
  467
  174
  972
  208
  1180
  1
  103289/188370
  5779/964
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  2569
  1928
  467
  174
  972
  208
  1180
  1
  103289/188370
  5779/964
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  2569
  1928
  467
  174
  972
  208
  1180
  1
  103289/188370
  5779/964
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  2577
  1936
  467
  174
  972
  208
  1180
  1
  4532431/8288280
  527/88
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  2577
  1936
  467
  174
  972
  208
  1180
  1
  4532431/8288280
  527/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env ((□? (f acc l)))))\""
  2577
  1936
  467
  174
  972
  208
  1180
  1
  4532431/8288280
  527/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  2577
  1936
  467
  174
  972
  208
  1180
  1
  4532431/8288280
  527/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2577
  1936
  467
  174
  972
  208
  1180
  1
  4532431/8288280
  527/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2578
  1937
  467
  174
  972
  208
  1180
  1
  4524241/8288280
  11599/1937
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  2578
  1937
  467
  174
  972
  208
  1180
  1
  4524241/8288280
  11599/1937
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  2578
  1937
  467
  174
  972
  208
  1180
  1
  4524241/8288280
  11599/1937
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2578
  1937
  467
  174
  972
  208
  1180
  1
  4524241/8288280
  11599/1937
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2578
  1937
  467
  174
  972
  208
  1180
  1
  4524241/8288280
  11599/1937
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  2579
  1938
  467
  174
  972
  208
  1180
  1
  4516051/8288280
  5804/969
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  2579
  1938
  467
  174
  972
  208
  1180
  1
  4516051/8288280
  5804/969
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  2582
  1941
  467
  174
  972
  208
  1180
  1
  501379/920920
  11626/1941
  ((5/2 5/2 0) (3 3 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  2587
  1946
  467
  174
  972
  208
  1180
  1
  90953/167440
  11651/1946
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2587
  1946
  467
  174
  972
  208
  1180
  1
  90953/167440
  11651/1946
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env ((□? ()))))\""
  2587
  1946
  467
  174
  972
  208
  1180
  1
  90953/167440
  11651/1946
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  2587
  1946
  467
  174
  972
  208
  1180
  1
  90953/167440
  11651/1946
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  2588
  1947
  467
  174
  972
  208
  1180
  1
  2997809/5525520
  1060/177
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env ((□? (bo)) (□? (ma)))))\""
  2588
  1947
  467
  174
  972
  208
  1180
  1
  2997809/5525520
  1060/177
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo this-play that-play)))))\""
  2591
  1950
  467
  174
  974
  208
  1182
  1
  3005089/5536440
  467/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  2591
  1950
  467
  174
  974
  208
  1182
  1
  3005089/5536440
  467/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env ((□? (b co m)))))\""
  2591
  1950
  467
  174
  974
  208
  1182
  1
  3005089/5536440
  467/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  2591
  1950
  467
  174
  974
  208
  1182
  1
  3005089/5536440
  467/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  2595
  1954
  467
  174
  976
  208
  1184
  1
  3016009/5558280
  11693/1954
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  2596
  1955
  467
  174
  976
  208
  1184
  1
  3013279/5558280
  11702/1955
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  2601
  1960
  467
  174
  979
  208
  1187
  1
  3007819/5558280
  2931/490
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  2604
  1963
  467
  174
  981
  208
  1189
  1
  335011/618800
  11736/1963
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  2604
  1963
  467
  174
  981
  208
  1189
  1
  335011/618800
  11736/1963
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  2604
  1963
  467
  174
  981
  208
  1189
  1
  335011/618800
  11736/1963
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  2604
  1963
  467
  174
  981
  208
  1189
  1
  335011/618800
  11736/1963
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  2606
  1965
  467
  174
  981
  208
  1189
  1
  1003213/1856400
  11746/1965
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2612
  1971
  467
  174
  983
  208
  1191
  1
  3013279/5580120
  11776/1971
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  2612
  1971
  467
  174
  983
  208
  1191
  1
  3013279/5580120
  11776/1971
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked? <-) (app b (app coord r c)))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  2612
  1971
  467
  174
  983
  208
  1191
  1
  3013279/5580120
  11776/1971
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2612
  1971
  467
  174
  983
  208
  1191
  1
  3013279/5580120
  11776/1971
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ((□? (i)))))\""
  2613
  1972
  467
  174
  983
  208
  1191
  1
  41203/76440
  693/116
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2626
  1985
  467
  174
  988
  208
  1196
  1
  335011/622440
  11833/1985
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  2626
  1985
  467
  174
  988
  208
  1196
  1
  335011/622440
  11833/1985
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2626
  1985
  467
  174
  988
  208
  1196
  1
  335011/622440
  11833/1985
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  2626
  1985
  467
  174
  988
  208
  1196
  1
  335011/622440
  11833/1985
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env ((□? (b m)))))\""
  2626
  1985
  467
  174
  988
  208
  1196
  1
  335011/622440
  11833/1985
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  2626
  1985
  467
  174
  988
  208
  1196
  1
  335011/622440
  11833/1985
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ((□? (i)))))\""
  2627
  1986
  467
  174
  988
  208
  1196
  1
  1003213/1867320
  1973/331
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  2630
  1989
  467
  174
  988
  208
  1196
  1
  997753/1867320
  11855/1989
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  2630
  1989
  467
  174
  988
  208
  1196
  1
  997753/1867320
  11855/1989
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  2630
  1989
  467
  174
  988
  208
  1196
  1
  997753/1867320
  11855/1989
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  2630
  1989
  467
  174
  988
  208
  1196
  1
  997753/1867320
  11855/1989
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2630
  1989
  467
  174
  988
  208
  1196
  1
  997753/1867320
  11855/1989
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app lose) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2634
  1993
  467
  174
  989
  208
  1197
  1
  998663/1870960
  11875/1993
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  2635
  1994
  467
  174
  989
  208
  1197
  1
  998143/1870960
  5943/997
  ((13 13 0) (13 13 0) (13 13 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  2635
  1994
  467
  174
  989
  208
  1197
  1
  998143/1870960
  5943/997
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2635
  1994
  467
  174
  989
  208
  1197
  1
  998143/1870960
  5943/997
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  2636
  1995
  467
  174
  989
  208
  1197
  1
  996323/1870960
  2378/399
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  2751
  2074
  495
  182
  1020
  225
  1245
  1
  2009481/3749200
  12433/2074
  ((83/2 83/2 0) (83/2 83/2 0) (83/2 83/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  2751
  2074
  495
  182
  1020
  225
  1245
  1
  2009481/3749200
  12433/2074
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  2751
  2074
  495
  182
  1020
  225
  1245
  1
  2009481/3749200
  12433/2074
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  2752
  2075
  495
  182
  1020
  225
  1245
  1
  80321/149968
  12441/2075
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  2754
  2077
  495
  182
  1021
  225
  1246
  1
  134111/250432
  12469/2077
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> maximin <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2754
  2077
  495
  182
  1021
  225
  1246
  1
  134111/250432
  12469/2077
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  2754
  2077
  495
  182
  1021
  225
  1246
  1
  134111/250432
  12469/2077
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  2755
  2078
  495
  182
  1021
  225
  1246
  1
  401605/751296
  6238/1039
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  2755
  2078
  495
  182
  1021
  225
  1246
  1
  401605/751296
  6238/1039
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b m)))))\""
  2755
  2078
  495
  182
  1021
  225
  1246
  1
  401605/751296
  6238/1039
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  2755
  2078
  495
  182
  1021
  225
  1246
  1
  401605/751296
  6238/1039
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2755
  2078
  495
  182
  1021
  225
  1246
  1
  401605/751296
  6238/1039
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  2755
  2078
  495
  182
  1021
  225
  1246
  1
  401605/751296
  6238/1039
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  2755
  2078
  495
  182
  1021
  225
  1246
  1
  401605/751296
  6238/1039
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  2755
  2078
  495
  182
  1021
  225
  1246
  1
  401605/751296
  6238/1039
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  2755
  2078
  495
  182
  1021
  225
  1246
  1
  401605/751296
  6238/1039
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (c)) (□? (b m)))))\""
  2755
  2078
  495
  182
  1021
  225
  1246
  1
  401605/751296
  6238/1039
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  2755
  2078
  495
  182
  1021
  225
  1246
  1
  401605/751296
  6238/1039
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  2759
  2082
  495
  182
  1021
  225
  1246
  1
  133719/250432
  6250/1041
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  2761
  2084
  495
  182
  1022
  225
  1247
  1
  36535/68432
  3130/521
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  2762
  2085
  495
  182
  1022
  225
  1247
  1
  8543/16016
  12524/2085
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  2765
  2088
  495
  182
  1024
  225
  1249
  1
  1207475/2262624
  12539/2088
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  2765
  2088
  495
  182
  1024
  225
  1249
  1
  1207475/2262624
  12539/2088
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  2766
  2089
  495
  182
  1024
  225
  1249
  1
  1205291/2262624
  12543/2089
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  2767
  2090
  495
  182
  1024
  225
  1249
  1
  1205291/2262624
  6274/1045
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  2767
  2090
  495
  182
  1024
  225
  1249
  1
  1205291/2262624
  6274/1045
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  2767
  2090
  495
  182
  1024
  225
  1249
  1
  1205291/2262624
  6274/1045
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env ((□? ()))))\""
  2767
  2090
  495
  182
  1024
  225
  1249
  1
  1205291/2262624
  6274/1045
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2767
  2090
  495
  182
  1024
  225
  1249
  1
  1205291/2262624
  6274/1045
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2767
  2090
  495
  182
  1024
  225
  1249
  1
  1205291/2262624
  6274/1045
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2776
  2099
  495
  182
  1024
  225
  1249
  1
  1200923/2262624
  12620/2099
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env ((□? (oc₀ oc₁)))))\""
  2776
  2099
  495
  182
  1024
  225
  1249
  1
  1200923/2262624
  12620/2099
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  2777
  2100
  495
  182
  1024
  225
  1249
  1
  1200923/2266992
  1052/175
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  2848
  2158
  508
  182
  1033
  234
  1267
  1
  45859/87192
  13239/2158
  ((266 266 2) (266 266 2) (533/2 533/2 2)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  2849
  2159
  508
  182
  1033
  234
  1267
  1
  45775/87192
  13247/2159
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  2857
  2167
  508
  182
  1036
  234
  1270
  1
  1763/3360
  13303/2167
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2857
  2167
  508
  182
  1036
  234
  1270
  1
  1763/3360
  13303/2167
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  2860
  2170
  508
  182
  1036
  234
  1270
  1
  22793/43680
  13323/2170
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env ((□? (bo)))))\""
  2860
  2170
  508
  182
  1036
  234
  1270
  1
  22793/43680
  13323/2170
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2860
  2170
  508
  182
  1036
  234
  1270
  1
  22793/43680
  13323/2170
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  2861
  2171
  508
  182
  1036
  234
  1270
  1
  22751/43680
  13328/2171
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  2861
  2171
  508
  182
  1036
  234
  1270
  1
  22751/43680
  13328/2171
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  2862
  2172
  508
  182
  1036
  234
  1270
  1
  22723/43680
  1111/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  2862
  2172
  508
  182
  1036
  234
  1270
  1
  22723/43680
  1111/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2862
  2172
  508
  182
  1036
  234
  1270
  1
  22723/43680
  1111/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  2862
  2172
  508
  182
  1036
  234
  1270
  1
  22723/43680
  1111/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  2862
  2172
  508
  182
  1036
  234
  1270
  1
  22723/43680
  1111/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  2862
  2172
  508
  182
  1036
  234
  1270
  1
  22723/43680
  1111/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2862
  2172
  508
  182
  1036
  234
  1270
  1
  22723/43680
  1111/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  2862
  2172
  508
  182
  1036
  234
  1270
  1
  22723/43680
  1111/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env ((□? (bo this-play that-play)))))\""
  2862
  2172
  508
  182
  1036
  234
  1270
  1
  22723/43680
  1111/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  2862
  2172
  508
  182
  1036
  234
  1270
  1
  22723/43680
  1111/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  2864
  2174
  508
  182
  1036
  234
  1270
  1
  22681/43680
  6673/1087
  ((8 8 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  2868
  2178
  508
  182
  1038
  234
  1272
  1
  785/1512
  6683/1089
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2868
  2178
  508
  182
  1038
  234
  1272
  1
  785/1512
  6683/1089
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2868
  2178
  508
  182
  1038
  234
  1272
  1
  785/1512
  6683/1089
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  2868
  2178
  508
  182
  1038
  234
  1272
  1
  785/1512
  6683/1089
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2868
  2178
  508
  182
  1038
  234
  1272
  1
  785/1512
  6683/1089
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  2868
  2178
  508
  182
  1038
  234
  1272
  1
  785/1512
  6683/1089
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2868
  2178
  508
  182
  1038
  234
  1272
  1
  785/1512
  6683/1089
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env ((□? ()))))\""
  2868
  2178
  508
  182
  1038
  234
  1272
  1
  785/1512
  6683/1089
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2868
  2178
  508
  182
  1038
  234
  1272
  1
  785/1512
  6683/1089
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  2871
  2181
  508
  182
  1040
  234
  1274
  1
  7607/14644
  13381/2181
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  2871
  2181
  508
  182
  1040
  234
  1274
  1
  7607/14644
  13381/2181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  2875
  2185
  508
  182
  1042
  234
  1276
  1
  509/980
  13401/2185
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  2875
  2185
  508
  182
  1042
  234
  1276
  1
  509/980
  13401/2185
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  2875
  2185
  508
  182
  1042
  234
  1276
  1
  509/980
  13401/2185
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2881
  2191
  508
  182
  1044
  234
  1278
  1
  22933/44184
  13431/2191
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  2881
  2191
  508
  182
  1044
  234
  1278
  1
  22933/44184
  13431/2191
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2881
  2191
  508
  182
  1044
  234
  1278
  1
  22933/44184
  13431/2191
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  2919
  2216
  521
  182
  1060
  245
  1305
  1
  46181/88536
  1703/277
  ((24 24 0) (47/2 47/2 0) (47/2 47/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  2919
  2216
  521
  182
  1060
  245
  1305
  1
  46181/88536
  1703/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  2919
  2216
  521
  182
  1060
  245
  1305
  1
  46181/88536
  1703/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  2919
  2216
  521
  182
  1060
  245
  1305
  1
  46181/88536
  1703/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  2919
  2216
  521
  182
  1060
  245
  1305
  1
  46181/88536
  1703/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  2919
  2216
  521
  182
  1060
  245
  1305
  1
  46181/88536
  1703/277
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  2922
  2219
  521
  182
  1060
  245
  1305
  1
  45929/88536
  13640/2219
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  2922
  2219
  521
  182
  1060
  245
  1305
  1
  45929/88536
  13640/2219
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  2923
  2220
  521
  182
  1060
  245
  1305
  1
  15291/29512
  13649/2220
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  2923
  2220
  521
  182
  1060
  245
  1305
  1
  15291/29512
  13649/2220
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  2929
  2226
  521
  182
  1064
  245
  1309
  1
  46097/88872
  4561/742
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  2929
  2226
  521
  182
  1064
  245
  1309
  1
  46097/88872
  4561/742
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  2929
  2226
  521
  182
  1064
  245
  1309
  1
  46097/88872
  4561/742
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2929
  2226
  521
  182
  1064
  245
  1309
  1
  46097/88872
  4561/742
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  2929
  2226
  521
  182
  1064
  245
  1309
  1
  46097/88872
  4561/742
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  2967
  2251
  534
  182
  1065
  247
  1312
  1
  46097/89040
  13876/2251
  ((53/2 53/2 0) (53/2 53/2 0) (53/2 53/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  2967
  2251
  534
  182
  1065
  247
  1312
  1
  46097/89040
  13876/2251
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app minimax bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2967
  2251
  534
  182
  1065
  247
  1312
  1
  46097/89040
  13876/2251
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  2969
  2253
  534
  182
  1066
  247
  1313
  1
  46181/89208
  13900/2253
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  2975
  2259
  534
  182
  1070
  247
  1317
  1
  46405/89544
  13924/2259
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  2977
  2261
  534
  182
  1070
  247
  1317
  1
  9281/17976
  13933/2261
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  2978
  2262
  534
  182
  1070
  247
  1317
  1
  46321/89880
  13937/2262
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  2978
  2262
  534
  182
  1070
  247
  1317
  1
  46321/89880
  13937/2262
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2978
  2262
  534
  182
  1070
  247
  1317
  1
  46321/89880
  13937/2262
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  2978
  2262
  534
  182
  1070
  247
  1317
  1
  46321/89880
  13937/2262
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2978
  2262
  534
  182
  1070
  247
  1317
  1
  46321/89880
  13937/2262
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  2978
  2262
  534
  182
  1070
  247
  1317
  1
  46321/89880
  13937/2262
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2978
  2262
  534
  182
  1070
  247
  1317
  1
  46321/89880
  13937/2262
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  2978
  2262
  534
  182
  1070
  247
  1317
  1
  46321/89880
  13937/2262
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  2978
  2262
  534
  182
  1070
  247
  1317
  1
  46321/89880
  13937/2262
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  2978
  2262
  534
  182
  1070
  247
  1317
  1
  46321/89880
  13937/2262
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  2978
  2262
  534
  182
  1070
  247
  1317
  1
  46321/89880
  13937/2262
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env ((□? (rc)) (□? (b m)))))\""
  2978
  2262
  534
  182
  1070
  247
  1317
  1
  46321/89880
  13937/2262
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2990
  2274
  534
  182
  1074
  247
  1321
  1
  46433/90216
  13997/2274
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  2990
  2274
  534
  182
  1074
  247
  1321
  1
  46433/90216
  13997/2274
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  2990
  2274
  534
  182
  1074
  247
  1321
  1
  46433/90216
  13997/2274
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2990
  2274
  534
  182
  1074
  247
  1321
  1
  46433/90216
  13997/2274
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  2990
  2274
  534
  182
  1074
  247
  1321
  1
  46433/90216
  13997/2274
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2990
  2274
  534
  182
  1074
  247
  1321
  1
  46433/90216
  13997/2274
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  2994
  2278
  534
  182
  1076
  247
  1323
  1
  46601/90552
  14017/2278
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2994
  2278
  534
  182
  1076
  247
  1323
  1
  46601/90552
  14017/2278
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2994
  2278
  534
  182
  1076
  247
  1323
  1
  46601/90552
  14017/2278
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env ((□? (oc₀ oc₁)))))\""
  2994
  2278
  534
  182
  1076
  247
  1323
  1
  46601/90552
  14017/2278
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  2997
  2281
  534
  182
  1078
  247
  1325
  1
  15571/30240
  14034/2281
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2997
  2281
  534
  182
  1078
  247
  1325
  1
  15571/30240
  14034/2281
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  3001
  2285
  534
  182
  1078
  247
  1325
  1
  15571/30240
  14058/2285
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3001
  2285
  534
  182
  1078
  247
  1325
  1
  15571/30240
  14058/2285
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  3009
  2293
  534
  182
  1081
  247
  1328
  1
  1949/3787
  14114/2293
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3009
  2293
  534
  182
  1081
  247
  1328
  1
  1949/3787
  14114/2293
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  3009
  2293
  534
  182
  1081
  247
  1328
  1
  1949/3787
  14114/2293
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3009
  2293
  534
  182
  1081
  247
  1328
  1
  1949/3787
  14114/2293
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  3009
  2293
  534
  182
  1081
  247
  1328
  1
  1949/3787
  14114/2293
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  3009
  2293
  534
  182
  1081
  247
  1328
  1
  1949/3787
  14114/2293
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  3009
  2293
  534
  182
  1081
  247
  1328
  1
  1949/3787
  14114/2293
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3009
  2293
  534
  182
  1081
  247
  1328
  1
  1949/3787
  14114/2293
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3009
  2293
  534
  182
  1081
  247
  1328
  1
  1949/3787
  14114/2293
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  3012
  2296
  534
  182
  1083
  247
  1330
  1
  5861/11382
  1009/164
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3012
  2296
  534
  182
  1083
  247
  1330
  1
  5861/11382
  1009/164
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  3012
  2296
  534
  182
  1083
  247
  1330
  1
  5861/11382
  1009/164
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  3130
  2376
  564
  190
  1113
  266
  1379
  1
  23633/45612
  7367/1188
  ((167/2 167/2 1/2) (83 83 1/2) (83 83 1/2)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  3130
  2376
  564
  190
  1113
  266
  1379
  1
  23633/45612
  7367/1188
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  3134
  2380
  564
  190
  1116
  266
  1382
  1
  1481/2856
  1475/238
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3134
  2380
  564
  190
  1116
  266
  1382
  1
  1481/2856
  1475/238
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3134
  2380
  564
  190
  1116
  266
  1382
  1
  1481/2856
  1475/238
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3134
  2380
  564
  190
  1116
  266
  1382
  1
  1481/2856
  1475/238
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3134
  2380
  564
  190
  1116
  266
  1382
  1
  1481/2856
  1475/238
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  3136
  2382
  564
  190
  1117
  266
  1383
  1
  47371/91392
  7381/1191
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  3136
  2382
  564
  190
  1117
  266
  1383
  1
  47371/91392
  7381/1191
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  3136
  2382
  564
  190
  1117
  266
  1383
  1
  47371/91392
  7381/1191
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3136
  2382
  564
  190
  1117
  266
  1383
  1
  47371/91392
  7381/1191
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3136
  2382
  564
  190
  1117
  266
  1383
  1
  47371/91392
  7381/1191
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  3173
  2406
  577
  190
  1117
  268
  1385
  1
  47371/91560
  7475/1203
  ((28 28 0) (28 28 0) (28 28 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3173
  2406
  577
  190
  1117
  268
  1385
  1
  47371/91560
  7475/1203
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3173
  2406
  577
  190
  1117
  268
  1385
  1
  47371/91560
  7475/1203
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  3177
  2410
  577
  190
  1117
  268
  1385
  1
  869/1680
  7501/1205
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3177
  2410
  577
  190
  1117
  268
  1385
  1
  869/1680
  7501/1205
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  3177
  2410
  577
  190
  1117
  268
  1385
  1
  869/1680
  7501/1205
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3177
  2410
  577
  190
  1117
  268
  1385
  1
  869/1680
  7501/1205
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  3177
  2410
  577
  190
  1117
  268
  1385
  1
  869/1680
  7501/1205
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (oc₀ oc₁)))))\""
  3177
  2410
  577
  190
  1117
  268
  1385
  1
  869/1680
  7501/1205
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3179
  2412
  577
  190
  1117
  268
  1385
  1
  18877/36624
  15013/2412
  ((0 0 0) (0 1/2 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3179
  2412
  577
  190
  1117
  268
  1385
  1
  18877/36624
  15013/2412
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  3181
  2414
  577
  190
  1117
  268
  1385
  1
  94049/183120
  15025/2414
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  3181
  2414
  577
  190
  1117
  268
  1385
  1
  94049/183120
  15025/2414
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3181
  2414
  577
  190
  1117
  268
  1385
  1
  94049/183120
  15025/2414
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3197
  2430
  577
  190
  1126
  268
  1394
  1
  47119/91728
  3101/486
  ((20 20 0) (20 20 0) (20 20 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  3200
  2433
  577
  190
  1126
  268
  1394
  1
  47063/91728
  15532/2433
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  3200
  2433
  577
  190
  1126
  268
  1394
  1
  47063/91728
  15532/2433
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  3200
  2433
  577
  190
  1126
  268
  1394
  1
  47063/91728
  15532/2433
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  3200
  2433
  577
  190
  1126
  268
  1394
  1
  47063/91728
  15532/2433
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3200
  2433
  577
  190
  1126
  268
  1394
  1
  47063/91728
  15532/2433
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  3200
  2433
  577
  190
  1126
  268
  1394
  1
  47063/91728
  15532/2433
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  3200
  2433
  577
  190
  1126
  268
  1394
  1
  47063/91728
  15532/2433
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  3202
  2435
  577
  190
  1127
  268
  1395
  1
  47147/91896
  3112/487
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  3202
  2435
  577
  190
  1127
  268
  1395
  1
  47147/91896
  3112/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  3202
  2435
  577
  190
  1127
  268
  1395
  1
  47147/91896
  3112/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (oc₀ oc₁)))))\""
  3202
  2435
  577
  190
  1127
  268
  1395
  1
  47147/91896
  3112/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  3202
  2435
  577
  190
  1127
  268
  1395
  1
  47147/91896
  3112/487
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3211
  2444
  577
  190
  1130
  268
  1398
  1
  47231/92232
  300/47
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  3211
  2444
  577
  190
  1130
  268
  1398
  1
  47231/92232
  300/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  3211
  2444
  577
  190
  1130
  268
  1398
  1
  47231/92232
  300/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  3211
  2444
  577
  190
  1130
  268
  1398
  1
  47231/92232
  300/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3211
  2444
  577
  190
  1130
  268
  1398
  1
  47231/92232
  300/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  3211
  2444
  577
  190
  1130
  268
  1398
  1
  47231/92232
  300/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  3215
  2448
  577
  190
  1133
  268
  1401
  1
  47357/92400
  976/153
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  3215
  2448
  577
  190
  1133
  268
  1401
  1
  47357/92400
  976/153
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  3218
  2451
  577
  190
  1135
  268
  1403
  1
  15823/30856
  15628/2451
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3218
  2451
  577
  190
  1135
  268
  1403
  1
  15823/30856
  15628/2451
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3218
  2451
  577
  190
  1135
  268
  1403
  1
  15823/30856
  15628/2451
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  3218
  2451
  577
  190
  1135
  268
  1403
  1
  15823/30856
  15628/2451
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env ((□? (oc₀ oc₁)))))\""
  3218
  2451
  577
  190
  1135
  268
  1403
  1
  15823/30856
  15628/2451
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3218
  2451
  577
  190
  1135
  268
  1403
  1
  15823/30856
  15628/2451
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3218
  2451
  577
  190
  1135
  268
  1403
  1
  15823/30856
  15628/2451
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  3218
  2451
  577
  190
  1135
  268
  1403
  1
  15823/30856
  15628/2451
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  3218
  2451
  577
  190
  1135
  268
  1403
  1
  15823/30856
  15628/2451
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) empty-board player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3218
  2451
  577
  190
  1135
  268
  1403
  1
  15823/30856
  15628/2451
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  3218
  2451
  577
  190
  1135
  268
  1403
  1
  15823/30856
  15628/2451
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  3222
  2455
  577
  190
  1135
  268
  1403
  1
  7901/15428
  15644/2455
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  3222
  2455
  577
  190
  1135
  268
  1403
  1
  7901/15428
  15644/2455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  3234
  2467
  577
  190
  1137
  268
  1405
  1
  23717/46368
  15728/2467
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  3234
  2467
  577
  190
  1137
  268
  1405
  1
  23717/46368
  15728/2467
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-coord\")\n  (env ((□? (move-coord-v)))))\""
  3234
  2467
  577
  190
  1137
  268
  1405
  1
  23717/46368
  15728/2467
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  3350
  2547
  605
  198
  1167
  285
  1452
  1
  11953/23226
  16400/2547
  ((179/2 179/2 1/2) (89 179/2 1/2) (179/2 179/2 1/2)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3350
  2547
  605
  198
  1167
  285
  1452
  1
  11953/23226
  16400/2547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3350
  2547
  605
  198
  1167
  285
  1452
  1
  11953/23226
  16400/2547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env ((□? (some-v-v)))))\""
  3350
  2547
  605
  198
  1167
  285
  1452
  1
  11953/23226
  16400/2547
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3354
  2551
  605
  198
  1168
  285
  1453
  1
  23927/46536
  16420/2551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  3354
  2551
  605
  198
  1168
  285
  1453
  1
  23927/46536
  16420/2551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  3354
  2551
  605
  198
  1168
  285
  1453
  1
  23927/46536
  16420/2551
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  3355
  2552
  605
  198
  1168
  285
  1453
  1
  119551/232680
  4107/638
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3355
  2552
  605
  198
  1168
  285
  1453
  1
  119551/232680
  4107/638
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  3355
  2552
  605
  198
  1168
  285
  1453
  1
  119551/232680
  4107/638
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> display <-) \"Cat's game.\\n\")\n  (env ((□? (bo this-play that-play)))))\""
  3355
  2552
  605
  198
  1168
  285
  1453
  1
  119551/232680
  4107/638
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  3355
  2552
  605
  198
  1168
  285
  1453
  1
  119551/232680
  4107/638
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  3357
  2554
  605
  198
  1168
  285
  1453
  1
  119131/232680
  8221/1277
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  3358
  2555
  605
  198
  1168
  285
  1453
  1
  118921/232680
  16452/2555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3358
  2555
  605
  198
  1168
  285
  1453
  1
  118921/232680
  16452/2555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3358
  2555
  605
  198
  1168
  285
  1453
  1
  118921/232680
  16452/2555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  3358
  2555
  605
  198
  1168
  285
  1453
  1
  118921/232680
  16452/2555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  3358
  2555
  605
  198
  1168
  285
  1453
  1
  118921/232680
  16452/2555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  3358
  2555
  605
  198
  1168
  285
  1453
  1
  118921/232680
  16452/2555
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3362
  2559
  605
  198
  1169
  285
  1454
  1
  59513/116550
  16477/2559
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3362
  2559
  605
  198
  1169
  285
  1454
  1
  59513/116550
  16477/2559
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  3362
  2559
  605
  198
  1169
  285
  1454
  1
  59513/116550
  16477/2559
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  3362
  2559
  605
  198
  1169
  285
  1454
  1
  59513/116550
  16477/2559
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  3362
  2559
  605
  198
  1169
  285
  1454
  1
  59513/116550
  16477/2559
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> minimax <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3362
  2559
  605
  198
  1169
  285
  1454
  1
  59513/116550
  16477/2559
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3362
  2559
  605
  198
  1169
  285
  1454
  1
  59513/116550
  16477/2559
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3362
  2559
  605
  198
  1169
  285
  1454
  1
  59513/116550
  16477/2559
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  3362
  2559
  605
  198
  1169
  285
  1454
  1
  59513/116550
  16477/2559
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  3362
  2559
  605
  198
  1169
  285
  1454
  1
  59513/116550
  16477/2559
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3362
  2559
  605
  198
  1169
  285
  1454
  1
  59513/116550
  16477/2559
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  3362
  2559
  605
  198
  1169
  285
  1454
  1
  59513/116550
  16477/2559
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  3363
  2560
  605
  198
  1169
  285
  1454
  1
  59443/116550
  16481/2560
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  3366
  2563
  605
  198
  1171
  285
  1456
  1
  19861/38920
  16493/2563
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  3373
  2570
  605
  198
  1177
  285
  1462
  1
  19921/38990
  16521/2570
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3373
  2570
  605
  198
  1177
  285
  1462
  1
  19921/38990
  16521/2570
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  3373
  2570
  605
  198
  1177
  285
  1462
  1
  19921/38990
  16521/2570
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  3373
  2570
  605
  198
  1177
  285
  1462
  1
  19921/38990
  16521/2570
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3373
  2570
  605
  198
  1177
  285
  1462
  1
  19921/38990
  16521/2570
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  3373
  2570
  605
  198
  1177
  285
  1462
  1
  19921/38990
  16521/2570
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) bo that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  3373
  2570
  605
  198
  1177
  285
  1462
  1
  19921/38990
  16521/2570
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3373
  2570
  605
  198
  1177
  285
  1462
  1
  19921/38990
  16521/2570
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  3373
  2570
  605
  198
  1177
  285
  1462
  1
  19921/38990
  16521/2570
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3373
  2570
  605
  198
  1177
  285
  1462
  1
  19921/38990
  16521/2570
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  3373
  2570
  605
  198
  1177
  285
  1462
  1
  19921/38990
  16521/2570
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  3373
  2570
  605
  198
  1177
  285
  1462
  1
  19921/38990
  16521/2570
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  3373
  2570
  605
  198
  1177
  285
  1462
  1
  19921/38990
  16521/2570
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  3375
  2572
  605
  198
  1178
  285
  1463
  1
  19907/38990
  16669/2572
  ((14 14 0) (14 14 0) (14 14 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  3375
  2572
  605
  198
  1178
  285
  1463
  1
  19907/38990
  16669/2572
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  3376
  2573
  605
  198
  1178
  285
  1463
  1
  19893/38990
  16721/2573
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  3376
  2573
  605
  198
  1178
  285
  1463
  1
  19893/38990
  16721/2573
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env ((□? (f x)))))\""
  3376
  2573
  605
  198
  1178
  285
  1463
  1
  19893/38990
  16721/2573
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1775
  1217
  410
  148
  656
  179
  835
  1
  17809/30240
  7419/1217
  ((683/2 683/2 15/2) (681/2 681/2 15/2) (343 343 15/2)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  1778
  1219
  410
  149
  656
  179
  835
  1
  70921/120960
  323/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  1780
  1220
  410
  150
  656
  179
  835
  1
  141527/241920
  1861/305
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1786
  1226
  410
  150
  658
  179
  837
  1
  141737/242550
  3737/613
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1790
  1230
  410
  150
  659
  179
  838
  1
  283789/486360
  1249/205
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  1790
  1230
  410
  150
  659
  179
  838
  1
  283789/486360
  1249/205
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  1790
  1230
  410
  150
  659
  179
  838
  1
  283789/486360
  1249/205
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (oc₀ oc₁)))))\""
  1792
  1231
  410
  151
  659
  179
  838
  1
  283789/487620
  7499/1231
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  1793
  1232
  410
  151
  659
  179
  838
  1
  141737/243810
  1877/308
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  1795
  1234
  410
  151
  659
  179
  838
  1
  141107/243810
  7519/1234
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  1796
  1235
  410
  151
  659
  179
  838
  1
  140897/243810
  7528/1235
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  1796
  1235
  410
  151
  659
  179
  838
  1
  140897/243810
  7528/1235
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  1811
  1250
  410
  151
  672
  179
  851
  1
  70921/122535
  152/25
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1811
  1250
  410
  151
  672
  179
  851
  1
  70921/122535
  152/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  1825
  1262
  410
  153
  676
  179
  855
  1
  71299/123165
  7681/1262
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  1825
  1262
  410
  153
  676
  179
  855
  1
  71299/123165
  7681/1262
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  1825
  1262
  410
  153
  676
  179
  855
  1
  71299/123165
  7681/1262
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  1827
  1264
  410
  153
  676
  179
  855
  1
  70984/123165
  1923/316
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  1828
  1265
  410
  153
  676
  179
  855
  1
  141653/246330
  7697/1265
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (b)))))\""
  1832
  1269
  410
  153
  679
  179
  858
  1
  284251/493920
  7717/1269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  1848
  1283
  410
  155
  691
  179
  870
  1
  293071/505260
  7777/1283
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  1854
  1289
  410
  155
  694
  179
  873
  1
  291811/505260
  7801/1289
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  1862
  1297
  410
  155
  694
  179
  873
  1
  145433/252630
  7837/1297
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  1871
  1306
  410
  155
  700
  179
  879
  1
  146693/254520
  7881/1306
  ((0 0 0) (1/2 1/2 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  1885
  1317
  413
  155
  708
  182
  890
  1
  294961/511560
  2648/439
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  1885
  1317
  413
  155
  708
  182
  890
  1
  294961/511560
  2648/439
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  1888
  1320
  413
  155
  710
  182
  892
  1
  295591/512820
  2657/440
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  1911
  1342
  413
  156
  724
  182
  906
  1
  301051/522900
  8093/1342
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  1911
  1342
  413
  156
  724
  182
  906
  1
  301051/522900
  8093/1342
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1911
  1342
  413
  156
  724
  182
  906
  1
  301051/522900
  8093/1342
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  1914
  1345
  413
  156
  726
  182
  908
  1
  301891/524160
  1621/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  1916
  1347
  413
  156
  726
  182
  908
  1
  301387/524160
  2707/449
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  1916
  1347
  413
  156
  726
  182
  908
  1
  301387/524160
  2707/449
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  1924
  1355
  413
  156
  732
  182
  914
  1
  303277/526680
  8184/1355
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  1924
  1355
  413
  156
  732
  182
  914
  1
  303277/526680
  8184/1355
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  1928
  1359
  413
  156
  732
  182
  914
  1
  303151/526680
  913/151
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1928
  1359
  413
  156
  732
  182
  914
  1
  303151/526680
  913/151
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1928
  1359
  413
  156
  732
  182
  914
  1
  303151/526680
  913/151
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1928
  1359
  413
  156
  732
  182
  914
  1
  303151/526680
  913/151
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  1928
  1359
  413
  156
  732
  182
  914
  1
  303151/526680
  913/151
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  1928
  1359
  413
  156
  732
  182
  914
  1
  303151/526680
  913/151
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  1928
  1359
  413
  156
  732
  182
  914
  1
  303151/526680
  913/151
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  1932
  1363
  413
  156
  734
  182
  916
  1
  302311/526680
  8233/1363
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1935
  1366
  413
  156
  734
  182
  916
  1
  15889/27720
  4124/683
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  1935
  1366
  413
  156
  734
  182
  916
  1
  15889/27720
  4124/683
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  1935
  1366
  413
  156
  734
  182
  916
  1
  15889/27720
  4124/683
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  1976
  1394
  426
  156
  752
  191
  943
  1
  606617/1055880
  4289/697
  ((41/2 41/2 0) (41/2 41/2 0) (41/2 41/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  1979
  1396
  426
  157
  752
  191
  943
  1
  606617/1060920
  2147/349
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1979
  1396
  426
  157
  752
  191
  943
  1
  606617/1060920
  2147/349
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  1979
  1396
  426
  157
  752
  191
  943
  1
  606617/1060920
  2147/349
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  1979
  1396
  426
  157
  752
  191
  943
  1
  606617/1060920
  2147/349
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  1979
  1396
  426
  157
  752
  191
  943
  1
  606617/1060920
  2147/349
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  2013
  1426
  426
  161
  775
  191
  966
  1
  607247/1065960
  8743/1426
  ((13 13 0) (13 13 0) (13 13 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b m)))))\""
  2013
  1426
  426
  161
  775
  191
  966
  1
  607247/1065960
  8743/1426
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  2013
  1426
  426
  161
  775
  191
  966
  1
  607247/1065960
  8743/1426
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  2017
  1430
  426
  161
  778
  191
  969
  1
  608927/1068480
  8759/1430
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  2024
  1437
  426
  161
  778
  191
  969
  1
  1215649/2136960
  8837/1437
  ((13 13 0) (13 13 0) (13 13 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  2024
  1437
  426
  161
  778
  191
  969
  1
  1215649/2136960
  8837/1437
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  2024
  1437
  426
  161
  778
  191
  969
  1
  1215649/2136960
  8837/1437
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2042
  1455
  426
  161
  778
  191
  969
  1
  1205569/2136960
  1792/291
  ((7 7 0) (7 7 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2047
  1460
  426
  161
  780
  191
  971
  1
  1211869/2147040
  1797/292
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2051
  1464
  426
  161
  781
  191
  972
  1
  1213129/2152080
  9005/1464
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  2069
  1482
  426
  161
  781
  191
  972
  1
  1206409/2152080
  9109/1482
  ((20 20 0) (20 20 0) (20 20 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  2069
  1482
  426
  161
  781
  191
  972
  1
  1206409/2152080
  9109/1482
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2075
  1488
  426
  161
  783
  191
  974
  1
  1208089/2157120
  9139/1488
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  2075
  1488
  426
  161
  783
  191
  974
  1
  1208089/2157120
  9139/1488
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  2078
  1491
  426
  161
  785
  191
  976
  1
  1211449/2162160
  9151/1491
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2090
  1503
  426
  161
  789
  191
  980
  1
  1214809/2172240
  9220/1503
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? (ma)))))\""
  2092
  1504
  426
  162
  789
  191
  980
  1
  1212289/2172240
  9225/1504
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  2094
  1506
  426
  162
  790
  191
  981
  1
  1211029/2172240
  3079/502
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  2107
  1517
  428
  162
  790
  191
  981
  1
  1209769/2172240
  9322/1517
  ((13 13 0) (13 13 0) (13 13 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  2110
  1520
  428
  162
  792
  191
  983
  1
  1209139/2172240
  9337/1520
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  2113
  1522
  428
  163
  792
  191
  983
  1
  1206619/2172240
  9347/1522
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2113
  1522
  428
  163
  792
  191
  983
  1
  1206619/2172240
  9347/1522
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  2150
  1557
  428
  165
  811
  191
  1002
  1
  1214719/2192400
  3241/519
  ((26 26 0) (26 26 0) (26 26 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2150
  1557
  428
  165
  811
  191
  1002
  1
  1214719/2192400
  3241/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  2150
  1557
  428
  165
  811
  191
  1002
  1
  1214719/2192400
  3241/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  2151
  1558
  428
  165
  811
  191
  1002
  1
  1213039/2192400
  9727/1558
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2151
  1558
  428
  165
  811
  191
  1002
  1
  1213039/2192400
  9727/1558
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  2155
  1562
  428
  165
  811
  191
  1002
  1
  1207999/2192400
  9751/1562
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  2155
  1562
  428
  165
  811
  191
  1002
  1
  1207999/2192400
  9751/1562
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  2161
  1568
  428
  165
  815
  191
  1006
  1
  1206739/2192400
  9811/1568
  ((16 16 0) (16 16 0) (16 16 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2161
  1568
  428
  165
  815
  191
  1006
  1
  1206739/2192400
  9811/1568
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2161
  1568
  428
  165
  815
  191
  1006
  1
  1206739/2192400
  9811/1568
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  2173
  1576
  432
  165
  820
  194
  1014
  1
  1217659/2207520
  2461/394
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  2174
  1577
  432
  165
  820
  194
  1014
  1
  1216651/2207520
  9851/1577
  ((3/2 3/2 0) (2 2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  2174
  1577
  432
  165
  820
  194
  1014
  1
  1216651/2207520
  9851/1577
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2174
  1577
  432
  165
  820
  194
  1014
  1
  1216651/2207520
  9851/1577
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ((□? (i)))))\""
  2174
  1577
  432
  165
  820
  194
  1014
  1
  1216651/2207520
  9851/1577
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  2174
  1577
  432
  165
  820
  194
  1014
  1
  1216651/2207520
  9851/1577
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2174
  1577
  432
  165
  820
  194
  1014
  1
  1216651/2207520
  9851/1577
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2174
  1577
  432
  165
  820
  194
  1014
  1
  1216651/2207520
  9851/1577
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2190
  1592
  432
  166
  827
  194
  1021
  1
  1225051/2222640
  9911/1592
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2190
  1592
  432
  166
  827
  194
  1021
  1
  1225051/2222640
  9911/1592
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  2198
  1599
  432
  167
  832
  194
  1026
  1
  1236811/2237760
  9943/1599
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  2235
  1624
  443
  168
  845
  198
  1043
  1
  1254871/2268000
  10069/1624
  ((39/2 39/2 0) (39/2 39/2 0) (39/2 39/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  2235
  1624
  443
  168
  845
  198
  1043
  1
  1254871/2268000
  10069/1624
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  2236
  1625
  443
  168
  845
  198
  1043
  1
  1253863/2268000
  2016/325
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2236
  1625
  443
  168
  845
  198
  1043
  1
  1253863/2268000
  2016/325
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ((□? (i)))))\""
  2237
  1626
  443
  168
  845
  198
  1043
  1
  1253863/2273040
  10085/1626
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  2238
  1627
  443
  168
  845
  198
  1043
  1
  1251343/2273040
  10090/1627
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  2239
  1628
  443
  168
  845
  198
  1043
  1
  1251343/2273040
  10095/1628
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2239
  1628
  443
  168
  845
  198
  1043
  1
  1251343/2273040
  10095/1628
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  2247
  1635
  443
  169
  852
  198
  1050
  1
  1279063/2298240
  10126/1635
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2252
  1640
  443
  169
  854
  198
  1052
  1
  1280323/2303280
  5073/820
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  2255
  1642
  443
  170
  854
  198
  1052
  1
  1275283/2303280
  5078/821
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  2271
  1658
  443
  170
  868
  198
  1066
  1
  1284103/2313360
  5118/829
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  2279
  1666
  443
  170
  868
  198
  1066
  1
  1284103/2313360
  5140/833
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  2279
  1666
  443
  170
  868
  198
  1066
  1
  1284103/2313360
  5140/833
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  2279
  1666
  443
  170
  868
  198
  1066
  1
  1284103/2313360
  5140/833
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  2279
  1666
  443
  170
  868
  198
  1066
  1
  1284103/2313360
  5140/833
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  2282
  1669
  443
  170
  868
  198
  1066
  1
  1280323/2313360
  10324/1669
  ((21 21 0) (21 21 0) (21 21 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  2288
  1675
  443
  170
  872
  198
  1070
  1
  75239/136080
  10351/1675
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  2292
  1679
  443
  170
  872
  198
  1070
  1
  1274023/2313360
  10369/1679
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  2348
  1735
  443
  170
  872
  198
  1070
  1
  1256383/2313360
  10878/1735
  ((217 217 3/2) (218 218 3/2) (435/2 435/2 3/2)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2348
  1735
  443
  170
  872
  198
  1070
  1
  1256383/2313360
  10878/1735
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env ((□? (f xs)))))\""
  2352
  1739
  443
  170
  875
  198
  1073
  1
  1260163/2318400
  10898/1739
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2358
  1745
  443
  170
  877
  198
  1075
  1
  1261843/2323440
  10928/1745
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2358
  1745
  443
  170
  877
  198
  1075
  1
  1261843/2323440
  10928/1745
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  2368
  1755
  443
  170
  885
  198
  1083
  1
  1260403/2323440
  10984/1755
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  2370
  1757
  443
  170
  885
  198
  1083
  1
  1255363/2323440
  10993/1757
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  2445
  1805
  462
  178
  899
  208
  1107
  1
  1266073/2333520
  11339/1805
  ((129/2 129/2 1/2) (65 65 1/2) (129/2 65 1/2)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2445
  1805
  462
  178
  899
  208
  1107
  1
  1266073/2333520
  11339/1805
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  2445
  1805
  462
  178
  899
  208
  1107
  1
  1266073/2333520
  11339/1805
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2445
  1805
  462
  178
  899
  208
  1107
  1
  1266073/2333520
  11339/1805
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  2451
  1811
  462
  178
  902
  208
  1110
  1
  1273633/2348640
  11365/1811
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  2451
  1811
  462
  178
  902
  208
  1110
  1
  1273633/2348640
  11365/1811
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app lose) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2455
  1815
  462
  178
  903
  208
  1111
  1
  1274893/2353680
  69/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  2497
  1844
  475
  178
  922
  219
  1141
  1
  1288123/2363760
  5815/922
  ((29 29 0) (29 29 0) (29 29 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2497
  1844
  475
  178
  922
  219
  1141
  1
  1288123/2363760
  5815/922
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  2505
  1852
  475
  178
  928
  219
  1147
  1
  1295683/2373840
  11673/1852
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  2515
  1862
  475
  178
  928
  219
  1147
  1
  1289383/2373840
  617/98
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  2515
  1862
  475
  178
  928
  219
  1147
  1
  1289383/2373840
  617/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env ((□? ()))))\""
  2515
  1862
  475
  178
  928
  219
  1147
  1
  1289383/2373840
  617/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  2515
  1862
  475
  178
  928
  219
  1147
  1
  1289383/2373840
  617/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  2517
  1864
  475
  178
  928
  219
  1147
  1
  1284343/2373840
  11733/1864
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2517
  1864
  475
  178
  928
  219
  1147
  1
  1284343/2373840
  11733/1864
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  2521
  1868
  475
  178
  931
  219
  1150
  1
  1287703/2378880
  11749/1868
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  2524
  1871
  475
  178
  933
  219
  1152
  1
  1291063/2383920
  11764/1871
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  2524
  1871
  475
  178
  933
  219
  1152
  1
  1291063/2383920
  11764/1871
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env ((□? (oc₀ oc₁)))))\""
  2526
  1873
  475
  178
  934
  219
  1153
  1
  1293583/2388960
  11774/1873
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  2527
  1874
  475
  178
  934
  219
  1153
  1
  1291903/2388960
  11783/1874
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  2529
  1876
  475
  178
  935
  219
  1154
  1
  1294423/2394000
  11791/1876
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  2529
  1876
  475
  178
  935
  219
  1154
  1
  1294423/2394000
  11791/1876
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2535
  1881
  475
  179
  937
  219
  1156
  1
  1300723/2404080
  3937/627
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  2573
  1906
  488
  179
  938
  221
  1159
  1
  1300723/2409120
  6018/953
  ((63/2 63/2 0) (32 32 0) (63/2 63/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  2579
  1912
  488
  179
  943
  221
  1164
  1
  1304503/2414160
  3015/478
  ((3 3 0) (5/2 5/2 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  2579
  1912
  488
  179
  943
  221
  1164
  1
  1304503/2414160
  3015/478
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  2579
  1912
  488
  179
  943
  221
  1164
  1
  1304503/2414160
  3015/478
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  2579
  1912
  488
  179
  943
  221
  1164
  1
  1304503/2414160
  3015/478
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  2582
  1915
  488
  179
  945
  221
  1166
  1
  1307863/2419200
  12076/1915
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  2582
  1915
  488
  179
  945
  221
  1166
  1
  1307863/2419200
  12076/1915
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  2590
  1923
  488
  179
  948
  221
  1169
  1
  1309753/2424240
  4044/641
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env ((□? (bo)) (□? (ma)))))\""
  2590
  1923
  488
  179
  948
  221
  1169
  1
  1309753/2424240
  4044/641
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  2591
  1924
  488
  179
  948
  221
  1169
  1
  261749/484848
  6069/962
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  2591
  1924
  488
  179
  948
  221
  1169
  1
  261749/484848
  6069/962
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  2594
  1927
  488
  179
  948
  221
  1169
  1
  261413/484848
  12165/1927
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  2594
  1927
  488
  179
  948
  221
  1169
  1
  261413/484848
  12165/1927
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (oc₀ oc₁)))))\""
  2596
  1929
  488
  179
  949
  221
  1170
  1
  261917/485856
  12175/1929
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2596
  1929
  488
  179
  949
  221
  1170
  1
  261917/485856
  12175/1929
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2596
  1929
  488
  179
  949
  221
  1170
  1
  261917/485856
  12175/1929
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env ((□? (f x)))))\""
  2596
  1929
  488
  179
  949
  221
  1170
  1
  261917/485856
  12175/1929
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2596
  1929
  488
  179
  949
  221
  1170
  1
  261917/485856
  12175/1929
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  2596
  1929
  488
  179
  949
  221
  1170
  1
  261917/485856
  12175/1929
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  2596
  1929
  488
  179
  949
  221
  1170
  1
  261917/485856
  12175/1929
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2596
  1929
  488
  179
  949
  221
  1170
  1
  261917/485856
  12175/1929
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  2598
  1931
  488
  179
  949
  221
  1170
  1
  260909/485856
  12183/1931
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  2606
  1939
  488
  179
  955
  221
  1176
  1
  262421/487872
  12219/1939
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  2608
  1941
  488
  179
  956
  221
  1177
  1
  1311097/2439360
  12307/1941
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  2611
  1944
  488
  179
  958
  221
  1179
  1
  1314457/2444400
  12319/1944
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  2617
  1950
  488
  179
  962
  221
  1183
  1
  1321177/2454480
  12343/1950
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  2621
  1954
  488
  179
  964
  221
  1185
  1
  1326217/2464560
  12363/1954
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  2621
  1954
  488
  179
  964
  221
  1185
  1
  1326217/2464560
  12363/1954
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  2633
  1966
  488
  179
  966
  221
  1187
  1
  1327057/2469600
  12447/1966
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked? <-) (app b (app coord r c)))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  2633
  1966
  488
  179
  966
  221
  1187
  1
  1327057/2469600
  12447/1966
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  2635
  1968
  488
  179
  966
  221
  1187
  1
  1325797/2469600
  12455/1968
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2635
  1968
  488
  179
  966
  221
  1187
  1
  1325797/2469600
  12455/1968
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  2635
  1968
  488
  179
  966
  221
  1187
  1
  1325797/2469600
  12455/1968
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2635
  1968
  488
  179
  966
  221
  1187
  1
  1325797/2469600
  12455/1968
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  2636
  1969
  488
  179
  966
  221
  1187
  1
  1325797/2469600
  12460/1969
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  2636
  1969
  488
  179
  966
  221
  1187
  1
  1325797/2469600
  12460/1969
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  2636
  1969
  488
  179
  966
  221
  1187
  1
  1325797/2469600
  12460/1969
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2636
  1969
  488
  179
  966
  221
  1187
  1
  1325797/2469600
  12460/1969
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  2636
  1969
  488
  179
  966
  221
  1187
  1
  1325797/2469600
  12460/1969
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  2678
  1998
  501
  179
  967
  223
  1190
  1
  1323907/2474640
  12713/1998
  ((77/2 77/2 0) (77/2 77/2 0) (77/2 77/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  2678
  1998
  501
  179
  967
  223
  1190
  1
  1323907/2474640
  12713/1998
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  2678
  1998
  501
  179
  967
  223
  1190
  1
  1323907/2474640
  12713/1998
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  2678
  1998
  501
  179
  967
  223
  1190
  1
  1323907/2474640
  12713/1998
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  2678
  1998
  501
  179
  967
  223
  1190
  1
  1323907/2474640
  12713/1998
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2678
  1998
  501
  179
  967
  223
  1190
  1
  1323907/2474640
  12713/1998
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2678
  1998
  501
  179
  967
  223
  1190
  1
  1323907/2474640
  12713/1998
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  2680
  2000
  501
  179
  968
  223
  1191
  1
  1322227/2474640
  12721/2000
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2688
  2008
  501
  179
  970
  223
  1193
  1
  1324747/2484720
  12761/2008
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  2695
  2015
  501
  179
  976
  223
  1199
  1
  1329067/2489760
  12789/2015
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-horizon\")\n  (env ((□? (move-horizon-v)))))\""
  2695
  2015
  501
  179
  976
  223
  1199
  1
  1329067/2489760
  12789/2015
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2695
  2015
  501
  179
  976
  223
  1199
  1
  1329067/2489760
  12789/2015
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2695
  2015
  501
  179
  976
  223
  1199
  1
  1329067/2489760
  12789/2015
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma)))\n  (env ((□? (bo)) (□? (ma)))))\""
  2695
  2015
  501
  179
  976
  223
  1199
  1
  1329067/2489760
  12789/2015
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  2700
  2020
  501
  179
  976
  223
  1199
  1
  1326907/2489760
  6409/1010
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  2700
  2020
  501
  179
  976
  223
  1199
  1
  1326907/2489760
  6409/1010
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  2700
  2020
  501
  179
  976
  223
  1199
  1
  1326907/2489760
  6409/1010
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2700
  2020
  501
  179
  976
  223
  1199
  1
  1326907/2489760
  6409/1010
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  2700
  2020
  501
  179
  976
  223
  1199
  1
  1326907/2489760
  6409/1010
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  2700
  2020
  501
  179
  976
  223
  1199
  1
  1326907/2489760
  6409/1010
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2706
  2026
  501
  179
  976
  223
  1199
  1
  101779/191520
  6426/1013
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  2706
  2026
  501
  179
  976
  223
  1199
  1
  101779/191520
  6426/1013
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  2706
  2026
  501
  179
  976
  223
  1199
  1
  101779/191520
  6426/1013
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  2710
  2030
  501
  179
  976
  223
  1199
  1
  1313047/2489760
  12879/2030
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2714
  2034
  501
  179
  977
  223
  1200
  1
  1314307/2494800
  12895/2034
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  2714
  2034
  501
  179
  977
  223
  1200
  1
  1314307/2494800
  12895/2034
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2714
  2034
  501
  179
  977
  223
  1200
  1
  1314307/2494800
  12895/2034
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) bo that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  2714
  2034
  501
  179
  977
  223
  1200
  1
  1314307/2494800
  12895/2034
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  2714
  2034
  501
  179
  977
  223
  1200
  1
  1314307/2494800
  12895/2034
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2714
  2034
  501
  179
  977
  223
  1200
  1
  1314307/2494800
  12895/2034
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  2714
  2034
  501
  179
  977
  223
  1200
  1
  1314307/2494800
  12895/2034
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  2714
  2034
  501
  179
  977
  223
  1200
  1
  1314307/2494800
  12895/2034
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  2714
  2034
  501
  179
  977
  223
  1200
  1
  1314307/2494800
  12895/2034
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  2714
  2034
  501
  179
  977
  223
  1200
  1
  1314307/2494800
  12895/2034
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  2715
  2035
  501
  179
  977
  223
  1200
  1
  1314307/2494800
  12901/2035
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  2715
  2035
  501
  179
  977
  223
  1200
  1
  1314307/2494800
  12901/2035
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2715
  2035
  501
  179
  977
  223
  1200
  1
  1314307/2494800
  12901/2035
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) empty-board player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  2716
  2036
  501
  179
  977
  223
  1200
  1
  1313047/2494800
  6453/1018
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env ((□? (h)))))\""
  2719
  2039
  501
  179
  979
  223
  1202
  1
  1316407/2499840
  12921/2039
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  2719
  2039
  501
  179
  979
  223
  1202
  1
  1316407/2499840
  12921/2039
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2719
  2039
  501
  179
  979
  223
  1202
  1
  1316407/2499840
  12921/2039
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  2719
  2039
  501
  179
  979
  223
  1202
  1
  1316407/2499840
  12921/2039
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app win) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2725
  2045
  501
  179
  981
  223
  1204
  1
  1318087/2504880
  12951/2045
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  2728
  2048
  501
  179
  983
  223
  1206
  1
  1321447/2509920
  6483/1024
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  2731
  2051
  501
  179
  985
  223
  1208
  1
  1324807/2514960
  1854/293
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  2731
  2051
  501
  179
  985
  223
  1208
  1
  1324807/2514960
  1854/293
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  2731
  2051
  501
  179
  985
  223
  1208
  1
  1324807/2514960
  1854/293
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  2732
  2052
  501
  179
  985
  223
  1208
  1
  1322287/2514960
  3247/513
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  2732
  2052
  501
  179
  985
  223
  1208
  1
  1322287/2514960
  3247/513
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2732
  2052
  501
  179
  985
  223
  1208
  1
  1322287/2514960
  3247/513
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  2732
  2052
  501
  179
  985
  223
  1208
  1
  1322287/2514960
  3247/513
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  2732
  2052
  501
  179
  985
  223
  1208
  1
  1322287/2514960
  3247/513
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2732
  2052
  501
  179
  985
  223
  1208
  1
  1322287/2514960
  3247/513
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  2732
  2052
  501
  179
  985
  223
  1208
  1
  1322287/2514960
  3247/513
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2732
  2052
  501
  179
  985
  223
  1208
  1
  1322287/2514960
  3247/513
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env ((□? ()))))\""
  2732
  2052
  501
  179
  985
  223
  1208
  1
  1322287/2514960
  3247/513
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  2733
  2053
  501
  179
  985
  223
  1208
  1
  1321027/2514960
  12992/2053
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> display <-) \"Cat's game.\\n\")\n  (env ((□? (bo this-play that-play)))))\""
  2733
  2053
  501
  179
  985
  223
  1208
  1
  1321027/2514960
  12992/2053
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  2736
  2056
  501
  179
  987
  223
  1210
  1
  1324387/2520000
  13007/2056
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2736
  2056
  501
  179
  987
  223
  1210
  1
  1324387/2520000
  13007/2056
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  2737
  2057
  501
  179
  987
  223
  1210
  1
  1321867/2520000
  13012/2057
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  2737
  2057
  501
  179
  987
  223
  1210
  1
  1321867/2520000
  13012/2057
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  2741
  2061
  501
  179
  989
  223
  1212
  1
  1326907/2530080
  13030/2061
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  2741
  2061
  501
  179
  989
  223
  1212
  1
  1326907/2530080
  13030/2061
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  2743
  2063
  501
  179
  990
  223
  1213
  1
  1325647/2530080
  13038/2063
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  2743
  2063
  501
  179
  990
  223
  1213
  1
  1325647/2530080
  13038/2063
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (c)) (□? (b m)))))\""
  2743
  2063
  501
  179
  990
  223
  1213
  1
  1325647/2530080
  13038/2063
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  2743
  2063
  501
  179
  990
  223
  1213
  1
  1325647/2530080
  13038/2063
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2747
  2067
  501
  179
  990
  223
  1213
  1
  1323127/2530080
  13060/2067
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env ((□? (f acc l)))))\""
  2748
  2068
  501
  179
  990
  223
  1213
  1
  1321867/2530080
  13065/2068
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env ((□? (h₀ h₁)))))\""
  2751
  2071
  501
  179
  992
  223
  1215
  1
  1325227/2535120
  120/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2751
  2071
  501
  179
  992
  223
  1215
  1
  1325227/2535120
  120/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  2751
  2071
  501
  179
  992
  223
  1215
  1
  1325227/2535120
  120/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  2754
  2074
  501
  179
  992
  223
  1215
  1
  147123/281680
  6549/1037
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  2754
  2074
  501
  179
  992
  223
  1215
  1
  147123/281680
  6549/1037
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  2754
  2074
  501
  179
  992
  223
  1215
  1
  147123/281680
  6549/1037
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  2754
  2074
  501
  179
  992
  223
  1215
  1
  147123/281680
  6549/1037
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env ((□? (b co m)))))\""
  2755
  2075
  501
  179
  992
  223
  1215
  1
  147011/281680
  13103/2075
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-coord\")\n  (env ((□? (move-coord-v)))))\""
  2756
  2076
  501
  179
  992
  223
  1215
  1
  146731/281680
  3277/519
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2764
  2084
  501
  179
  994
  223
  1217
  1
  147011/282800
  3287/521
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2770
  2090
  501
  179
  996
  223
  1219
  1
  441593/850080
  599/95
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  2772
  2092
  501
  179
  997
  223
  1220
  1
  442433/851760
  3297/523
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  2772
  2092
  501
  179
  997
  223
  1220
  1
  442433/851760
  3297/523
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2772
  2092
  501
  179
  997
  223
  1220
  1
  442433/851760
  3297/523
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  2772
  2092
  501
  179
  997
  223
  1220
  1
  442433/851760
  3297/523
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  2772
  2092
  501
  179
  997
  223
  1220
  1
  442433/851760
  3297/523
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  2775
  2095
  501
  179
  999
  223
  1222
  1
  147851/284480
  2640/419
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2775
  2095
  501
  179
  999
  223
  1222
  1
  147851/284480
  2640/419
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2775
  2095
  501
  179
  999
  223
  1222
  1
  147851/284480
  2640/419
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo)))))\""
  2775
  2095
  501
  179
  999
  223
  1222
  1
  147851/284480
  2640/419
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2775
  2095
  501
  179
  999
  223
  1222
  1
  147851/284480
  2640/419
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  2775
  2095
  501
  179
  999
  223
  1222
  1
  147851/284480
  2640/419
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  2775
  2095
  501
  179
  999
  223
  1222
  1
  147851/284480
  2640/419
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  2775
  2095
  501
  179
  999
  223
  1222
  1
  147851/284480
  2640/419
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  2777
  2097
  501
  179
  1000
  223
  1223
  1
  148131/285040
  4408/699
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> empty-board <-) player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  2777
  2097
  501
  179
  1000
  223
  1223
  1
  148131/285040
  4408/699
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  2777
  2097
  501
  179
  1000
  223
  1223
  1
  148131/285040
  4408/699
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2777
  2097
  501
  179
  1000
  223
  1223
  1
  148131/285040
  4408/699
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2777
  2097
  501
  179
  1000
  223
  1223
  1
  148131/285040
  4408/699
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  2782
  2102
  501
  179
  1000
  223
  1223
  1
  147891/285040
  13253/2102
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  2782
  2102
  501
  179
  1000
  223
  1223
  1
  147891/285040
  13253/2102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  2782
  2102
  501
  179
  1000
  223
  1223
  1
  147891/285040
  13253/2102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  2898
  2180
  531
  187
  1032
  242
  1274
  1
  18727/35770
  3482/545
  ((213/2 213/2 1) (213/2 213/2 1) (106 106 1)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2898
  2180
  531
  187
  1032
  242
  1274
  1
  18727/35770
  3482/545
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  2898
  2180
  531
  187
  1032
  242
  1274
  1
  18727/35770
  3482/545
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2904
  2186
  531
  187
  1034
  242
  1276
  1
  56251/107520
  13967/2186
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2904
  2186
  531
  187
  1034
  242
  1276
  1
  56251/107520
  13967/2186
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  2904
  2186
  531
  187
  1034
  242
  1276
  1
  56251/107520
  13967/2186
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  2904
  2186
  531
  187
  1034
  242
  1276
  1
  56251/107520
  13967/2186
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  2904
  2186
  531
  187
  1034
  242
  1276
  1
  56251/107520
  13967/2186
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  2906
  2188
  531
  187
  1035
  242
  1277
  1
  28178/53865
  13983/2188
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2910
  2192
  531
  187
  1036
  242
  1278
  1
  112817/215880
  14003/2192
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2910
  2192
  531
  187
  1036
  242
  1278
  1
  112817/215880
  14003/2192
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env ((□? (some-v-v)))))\""
  2910
  2192
  531
  187
  1036
  242
  1278
  1
  112817/215880
  14003/2192
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2910
  2192
  531
  187
  1036
  242
  1278
  1
  112817/215880
  14003/2192
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  2910
  2192
  531
  187
  1036
  242
  1278
  1
  112817/215880
  14003/2192
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2910
  2192
  531
  187
  1036
  242
  1278
  1
  112817/215880
  14003/2192
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  2912
  2194
  531
  187
  1037
  242
  1279
  1
  113027/216300
  14011/2194
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  2915
  2197
  531
  187
  1039
  242
  1281
  1
  37769/72240
  14026/2197
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  2915
  2197
  531
  187
  1039
  242
  1281
  1
  37769/72240
  14026/2197
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2915
  2197
  531
  187
  1039
  242
  1281
  1
  37769/72240
  14026/2197
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2915
  2197
  531
  187
  1039
  242
  1281
  1
  37769/72240
  14026/2197
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  2915
  2197
  531
  187
  1039
  242
  1281
  1
  37769/72240
  14026/2197
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env ((□? (bo)))))\""
  2916
  2198
  531
  187
  1039
  242
  1281
  1
  37699/72240
  14031/2198
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env ((□? (oc₀ oc₁)))))\""
  2916
  2198
  531
  187
  1039
  242
  1281
  1
  37699/72240
  14031/2198
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  2922
  2204
  531
  187
  1043
  242
  1285
  1
  113657/217560
  7029/1102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  2922
  2204
  531
  187
  1043
  242
  1285
  1
  113657/217560
  7029/1102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b)))))\""
  2926
  2208
  531
  187
  1043
  242
  1285
  1
  226999/435120
  7039/1104
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  2932
  2214
  531
  187
  1043
  242
  1285
  1
  226859/435120
  7061/1107
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  2935
  2217
  531
  187
  1045
  242
  1287
  1
  227419/435960
  14134/2217
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  2935
  2217
  531
  187
  1045
  242
  1287
  1
  227419/435960
  14134/2217
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2935
  2217
  531
  187
  1045
  242
  1287
  1
  227419/435960
  14134/2217
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  2936
  2218
  531
  187
  1045
  242
  1287
  1
  226999/435960
  7070/1109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  2939
  2221
  531
  187
  1047
  242
  1289
  1
  75853/145600
  14152/2221
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2939
  2221
  531
  187
  1047
  242
  1289
  1
  75853/145600
  14152/2221
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env ((□? (bo)) (□? (ma)))))\""
  2939
  2221
  531
  187
  1047
  242
  1289
  1
  75853/145600
  14152/2221
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  2943
  2224
  531
  188
  1049
  242
  1291
  1
  228119/437640
  14167/2224
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  2948
  2229
  531
  188
  1050
  242
  1292
  1
  228959/439320
  14192/2229
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  2948
  2229
  531
  188
  1050
  242
  1292
  1
  228959/439320
  14192/2229
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> minimax <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2948
  2229
  531
  188
  1050
  242
  1292
  1
  228959/439320
  14192/2229
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  2949
  2230
  531
  188
  1050
  242
  1292
  1
  228839/439320
  14203/2230
  ((11 11 0) (23/2 23/2 0) (23/2 23/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  2952
  2233
  531
  188
  1052
  242
  1294
  1
  229399/440160
  14220/2233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  2952
  2233
  531
  188
  1052
  242
  1294
  1
  229399/440160
  14220/2233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  2952
  2233
  531
  188
  1052
  242
  1294
  1
  229399/440160
  14220/2233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  2958
  2239
  531
  188
  1052
  242
  1294
  1
  229259/440160
  14274/2239
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  2958
  2239
  531
  188
  1052
  242
  1294
  1
  229259/440160
  14274/2239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  2958
  2239
  531
  188
  1052
  242
  1294
  1
  229259/440160
  14274/2239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  2958
  2239
  531
  188
  1052
  242
  1294
  1
  229259/440160
  14274/2239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  2958
  2239
  531
  188
  1052
  242
  1294
  1
  229259/440160
  14274/2239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  2960
  2241
  531
  188
  1053
  242
  1295
  1
  228979/440160
  14284/2241
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2960
  2241
  531
  188
  1053
  242
  1295
  1
  228979/440160
  14284/2241
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  2962
  2243
  531
  188
  1054
  242
  1296
  1
  229399/441000
  14304/2243
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  2964
  2245
  531
  188
  1054
  242
  1296
  1
  228559/441000
  14316/2245
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  2964
  2245
  531
  188
  1054
  242
  1296
  1
  228559/441000
  14316/2245
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  2964
  2245
  531
  188
  1054
  242
  1296
  1
  228559/441000
  14316/2245
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? (ma)))))\""
  2964
  2245
  531
  188
  1054
  242
  1296
  1
  228559/441000
  14316/2245
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  2966
  2247
  531
  188
  1054
  242
  1296
  1
  227719/441000
  4776/749
  ((8 8 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  2971
  2252
  531
  188
  1054
  242
  1296
  1
  226879/441000
  3589/563
  ((15 15 0) (15 15 0) (15 15 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  2971
  2252
  531
  188
  1054
  242
  1296
  1
  226879/441000
  3589/563
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  2972
  2253
  531
  188
  1054
  242
  1296
  1
  75533/147000
  14360/2253
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  3014
  2282
  544
  188
  1073
  253
  1326
  1
  76163/147280
  14613/2282
  ((81/2 81/2 0) (38 38 0) (38 38 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  3014
  2282
  544
  188
  1073
  253
  1326
  1
  76163/147280
  14613/2282
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  3014
  2282
  544
  188
  1073
  253
  1326
  1
  76163/147280
  14613/2282
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  3014
  2282
  544
  188
  1073
  253
  1326
  1
  76163/147280
  14613/2282
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  3014
  2282
  544
  188
  1073
  253
  1326
  1
  76163/147280
  14613/2282
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  3036
  2295
  553
  188
  1080
  257
  1337
  1
  19207/36960
  14698/2295
  ((3 3 0) (3 3 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3036
  2295
  553
  188
  1080
  257
  1337
  1
  19207/36960
  14698/2295
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  3036
  2295
  553
  188
  1080
  257
  1337
  1
  19207/36960
  14698/2295
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  3036
  2295
  553
  188
  1080
  257
  1337
  1
  19207/36960
  14698/2295
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  3036
  2295
  553
  188
  1080
  257
  1337
  1
  19207/36960
  14698/2295
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  3036
  2295
  553
  188
  1080
  257
  1337
  1
  19207/36960
  14698/2295
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env ((□? ()))))\""
  3036
  2295
  553
  188
  1080
  257
  1337
  1
  19207/36960
  14698/2295
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  3037
  2296
  553
  188
  1080
  257
  1337
  1
  4793/9240
  1838/287
  ((0 0 0) (1/2 1/2 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3037
  2296
  553
  188
  1080
  257
  1337
  1
  4793/9240
  1838/287
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  3150
  2373
  581
  196
  1111
  274
  1385
  1
  154741/296240
  15373/2373
  ((111 111 1) (223/2 223/2 1) (111 111 1)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  3150
  2373
  581
  196
  1111
  274
  1385
  1
  154741/296240
  15373/2373
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  3159
  2382
  581
  196
  1117
  274
  1391
  1
  155861/297920
  7706/1191
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  3159
  2382
  581
  196
  1117
  274
  1391
  1
  155861/297920
  7706/1191
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo this-play that-play)))))\""
  3162
  2385
  581
  196
  1119
  274
  1393
  1
  468703/895440
  15427/2385
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  3166
  2389
  581
  196
  1119
  274
  1393
  1
  468073/895440
  15443/2389
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  3167
  2390
  581
  196
  1119
  274
  1393
  1
  467513/895440
  15447/2390
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  3168
  2391
  581
  196
  1119
  274
  1393
  1
  466673/895440
  15451/2391
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  3168
  2391
  581
  196
  1119
  274
  1393
  1
  466673/895440
  15451/2391
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  3168
  2391
  581
  196
  1119
  274
  1393
  1
  466673/895440
  15451/2391
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  3171
  2394
  581
  196
  1121
  274
  1395
  1
  51977/99680
  407/63
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  3173
  2396
  581
  196
  1122
  274
  1396
  1
  156211/299600
  3869/599
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  3176
  2399
  581
  196
  1124
  274
  1398
  1
  469753/900480
  15488/2399
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3180
  2403
  581
  196
  1125
  274
  1399
  1
  470173/902160
  5171/801
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env ((□? (co)))))\""
  3182
  2404
  581
  197
  1125
  274
  1399
  1
  469333/902160
  7759/1202
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  3182
  2404
  581
  197
  1125
  274
  1399
  1
  469333/902160
  7759/1202
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> maximin <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3182
  2404
  581
  197
  1125
  274
  1399
  1
  469333/902160
  7759/1202
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3182
  2404
  581
  197
  1125
  274
  1399
  1
  469333/902160
  7759/1202
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3182
  2404
  581
  197
  1125
  274
  1399
  1
  469333/902160
  7759/1202
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  3182
  2404
  581
  197
  1125
  274
  1399
  1
  469333/902160
  7759/1202
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  3182
  2404
  581
  197
  1125
  274
  1399
  1
  469333/902160
  7759/1202
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3182
  2404
  581
  197
  1125
  274
  1399
  1
  469333/902160
  7759/1202
  ((0 0 0) (0 0 0) (0 0 0)))
