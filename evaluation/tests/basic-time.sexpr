'(clean-cache
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env (() () ())))\""
  35
  23
  9
  3
  23
  9
  32
  1
  1
  122/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  0
  10
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  0
  10
  26
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  51
  33
  12
  6
  33
  12
  45
  1
  1
  179/33
  ((1/2 1/2 0) (1 1 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  0
  10
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env (() () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env (() () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  0
  10
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env (())))\""
  28
  19
  7
  2
  19
  7
  26
  1
  1
  101/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env (() () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  0
  10
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4) (env (() () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4) (env (() () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  10
  49
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  10
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  30
  21
  7
  2
  21
  7
  28
  1
  1
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  34
  24
  8
  2
  24
  8
  32
  1
  1
  43/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  0
  10
  49
  app
  "\"'(eval (λ (n4) (-> (app p n1 n2 n3 n4) <-)) (env (() () () () ())))\""
  58
  44
  11
  3
  44
  11
  55
  1
  1
  60/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  0
  10
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  10
  5
  5
  0
  5
  5
  10
  1
  1
  28/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  51
  40
  9
  2
  40
  9
  49
  1
  1
  219/40
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  10
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  10
  49
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  10
  5
  5
  0
  5
  5
  10
  1
  1
  28/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4) (env (() () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-)) (env (() () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4) (env (() () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  49
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval (app (-> (app p n1) <-) n2) (env (() () () () () () () ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  20
  10
  8
  2
  10
  8
  18
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  22
  10
  10
  2
  10
  10
  20
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env (() () () () () () () ())))\""
  23
  15
  2
  6
  15
  2
  17
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env (() () () () () () () ())))\""
  96
  70
  17
  9
  70
  17
  87
  1
  1
  38/7
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (() () () () () () ())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  34
  21
  11
  2
  21
  11
  32
  1
  1
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env (() () () () () () () ())))\""
  17
  11
  2
  4
  11
  2
  13
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  32
  17
  13
  2
  17
  13
  30
  1
  1
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env (() () () () () () ())))\""
  26
  14
  10
  2
  14
  10
  24
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (() () () () () () ())))\""
  26
  14
  10
  2
  14
  10
  24
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (() () () () () () ())))\""
  20
  10
  8
  2
  10
  8
  18
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (() () () () () () ())))\""
  22
  10
  10
  2
  10
  10
  20
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  38
  24
  12
  2
  24
  12
  36
  1
  1
  43/8
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (() () () () () () ())))\""
  28
  14
  12
  2
  14
  12
  26
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (() () () () () () ())))\""
  24
  10
  12
  2
  10
  12
  22
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  22
  10
  10
  2
  10
  10
  20
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (() () () () () () ())))\""
  32
  17
  13
  2
  17
  13
  30
  1
  1
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env (() () () () () () () ())))\""
  14
  9
  2
  3
  9
  2
  11
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env (() () () () () () () ())))\""
  20
  13
  2
  5
  13
  2
  15
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (() () () () () () ())))\""
  24
  14
  8
  2
  14
  8
  22
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  135
  93
  25
  17
  93
  25
  118
  1
  1
  517/93
  ((13/2 13/2 0) (7 7 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (app p n1) (-> n2 <-)) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (() () () () () () ())))\""
  24
  10
  12
  2
  10
  12
  22
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1) (env (() () () () () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval (app (-> (app (app p n1) n2) <-) n3) (env (() () () () () () () ())))\""
  11
  7
  2
  2
  7
  2
  9
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  28
  17
  9
  2
  17
  9
  26
  1
  1
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (() () () () () () ())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  20
  10
  8
  2
  10
  8
  18
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env (() () () () () () ())))\""
  24
  14
  8
  2
  14
  8
  22
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (() () () () () () ())))\""
  20
  10
  8
  2
  10
  8
  18
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (app (app p n1) n2) (-> n3 <-)) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  34
  19
  13
  2
  19
  13
  32
  1
  1
  101/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (() () () () () () ())))\""
  24
  10
  12
  2
  10
  12
  22
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (() () () () () () ())))\""
  71
  54
  15
  2
  54
  15
  69
  1
  1
  299/54
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  sat-2
  0
  10
  78
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-)) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  7
  6
  0
  1
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (1/2 1/2 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  112
  82
  19
  11
  82
  19
  101
  1
  1
  463/82
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  6
  4
  2
  0
  4
  2
  6
  1
  1
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (0 0 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  114
  83
  19
  12
  83
  19
  102
  1
  1
  469/83
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (0 0 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  30
  21
  7
  2
  21
  7
  28
  1
  1
  16/3
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (6 6 0) (7 7 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  34
  24
  8
  2
  24
  8
  32
  1
  1
  43/8
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  116
  85
  19
  12
  85
  19
  104
  1
  1
  479/85
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  65
  54
  9
  2
  54
  9
  63
  1
  1
  299/54
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  72
  58
  11
  3
  58
  11
  69
  1
  1
  160/29
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (1/2 1/2 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  28
  19
  7
  2
  19
  7
  26
  1
  1
  101/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval (let (bo) (-> (match (app wins? bo mark) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  11/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  25/4
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma))) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  60
  28
  29
  3
  28
  29
  57
  1
  1
  145/28
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app play-turn empty-board player-one (-> player-two <-)) (env (())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  37/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app play-turn (-> bo <-) that-play this-play) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env (() ())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  36/7
  ((1/2 1/2 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env (() ())))\""
  38
  30
  7
  1
  30
  7
  37
  1
  1
  17/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env (() ())))\""
  53
  38
  13
  2
  38
  13
  51
  1
  1
  205/38
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env (() ())))\""
  77
  54
  22
  1
  54
  22
  76
  1
  1
  151/27
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env (() ())))\""
  23
  16
  6
  1
  16
  6
  22
  1
  1
  21/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  19
  10
  9
  0
  10
  9
  19
  1
  1
  27/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env (() ())))\""
  41
  18
  20
  3
  18
  20
  38
  1
  1
  46/9
  ((2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark co mark (-> bo <-)) (env (())))\""
  12
  8
  3
  1
  8
  3
  11
  1
  1
  41/8
  ((0 0 0) (1/2 1/2 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  9
  6
  2
  1
  6
  2
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (c) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  31
  23
  7
  1
  23
  7
  30
  1
  1
  124/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (letrec (loop) (-> (app loop) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (app X) (-> (app make-ai-action (app X)) <-)) (env (())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app win) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  31
  23
  7
  1
  23
  7
  30
  1
  1
  124/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app f (-> (app coord r c) <-) x) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  let
  "\"'(eval (λ () (-> (let (co) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app horizon (-> (app win) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  48
  22
  23
  3
  22
  23
  45
  1
  1
  113/22
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-coord\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (λ (bo) (-> (app error 'human-action \"not implemented\") <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env (())))\""
  69
  32
  34
  3
  32
  34
  66
  1
  1
  21/4
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (c) (-> (app marked? (app b (app coord r c))) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord rc rc) m) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app minimax bo (-> that-mark <-) this-mark) (env (() ())))\""
  30
  18
  11
  1
  18
  11
  29
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env (() ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> move-horizon-v <-) (move _ move-horizon-x) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app f (app coord r c) (-> x <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  23
  19
  4
  0
  19
  4
  23
  1
  1
  102/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env (())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  31
  23
  7
  1
  23
  7
  30
  1
  1
  124/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  77
  54
  22
  1
  54
  22
  76
  1
  1
  151/27
  ((4 4 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> this-play <-) (player mark action)) (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  104/17
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  19
  10
  9
  0
  10
  9
  19
  1
  1
  27/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (co) (-> (match (app equal? co₀ co) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app wins? bo mark) <-) (#f) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (-> (app X) <-) (app make-ai-action (app X))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  let
  "\"'(eval (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (move-horizon-v) (-> (match move-horizon-v ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app some-v (-> (app maximin bo that-mark this-mark) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app minimax bo that-mark (-> this-mark <-)) (env (() ())))\""
  18
  9
  9
  0
  9
  9
  18
  1
  1
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) bo that-play this-play) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (let (... () (co (-> (app action bo) <-)) () ...) ...) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app play-turn (-> empty-board <-) player-one player-two) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  48
  22
  23
  3
  22
  23
  45
  1
  1
  113/22
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env (())))\""
  42
  28
  13
  1
  28
  13
  41
  1
  1
  151/28
  ((3/2 3/2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> marked? <-) (app b (app coord r c))) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (let (_) (-> (app display \"Cat's game.\\n\") <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app marked? (-> (app b (app coord r c)) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env (() ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  12
  8
  3
  1
  8
  3
  11
  1
  1
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env (() ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo that-mark this-mark)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env (())))\""
  7
  3
  4
  0
  3
  4
  7
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env (() ())))\""
  12
  8
  3
  1
  8
  3
  11
  1
  1
  41/8
  ((1/2 1/2 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  let
  "\"'(eval (match (app full? bo) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-horizon\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env (() () ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app lose) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> minimax <-) bo that-mark this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin bo that-mark (-> this-mark <-)) (env (() ())))\""
  30
  18
  11
  1
  18
  11
  29
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord rc rc) <-) m) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env (())))\""
  24
  16
  8
  0
  16
  8
  24
  1
  1
  85/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env (())))\""
  14
  8
  6
  0
  8
  6
  14
  1
  1
  21/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env (() ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> move-coord-v <-) (move move-coord-x _) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app minimax bo that-mark this-mark)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-))) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env (())))\""
  14
  9
  5
  0
  9
  5
  14
  1
  1
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env (())))\""
  7
  3
  4
  0
  3
  4
  7
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  31
  23
  8
  0
  23
  8
  31
  1
  1
  122/23
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  letrec
  "\"'(eval (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord rc rc) m) (env (() ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (r) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co mark bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  12
  8
  3
  1
  8
  3
  11
  1
  1
  41/8
  ((0 0 0) (1/2 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env (())))\""
  26
  16
  9
  1
  16
  9
  25
  1
  1
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env (() ())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env (())))\""
  86
  58
  27
  1
  58
  27
  85
  1
  1
  163/29
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app horizon (-> (app lose) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app equal? co₀ co) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  24
  16
  8
  0
  16
  8
  24
  1
  1
  85/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match (app b co) ((blank) (-> (app #f) <-)) (marked m*)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  let
  "\"'(eval (λ (bo this-play that-play) (-> (let (_) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval (let (_) (-> (match this-play ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (move-coord-v) (-> (match move-coord-v ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env (())))\""
  8
  5
  3
  0
  5
  3
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app some-v (-> (app minimax bo that-mark this-mark) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env (())))\""
  15
  7
  8
  0
  7
  8
  15
  1
  1
  40/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  11/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app play-turn empty-board (-> player-one <-) player-two) (env (())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  37/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord rc rc) (-> m <-)) (env (() ())))\""
  77
  54
  22
  1
  54
  22
  76
  1
  1
  151/27
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) (app make-ai-action (app X))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) that-mark this-mark) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env (())))\""
  49
  35
  13
  1
  35
  13
  48
  1
  1
  188/35
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  77
  54
  22
  1
  54
  22
  76
  1
  1
  151/27
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env (())))\""
  23
  19
  4
  0
  19
  4
  23
  1
  1
  102/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  31
  23
  7
  1
  23
  7
  30
  1
  1
  124/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  9
  6
  2
  1
  6
  2
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> display <-) \"Cat's game.\\n\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env (() ())))\""
  77
  54
  22
  1
  54
  22
  76
  1
  1
  151/27
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  31
  19
  11
  1
  19
  11
  30
  1
  1
  102/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) empty-board player-one player-two) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> that-mark <-) this-mark) (env (() ())))\""
  18
  9
  9
  0
  9
  9
  18
  1
  1
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (c x) (-> (app f (app coord r c) x) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match some-v-v ((some some-v-x) (-> some-v-x <-)) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app play-turn bo (-> that-play <-) this-play) (env (())))\""
  23
  16
  7
  0
  16
  7
  23
  1
  1
  47/8
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app coord r c) x) (env (() () ())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) mark bo) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app minimax (-> bo <-) that-mark this-mark) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app play-turn bo that-play (-> this-play <-)) (env (())))\""
  23
  16
  7
  0
  16
  7
  23
  1
  1
  47/8
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo that-mark this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  31
  19
  11
  1
  19
  11
  30
  1
  1
  102/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env (())))\""
  19
  13
  6
  0
  13
  6
  19
  1
  1
  68/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env (())))\""
  37
  30
  7
  0
  30
  7
  37
  1
  1
  17/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> mark <-) bo) (env (())))\""
  37
  30
  7
  0
  30
  7
  37
  1
  1
  17/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-small
  1
  10
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  11
  5
  3
  3
  2
  1
  3
  1
  2/9
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  10
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2)))))\""
  26
  13
  8
  5
  8
  4
  12
  1
  3/4
  68/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  18
  9
  3
  6
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  10
  26
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  132
  89
  28
  15
  57
  19
  76
  1
  2321/2880
  500/89
  ((15/2 15/2 0) (15/2 15/2 0) (8 8 0)))
'(clean-cache
  sat-small
  1
  10
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  121
  78
  28
  15
  52
  19
  71
  1
  245/288
  433/78
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-small
  1
  10
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  129
  85
  28
  16
  59
  19
  78
  1
  2681/3060
  469/85
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env ((□? (x1 x2)))))\""
  28
  13
  8
  7
  9
  5
  14
  1
  17/20
  68/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  1
  10
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  130
  86
  28
  16
  60
  19
  79
  1
  2771/3150
  475/86
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-small
  1
  10
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  93
  63
  21
  9
  40
  15
  55
  1
  916/1035
  335/63
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  16
  9
  3
  4
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  10
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  115
  74
  28
  13
  50
  19
  69
  1
  493/558
  203/37
  ((13/2 13/2 0) (7 7 0) (13/2 13/2 0)))
'(clean-cache
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  11
  4
  2
  5
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  11
  5
  3
  3
  2
  1
  3
  1
  2/9
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  10
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  129
  86
  28
  15
  58
  19
  77
  1
  2501/2970
  237/43
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  10
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env ((□? (x1 x2)))))\""
  32
  19
  8
  5
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0) (1 1 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  1
  10
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env ((□? (x1 x2)))))\""
  73
  47
  19
  7
  30
  13
  43
  1
  131/171
  249/47
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  10
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  121
  78
  28
  15
  52
  19
  71
  1
  245/288
  433/78
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-small
  1
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  10
  49
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  38
  19
  8
  11
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  22
  9
  3
  10
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  10
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  10
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  36
  19
  8
  9
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  15
  4
  2
  9
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  20
  9
  3
  8
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  34
  13
  8
  13
  9
  5
  14
  1
  17/20
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  10
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  73
  43
  19
  11
  17
  6
  23
  1
  11/17
  227/43
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  sat-1
  1
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  18
  9
  3
  6
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  10
  49
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  36
  19
  8
  9
  12
  4
  16
  1
  3/4
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  19
  9
  5
  5
  4
  1
  5
  1
  4/25
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  10
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  87
  51
  19
  17
  21
  6
  27
  1
  13/21
  271/51
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  10
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  10
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  38
  19
  8
  11
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  24
  9
  3
  12
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  19
  9
  5
  5
  4
  1
  5
  1
  4/25
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  28
  13
  8
  7
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x4 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  45
  22
  2
  21
  8
  2
  10
  1
  8/15
  5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  80
  25
  13
  42
  9
  5
  14
  1
  9/14
  134/25
  ((4 4 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x4) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  113
  37
  20
  56
  9
  6
  15
  1
  9/14
  202/37
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  10
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  13
  2
  18
  5
  2
  7
  1
  5/9
  5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  55
  13
  8
  34
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  70
  15
  13
  42
  7
  5
  12
  1
  7/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  41
  19
  2
  20
  7
  2
  9
  1
  7/13
  5
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  37
  16
  2
  19
  6
  2
  8
  1
  6/11
  5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  136
  27
  31
  78
  7
  7
  14
  1
  7/10
  152/27
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  7
  2
  16
  3
  2
  5
  1
  3/5
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  10
  2
  17
  4
  2
  6
  1
  4/7
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  136
  27
  31
  78
  7
  7
  14
  1
  7/10
  152/27
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  95
  19
  20
  56
  7
  6
  13
  1
  7/10
  104/19
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  95
  19
  20
  56
  7
  6
  13
  1
  7/10
  104/19
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x3 x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  80
  25
  13
  42
  9
  5
  14
  1
  9/14
  134/25
  ((4 4 0) (4 4 0) (7/2 7/2 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  55
  13
  8
  34
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  31
  9
  3
  19
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  9
  3
  17
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  70
  15
  13
  42
  7
  5
  12
  1
  7/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  95
  19
  20
  56
  7
  6
  13
  1
  7/10
  104/19
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  9
  3
  21
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  70
  15
  13
  42
  7
  5
  12
  1
  7/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  27
  9
  3
  15
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  9
  3
  13
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  55
  13
  8
  34
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  70
  15
  13
  42
  7
  5
  12
  1
  7/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  9
  3
  9
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  23
  9
  3
  11
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  10
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  113
  37
  20
  56
  9
  6
  15
  1
  9/14
  202/37
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  8
  6
  0
  2
  4
  0
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  114
  43
  19
  52
  20
  9
  29
  1
  38/51
  227/43
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  sat-3
  1
  10
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  114
  51
  19
  44
  21
  6
  27
  1
  13/21
  271/51
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  86
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  19
  8
  18
  12
  4
  16
  1
  3/4
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  9
  3
  21
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  7
  3
  2
  2
  1
  1
  2
  1
  1/4
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  19
  8
  18
  12
  4
  16
  1
  3/4
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env ((□? (f)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  23
  9
  3
  11
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  9
  3
  9
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  106
  47
  19
  40
  20
  7
  27
  1
  13/19
  249/47
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  9
  3
  13
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  86
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  12
  4
  16
  1
  3/4
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  98
  43
  19
  36
  17
  6
  23
  1
  11/17
  227/43
  ((9 9 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  9
  3
  17
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  31
  9
  3
  19
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  11
  7
  2
  2
  3
  1
  4
  1
  3/8
  33/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  27
  9
  3
  15
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  19
  8
  16
  12
  4
  16
  1
  3/4
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  12
  4
  16
  1
  3/4
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  9
  5
  14
  1
  17/20
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  100
  43
  19
  38
  17
  6
  23
  1
  11/17
  227/43
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  9
  5
  14
  1
  17/20
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  9
  5
  14
  1
  17/20
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  10
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma)))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  87
  34
  21
  32
  8
  2
  10
  1
  7/40
  94/17
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  103
  43
  42
  18
  21
  22
  43
  1
  241/528
  222/43
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  47
  18
  15
  14
  0
  3
  3
  1
  0
  11/2
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (5 5 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  37
  28
  7
  2
  23
  4
  27
  1
  65/76
  151/28
  ((5/2 5/2 0) (2 2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  46
  29
  12
  5
  12
  7
  19
  1
  7/34
  185/29
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> empty-board <-) player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  29
  12
  9
  8
  1
  2
  3
  1
  1/16
  21/4
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env ((□? (b co m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  35
  14
  15
  6
  7
  8
  15
  1
  1/8
  40/7
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  7
  2
  6
  2
  1
  3
  1
  1/3
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  36
  17
  4
  15
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env ((□? (f acc l)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  18
  10
  4
  4
  3
  1
  4
  1
  3/28
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  67
  32
  20
  15
  7
  4
  11
  1
  7/19
  87/16
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  38
  28
  7
  3
  23
  4
  27
  1
  65/76
  151/28
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env ((□? (co)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (c)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  15
  14
  0
  3
  3
  1
  0
  27/5
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  28
  18
  7
  3
  14
  4
  18
  1
  19/24
  49/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  16
  6
  7
  3
  3
  4
  7
  1
  1/4
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  15
  14
  0
  3
  3
  1
  0
  27/5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  49
  32
  12
  5
  25
  8
  33
  1
  37/46
  173/32
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  51
  30
  15
  6
  22
  8
  30
  1
  39/64
  79/15
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env ((□? (some-v-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  67
  46
  12
  9
  17
  7
  24
  1
  13/60
  277/46
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  5
  4
  0
  1
  0
  0
  0
  1
  0
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  26
  13
  5
  8
  4
  1
  5
  1
  4/45
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  47
  18
  15
  14
  0
  3
  3
  1
  0
  11/2
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  88
  57
  23
  8
  42
  13
  55
  1
  111/152
  102/19
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  49
  32
  12
  5
  25
  8
  33
  1
  37/46
  173/32
  ((3 3 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  43
  26
  12
  5
  10
  7
  17
  1
  17/96
  79/13
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  32
  17
  4
  11
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-horizon\")\n  (env ((□? (move-horizon-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  39
  22
  9
  8
  6
  2
  8
  1
  3/13
  115/22
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  48
  32
  12
  4
  25
  8
  33
  1
  37/46
  173/32
  ((5/2 5/2 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env ((□? (r x)) (□? (f x)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  15
  6
  7
  2
  3
  4
  7
  1
  1/4
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  32
  17
  4
  11
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app minimax bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) bo that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  36
  17
  4
  15
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-coord\")\n  (env ((□? (move-coord-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  65
  44
  15
  6
  35
  8
  43
  1
  133/184
  21/4
  ((9/2 9/2 0) (9/2 9/2 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  77
  46
  23
  8
  34
  13
  47
  1
  11/16
  247/46
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  103
  43
  42
  18
  21
  22
  43
  1
  241/528
  222/43
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (1/2 1/2 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  27
  16
  5
  6
  9
  3
  12
  1
  5/8
  81/16
  ((1 1 0) (3/2 3/2 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  43
  26
  12
  5
  10
  7
  17
  1
  17/96
  79/13
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (9/2 9/2 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  61
  44
  12
  5
  14
  7
  21
  1
  5/36
  131/22
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  51
  30
  15
  6
  22
  8
  30
  1
  39/64
  79/15
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  43
  22
  15
  6
  14
  8
  22
  1
  7/32
  65/11
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app X) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  65
  30
  20
  15
  7
  4
  11
  1
  7/18
  27/5
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> display <-) \"Cat's game.\\n\")\n  (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  20
  10
  7
  3
  6
  4
  10
  1
  3/8
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  91
  60
  23
  8
  41
  13
  54
  1
  13/20
  107/20
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app win) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) empty-board player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  67
  32
  20
  15
  7
  4
  11
  1
  7/19
  87/16
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  51
  33
  13
  5
  25
  8
  33
  1
  37/46
  178/33
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  19
  10
  7
  2
  6
  4
  10
  1
  3/8
  27/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  24
  16
  5
  3
  11
  3
  14
  1
  17/24
  81/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env ((□? (f x)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  28
  18
  7
  3
  14
  4
  18
  1
  19/24
  49/9
  ((2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  24
  16
  5
  3
  11
  3
  14
  1
  17/24
  81/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  61
  44
  12
  5
  14
  7
  21
  1
  5/36
  131/22
  ((5 5 0) (5 5 0) (11/2 11/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  13
  7
  3
  3
  2
  1
  3
  1
  2/15
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  42
  25
  9
  8
  7
  2
  9
  1
  7/16
  132/25
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> minimax <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  27
  18
  7
  2
  14
  4
  18
  1
  19/24
  49/9
  ((2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked? <-) (app b (app coord r c)))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  18
  10
  4
  4
  3
  1
  4
  1
  3/28
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  80
  36
  32
  12
  20
  18
  38
  1
  241/432
  46/9
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  27
  16
  5
  6
  9
  3
  12
  1
  5/8
  81/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (b)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  74
  45
  21
  8
  33
  12
  45
  1
  25/36
  238/45
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  27
  18
  7
  2
  14
  4
  18
  1
  19/24
  49/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app lose) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  7
  2
  6
  2
  1
  3
  1
  1/3
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  65
  30
  20
  15
  7
  4
  11
  1
  7/18
  27/5
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  17
  5
  3
  9
  0
  1
  1
  1
  0
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> maximin <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  36
  17
  4
  15
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  10
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  119
  83
  25
  11
  50
  17
  67
  1
  781/1035
  435/83
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  13
  5
  3
  5
  0
  1
  1
  1
  0
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  10
  26
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  75
  48
  10
  17
  19
  6
  25
  1
  53/90
  113/24
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  11
  4
  2
  5
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2)))))\""
  30
  15
  8
  7
  5
  2
  7
  1
  7/20
  26/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-small
  2
  10
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  41
  22
  10
  9
  8
  6
  14
  1
  8/17
  52/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-small
  2
  10
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  67
  40
  10
  17
  17
  6
  23
  1
  27/40
  19/4
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env ((□? (x1 x2)))))\""
  29
  13
  8
  8
  8
  5
  13
  1
  4/5
  68/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  2
  10
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env ((□? (x1 x2)))))\""
  40
  25
  8
  7
  11
  2
  13
  1
  13/28
  26/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-small
  2
  10
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  10
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env ((□? (x1 x2)))))\""
  99
  67
  23
  9
  40
  15
  55
  1
  122/171
  352/67
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  sat-small
  2
  10
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  18
  11
  3
  4
  11
  1
  12
  1
  1
  49/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  10
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  10
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  67
  40
  10
  17
  17
  6
  23
  1
  59/90
  19/4
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  9
  3
  5
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  13
  5
  3
  5
  0
  1
  1
  1
  0
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  10
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  17
  10
  3
  4
  10
  1
  11
  1
  1
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  19
  9
  3
  7
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  10
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  22
  14
  3
  5
  5
  1
  6
  1
  3/10
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  10
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  49
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  25
  9
  3
  13
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  10
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  119
  74
  14
  31
  27
  6
  33
  1
  125/234
  351/74
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  sat-1
  2
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  10
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  119
  74
  14
  31
  27
  6
  33
  1
  23/42
  351/74
  ((13/2 13/2 0) (13/2 13/2 0) (6 6 0)))
'(clean-cache
  sat-1
  2
  10
  49
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  38
  19
  8
  11
  5
  2
  7
  1
  5/14
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  35
  13
  8
  14
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  2
  10
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  38
  19
  8
  11
  5
  2
  7
  1
  5/14
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  2
  10
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  84
  51
  19
  14
  13
  2
  15
  1
  7/17
  90/17
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  34
  13
  8
  13
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  19
  9
  3
  7
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  21
  9
  3
  9
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  10
  49
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  51
  24
  14
  13
  10
  6
  16
  1
  10/19
  113/24
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  23
  9
  5
  9
  0
  1
  1
  1
  0
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  10
  49
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  40
  19
  8
  13
  5
  2
  7
  1
  5/14
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  10
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  26
  14
  5
  7
  5
  1
  6
  1
  3/10
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  23
  9
  3
  11
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  2
  10
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  40
  19
  8
  13
  5
  2
  7
  1
  5/14
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  32
  15
  8
  9
  5
  2
  7
  1
  7/20
  26/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  10
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  21
  10
  5
  6
  10
  1
  11
  1
  1
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  10
  49
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  131
  86
  14
  31
  29
  6
  35
  1
  115/234
  405/86
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-1
  2
  10
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  102
  59
  23
  20
  13
  6
  19
  1
  1/3
  311/59
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  34
  13
  8
  13
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  23
  9
  5
  9
  0
  1
  1
  1
  0
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  10
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  22
  11
  5
  6
  11
  1
  12
  1
  1
  49/11
  ((0 0 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  10
  49
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  26
  14
  5
  7
  5
  1
  6
  1
  3/10
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  10
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  10
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  26
  14
  5
  7
  5
  1
  6
  1
  3/10
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  34
  13
  8
  13
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  2
  10
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  10
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  15
  4
  2
  9
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  36
  13
  2
  21
  2
  2
  4
  1
  2/9
  5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x4) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  32
  14
  8
  10
  5
  1
  6
  1
  3/10
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  24
  9
  3
  12
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  32
  14
  8
  10
  5
  1
  6
  1
  3/10
  9/2
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  2
  78
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  87
  42
  20
  25
  16
  6
  22
  1
  16/31
  29/6
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  74
  15
  13
  46
  3
  2
  5
  1
  3/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  56
  13
  8
  35
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  32
  14
  8
  10
  5
  1
  6
  1
  3/10
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  103
  19
  20
  64
  3
  2
  5
  1
  3/10
  104/19
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  38
  15
  8
  15
  0
  1
  1
  1
  0
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  84
  25
  13
  46
  5
  2
  7
  1
  5/14
  134/25
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  103
  19
  20
  64
  3
  2
  5
  1
  3/10
  104/19
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  56
  13
  8
  35
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  2
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  22
  9
  3
  10
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  121
  37
  20
  64
  5
  2
  7
  1
  5/14
  202/37
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  sat-2
  2
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  32
  9
  3
  20
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  28
  9
  3
  16
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  84
  25
  13
  46
  5
  2
  7
  1
  5/14
  134/25
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  74
  15
  13
  46
  3
  2
  5
  1
  3/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  32
  14
  8
  10
  5
  1
  6
  1
  3/10
  9/2
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  56
  13
  8
  35
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  2
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x4 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  74
  15
  13
  46
  3
  2
  5
  1
  3/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  30
  9
  3
  18
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  103
  19
  20
  64
  3
  2
  5
  1
  3/10
  104/19
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  26
  7
  2
  17
  2
  2
  4
  1
  2/5
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  46
  19
  2
  25
  2
  2
  4
  1
  2/13
  5
  ((2 2 0) (5/2 5/2 0) (2 2 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  38
  15
  8
  15
  0
  1
  1
  1
  0
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  2
  78
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  31
  10
  2
  19
  2
  2
  4
  1
  2/7
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  74
  15
  13
  46
  3
  2
  5
  1
  3/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  2
  10
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  27
  10
  8
  9
  10
  1
  11
  1
  1
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  10
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  32
  14
  8
  10
  5
  1
  6
  1
  3/10
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  34
  9
  3
  22
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  51
  22
  2
  27
  2
  2
  4
  1
  2/15
  5
  ((3 3 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  32
  14
  8
  10
  5
  1
  6
  1
  3/10
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  2
  10
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  121
  37
  20
  64
  5
  2
  7
  1
  5/14
  202/37
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x3 x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  10
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  41
  16
  2
  23
  2
  2
  4
  1
  2/11
  5
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-2
  2
  10
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  28
  11
  8
  9
  11
  1
  12
  1
  1
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  26
  9
  3
  14
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  34
  16
  8
  10
  6
  1
  7
  1
  7/22
  71/16
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  34
  16
  8
  10
  6
  1
  7
  1
  7/22
  71/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  10
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  19
  8
  18
  5
  2
  7
  1
  5/14
  100/19
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  30
  13
  8
  9
  13
  1
  14
  1
  1
  58/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  34
  16
  8
  10
  6
  1
  7
  1
  7/22
  71/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  10
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  28
  11
  8
  9
  11
  1
  12
  1
  1
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  86
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  34
  16
  8
  10
  6
  1
  7
  1
  7/22
  71/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  10
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  12
  7
  2
  3
  0
  1
  1
  1
  0
  33/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  103
  43
  19
  41
  5
  2
  7
  1
  5/17
  227/43
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  34
  9
  3
  22
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  113
  51
  23
  39
  13
  6
  19
  1
  7/17
  89/17
  ((10 10 0) (10 10 0) (10 10 0)))
'(clean-cache
  sat-3
  2
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  28
  9
  3
  16
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1 1 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  24
  9
  3
  12
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0) (1 1 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  44
  13
  8
  23
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  44
  13
  8
  23
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env ((□? (f)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  38
  15
  8
  15
  0
  1
  1
  1
  0
  27/5
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  26
  9
  3
  14
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  44
  13
  8
  23
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  5
  2
  7
  1
  5/14
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  34
  16
  8
  10
  6
  1
  7
  1
  7/22
  71/16
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  22
  9
  3
  10
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  5
  2
  7
  1
  5/14
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  30
  9
  3
  18
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  9
  6
  0
  3
  1
  0
  1
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  38
  15
  8
  15
  0
  1
  1
  1
  0
  27/5
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  34
  16
  8
  10
  6
  1
  7
  1
  7/22
  71/16
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  108
  47
  19
  42
  10
  5
  15
  1
  8/19
  249/47
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  64
  25
  20
  19
  10
  6
  16
  1
  1/2
  117/25
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  49
  19
  8
  22
  5
  2
  7
  1
  5/14
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  32
  9
  3
  20
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  10
  86
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  49
  19
  8
  22
  5
  2
  7
  1
  5/14
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  38
  17
  4
  17
  1
  1
  2
  1
  1/12
  87/17
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  24
  9
  10
  5
  3
  4
  7
  1
  1/7
  16/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  24
  10
  4
  10
  0
  1
  1
  1
  0
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  58
  32
  18
  8
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  42
  17
  4
  21
  1
  1
  2
  1
  1/12
  87/17
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  15
  7
  3
  5
  0
  1
  1
  1
  0
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app win) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  46
  25
  9
  12
  1
  2
  3
  1
  1/16
  132/25
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  58
  32
  18
  8
  23
  7
  30
  1
  53/66
  41/8
  ((3 3 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  88
  44
  18
  26
  14
  4
  18
  1
  5/16
  48/11
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  26
  8
  8
  10
  4
  1
  5
  1
  1/2
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env ((□? (r x)) (□? (f x)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) bo that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  58
  32
  18
  8
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  43
  22
  10
  11
  10
  2
  12
  1
  5/11
  103/22
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  55
  21
  15
  19
  9
  3
  12
  1
  3/7
  94/21
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> empty-board <-) player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  55
  21
  15
  19
  9
  3
  12
  1
  3/7
  94/21
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  23
  10
  4
  9
  3
  1
  4
  1
  3/10
  22/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app lose) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  51
  32
  14
  5
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  45
  22
  12
  11
  10
  2
  12
  1
  5/11
  103/22
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  43
  22
  9
  12
  0
  2
  2
  1
  0
  115/22
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  63
  36
  17
  10
  10
  7
  17
  1
  5/64
  37/6
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  39
  16
  8
  15
  8
  2
  10
  1
  1/2
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  82
  42
  21
  19
  15
  5
  20
  1
  5/12
  100/21
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  39
  24
  10
  5
  14
  4
  18
  1
  31/42
  43/8
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  48
  21
  10
  17
  9
  3
  12
  1
  3/7
  94/21
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  73
  29
  16
  28
  4
  2
  6
  1
  1/5
  137/29
  ((7/2 7/2 0) (7/2 7/2 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  58
  32
  18
  8
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  20
  10
  4
  6
  4
  1
  5
  1
  2/5
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  53
  32
  14
  7
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  47
  20
  10
  17
  8
  3
  11
  1
  4/9
  22/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env ((□? (f x)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  18
  9
  3
  6
  5
  1
  6
  1
  5/9
  40/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma)))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  50
  23
  13
  14
  11
  2
  13
  1
  11/23
  107/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (b)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  50
  23
  13
  14
  11
  2
  13
  1
  11/23
  107/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  74
  32
  20
  22
  1
  4
  5
  1
  1/19
  87/16
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  6
  2
  7
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  21
  10
  4
  7
  4
  1
  5
  1
  2/5
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  55
  32
  16
  7
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  24
  11
  4
  9
  3
  1
  4
  1
  3/11
  48/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  24
  10
  4
  10
  0
  1
  1
  1
  0
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> display <-) \"Cat's game.\\n\")\n  (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  67
  35
  22
  10
  24
  8
  32
  1
  18/23
  37/7
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  39
  26
  7
  6
  12
  3
  15
  1
  8/15
  139/26
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  25
  16
  4
  5
  9
  1
  10
  1
  4/7
  75/16
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  53
  32
  14
  7
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  17
  7
  2
  8
  1
  1
  2
  1
  1/6
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  38
  17
  4
  17
  1
  1
  2
  1
  1/12
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  39
  26
  7
  6
  12
  3
  15
  1
  8/15
  139/26
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  45
  18
  10
  17
  8
  3
  11
  1
  8/17
  40/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> minimax <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  42
  17
  4
  21
  1
  1
  2
  1
  1/12
  87/17
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  33
  12
  9
  12
  0
  2
  2
  1
  0
  21/4
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  39
  16
  8
  15
  8
  2
  10
  1
  1/2
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  44
  26
  7
  11
  10
  3
  13
  1
  29/60
  139/26
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  6
  2
  7
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  56
  21
  22
  13
  7
  8
  15
  1
  1/15
  40/7
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  50
  23
  13
  14
  11
  2
  13
  1
  11/23
  107/23
  ((5/2 5/2 0) (3 3 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  31
  16
  10
  5
  6
  4
  10
  1
  3/14
  43/8
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  46
  19
  7
  20
  5
  2
  7
  1
  3/13
  85/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  27
  9
  8
  10
  4
  1
  5
  1
  4/9
  40/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  65
  26
  18
  21
  10
  4
  14
  1
  5/13
  58/13
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  88
  44
  18
  26
  14
  4
  18
  1
  5/16
  48/11
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  19
  5
  3
  11
  0
  1
  1
  1
  0
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  19
  8
  4
  7
  4
  1
  5
  1
  1/2
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  58
  32
  18
  8
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  39
  24
  10
  5
  14
  4
  18
  1
  31/42
  43/8
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env ((□? (f acc l)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  53
  18
  15
  20
  0
  3
  3
  1
  0
  11/2
  ((3 3 0) (7/2 7/2 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  28
  9
  8
  11
  4
  1
  5
  1
  4/9
  40/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  50
  15
  15
  20
  0
  3
  3
  1
  0
  27/5
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (c)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  58
  32
  18
  8
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app X) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  50
  15
  15
  20
  0
  3
  3
  1
  0
  27/5
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  72
  30
  20
  22
  1
  4
  5
  1
  1/18
  27/5
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  28
  9
  8
  11
  4
  1
  5
  1
  4/9
  40/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked? <-) (app b (app coord r c)))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  39
  16
  8
  15
  8
  2
  10
  1
  1/2
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  5
  4
  0
  1
  0
  0
  0
  1
  0
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  87
  55
  22
  10
  32
  8
  40
  1
  68/99
  293/55
  ((5 5 0) (9/2 9/2 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  6
  2
  7
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  71
  44
  17
  10
  15
  7
  22
  1
  15/136
  281/44
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  19
  8
  4
  7
  4
  1
  5
  1
  1/2
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  27
  8
  8
  11
  4
  1
  5
  1
  1/2
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  32
  16
  10
  6
  6
  4
  10
  1
  3/14
  43/8
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  62
  32
  20
  10
  23
  7
  30
  1
  53/66
  41/8
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  74
  32
  20
  22
  1
  4
  5
  1
  1/19
  87/16
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  24
  11
  4
  9
  7
  1
  8
  1
  7/11
  50/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env ((□? (co)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env ((□? (some-v-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  102
  72
  14
  16
  35
  3
  38
  1
  17/39
  83/18
  ((8 8 0) (8 8 0) (8 8 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  79
  44
  22
  13
  22
  8
  30
  1
  67/120
  229/44
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  72
  30
  20
  22
  1
  4
  5
  1
  1/18
  27/5
  ((9/2 9/2 0) (9/2 9/2 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  85
  41
  18
  26
  14
  4
  18
  1
  10/31
  180/41
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  44
  26
  7
  11
  10
  3
  13
  1
  29/60
  139/26
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  47
  20
  10
  17
  8
  3
  11
  1
  4/9
  22/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  22
  14
  3
  5
  14
  1
  15
  1
  1
  31/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  62
  34
  8
  20
  14
  2
  16
  1
  2/5
  149/34
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  88
  56
  22
  10
  31
  8
  39
  1
  61/90
  37/7
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  58
  32
  18
  8
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  65
  26
  18
  21
  10
  4
  14
  1
  5/13
  58/13
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  79
  44
  22
  13
  22
  8
  30
  1
  67/120
  229/44
  ((8 8 0) (8 8 0) (8 8 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  30
  13
  5
  12
  0
  1
  1
  1
  0
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  52
  37
  10
  5
  23
  4
  27
  1
  107/133
  197/37
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  20
  12
  3
  5
  12
  1
  13
  1
  1
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  62
  34
  8
  20
  14
  2
  16
  1
  2/5
  149/34
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  82
  42
  21
  19
  15
  5
  20
  1
  5/12
  100/21
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  63
  36
  17
  10
  10
  7
  17
  1
  5/64
  37/6
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  38
  21
  8
  9
  9
  1
  10
  1
  8/19
  14/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  102
  41
  39
  22
  22
  16
  38
  1
  1/2
  215/41
  ((7 7 0) (15/2 15/2 0) (7 7 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  47
  24
  12
  11
  10
  2
  12
  1
  5/12
  14/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  94
  50
  18
  26
  14
  4
  18
  1
  5/17
  219/50
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  42
  17
  4
  21
  1
  1
  2
  1
  1/12
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  18
  9
  3
  6
  5
  1
  6
  1
  5/9
  40/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app minimax bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) empty-board player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  71
  36
  22
  13
  14
  8
  22
  1
  7/60
  35/6
  ((8 8 0) (8 8 0) (8 8 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  21
  11
  4
  6
  4
  1
  5
  1
  4/11
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  72
  40
  18
  14
  14
  5
  19
  1
  5/14
  189/40
  ((9/2 9/2 0) (9/2 9/2 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  22
  12
  4
  6
  4
  1
  5
  1
  1/3
  53/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  24
  11
  4
  9
  7
  1
  8
  1
  7/11
  50/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  25
  16
  4
  5
  9
  1
  10
  1
  4/7
  75/16
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  27
  8
  8
  11
  4
  1
  5
  1
  1/2
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env ((□? (b co m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  21
  10
  4
  7
  4
  1
  5
  1
  2/5
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  22
  11
  4
  7
  4
  1
  5
  1
  4/11
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> maximin <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  50
  23
  13
  14
  11
  2
  13
  1
  11/23
  107/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  23
  13
  4
  6
  4
  1
  5
  1
  4/13
  57/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  53
  37
  10
  6
  23
  4
  27
  1
  107/133
  197/37
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-coord\")\n  (env ((□? (move-coord-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  53
  18
  15
  20
  0
  3
  3
  1
  0
  11/2
  ((7/2 7/2 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  22
  11
  4
  7
  4
  1
  5
  1
  4/11
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  6
  2
  7
  1
  0
  1
  1
  1/5
  5
  ((1/2 1/2 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  25
  12
  4
  9
  3
  1
  4
  1
  1/4
  13/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  88
  44
  18
  26
  14
  4
  18
  1
  5/16
  48/11
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  6
  2
  7
  1
  0
  1
  1
  1/5
  5
  ((1/2 1/2 0) (0 0 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  58
  30
  8
  20
  14
  2
  16
  1
  8/19
  133/30
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  25
  9
  10
  6
  3
  4
  7
  1
  1/7
  16/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  24
  11
  4
  9
  7
  1
  8
  1
  7/11
  50/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  40
  24
  10
  6
  14
  4
  18
  1
  31/42
  43/8
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  40
  24
  10
  6
  14
  4
  18
  1
  31/42
  43/8
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  23
  10
  4
  9
  3
  1
  4
  1
  3/10
  22/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-horizon\")\n  (env ((□? (move-horizon-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  6
  2
  7
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  17
  7
  2
  8
  1
  1
  2
  1
  1/6
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  45
  22
  12
  11
  10
  2
  12
  1
  5/11
  103/22
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  97
  34
  21
  42
  1
  2
  3
  1
  1/16
  94/17
  ((11/2 11/2 0) (6 6 0) (6 6 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  21
  13
  3
  5
  13
  1
  14
  1
  1
  58/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  86
  54
  18
  14
  20
  5
  25
  1
  18/49
  14/3
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  18
  9
  3
  6
  5
  1
  6
  1
  5/9
  40/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  100
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env (() () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env (() () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env (() () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  100
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  100
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env (())))\""
  28
  19
  7
  2
  19
  7
  26
  1
  1
  101/19
  ((1/2 1/2 0) (1/2 1/2 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  100
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  100
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-small
  0
  100
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-small
  0
  100
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  0
  100
  26
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  100
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  100
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env (() () ())))\""
  35
  23
  9
  3
  23
  9
  32
  1
  1
  122/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  100
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  51
  33
  12
  6
  33
  12
  45
  1
  1
  179/33
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  100
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4) (env (() () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  100
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  10
  5
  5
  0
  5
  5
  10
  1
  1
  28/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  100
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  app
  "\"'(eval (λ (n4) (-> (app p n1 n2 n3 n4) <-)) (env (() () () () ())))\""
  58
  44
  11
  3
  44
  11
  55
  1
  1
  60/11
  ((3/2 3/2 0) (2 2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  10
  5
  5
  0
  5
  5
  10
  1
  1
  28/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  51
  40
  9
  2
  40
  9
  49
  1
  1
  219/40
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  0
  100
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((3 3 0) (3 3 0) (5/2 3 0)))
'(clean-cache
  sat-1
  0
  100
  49
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  30
  21
  7
  2
  21
  7
  28
  1
  1
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  34
  24
  8
  2
  24
  8
  32
  1
  1
  43/8
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((5/2 5/2 0) (3 3 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4) (env (() () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4) (env (() () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  100
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4) (env (() () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-)) (env (() () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  100
  49
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  100
  49
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  34
  21
  11
  2
  21
  11
  32
  1
  1
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  38
  24
  12
  2
  24
  12
  36
  1
  1
  43/8
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  22
  10
  10
  2
  10
  10
  20
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (() () () () () () ())))\""
  24
  10
  12
  2
  10
  12
  22
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (app (app p n1) n2) (-> n3 <-)) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (app p n1) (-> n2 <-)) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval (app (-> (app (app p n1) n2) <-) n3) (env (() () () () () () () ())))\""
  11
  7
  2
  2
  7
  2
  9
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (() () () () () () ())))\""
  24
  10
  12
  2
  10
  12
  22
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1) (env (() () () () () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  32
  17
  13
  2
  17
  13
  30
  1
  1
  90/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  135
  93
  25
  17
  93
  25
  118
  1
  1
  517/93
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env (() () () () () () ())))\""
  24
  14
  8
  2
  14
  8
  22
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env (() () () () () () () ())))\""
  14
  9
  2
  3
  9
  2
  11
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  34
  19
  13
  2
  19
  13
  32
  1
  1
  101/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval (app (-> (app p n1) <-) n2) (env (() () () () () () () ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env (() () () () () () () ())))\""
  23
  15
  2
  6
  15
  2
  17
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env (() () () () () () () ())))\""
  20
  13
  2
  5
  13
  2
  15
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  20
  10
  8
  2
  10
  8
  18
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (() () () () () () ())))\""
  22
  10
  10
  2
  10
  10
  20
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (() () () () () () ())))\""
  32
  17
  13
  2
  17
  13
  30
  1
  1
  90/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-)) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  20
  10
  8
  2
  10
  8
  18
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (() () () () () () ())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (1/2 1/2 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env (() () () () () () () ())))\""
  96
  70
  17
  9
  70
  17
  87
  1
  1
  38/7
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (() () () () () () ())))\""
  20
  10
  8
  2
  10
  8
  18
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  28
  17
  9
  2
  17
  9
  26
  1
  1
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (() () () () () () ())))\""
  26
  14
  10
  2
  14
  10
  24
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (() () () () () () ())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (() () () () () () ())))\""
  24
  10
  12
  2
  10
  12
  22
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env (() () () () () () ())))\""
  26
  14
  10
  2
  14
  10
  24
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  22
  10
  10
  2
  10
  10
  20
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (() () () () () () ())))\""
  28
  14
  12
  2
  14
  12
  26
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (() () () () () () ())))\""
  71
  54
  15
  2
  54
  15
  69
  1
  1
  299/54
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  sat-2
  0
  100
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((7 7 0) (15/2 15/2 0) (7 7 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env (() () () () () () () ())))\""
  17
  11
  2
  4
  11
  2
  13
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (1/2 1/2 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (() () () () () () ())))\""
  20
  10
  8
  2
  10
  8
  18
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  100
  78
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (() () () () () () ())))\""
  24
  14
  8
  2
  14
  8
  22
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((7 7 0) (13/2 13/2 0) (7 7 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  6
  4
  2
  0
  4
  2
  6
  1
  1
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (7 7 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  34
  24
  8
  2
  24
  8
  32
  1
  1
  43/8
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  100
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  72
  58
  11
  3
  58
  11
  69
  1
  1
  160/29
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  114
  83
  19
  12
  83
  19
  102
  1
  1
  469/83
  ((13/2 13/2 0) (13/2 13/2 0) (7 7 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  116
  85
  19
  12
  85
  19
  104
  1
  1
  479/85
  ((13/2 13/2 0) (13/2 7 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  65
  54
  9
  2
  54
  9
  63
  1
  1
  299/54
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  30
  21
  7
  2
  21
  7
  28
  1
  1
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  112
  82
  19
  11
  82
  19
  101
  1
  1
  463/82
  ((7 7 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  7
  6
  0
  1
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (0 0 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  28
  19
  7
  2
  19
  7
  26
  1
  1
  101/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  77
  54
  22
  1
  54
  22
  76
  1
  1
  151/27
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env (())))\""
  593
  407
  136
  50
  407
  136
  543
  1
  1
  2270/407
  ((61 123/2 1) (123/2 123/2 1) (61 61 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env (())))\""
  37
  30
  7
  0
  30
  7
  37
  1
  1
  17/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (119/2 119/2 1) (59 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (119/2 119/2 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (app X) (-> (app make-ai-action (app X)) <-)) (env (())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  586
  403
  133
  50
  403
  133
  536
  1
  1
  2250/403
  ((119/2 119/2 1/2) (59 59 1) (123/2 123/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> move-horizon-v <-) (move _ move-horizon-x) _) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (59 59 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app play-turn empty-board (-> player-one <-) player-two) (env (())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  37/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((123/2 123/2 1) (119/2 119/2 1) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  12
  8
  3
  1
  8
  3
  11
  1
  1
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((60 60 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (let (_) (-> (match this-play ...) <-)) (env (())))\""
  589
  406
  133
  50
  406
  133
  539
  1
  1
  323/58
  ((125/2 125/2 1) (125/2 125/2 1) (64 64 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (117/2 117/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env (())))\""
  585
  402
  133
  50
  402
  133
  535
  1
  1
  749/134
  ((60 60 1) (119/2 119/2 1/2) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env (())))\""
  588
  403
  135
  50
  403
  135
  538
  1
  1
  173/31
  ((121/2 121/2 1) (60 60 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env (() ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  19
  10
  9
  0
  10
  9
  19
  1
  1
  27/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  31
  23
  8
  0
  23
  8
  31
  1
  1
  122/23
  ((1 1 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env (())))\""
  24
  16
  8
  0
  16
  8
  24
  1
  1
  85/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app minimax bo (-> that-mark <-) this-mark) (env (() ())))\""
  30
  18
  11
  1
  18
  11
  29
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env (())))\""
  592
  408
  133
  51
  408
  133
  541
  1
  1
  2269/408
  ((63 63 1) (63 63 1) (63 63 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  9
  6
  2
  1
  6
  2
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env (())))\""
  585
  402
  133
  50
  402
  133
  535
  1
  1
  2245/402
  ((119/2 119/2 1/2) (59 59 1/2) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((127/2 127/2 3/2) (127/2 127/2 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app play-turn (-> empty-board <-) player-one player-two) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (119/2 119/2 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (119/2 119/2 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (117/2 117/2 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env (())))\""
  26
  16
  9
  1
  16
  9
  25
  1
  1
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (let (_) (-> (app display \"Cat's game.\\n\") <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  589
  405
  133
  51
  405
  133
  538
  1
  1
  2258/405
  ((119/2 119/2 1/2) (119/2 119/2 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((125/2 63 1) (123/2 123/2 1) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env (() () ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env (() ())))\""
  77
  54
  22
  1
  54
  22
  76
  1
  1
  151/27
  ((4 4 0) (9/2 9/2 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  31
  23
  7
  1
  23
  7
  30
  1
  1
  124/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app f (app coord r c) (-> x <-)) (env (() () ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  586
  403
  133
  50
  403
  133
  536
  1
  1
  2251/403
  ((119/2 119/2 1/2) (119/2 119/2 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 59 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app minimax (-> bo <-) that-mark this-mark) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env (())))\""
  589
  404
  135
  50
  404
  135
  539
  1
  1
  2253/404
  ((60 60 1) (60 60 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 119/2 1/2) (59 59 1/2) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  586
  403
  133
  50
  403
  133
  536
  1
  1
  2250/403
  ((59 59 1/2) (59 59 1/2) (62 62 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match some-v-v ((some some-v-x) (-> some-v-x <-)) _) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((60 60 1) (119/2 119/2 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co mark bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app marked? (-> (app b (app coord r c)) <-)) (env (() () ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((121/2 61 1) (61 61 1) (123/2 123/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app coord r c) x) (env (() () ())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) bo that-play this-play) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env (() ())))\""
  12
  8
  3
  1
  8
  3
  11
  1
  1
  41/8
  ((1/2 1/2 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (c x) (-> (app f (app coord r c) x) <-)) (env (() () ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (119/2 119/2 1/2) (60 60 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((60 60 1/2) (119/2 119/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord rc rc) m) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env (())))\""
  589
  406
  133
  50
  406
  133
  539
  1
  1
  1133/203
  ((60 60 1) (60 60 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env (() ())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  597
  410
  136
  51
  410
  136
  546
  1
  1
  1142/205
  ((125/2 125/2 1) (61 61 1) (123/2 123/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app f (-> (app coord r c) <-) x) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  24
  16
  8
  0
  16
  8
  24
  1
  1
  85/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  60
  28
  29
  3
  28
  29
  57
  1
  1
  145/28
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval (match (app full? bo) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (app b co) ((blank) (-> (app #f) <-)) (marked m*)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  77
  54
  22
  1
  54
  22
  76
  1
  1
  151/27
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 119/2 1/2) (119/2 119/2 1) (60 60 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (119/2 119/2 1) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-horizon\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (119/2 119/2 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env (() ())))\""
  77
  54
  22
  1
  54
  22
  76
  1
  1
  151/27
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env (())))\""
  585
  402
  133
  50
  402
  133
  535
  1
  1
  2245/402
  ((59 59 1) (59 59 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 59 1/2) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 59 1) (121/2 121/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((123/2 123/2 1) (60 60 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (let (bo) (-> (match (app wins? bo mark) ...) <-)) (env (())))\""
  586
  403
  133
  50
  403
  133
  536
  1
  1
  173/31
  ((59 59 1/2) (119/2 119/2 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) that-mark this-mark) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  31
  23
  7
  1
  23
  7
  30
  1
  1
  124/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  11/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁)) (env (())))\""
  587
  404
  133
  50
  404
  133
  537
  1
  1
  1127/202
  ((119/2 119/2 1/2) (119/2 119/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env (())))\""
  586
  403
  133
  50
  403
  133
  536
  1
  1
  2250/403
  ((119/2 119/2 1/2) (119/2 119/2 1) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 60 1) (119/2 119/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) mark bo) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (119/2 119/2 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  598
  412
  133
  53
  412
  133
  545
  1
  1
  2287/412
  ((63 63 1) (63 63 1) (66 66 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (119/2 119/2 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app lose) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app play-turn empty-board player-one (-> player-two <-)) (env (())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  37/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env (())))\""
  23
  19
  4
  0
  19
  4
  23
  1
  1
  102/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval (λ (bo this-play that-play) (-> (let (_) ...) <-)) (env (())))\""
  590
  407
  133
  50
  407
  133
  540
  1
  1
  2265/407
  ((63 63 1) (63 63 1) (63 63 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (59 59 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (c) (-> (app marked? (app b (app coord r c))) <-)) (env (() () ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (119/2 119/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  31
  23
  7
  1
  23
  7
  30
  1
  1
  124/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 59 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app minimax bo that-mark (-> this-mark <-)) (env (() ())))\""
  18
  9
  9
  0
  9
  9
  18
  1
  1
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env (())))\""
  593
  407
  136
  50
  407
  136
  543
  1
  1
  2270/407
  ((60 121/2 1) (121/2 121/2 1) (60 121/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (119/2 60 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma))) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (move-coord-v) (-> (match move-coord-v ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((62 62 1) (119/2 119/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env (() ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord rc rc) (-> m <-)) (env (() ())))\""
  77
  54
  22
  1
  54
  22
  76
  1
  1
  151/27
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (c) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (119/2 119/2 1) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  25/4
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app play-turn bo that-play (-> this-play <-)) (env (())))\""
  23
  16
  7
  0
  16
  7
  23
  1
  1
  47/8
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (59 59 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 119/2 1/2) (119/2 119/2 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  48
  22
  23
  3
  22
  23
  45
  1
  1
  113/22
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  letrec
  "\"'(eval (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((61 61 1) (59 59 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env (())))\""
  597
  412
  135
  50
  412
  135
  547
  1
  1
  573/103
  ((121/2 121/2 1) (121/2 121/2 1) (121/2 121/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env (())))\""
  593
  408
  135
  50
  408
  135
  543
  1
  1
  379/68
  ((60 60 1) (61 61 1) (61 61 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  31
  19
  11
  1
  19
  11
  30
  1
  1
  102/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  31
  19
  11
  1
  19
  11
  30
  1
  1
  102/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (move-horizon-v) (-> (match move-horizon-v ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((117/2 117/2 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  586
  403
  133
  50
  403
  133
  536
  1
  1
  2251/403
  ((59 59 1/2) (59 59 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> this-play <-) (player mark action)) (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  104/17
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> mark <-) bo) (env (())))\""
  37
  30
  7
  0
  30
  7
  37
  1
  1
  17/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app play-turn bo (-> that-play <-) this-play) (env (())))\""
  23
  16
  7
  0
  16
  7
  23
  1
  1
  47/8
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (119/2 119/2 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env (())))\""
  19
  13
  6
  0
  13
  6
  19
  1
  1
  68/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  11/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((121/2 121/2 1) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env (())))\""
  14
  9
  5
  0
  9
  5
  14
  1
  1
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  588
  404
  133
  51
  404
  133
  537
  1
  1
  1127/202
  ((119/2 119/2 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (119/2 119/2 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env (() ())))\""
  23
  16
  6
  1
  16
  6
  22
  1
  1
  21/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (bo) (-> (app error 'human-action \"not implemented\") <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (119/2 119/2 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  586
  403
  133
  50
  403
  133
  536
  1
  1
  2251/403
  ((60 60 1/2) (119/2 119/2 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  594
  409
  133
  52
  409
  133
  542
  1
  1
  2273/409
  ((127/2 127/2 1) (127/2 127/2 1) (63 63 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env (() ())))\""
  53
  38
  13
  2
  38
  13
  51
  1
  1
  205/38
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((123/2 123/2 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env (())))\""
  585
  402
  133
  50
  402
  133
  535
  1
  1
  1123/201
  ((119/2 119/2 1) (123/2 123/2 1) (121/2 121/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((60 121/2 1) (60 121/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((63 63 1) (127/2 129/2 1) (127/2 129/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env (())))\""
  595
  409
  136
  50
  409
  136
  545
  1
  1
  2279/409
  ((62 62 3/2) (125/2 125/2 3/2) (68 137/2 3/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord rc rc) m) (env (() ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  9
  6
  2
  1
  6
  2
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((60 60 1) (60 60 1) (125/2 125/2 3/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (119/2 119/2 1/2) (123/2 123/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> move-coord-v <-) (move move-coord-x _) _) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (119/2 119/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((60 60 1) (60 60 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app horizon (-> (app win) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((121/2 121/2 1) (123/2 123/2 1) (125/2 125/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((125/2 125/2 3/2) (119/2 119/2 1) (61 61 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((62 62 1) (62 62 1) (62 62 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app win) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env (() ())))\""
  38
  30
  7
  1
  30
  7
  37
  1
  1
  17/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env (())))\""
  86
  58
  27
  1
  58
  27
  85
  1
  1
  163/29
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env (())))\""
  590
  407
  133
  50
  407
  133
  540
  1
  1
  2270/407
  ((60 60 1) (60 60 1) (121/2 121/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) (app make-ai-action (app X))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (letrec (loop) (-> (app loop) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (119/2 119/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env (())))\""
  586
  403
  133
  50
  403
  133
  536
  1
  1
  2250/403
  ((119/2 119/2 1/2) (119/2 119/2 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env (() ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app play-turn (-> bo <-) that-play this-play) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env (())))\""
  593
  408
  135
  50
  408
  135
  543
  1
  1
  379/68
  ((121/2 121/2 1) (121/2 121/2 1) (121/2 121/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo that-mark this-mark)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  594
  409
  133
  52
  409
  133
  542
  1
  1
  2273/409
  ((63 63 1) (127/2 127/2 1) (63 63 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app minimax bo that-mark this-mark)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (co) (-> (match (app equal? co₀ co) ...) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((62 62 1) (59 59 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (119/2 119/2 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (119/2 119/2 1/2) (60 60 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app wins? bo mark) <-) (#f) _) (env (())))\""
  585
  402
  133
  50
  402
  133
  535
  1
  1
  2245/402
  ((59 59 1) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  31
  23
  7
  1
  23
  7
  30
  1
  1
  124/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (())))\""
  589
  405
  133
  51
  405
  133
  538
  1
  1
  2258/405
  ((59 59 1/2) (119/2 119/2 1/2) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-))) (env (())))\""
  590
  407
  133
  50
  407
  133
  540
  1
  1
  2270/407
  ((61 61 1) (61 61 1) (61 61 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  48
  22
  23
  3
  22
  23
  45
  1
  1
  113/22
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env (())))\""
  588
  405
  133
  50
  405
  133
  538
  1
  1
  2257/405
  ((59 59 1/2) (119/2 119/2 1/2) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  599
  413
  133
  53
  413
  133
  546
  1
  1
  2291/413
  ((125/2 125/2 1) (63 63 1) (125/2 125/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env (())))\""
  586
  403
  133
  50
  403
  133
  536
  1
  1
  2250/403
  ((119/2 119/2 1/2) (59 119/2 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app some-v (-> (app maximin bo that-mark this-mark) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((62 62 1) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env (())))\""
  42
  28
  13
  1
  28
  13
  41
  1
  1
  151/28
  ((3/2 3/2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((60 60 1) (60 60 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (119/2 119/2 1/2) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> marked? <-) (app b (app coord r c))) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env (())))\""
  595
  409
  135
  51
  409
  135
  544
  1
  1
  2276/409
  ((121/2 121/2 1) (121/2 121/2 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((60 60 1) (119/2 60 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (119/2 119/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env (())))\""
  595
  410
  135
  50
  410
  135
  545
  1
  1
  2283/410
  ((121/2 121/2 1) (60 60 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env (())))\""
  590
  407
  133
  50
  407
  133
  540
  1
  1
  2270/407
  ((60 60 1) (60 60 1) (121/2 121/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env (())))\""
  595
  410
  135
  50
  410
  135
  545
  1
  1
  2283/410
  ((121/2 121/2 1) (123/2 123/2 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  23
  19
  4
  0
  19
  4
  23
  1
  1
  102/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-)) (env (())))\""
  587
  404
  133
  50
  404
  133
  537
  1
  1
  1127/202
  ((119/2 119/2 1/2) (119/2 119/2 1) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env (())))\""
  14
  8
  6
  0
  8
  6
  14
  1
  1
  21/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env (())))\""
  7
  3
  4
  0
  3
  4
  7
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  593
  407
  135
  51
  407
  135
  542
  1
  1
  2267/407
  ((119/2 119/2 1) (119/2 119/2 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  586
  403
  133
  50
  403
  133
  536
  1
  1
  2251/403
  ((119/2 119/2 1/2) (119/2 119/2 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord rc rc) <-) m) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 59 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 59 1) (117/2 117/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((62 62 1) (119/2 119/2 1/2) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (59 59 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((60 60 1) (60 60 1) (121/2 121/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env (())))\""
  585
  402
  133
  50
  402
  133
  535
  1
  1
  2245/402
  ((62 62 1) (123/2 123/2 1) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env (())))\""
  585
  402
  133
  50
  402
  133
  535
  1
  1
  749/134
  ((119/2 119/2 1) (60 60 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> that-mark <-) this-mark) (env (() ())))\""
  18
  9
  9
  0
  9
  9
  18
  1
  1
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env (())))\""
  593
  407
  136
  50
  407
  136
  543
  1
  1
  2270/407
  ((121/2 121/2 1) (60 60 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (119/2 119/2 1/2) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env (())))\""
  587
  404
  133
  50
  404
  133
  537
  1
  1
  2253/404
  ((59 59 1/2) (59 59 1) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env (())))\""
  592
  408
  133
  51
  408
  133
  541
  1
  1
  2269/408
  ((127/2 127/2 1) (63 63 1) (63 63 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  597
  410
  136
  51
  410
  136
  546
  1
  1
  1142/205
  ((61 61 1) (61 61 1) (61 61 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env (())))\""
  49
  35
  13
  1
  35
  13
  48
  1
  1
  188/35
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (59 59 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-coord\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) empty-board player-one player-two) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (59 59 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env (())))\""
  589
  406
  133
  50
  406
  133
  539
  1
  1
  2263/406
  ((119/2 119/2 1/2) (119/2 119/2 1/2) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 59 1) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env (() ())))\""
  41
  18
  20
  3
  18
  20
  38
  1
  1
  46/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  588
  404
  133
  51
  404
  133
  537
  1
  1
  1127/202
  ((119/2 119/2 1/2) (119/2 119/2 1) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 59 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((61 61 1) (123/2 123/2 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (λ (r) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (59 119/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (())))\""
  588
  404
  133
  51
  404
  133
  537
  1
  1
  1127/202
  ((119/2 119/2 1) (119/2 119/2 1/2) (125/2 125/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (119/2 119/2 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env (())))\""
  7
  3
  4
  0
  3
  4
  7
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (119/2 119/2 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 119/2 1/2) (59 59 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (119/2 119/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match (-> (app equal? co₀ co) <-) (#f) _) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((60 60 1) (60 60 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  12
  8
  3
  1
  8
  3
  11
  1
  1
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env (())))\""
  585
  402
  133
  50
  402
  133
  535
  1
  1
  2245/402
  ((119/2 119/2 1) (59 59 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((123/2 123/2 1) (63 63 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env (())))\""
  8
  5
  3
  0
  5
  3
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (119/2 119/2 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (60 60 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env (())))\""
  15
  7
  8
  0
  7
  8
  15
  1
  1
  40/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 59 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env (())))\""
  590
  407
  133
  50
  407
  133
  540
  1
  1
  2270/407
  ((60 60 1) (60 121/2 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> minimax <-) bo that-mark this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> display <-) \"Cat's game.\\n\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env (())))\""
  595
  410
  133
  52
  410
  133
  543
  1
  1
  1139/205
  ((125/2 125/2 1) (63 63 1) (125/2 125/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (let (... () (co (-> (app action bo) <-)) () ...) ...) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (119/2 119/2 1/2) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((60 60 1) (59 59 1) (62 62 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env (())))\""
  69
  32
  34
  3
  32
  34
  66
  1
  1
  21/4
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env (() ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env (() ())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (119/2 119/2 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin bo that-mark (-> this-mark <-)) (env (() ())))\""
  30
  18
  11
  1
  18
  11
  29
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  589
  405
  133
  51
  405
  133
  538
  1
  1
  2258/405
  ((119/2 119/2 1/2) (59 59 1/2) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 59 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  19
  10
  9
  0
  10
  9
  19
  1
  1
  27/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (119/2 119/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo that-mark this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app horizon (-> (app lose) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env (())))\""
  592
  406
  136
  50
  406
  136
  542
  1
  1
  1133/203
  ((60 60 1) (60 60 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval (λ () (-> (let (co) ...) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (119/2 119/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (119/2 119/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((121/2 121/2 1) (119/2 119/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env (())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((61 123/2 1) (62 62 1) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app some-v (-> (app minimax bo that-mark this-mark) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (119/2 119/2 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  600
  414
  133
  53
  414
  133
  547
  1
  1
  255/46
  ((127/2 127/2 1) (63 127/2 1) (63 63 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  app
  "\"'(eval (app player (-> (app X) <-) (app make-ai-action (app X))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app board-mark co mark (-> bo <-)) (env (())))\""
  12
  8
  3
  1
  8
  3
  11
  1
  1
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  11
  5
  3
  3
  2
  1
  3
  1
  2/9
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  100
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  100
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  129
  86
  28
  15
  58
  19
  77
  1
  2501/2970
  237/43
  ((7 7 0) (13/2 13/2 0) (7 7 0)))
'(clean-cache
  sat-small
  1
  100
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  121
  78
  28
  15
  52
  19
  71
  1
  245/288
  433/78
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  100
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env ((□? (x1 x2)))))\""
  73
  47
  19
  7
  30
  13
  43
  1
  131/171
  249/47
  ((4 4 0) (7/2 7/2 0) (4 4 0)))
'(clean-cache
  sat-small
  1
  100
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  130
  86
  28
  16
  60
  19
  79
  1
  2771/3150
  475/86
  ((15/2 15/2 0) (7 7 0) (7 7 0)))
'(clean-cache
  sat-small
  1
  100
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  129
  85
  28
  16
  59
  19
  78
  1
  2681/3060
  469/85
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-small
  1
  100
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  93
  63
  21
  9
  40
  15
  55
  1
  916/1035
  335/63
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-small
  1
  100
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  121
  78
  28
  15
  52
  19
  71
  1
  245/288
  433/78
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2)))))\""
  26
  13
  8
  5
  8
  4
  12
  1
  3/4
  68/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env ((□? (x1 x2)))))\""
  28
  13
  8
  7
  9
  5
  14
  1
  17/20
  68/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  1
  100
  26
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  132
  89
  28
  15
  57
  19
  76
  1
  2321/2880
  500/89
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  100
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  115
  74
  28
  13
  50
  19
  69
  1
  493/558
  203/37
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  11
  4
  2
  5
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  100
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env ((□? (x1 x2)))))\""
  32
  19
  8
  5
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  18
  9
  3
  6
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  16
  9
  3
  4
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  11
  5
  3
  3
  2
  1
  3
  1
  2/9
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  100
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  24
  9
  3
  12
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  87
  51
  19
  17
  21
  6
  27
  1
  13/21
  271/51
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  19
  9
  5
  5
  4
  1
  5
  1
  4/25
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  100
  49
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  36
  19
  8
  9
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  34
  13
  8
  13
  9
  5
  14
  1
  17/20
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  100
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  28
  13
  8
  7
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  20
  9
  3
  8
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  15
  4
  2
  9
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  18
  9
  3
  6
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  100
  49
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  38
  19
  8
  11
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  100
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  73
  43
  19
  11
  17
  6
  23
  1
  11/17
  227/43
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  19
  9
  5
  5
  4
  1
  5
  1
  4/25
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  220
  129
  48
  43
  33
  15
  48
  1
  281/432
  228/43
  ((71/2 71/2 0) (71/2 71/2 0) (71/2 71/2 0)))
'(clean-cache
  sat-1
  1
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  22
  9
  3
  10
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  100
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  36
  19
  8
  9
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  100
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  38
  19
  8
  11
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  49
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  70
  15
  13
  42
  7
  5
  12
  1
  7/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  55
  13
  8
  34
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  27
  9
  3
  15
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  136
  27
  31
  78
  7
  7
  14
  1
  7/10
  152/27
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  113
  37
  20
  56
  9
  6
  15
  1
  9/14
  202/37
  ((8 8 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  55
  13
  8
  34
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  41
  19
  2
  20
  7
  2
  9
  1
  7/13
  5
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  9
  3
  9
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  10
  2
  17
  4
  2
  6
  1
  4/7
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  259
  99
  60
  100
  13
  9
  22
  1
  9/17
  61/11
  ((46 46 1/2) (45 45 0) (45 45 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  257
  99
  60
  98
  13
  9
  22
  1
  9/17
  61/11
  ((91/2 91/2 0) (91/2 91/2 1/2) (91/2 91/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  224
  99
  43
  82
  13
  8
  21
  1
  3/7
  541/99
  ((61/2 31 0) (31 31 0) (31 31 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  95
  19
  20
  56
  7
  6
  13
  1
  7/10
  104/19
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  95
  19
  20
  56
  7
  6
  13
  1
  7/10
  104/19
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  13
  2
  18
  5
  2
  7
  1
  5/9
  5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  70
  15
  13
  42
  7
  5
  12
  1
  7/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x3 x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  9
  3
  21
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  113
  37
  20
  56
  9
  6
  15
  1
  9/14
  202/37
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  70
  15
  13
  42
  7
  5
  12
  1
  7/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  37
  16
  2
  19
  6
  2
  8
  1
  6/11
  5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  80
  25
  13
  42
  9
  5
  14
  1
  9/14
  134/25
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  sat-2
  1
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  293
  131
  60
  102
  14
  10
  24
  1
  10/19
  725/131
  ((107/2 107/2 0) (107/2 107/2 0) (54 54 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  23
  9
  3
  11
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  70
  15
  13
  42
  7
  5
  12
  1
  7/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  136
  27
  31
  78
  7
  7
  14
  1
  7/10
  152/27
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  7
  2
  16
  3
  2
  5
  1
  3/5
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x4 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  136
  27
  31
  78
  7
  7
  14
  1
  7/10
  152/27
  ((19/2 19/2 0) (19/2 19/2 0) (9 9 0)))
'(clean-cache
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  170
  61
  31
  78
  9
  7
  16
  1
  9/14
  338/61
  ((35/2 35/2 0) (35/2 35/2 0) (35/2 35/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  155
  51
  30
  74
  16
  10
  26
  1
  32/51
  91/17
  ((29/2 15 0) (15 15 0) (15 15 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  31
  9
  3
  19
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  9
  3
  17
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  55
  13
  8
  34
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  9
  3
  13
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  80
  25
  13
  42
  9
  5
  14
  1
  9/14
  134/25
  ((7/2 7/2 0) (4 4 0) (4 4 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x4) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  95
  19
  20
  56
  7
  6
  13
  1
  7/10
  104/19
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  sat-2
  1
  100
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  45
  22
  2
  21
  8
  2
  10
  1
  8/15
  5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  8
  6
  0
  2
  4
  0
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  9
  3
  17
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  12
  4
  16
  1
  3/4
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  114
  43
  19
  52
  20
  9
  29
  1
  38/51
  227/43
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  9
  5
  14
  1
  17/20
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  19
  8
  18
  12
  4
  16
  1
  3/4
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  9
  5
  14
  1
  17/20
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  19
  8
  16
  12
  4
  16
  1
  3/4
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  9
  3
  21
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  98
  43
  19
  36
  17
  6
  23
  1
  11/17
  227/43
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  9
  5
  14
  1
  17/20
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  9
  3
  9
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  11
  7
  2
  2
  3
  1
  4
  1
  3/8
  33/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  100
  43
  19
  38
  17
  6
  23
  1
  11/17
  227/43
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  106
  47
  19
  40
  20
  7
  27
  1
  13/19
  249/47
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  sat-3
  1
  100
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  7
  3
  2
  2
  1
  1
  2
  1
  1/4
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  301
  129
  48
  124
  33
  15
  48
  1
  281/432
  228/43
  ((115/2 115/2 1/2) (115/2 115/2 1/2) (115/2 115/2 1/2)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  9
  3
  13
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  31
  9
  3
  19
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env ((□? (f)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  23
  9
  3
  11
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  27
  9
  3
  15
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  114
  51
  19
  44
  21
  6
  27
  1
  13/21
  271/51
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  19
  8
  18
  12
  4
  16
  1
  3/4
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  100
  86
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  12
  4
  16
  1
  3/4
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  19
  10
  7
  2
  6
  4
  10
  1
  3/8
  27/5
  ((1 1 0) (1 1 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  211
  109
  58
  44
  25
  15
  40
  1
  359/1740
  631/109
  ((18 18 0) (18 18 0) (18 18 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env ((□? (r x)) (□? (f x)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  61
  44
  12
  5
  14
  7
  21
  1
  5/36
  131/22
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app minimax bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  65
  30
  20
  15
  7
  4
  11
  1
  7/18
  27/5
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env ((□? (some-v-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env ((□? (f acc l)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  51
  30
  15
  6
  22
  8
  30
  1
  39/64
  79/15
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  49
  32
  12
  5
  25
  8
  33
  1
  37/46
  173/32
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-horizon\")\n  (env ((□? (move-horizon-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  36
  17
  4
  15
  4
  1
  5
  1
  1/6
  87/17
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app lose) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  74
  45
  21
  8
  33
  12
  45
  1
  25/36
  238/45
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  15
  14
  0
  3
  3
  1
  0
  27/5
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  43
  22
  15
  6
  14
  8
  22
  1
  7/32
  65/11
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  28
  18
  7
  3
  14
  4
  18
  1
  19/24
  49/9
  ((3/2 3/2 0) (3/2 3/2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env ((□? (co)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  27
  16
  5
  6
  9
  3
  12
  1
  5/8
  81/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  67
  46
  12
  9
  17
  7
  24
  1
  13/60
  277/46
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  46
  29
  12
  5
  12
  7
  19
  1
  7/34
  185/29
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (c)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  156
  92
  41
  23
  21
  14
  35
  1
  67/324
  23/4
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> minimax <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  20
  10
  7
  3
  6
  4
  10
  1
  3/8
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  36
  17
  4
  15
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  67
  32
  20
  15
  7
  4
  11
  1
  7/19
  87/16
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  16
  6
  7
  3
  3
  4
  7
  1
  1/4
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  43
  26
  12
  5
  10
  7
  17
  1
  17/96
  79/13
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  43
  26
  12
  5
  10
  7
  17
  1
  17/96
  79/13
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> empty-board <-) player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  80
  36
  32
  12
  20
  18
  38
  1
  241/432
  46/9
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  77
  46
  23
  8
  34
  13
  47
  1
  11/16
  247/46
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> display <-) \"Cat's game.\\n\")\n  (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  15
  14
  0
  3
  3
  1
  0
  27/5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) empty-board player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  173
  78
  69
  26
  28
  27
  55
  1
  1381/3840
  139/26
  ((31/2 31/2 0) (31/2 31/2 0) (31/2 31/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-coord\")\n  (env ((□? (move-coord-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  29
  12
  9
  8
  1
  2
  3
  1
  1/16
  21/4
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  26
  13
  5
  8
  4
  1
  5
  1
  4/45
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  47
  18
  15
  14
  0
  3
  3
  1
  0
  11/2
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env ((□? (f x)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  160
  92
  41
  27
  21
  14
  35
  1
  67/324
  23/4
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  13
  7
  3
  3
  2
  1
  3
  1
  2/15
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  91
  60
  23
  8
  41
  13
  54
  1
  13/20
  107/20
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  42
  25
  9
  8
  7
  2
  9
  1
  7/16
  132/25
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  145
  65
  56
  24
  24
  26
  50
  1
  257/672
  339/65
  ((23/2 23/2 0) (23/2 23/2 0) (23/2 23/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) bo that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  160
  92
  41
  27
  21
  14
  35
  1
  67/324
  23/4
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  24
  16
  5
  3
  11
  3
  14
  1
  17/24
  81/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  103
  43
  42
  18
  21
  22
  43
  1
  241/528
  222/43
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  28
  18
  7
  3
  14
  4
  18
  1
  19/24
  49/9
  ((3/2 3/2 0) (2 2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  32
  17
  4
  11
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> maximin <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  15
  6
  7
  2
  3
  4
  7
  1
  1/4
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  156
  92
  41
  23
  21
  14
  35
  1
  67/324
  23/4
  ((27/2 27/2 0) (27/2 27/2 0) (14 14 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  103
  43
  42
  18
  21
  22
  43
  1
  241/528
  222/43
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  51
  30
  15
  6
  22
  8
  30
  1
  39/64
  79/15
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  27
  18
  7
  2
  14
  4
  18
  1
  19/24
  49/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  24
  16
  5
  3
  11
  3
  14
  1
  17/24
  81/16
  ((1 1 0) (1 1 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  37
  28
  7
  2
  23
  4
  27
  1
  65/76
  151/28
  ((5/2 5/2 0) (2 2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env ((□? (b co m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  61
  44
  12
  5
  14
  7
  21
  1
  5/36
  131/22
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  5
  4
  0
  1
  0
  0
  0
  1
  0
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  7
  2
  6
  2
  1
  3
  1
  1/3
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  38
  28
  7
  3
  23
  4
  27
  1
  65/76
  151/28
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  27
  16
  5
  6
  9
  3
  12
  1
  5/8
  81/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  88
  57
  23
  8
  42
  13
  55
  1
  111/152
  102/19
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  65
  30
  20
  15
  7
  4
  11
  1
  7/18
  27/5
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app win) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  49
  32
  12
  5
  25
  8
  33
  1
  37/46
  173/32
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  7
  2
  6
  2
  1
  3
  1
  1/3
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  18
  10
  4
  4
  3
  1
  4
  1
  3/28
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app X) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (b)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  156
  92
  41
  23
  21
  14
  35
  1
  67/324
  23/4
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  36
  17
  4
  15
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma)))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  35
  14
  15
  6
  7
  8
  15
  1
  1/8
  40/7
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  65
  44
  15
  6
  35
  8
  43
  1
  133/184
  21/4
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  51
  33
  13
  5
  25
  8
  33
  1
  37/46
  178/33
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  18
  10
  4
  4
  3
  1
  4
  1
  3/28
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  67
  32
  20
  15
  7
  4
  11
  1
  7/19
  87/16
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  17
  5
  3
  9
  0
  1
  1
  1
  0
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  39
  22
  9
  8
  6
  2
  8
  1
  3/13
  115/22
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((5 5 0) (9/2 9/2 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked? <-) (app b (app coord r c)))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  27
  18
  7
  2
  14
  4
  18
  1
  19/24
  49/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  87
  34
  21
  32
  8
  2
  10
  1
  7/40
  94/17
  ((5 5 0) (5 5 0) (11/2 11/2 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  48
  32
  12
  4
  25
  8
  33
  1
  37/46
  173/32
  ((3 5/2 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  32
  17
  4
  11
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  47
  18
  15
  14
  0
  3
  3
  1
  0
  11/2
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  100
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  67
  40
  10
  17
  17
  6
  23
  1
  27/40
  19/4
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-small
  2
  100
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  100
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  119
  83
  25
  11
  50
  17
  67
  1
  781/1035
  435/83
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-small
  2
  100
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  17
  10
  3
  4
  10
  1
  11
  1
  1
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  100
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  22
  14
  3
  5
  5
  1
  6
  1
  3/10
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  100
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env ((□? (x1 x2)))))\""
  40
  25
  8
  7
  11
  2
  13
  1
  13/28
  26/5
  ((1 1 0) (1 1 0) (3/2 3/2 0)))
'(clean-cache
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  13
  5
  3
  5
  0
  1
  1
  1
  0
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  11
  4
  2
  5
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env ((□? (x1 x2)))))\""
  29
  13
  8
  8
  8
  5
  13
  1
  4/5
  68/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  2
  100
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  41
  22
  10
  9
  8
  6
  14
  1
  8/17
  52/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-small
  2
  100
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  18
  11
  3
  4
  11
  1
  12
  1
  1
  49/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  100
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  67
  40
  10
  17
  17
  6
  23
  1
  59/90
  19/4
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2)))))\""
  30
  15
  8
  7
  5
  2
  7
  1
  7/20
  26/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  13
  5
  3
  5
  0
  1
  1
  1
  0
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  100
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  9
  3
  5
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  100
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env ((□? (x1 x2)))))\""
  99
  67
  23
  9
  40
  15
  55
  1
  122/171
  352/67
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  100
  26
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  75
  48
  10
  17
  19
  6
  25
  1
  53/90
  113/24
  ((2 2 0) (5/2 5/2 0) (2 2 0)))
'(clean-cache
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  2
  100
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  19
  9
  3
  7
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  23
  9
  5
  9
  0
  1
  1
  1
  0
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  40
  19
  8
  13
  5
  2
  7
  1
  5/14
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  35
  13
  8
  14
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  51
  24
  14
  13
  10
  6
  16
  1
  10/19
  113/24
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  26
  14
  5
  7
  5
  1
  6
  1
  3/10
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  131
  86
  14
  31
  29
  6
  35
  1
  115/234
  405/86
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  26
  14
  5
  7
  5
  1
  6
  1
  3/10
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  21
  10
  5
  6
  10
  1
  11
  1
  1
  9/2
  ((0 0 0) (1/2 1/2 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  40
  19
  8
  13
  5
  2
  7
  1
  5/14
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  2
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  25
  9
  3
  13
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  38
  19
  8
  11
  5
  2
  7
  1
  5/14
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  119
  74
  14
  31
  27
  6
  33
  1
  125/234
  351/74
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  119
  74
  14
  31
  27
  6
  33
  1
  23/42
  351/74
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  32
  15
  8
  9
  5
  2
  7
  1
  7/20
  26/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  84
  51
  19
  14
  13
  2
  15
  1
  7/17
  90/17
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  34
  13
  8
  13
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  21
  9
  3
  9
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  102
  59
  23
  20
  13
  6
  19
  1
  1/3
  311/59
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  2
  49
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  34
  13
  8
  13
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  34
  13
  8
  13
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  19
  9
  3
  7
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  247
  145
  56
  46
  32
  19
  51
  1
  157/378
  764/145
  ((43 43 0) (87/2 87/2 0) (43 43 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  15
  4
  2
  9
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  26
  14
  5
  7
  5
  1
  6
  1
  3/10
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  23
  9
  5
  9
  0
  1
  1
  1
  0
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  22
  11
  5
  6
  11
  1
  12
  1
  1
  49/11
  ((1/2 1/2 0) (0 0 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  38
  19
  8
  11
  5
  2
  7
  1
  5/14
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  23
  9
  3
  11
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x3 x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  309
  131
  60
  118
  10
  5
  15
  1
  8/19
  725/131
  ((115/2 115/2 1/2) (115/2 115/2 1/2) (115/2 115/2 1/2)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  74
  15
  13
  46
  3
  2
  5
  1
  3/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  51
  22
  2
  27
  2
  2
  4
  1
  2/15
  5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  103
  19
  20
  64
  3
  2
  5
  1
  3/10
  104/19
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  38
  15
  8
  15
  0
  1
  1
  1
  0
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  2
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  46
  19
  2
  25
  2
  2
  4
  1
  2/13
  5
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  32
  9
  3
  20
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  56
  13
  8
  35
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  152
  27
  31
  94
  3
  2
  5
  1
  3/10
  152/27
  ((10 10 0) (10 10 0) (10 10 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  32
  14
  8
  10
  5
  1
  6
  1
  3/10
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  32
  14
  8
  10
  5
  1
  6
  1
  3/10
  9/2
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  103
  19
  20
  64
  3
  2
  5
  1
  3/10
  104/19
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  121
  37
  20
  64
  5
  2
  7
  1
  5/14
  202/37
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  36
  13
  2
  21
  2
  2
  4
  1
  2/9
  5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  230
  152
  20
  58
  45
  6
  51
  1
  191/441
  729/152
  ((35/2 35/2 0) (35/2 35/2 0) (35/2 35/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  28
  11
  8
  9
  11
  1
  12
  1
  1
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  152
  27
  31
  94
  3
  2
  5
  1
  3/10
  152/27
  ((10 10 0) (10 10 0) (10 10 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  186
  61
  31
  94
  5
  2
  7
  1
  5/14
  338/61
  ((39/2 39/2 0) (39/2 39/2 0) (39/2 39/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  22
  9
  3
  10
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1 1 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x4) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  26
  9
  3
  14
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  32
  14
  8
  10
  5
  1
  6
  1
  3/10
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  87
  42
  20
  25
  16
  6
  22
  1
  16/31
  29/6
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  74
  15
  13
  46
  3
  2
  5
  1
  3/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x4 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  230
  152
  20
  58
  45
  6
  51
  1
  299/705
  729/152
  ((18 18 0) (18 18 0) (18 18 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  121
  37
  20
  64
  5
  2
  7
  1
  5/14
  202/37
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  sat-2
  2
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  286
  107
  64
  115
  13
  6
  19
  1
  7/17
  589/107
  ((52 52 1/2) (99/2 99/2 0) (99/2 99/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  31
  10
  2
  19
  2
  2
  4
  1
  2/7
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  103
  19
  20
  64
  3
  2
  5
  1
  3/10
  104/19
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  84
  25
  13
  46
  5
  2
  7
  1
  5/14
  134/25
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  171
  59
  34
  78
  20
  11
  31
  1
  29/51
  313/59
  ((17 17 0) (17 17 0) (17 17 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  24
  9
  3
  12
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  245
  107
  47
  91
  13
  6
  19
  1
  1/3
  581/107
  ((34 34 0) (69/2 69/2 0) (34 34 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  34
  9
  3
  22
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  74
  15
  13
  46
  3
  2
  5
  1
  3/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  30
  9
  3
  18
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  248
  170
  20
  58
  47
  6
  53
  1
  283/705
  81/17
  ((41/2 41/2 0) (20 20 0) (41/2 41/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  28
  9
  3
  16
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  32
  14
  8
  10
  5
  1
  6
  1
  3/10
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  38
  15
  8
  15
  0
  1
  1
  1
  0
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  56
  13
  8
  35
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  32
  14
  8
  10
  5
  1
  6
  1
  3/10
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  56
  13
  8
  35
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  84
  25
  13
  46
  5
  2
  7
  1
  5/14
  134/25
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  32
  14
  8
  10
  5
  1
  6
  1
  3/10
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  74
  15
  13
  46
  3
  2
  5
  1
  3/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  26
  7
  2
  17
  2
  2
  4
  1
  2/5
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  276
  99
  60
  117
  5
  2
  7
  1
  5/17
  61/11
  ((48 48 0) (97/2 97/2 0) (95/2 95/2 1/2)))
'(clean-cache
  sat-2
  2
  100
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  152
  27
  31
  94
  3
  2
  5
  1
  3/10
  152/27
  ((10 10 0) (10 10 0) (10 10 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  41
  16
  2
  23
  2
  2
  4
  1
  2/11
  5
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-2
  2
  100
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  27
  10
  8
  9
  10
  1
  11
  1
  1
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  44
  13
  8
  23
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  38
  15
  8
  15
  0
  1
  1
  1
  0
  27/5
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  227
  155
  20
  52
  48
  6
  54
  1
  10/27
  144/31
  ((18 18 0) (18 18 0) (18 18 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  32
  9
  3
  20
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  129
  59
  23
  47
  13
  6
  19
  1
  1/3
  311/59
  ((11 11 0) (11 11 0) (11 11 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  218
  146
  20
  52
  47
  6
  53
  1
  52/135
  342/73
  ((17 17 0) (17 17 0) (17 17 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  64
  25
  20
  19
  10
  6
  16
  1
  1/2
  117/25
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  200
  128
  20
  52
  45
  6
  51
  1
  73/171
  603/128
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  9
  6
  0
  3
  1
  0
  1
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  24
  9
  3
  12
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  28
  11
  8
  9
  11
  1
  12
  1
  1
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  30
  13
  8
  9
  13
  1
  14
  1
  1
  58/13
  ((1 1 0) (1 1 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  113
  51
  23
  39
  13
  6
  19
  1
  7/17
  89/17
  ((10 10 0) (21/2 21/2 0) (10 10 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  34
  16
  8
  10
  6
  1
  7
  1
  7/22
  71/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  34
  16
  8
  10
  6
  1
  7
  1
  7/22
  71/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  22
  9
  3
  10
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  100
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  12
  7
  2
  3
  0
  1
  1
  1
  0
  33/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  44
  13
  8
  23
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  28
  9
  3
  16
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  5
  2
  7
  1
  5/14
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (2 2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  19
  8
  18
  5
  2
  7
  1
  5/14
  100/19
  ((2 2 0) (2 2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  5
  2
  7
  1
  5/14
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (2 2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  34
  16
  8
  10
  6
  1
  7
  1
  7/22
  71/16
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  103
  43
  19
  41
  5
  2
  7
  1
  5/17
  227/43
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  26
  9
  3
  14
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  34
  16
  8
  10
  6
  1
  7
  1
  7/22
  71/16
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  38
  15
  8
  15
  0
  1
  1
  1
  0
  27/5
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  108
  47
  19
  42
  10
  5
  15
  1
  8/19
  249/47
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  3
  2
  5
  1
  3/10
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  44
  13
  8
  23
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  128
  51
  23
  54
  20
  11
  31
  1
  29/51
  89/17
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  34
  16
  8
  10
  6
  1
  7
  1
  7/22
  71/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env ((□? (f)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  49
  19
  8
  22
  5
  2
  7
  1
  5/14
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  34
  9
  3
  22
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  34
  16
  8
  10
  6
  1
  7
  1
  7/22
  71/16
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  200
  128
  20
  52
  45
  6
  51
  1
  56/135
  603/128
  ((29/2 29/2 0) (29/2 29/2 0) (29/2 29/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  30
  9
  3
  18
  1
  0
  1
  1
  1/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  49
  19
  8
  22
  5
  2
  7
  1
  5/14
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  2
  100
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  328
  145
  56
  127
  32
  19
  51
  1
  157/378
  764/145
  ((157/2 157/2 1) (157/2 157/2 1) (157/2 157/2 1)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  39
  24
  10
  5
  14
  4
  18
  1
  31/42
  43/8
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  53
  18
  15
  20
  0
  3
  3
  1
  0
  11/2
  ((3 3 0) (7/2 7/2 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  145
  93
  19
  33
  20
  8
  28
  1
  55/312
  177/31
  ((29/2 29/2 0) (29/2 29/2 0) (29/2 29/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app win) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma)))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  182
  142
  21
  19
  64
  8
  72
  1
  179/672
  715/142
  ((30 30 0) (30 30 0) (30 30 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  304
  217
  43
  44
  69
  17
  86
  1
  297/595
  167/31
  ((89/2 89/2 0) (89/2 89/2 0) (89/2 89/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  53
  18
  15
  20
  0
  3
  3
  1
  0
  11/2
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  39
  16
  8
  15
  8
  2
  10
  1
  1/2
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  46
  25
  9
  12
  1
  2
  3
  1
  1/16
  132/25
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  53
  37
  10
  6
  23
  4
  27
  1
  107/133
  197/37
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  33
  12
  9
  12
  0
  2
  2
  1
  0
  21/4
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  55
  21
  15
  19
  9
  3
  12
  1
  3/7
  94/21
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  23
  10
  4
  9
  3
  1
  4
  1
  3/10
  22/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  140
  85
  23
  32
  23
  8
  31
  1
  1/3
  441/85
  ((25/2 25/2 0) (25/2 25/2 0) (27/2 27/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  19
  5
  3
  11
  0
  1
  1
  1
  0
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  211
  114
  51
  46
  21
  17
  38
  1
  7/108
  331/57
  ((21 21 0) (21 21 0) (21 21 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  208
  91
  61
  56
  23
  6
  29
  1
  85/234
  478/91
  ((39/2 39/2 0) (39/2 39/2 0) (39/2 39/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  424
  306
  53
  65
  98
  16
  114
  1
  12739/39744
  776/153
  ((79 79 1) (79 79 1) (79 79 1)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  177
  102
  44
  31
  36
  14
  50
  1
  133/390
  236/51
  ((31/2 31/2 0) (31/2 31/2 0) (31/2 31/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  51
  32
  14
  5
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  30
  13
  5
  12
  0
  1
  1
  1
  0
  68/13
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  58
  32
  18
  8
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  56
  21
  22
  13
  7
  8
  15
  1
  1/15
  40/7
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  63
  36
  17
  10
  10
  7
  17
  1
  5/64
  37/6
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  437
  200
  145
  92
  94
  28
  122
  1
  2189/4140
  1043/200
  ((105/2 105/2 1/2) (103/2 103/2 1/2) (51 51 1/2)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  157
  90
  38
  29
  30
  11
  41
  1
  59/180
  14/3
  ((14 14 0) (14 14 0) (14 14 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  22
  12
  4
  6
  4
  1
  5
  1
  1/3
  53/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  50
  23
  13
  14
  11
  2
  13
  1
  11/23
  107/23
  ((3 3 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  38
  21
  8
  9
  9
  1
  10
  1
  8/19
  14/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> minimax <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env ((□? (b co m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (c)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  25
  16
  4
  5
  9
  1
  10
  1
  4/7
  75/16
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  24
  11
  4
  9
  7
  1
  8
  1
  7/11
  50/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  197
  136
  29
  32
  54
  10
  64
  1
  37/99
  19/4
  ((31/2 31/2 0) (31/2 16 0) (31/2 31/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  71
  44
  17
  10
  15
  7
  22
  1
  15/136
  281/44
  ((17/2 17/2 0) (17/2 17/2 0) (19/2 19/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  6
  2
  7
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  177
  102
  44
  31
  36
  14
  50
  1
  133/390
  236/51
  ((31/2 31/2 0) (31/2 31/2 0) (31/2 31/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  44
  26
  7
  11
  10
  3
  13
  1
  29/60
  139/26
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) bo that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-horizon\")\n  (env ((□? (move-horizon-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  25
  16
  4
  5
  9
  1
  10
  1
  4/7
  75/16
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  208
  92
  71
  45
  26
  23
  49
  1
  269/980
  501/92
  ((43/2 43/2 0) (43/2 43/2 0) (43/2 43/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  32
  16
  10
  6
  6
  4
  10
  1
  3/14
  43/8
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  65
  26
  18
  21
  10
  4
  14
  1
  5/13
  58/13
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  28
  9
  8
  11
  4
  1
  5
  1
  4/9
  40/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  43
  22
  9
  12
  0
  2
  2
  1
  0
  115/22
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  45
  18
  10
  17
  8
  3
  11
  1
  8/17
  40/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  21
  11
  4
  6
  4
  1
  5
  1
  4/11
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  102
  72
  14
  16
  35
  3
  38
  1
  17/39
  83/18
  ((8 8 0) (8 8 0) (8 8 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  72
  30
  20
  22
  1
  4
  5
  1
  1/18
  27/5
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  241
  112
  71
  58
  28
  7
  35
  1
  103/276
  585/112
  ((28 28 0) (28 28 0) (28 28 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  58
  32
  18
  8
  23
  7
  30
  1
  53/66
  41/8
  ((3 3 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  88
  44
  18
  26
  14
  4
  18
  1
  5/16
  48/11
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  31
  16
  10
  5
  6
  4
  10
  1
  3/14
  43/8
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  22
  11
  4
  7
  4
  1
  5
  1
  4/11
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  157
  90
  38
  29
  30
  11
  41
  1
  59/180
  14/3
  ((14 14 0) (14 14 0) (14 14 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  185
  110
  44
  31
  40
  14
  54
  1
  143/410
  254/55
  ((16 16 0) (16 16 0) (31/2 31/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  21
  10
  4
  7
  4
  1
  5
  1
  2/5
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  50
  15
  15
  20
  0
  3
  3
  1
  0
  27/5
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  88
  44
  18
  26
  14
  4
  18
  1
  5/16
  48/11
  ((7/2 7/2 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  55
  21
  15
  19
  9
  3
  12
  1
  3/7
  94/21
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  43
  22
  10
  11
  10
  2
  12
  1
  5/11
  103/22
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  94
  50
  18
  26
  14
  4
  18
  1
  5/17
  219/50
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  198
  131
  32
  35
  42
  8
  50
  1
  4493/10395
  628/131
  ((21 21 0) (21 21 0) (21 21 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  72
  40
  18
  14
  14
  5
  19
  1
  5/14
  189/40
  ((5 5 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  205
  114
  51
  40
  21
  17
  38
  1
  7/108
  331/57
  ((21 21 0) (21 21 0) (21 21 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  20
  10
  4
  6
  4
  1
  5
  1
  2/5
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  27
  8
  8
  11
  4
  1
  5
  1
  1/2
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  58
  32
  18
  8
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  39
  24
  10
  5
  14
  4
  18
  1
  31/42
  43/8
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  47
  24
  12
  11
  10
  2
  12
  1
  5/12
  14/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  24
  10
  4
  10
  0
  1
  1
  1
  0
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  113
  81
  18
  14
  48
  5
  53
  1
  613/952
  394/81
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  100
  65
  22
  13
  35
  8
  43
  1
  77/115
  337/65
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  123
  91
  18
  14
  43
  5
  48
  1
  13/21
  439/91
  ((39/2 39/2 0) (39/2 39/2 0) (39/2 39/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  202
  147
  23
  32
  61
  8
  69
  1
  1289/2460
  743/147
  ((51/2 51/2 0) (51/2 51/2 0) (51/2 51/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  86
  54
  18
  14
  20
  5
  25
  1
  18/49
  14/3
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  50
  23
  13
  14
  11
  2
  13
  1
  11/23
  107/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> empty-board <-) player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  167
  106
  29
  32
  40
  10
  50
  1
  57/155
  511/106
  ((13 13 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env ((□? (f acc l)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  72
  30
  20
  22
  1
  4
  5
  1
  1/18
  27/5
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  53
  32
  14
  7
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  58
  32
  18
  8
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  28
  9
  8
  11
  4
  1
  5
  1
  4/9
  40/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  44
  26
  7
  11
  10
  3
  13
  1
  29/60
  139/26
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  23
  10
  4
  9
  3
  1
  4
  1
  3/10
  22/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  19
  8
  4
  7
  4
  1
  5
  1
  1/2
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  39
  16
  8
  15
  8
  2
  10
  1
  1/2
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  27
  9
  8
  10
  4
  1
  5
  1
  4/9
  40/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  88
  44
  18
  26
  14
  4
  18
  1
  5/16
  48/11
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  174
  134
  21
  19
  59
  8
  67
  1
  343/1320
  683/134
  ((59/2 59/2 0) (59/2 59/2 0) (61/2 61/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env ((□? (r x)) (□? (f x)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  38
  17
  4
  17
  1
  1
  2
  1
  1/12
  87/17
  ((1 1 0) (3/2 3/2 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  46
  19
  7
  20
  5
  2
  7
  1
  3/13
  85/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  26
  8
  8
  10
  4
  1
  5
  1
  1/2
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  52
  37
  10
  5
  23
  4
  27
  1
  107/133
  197/37
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  130
  49
  49
  32
  22
  17
  39
  1
  13/33
  262/49
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> maximin <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  6
  2
  7
  1
  0
  1
  1
  1/5
  5
  ((1/2 1/2 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  21
  10
  4
  7
  4
  1
  5
  1
  2/5
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  17
  7
  2
  8
  1
  1
  2
  1
  1/6
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app lose) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  102
  41
  39
  22
  22
  16
  38
  1
  1/2
  215/41
  ((7 7 0) (7 7 0) (15/2 15/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  105
  66
  17
  22
  17
  7
  24
  1
  31/240
  403/66
  ((23/2 23/2 0) (23/2 23/2 0) (23/2 23/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  74
  32
  20
  22
  1
  4
  5
  1
  1/19
  87/16
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  6
  2
  7
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (1/2 1/2 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app minimax bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  42
  17
  4
  21
  1
  1
  2
  1
  1/12
  87/17
  ((3/2 3/2 0) (3/2 3/2 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  467
  212
  155
  100
  17
  10
  27
  1
  211/945
  1087/212
  ((67 67 1) (133/2 133/2 1) (133/2 133/2 1)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  91
  64
  17
  10
  20
  7
  27
  1
  1/12
  6
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  24
  11
  4
  9
  7
  1
  8
  1
  7/11
  50/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  67
  35
  22
  10
  24
  8
  32
  1
  18/23
  37/7
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) empty-board player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (b)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  226
  170
  29
  27
  101
  10
  111
  1
  602/1215
  823/170
  ((61/2 61/2 0) (61/2 61/2 0) (61/2 61/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  6
  2
  7
  1
  0
  1
  1
  1/5
  5
  ((1/2 1/2 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  79
  44
  22
  13
  22
  8
  30
  1
  67/120
  229/44
  ((8 8 0) (8 8 0) (8 8 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  50
  15
  15
  20
  0
  3
  3
  1
  0
  27/5
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env ((□? (some-v-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  478
  214
  162
  102
  17
  11
  28
  1
  211/960
  1103/214
  ((66 66 1/2) (66 66 1/2) (66 66 1/2)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  157
  90
  38
  29
  30
  11
  41
  1
  59/180
  14/3
  ((14 14 0) (14 14 0) (14 14 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  309
  212
  57
  40
  69
  21
  90
  1
  105/208
  1095/212
  ((42 42 0) (42 42 0) (42 42 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  40
  24
  10
  6
  14
  4
  18
  1
  31/42
  43/8
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  65
  26
  18
  21
  10
  4
  14
  1
  5/13
  58/13
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  15
  7
  3
  5
  0
  1
  1
  1
  0
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  6
  2
  7
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (1/2 1/2 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  47
  20
  10
  17
  8
  3
  11
  1
  4/9
  22/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  24
  9
  10
  5
  3
  4
  7
  1
  1/7
  16/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  39
  26
  7
  6
  12
  3
  15
  1
  8/15
  139/26
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-coord\")\n  (env ((□? (move-coord-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  137
  85
  19
  33
  20
  8
  28
  1
  55/304
  492/85
  ((14 14 0) (14 14 0) (14 14 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  183
  117
  32
  34
  42
  8
  50
  1
  694/1395
  62/13
  ((14 14 0) (14 14 0) (14 14 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  48
  21
  10
  17
  9
  3
  12
  1
  3/7
  94/21
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  82
  42
  21
  19
  15
  5
  20
  1
  5/12
  100/21
  ((13/2 13/2 0) (13/2 13/2 0) (6 6 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  24
  11
  4
  9
  7
  1
  8
  1
  7/11
  50/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  62
  34
  8
  20
  14
  2
  16
  1
  2/5
  149/34
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  130
  49
  49
  32
  22
  17
  39
  1
  13/33
  262/49
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  25
  12
  4
  9
  3
  1
  4
  1
  1/4
  13/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env ((□? (f x)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  19
  8
  4
  7
  4
  1
  5
  1
  1/2
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  40
  24
  10
  6
  14
  4
  18
  1
  31/42
  43/8
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  38
  17
  4
  17
  1
  1
  2
  1
  1/12
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> display <-) \"Cat's game.\\n\")\n  (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  288
  137
  76
  75
  21
  18
  39
  1
  7/116
  797/137
  ((30 30 0) (30 30 0) (30 30 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  205
  114
  51
  40
  21
  17
  38
  1
  7/108
  331/57
  ((21 21 0) (21 21 0) (21 21 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  18
  9
  3
  6
  5
  1
  6
  1
  5/9
  40/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  58
  30
  8
  20
  14
  2
  16
  1
  8/19
  133/30
  ((2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  211
  114
  51
  46
  21
  17
  38
  1
  7/108
  331/57
  ((21 21 0) (21 21 0) (21 21 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  416
  298
  53
  65
  98
  16
  114
  1
  12803/39744
  1513/298
  ((139/2 139/2 1) (139/2 139/2 1) (139/2 139/2 1)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  63
  36
  17
  10
  10
  7
  17
  1
  5/64
  37/6
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  53
  32
  14
  7
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  17
  7
  2
  8
  1
  1
  2
  1
  1/6
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  205
  114
  51
  40
  21
  17
  38
  1
  7/108
  331/57
  ((21 21 0) (21 21 0) (21 21 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  157
  90
  38
  29
  30
  11
  41
  1
  59/180
  14/3
  ((14 14 0) (14 14 0) (14 14 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  82
  42
  21
  19
  15
  5
  20
  1
  5/12
  100/21
  ((13/2 13/2 0) (6 6 0) (13/2 13/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  152
  85
  38
  29
  28
  11
  39
  1
  57/175
  80/17
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  74
  32
  20
  22
  1
  4
  5
  1
  1/19
  87/16
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  18
  9
  3
  6
  5
  1
  6
  1
  5/9
  40/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  71
  36
  22
  13
  14
  8
  22
  1
  7/60
  35/6
  ((8 8 0) (8 8 0) (8 8 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  308
  221
  43
  44
  72
  17
  89
  1
  52/105
  1188/221
  ((44 44 0) (44 44 0) (44 44 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env ((□? (co)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  91
  64
  17
  10
  20
  7
  27
  1
  1/12
  6
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  255
  110
  91
  54
  26
  24
  50
  1
  269/1120
  619/110
  ((29 29 0) (59/2 59/2 0) (29 29 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  470
  232
  145
  93
  100
  28
  128
  1
  2269/4500
  1219/232
  ((119/2 119/2 1/2) (60 60 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  20
  12
  3
  5
  12
  1
  13
  1
  1
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  25
  9
  10
  6
  3
  4
  7
  1
  1/7
  16/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  27
  8
  8
  11
  4
  1
  5
  1
  1/2
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  22
  14
  3
  5
  14
  1
  15
  1
  1
  31/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  24
  10
  4
  10
  0
  1
  1
  1
  0
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  45
  22
  12
  11
  10
  2
  12
  1
  5/11
  103/22
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  42
  17
  4
  21
  1
  1
  2
  1
  1/12
  87/17
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  262
  201
  29
  32
  89
  10
  99
  1
  43/90
  965/201
  ((43 43 0) (43 43 0) (43 43 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  58
  32
  18
  8
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  85
  41
  18
  26
  14
  4
  18
  1
  10/31
  180/41
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  50
  23
  13
  14
  11
  2
  13
  1
  11/23
  107/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  42
  17
  4
  21
  1
  1
  2
  1
  1/12
  87/17
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  21
  13
  3
  5
  13
  1
  14
  1
  1
  58/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  58
  32
  18
  8
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  23
  13
  4
  6
  4
  1
  5
  1
  4/13
  57/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  45
  22
  12
  11
  10
  2
  12
  1
  5/11
  103/22
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  58
  32
  18
  8
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  47
  20
  10
  17
  8
  3
  11
  1
  4/9
  22/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  87
  55
  22
  10
  32
  8
  40
  1
  68/99
  293/55
  ((5 5 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  18
  9
  3
  6
  5
  1
  6
  1
  5/9
  40/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  22
  11
  4
  7
  4
  1
  5
  1
  4/11
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  55
  32
  16
  7
  23
  7
  30
  1
  53/66
  41/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  169
  94
  44
  31
  32
  14
  46
  1
  123/370
  218/47
  ((15 15 0) (15 15 0) (15 15 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  145
  93
  19
  33
  20
  8
  28
  1
  55/312
  177/31
  ((29/2 29/2 0) (29/2 29/2 0) (29/2 29/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  97
  34
  21
  42
  1
  2
  3
  1
  1/16
  94/17
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  169
  94
  44
  31
  32
  14
  46
  1
  123/370
  218/47
  ((15 15 0) (15 15 0) (15 15 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  39
  16
  8
  15
  8
  2
  10
  1
  1/2
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app X) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  127
  78
  35
  14
  33
  14
  47
  1
  421/780
  64/13
  ((12 12 0) (12 12 0) (12 12 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  79
  44
  22
  13
  22
  8
  30
  1
  67/120
  229/44
  ((9 9 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  6
  2
  7
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (1/2 1/2 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  62
  32
  20
  10
  23
  7
  30
  1
  53/66
  41/8
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  50
  23
  13
  14
  11
  2
  13
  1
  11/23
  107/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  73
  29
  16
  28
  4
  2
  6
  1
  1/5
  137/29
  ((3 3 0) (7/2 7/2 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  88
  56
  22
  10
  31
  8
  39
  1
  61/90
  37/7
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  24
  11
  4
  9
  3
  1
  4
  1
  3/11
  48/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  39
  26
  7
  6
  12
  3
  15
  1
  8/15
  139/26
  ((5/2 5/2 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  62
  34
  8
  20
  14
  2
  16
  1
  2/5
  149/34
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  151
  111
  21
  19
  47
  8
  55
  1
  113/354
  193/37
  ((21 21 0) (21 21 0) (21 21 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  325
  238
  43
  44
  78
  17
  95
  1
  121/255
  90/17
  ((119/2 119/2 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  5
  4
  0
  1
  0
  0
  0
  1
  0
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  503
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked? <-) (app b (app coord r c)))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  500
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env (() () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  500
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env (())))\""
  28
  19
  7
  2
  19
  7
  26
  1
  1
  101/19
  ((1/2 1/2 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env (() () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  500
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((1/2 1/2 0) (1 1 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  0
  500
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env (() () ())))\""
  35
  23
  9
  3
  23
  9
  32
  1
  1
  122/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  0
  500
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  500
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((1/2 1/2 0) (1 1 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  500
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  500
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  500
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  500
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  500
  26
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  500
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  51
  33
  12
  6
  33
  12
  45
  1
  1
  179/33
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  0
  500
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env (() () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  10
  5
  5
  0
  5
  5
  10
  1
  1
  28/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4) (env (() () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-)) (env (() () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  500
  49
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  500
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  51
  40
  9
  2
  40
  9
  49
  1
  1
  219/40
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  app
  "\"'(eval (λ (n4) (-> (app p n1 n2 n3 n4) <-)) (env (() () () () ())))\""
  58
  44
  11
  3
  44
  11
  55
  1
  1
  60/11
  ((2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4) (env (() () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  34
  24
  8
  2
  24
  8
  32
  1
  1
  43/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4) (env (() () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4) (env (() () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  10
  5
  5
  0
  5
  5
  10
  1
  1
  28/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  30
  21
  7
  2
  21
  7
  28
  1
  1
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  0
  500
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  500
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  500
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-1
  0
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (app (app p n1) n2) (-> n3 <-)) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (app p n1) (-> n2 <-)) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (() () () () () () ())))\""
  24
  10
  12
  2
  10
  12
  22
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-)) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  38
  24
  12
  2
  24
  12
  36
  1
  1
  43/8
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (() () () () () () ())))\""
  26
  14
  10
  2
  14
  10
  24
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env (() () () () () () ())))\""
  24
  14
  8
  2
  14
  8
  22
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (() () () () () () ())))\""
  71
  54
  15
  2
  54
  15
  69
  1
  1
  299/54
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (() () () () () () ())))\""
  24
  14
  8
  2
  14
  8
  22
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  32
  17
  13
  2
  17
  13
  30
  1
  1
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  22
  10
  10
  2
  10
  10
  20
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  34
  21
  11
  2
  21
  11
  32
  1
  1
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env (() () () () () () () ())))\""
  20
  13
  2
  5
  13
  2
  15
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (() () () () () () ())))\""
  24
  10
  12
  2
  10
  12
  22
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (() () () () () () ())))\""
  32
  17
  13
  2
  17
  13
  30
  1
  1
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (() () () () () () ())))\""
  24
  10
  12
  2
  10
  12
  22
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env (() () () () () () () ())))\""
  23
  15
  2
  6
  15
  2
  17
  1
  1
  5
  ((1/2 1/2 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval (app (-> (app p n1) <-) n2) (env (() () () () () () () ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (() () () () () () ())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env (() () () () () () ())))\""
  26
  14
  10
  2
  14
  10
  24
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env (() () () () () () () ())))\""
  96
  70
  17
  9
  70
  17
  87
  1
  1
  38/7
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval (app (-> (app (app p n1) n2) <-) n3) (env (() () () () () () () ())))\""
  11
  7
  2
  2
  7
  2
  9
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (() () () () () () ())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  22
  10
  10
  2
  10
  10
  20
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (() () () () () () ())))\""
  28
  14
  12
  2
  14
  12
  26
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env (() () () () () () () ())))\""
  17
  11
  2
  4
  11
  2
  13
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1) (env (() () () () () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  28
  17
  9
  2
  17
  9
  26
  1
  1
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (() () () () () () ())))\""
  20
  10
  8
  2
  10
  8
  18
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (() () () () () () ())))\""
  22
  10
  10
  2
  10
  10
  20
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  20
  10
  8
  2
  10
  8
  18
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  135
  93
  25
  17
  93
  25
  118
  1
  1
  517/93
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  20
  10
  8
  2
  10
  8
  18
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env (() () () () () () () ())))\""
  14
  9
  2
  3
  9
  2
  11
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (() () () () () () ())))\""
  20
  10
  8
  2
  10
  8
  18
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-2
  0
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  34
  19
  13
  2
  19
  13
  32
  1
  1
  101/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (6 6 0) (6 6 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  65
  54
  9
  2
  54
  9
  63
  1
  1
  299/54
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  7
  6
  0
  1
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (6 6 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  72
  58
  11
  3
  58
  11
  69
  1
  1
  160/29
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  34
  24
  8
  2
  24
  8
  32
  1
  1
  43/8
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  6
  4
  2
  0
  4
  2
  6
  1
  1
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  30
  21
  7
  2
  21
  7
  28
  1
  1
  16/3
  ((1/2 1/2 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  112
  82
  19
  11
  82
  19
  101
  1
  1
  463/82
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (6 6 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  116
  85
  19
  12
  85
  19
  104
  1
  1
  479/85
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  114
  83
  19
  12
  83
  19
  102
  1
  1
  469/83
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (6 6 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((6 6 0) (13/2 13/2 0) (6 6 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  28
  19
  7
  2
  19
  7
  26
  1
  1
  101/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (0 0 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (1/2 1/2 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  457/81
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env (() ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app play-turn empty-board (-> player-one <-) player-two) (env (())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  37/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  586
  403
  133
  50
  403
  133
  536
  1
  1
  2251/403
  ((119/2 119/2 1/2) (59 59 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 59 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env (())))\""
  42
  28
  13
  1
  28
  13
  41
  1
  1
  151/28
  ((3/2 3/2 0) (3/2 3/2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 119/2 1/2) (59 59 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((60 60 1) (121/2 121/2 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark co mark (-> bo <-)) (env (())))\""
  12
  8
  3
  1
  8
  3
  11
  1
  1
  41/8
  ((0 0 0) (1/2 1/2 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> move-coord-v <-) (move move-coord-x _) _) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (119/2 119/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  31
  23
  7
  1
  23
  7
  30
  1
  1
  124/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (119/2 119/2 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  31
  23
  8
  0
  23
  8
  31
  1
  1
  122/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  588
  404
  133
  51
  404
  133
  537
  1
  1
  1127/202
  ((119/2 119/2 1/2) (59 59 1/2) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  77
  54
  22
  1
  54
  22
  76
  1
  1
  151/27
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  597
  410
  136
  51
  410
  136
  546
  1
  1
  1142/205
  ((61 61 1) (123/2 123/2 1) (123/2 123/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (119/2 60 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo that-mark this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  48
  22
  23
  3
  22
  23
  45
  1
  1
  113/22
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (59 119/2 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env (())))\""
  26
  16
  9
  1
  16
  9
  25
  1
  1
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app horizon (-> (app lose) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match some-v-v ((some some-v-x) (-> some-v-x <-)) _) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (119/2 119/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env (())))\""
  593
  408
  135
  50
  408
  135
  543
  1
  1
  379/68
  ((60 60 1) (60 60 1) (60 121/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env (() ())))\""
  41
  18
  20
  3
  18
  20
  38
  1
  1
  46/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (59 59 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) mark bo) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (59 59 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env (() ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  23
  19
  4
  0
  19
  4
  23
  1
  1
  102/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (119/2 119/2 1) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval (match (app full? bo) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (c) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 59 1/2) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (60 60 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env (())))\""
  585
  402
  133
  50
  402
  133
  535
  1
  1
  1123/201
  ((119/2 119/2 1) (119/2 119/2 1) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((121/2 121/2 1) (119/2 119/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (())))\""
  588
  404
  133
  51
  404
  133
  537
  1
  1
  1127/202
  ((61 61 1/2) (117/2 117/2 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((60 60 1) (60 60 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  48
  22
  23
  3
  22
  23
  45
  1
  1
  113/22
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (move-coord-v) (-> (match move-coord-v ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (59 59 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (move-horizon-v) (-> (match move-horizon-v ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((60 60 1) (59 119/2 1/2) (61 61 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env (() ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval (λ () (-> (let (co) ...) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 59 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app horizon (-> (app win) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) that-mark this-mark) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env (())))\""
  585
  402
  133
  50
  402
  133
  535
  1
  1
  749/134
  ((121/2 121/2 1) (59 59 1/2) (119/2 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  594
  409
  133
  52
  409
  133
  542
  1
  1
  2273/409
  ((63 63 1) (63 63 1) (63 63 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  586
  403
  133
  50
  403
  133
  536
  1
  1
  2251/403
  ((119/2 119/2 1/2) (117/2 117/2 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app some-v (-> (app maximin bo that-mark this-mark) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((121/2 121/2 1/2) (59 59 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env (())))\""
  595
  409
  135
  51
  409
  135
  544
  1
  1
  2276/409
  ((60 121/2 1) (60 60 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (app b co) ((blank) (-> (app #f) <-)) (marked m*)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> that-mark <-) this-mark) (env (() ())))\""
  18
  9
  9
  0
  9
  9
  18
  1
  1
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((60 60 1) (119/2 119/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((60 60 1) (123/2 123/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (let (bo) (-> (match (app wins? bo mark) ...) <-)) (env (())))\""
  586
  403
  133
  50
  403
  133
  536
  1
  1
  173/31
  ((59 59 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  60
  28
  29
  3
  28
  29
  57
  1
  1
  145/28
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 59 1) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  25/4
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env (() ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env (())))\""
  592
  408
  133
  51
  408
  133
  541
  1
  1
  2269/408
  ((63 63 1) (125/2 125/2 1) (63 63 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (61 61 1) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app play-turn (-> empty-board <-) player-one player-two) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  12
  8
  3
  1
  8
  3
  11
  1
  1
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (59 59 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env (())))\""
  585
  402
  133
  50
  402
  133
  535
  1
  1
  2245/402
  ((119/2 119/2 1/2) (119/2 119/2 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  24
  16
  8
  0
  16
  8
  24
  1
  1
  85/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 59 1/2) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env (())))\""
  585
  402
  133
  50
  402
  133
  535
  1
  1
  2245/402
  ((119/2 119/2 1) (119/2 119/2 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  letrec
  "\"'(eval (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (59 119/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env (())))\""
  586
  403
  133
  50
  403
  133
  536
  1
  1
  2250/403
  ((119/2 119/2 1/2) (60 60 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) (app make-ai-action (app X))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (app X) (-> (app make-ai-action (app X)) <-)) (env (())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (59 59 1/2) (59 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app play-turn (-> bo <-) that-play this-play) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 59 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord rc rc) m) (env (() ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env (())))\""
  590
  407
  133
  50
  407
  133
  540
  1
  1
  2270/407
  ((60 60 1) (61 61 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env (())))\""
  589
  404
  135
  50
  404
  135
  539
  1
  1
  2253/404
  ((60 60 1) (60 60 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 59 1) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env (())))\""
  8
  5
  3
  0
  5
  3
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  589
  405
  133
  51
  405
  133
  538
  1
  1
  2258/405
  ((59 59 1/2) (59 59 1/2) (59 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 59 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((60 60 1/2) (60 60 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app marked? (-> (app b (app coord r c)) <-)) (env (() () ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 59 1) (117/2 117/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (119/2 119/2 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-)) (env (())))\""
  587
  404
  133
  50
  404
  133
  537
  1
  1
  1127/202
  ((119/2 119/2 1/2) (119/2 119/2 1/2) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  19
  10
  9
  0
  10
  9
  19
  1
  1
  27/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  594
  409
  133
  52
  409
  133
  542
  1
  1
  2273/409
  ((63 63 1) (63 63 1) (63 63 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app f (-> (app coord r c) <-) x) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env (())))\""
  590
  407
  133
  50
  407
  133
  540
  1
  1
  2270/407
  ((121/2 121/2 1) (119/2 119/2 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env (() ())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((129/2 129/2 1) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (59 59 1/2) (121/2 121/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> this-play <-) (player mark action)) (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  104/17
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord rc rc) m) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app maximin bo that-mark (-> this-mark <-)) (env (() ())))\""
  30
  18
  11
  1
  18
  11
  29
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env (())))\""
  37
  30
  7
  0
  30
  7
  37
  1
  1
  17/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((60 60 1) (60 60 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app minimax bo (-> that-mark <-) this-mark) (env (() ())))\""
  30
  18
  11
  1
  18
  11
  29
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  600
  414
  133
  53
  414
  133
  547
  1
  1
  255/46
  ((63 63 1) (63 63 1) (63 63 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (119/2 119/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 59 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app equal? co₀ co) <-) (#f) _) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((121/2 121/2 1) (60 60 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env (())))\""
  19
  13
  6
  0
  13
  6
  19
  1
  1
  68/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (c x) (-> (app f (app coord r c) x) <-)) (env (() () ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env (())))\""
  592
  406
  136
  50
  406
  136
  542
  1
  1
  1133/203
  ((121/2 121/2 1) (121/2 121/2 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env (())))\""
  23
  19
  4
  0
  19
  4
  23
  1
  1
  102/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env (())))\""
  49
  35
  13
  1
  35
  13
  48
  1
  1
  188/35
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (bo) (-> (app error 'human-action \"not implemented\") <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app minimax bo that-mark (-> this-mark <-)) (env (() ())))\""
  18
  9
  9
  0
  9
  9
  18
  1
  1
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app play-turn bo that-play (-> this-play <-)) (env (())))\""
  23
  16
  7
  0
  16
  7
  23
  1
  1
  47/8
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 59 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env (())))\""
  15
  7
  8
  0
  7
  8
  15
  1
  1
  40/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env (())))\""
  593
  407
  136
  50
  407
  136
  543
  1
  1
  2270/407
  ((121/2 121/2 1) (121/2 121/2 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env (() ())))\""
  23
  16
  6
  1
  16
  6
  22
  1
  1
  21/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (119/2 119/2 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app lose) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app some-v (-> (app minimax bo that-mark this-mark) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (119/2 119/2 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env (())))\""
  586
  403
  133
  50
  403
  133
  536
  1
  1
  2250/403
  ((59 59 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (let (_) (-> (match this-play ...) <-)) (env (())))\""
  589
  406
  133
  50
  406
  133
  539
  1
  1
  323/58
  ((63 63 1) (63 63 1) (63 63 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 119/2 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  31
  23
  7
  1
  23
  7
  30
  1
  1
  124/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 119/2 1/2) (119/2 119/2 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (c) (-> (app marked? (app b (app coord r c))) <-)) (env (() () ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (119/2 60 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 119/2 1/2) (119/2 119/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (59 59 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  12
  8
  3
  1
  8
  3
  11
  1
  1
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (59 59 1) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (119/2 119/2 1) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env (())))\""
  24
  16
  8
  0
  16
  8
  24
  1
  1
  85/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((117/2 59 1) (59 59 1/2) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env (())))\""
  585
  402
  133
  50
  402
  133
  535
  1
  1
  2245/402
  ((119/2 119/2 1/2) (119/2 119/2 1/2) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app play-turn empty-board player-one (-> player-two <-)) (env (())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  37/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (letrec (loop) (-> (app loop) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (119/2 119/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) empty-board player-one player-two) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 119/2 1/2) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-horizon\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env (() ())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (-> (app X) <-) (app make-ai-action (app X))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env (())))\""
  592
  408
  133
  51
  408
  133
  541
  1
  1
  2269/408
  ((127/2 127/2 1) (63 63 1) (63 63 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> mark <-) bo) (env (())))\""
  37
  30
  7
  0
  30
  7
  37
  1
  1
  17/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env (())))\""
  593
  407
  136
  50
  407
  136
  543
  1
  1
  2270/407
  ((121/2 121/2 1) (60 60 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((60 60 1/2) (59 59 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma))) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env (())))\""
  595
  409
  136
  50
  409
  136
  545
  1
  1
  2279/409
  ((60 60 1) (60 60 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env (())))\""
  587
  404
  133
  50
  404
  133
  537
  1
  1
  2253/404
  ((59 59 1/2) (59 59 1) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env (())))\""
  585
  402
  133
  50
  402
  133
  535
  1
  1
  749/134
  ((119/2 119/2 1/2) (119/2 119/2 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app play-turn bo (-> that-play <-) this-play) (env (())))\""
  23
  16
  7
  0
  16
  7
  23
  1
  1
  47/8
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord rc rc) (-> m <-)) (env (() ())))\""
  77
  54
  22
  1
  54
  22
  76
  1
  1
  151/27
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  586
  403
  133
  50
  403
  133
  536
  1
  1
  2251/403
  ((59 59 1/2) (119/2 119/2 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env (())))\""
  86
  58
  27
  1
  58
  27
  85
  1
  1
  163/29
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval (λ (bo this-play that-play) (-> (let (_) ...) <-)) (env (())))\""
  590
  407
  133
  50
  407
  133
  540
  1
  1
  2265/407
  ((63 63 1) (63 63 1) (63 63 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  31
  23
  7
  1
  23
  7
  30
  1
  1
  124/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 60 1/2) (119/2 119/2 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co mark bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (119/2 119/2 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((117/2 117/2 1/2) (59 59 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env (())))\""
  585
  402
  133
  50
  402
  133
  535
  1
  1
  2245/402
  ((59 59 1/2) (60 60 1) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> marked? <-) (app b (app coord r c))) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (let (_) (-> (app display \"Cat's game.\\n\") <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env (())))\""
  589
  406
  133
  50
  406
  133
  539
  1
  1
  1133/203
  ((60 60 1) (60 60 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (119/2 119/2 1/2) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env (())))\""
  595
  410
  133
  52
  410
  133
  543
  1
  1
  1139/205
  ((63 63 1) (63 63 1) (63 63 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((60 60 1) (59 59 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> display <-) \"Cat's game.\\n\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  586
  403
  133
  50
  403
  133
  536
  1
  1
  2251/403
  ((59 59 1/2) (119/2 119/2 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (119/2 119/2 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  9
  6
  2
  1
  6
  2
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  31
  19
  11
  1
  19
  11
  30
  1
  1
  102/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env (())))\""
  593
  408
  135
  50
  408
  135
  543
  1
  1
  379/68
  ((121/2 121/2 1) (121/2 121/2 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-coord\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env (())))\""
  595
  410
  135
  50
  410
  135
  545
  1
  1
  2283/410
  ((121/2 121/2 1) (61 61 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (59 59 1) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (119/2 119/2 1) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  593
  407
  135
  51
  407
  135
  542
  1
  1
  2267/407
  ((60 60 1) (60 60 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  598
  412
  133
  53
  412
  133
  545
  1
  1
  2287/412
  ((63 63 1) (63 63 1) (63 63 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo that-mark this-mark)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app coord r c) x) (env (() () ())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env (() ())))\""
  77
  54
  22
  1
  54
  22
  76
  1
  1
  151/27
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  31
  19
  11
  1
  19
  11
  30
  1
  1
  102/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord rc rc) <-) m) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env (() ())))\""
  53
  38
  13
  2
  38
  13
  51
  1
  1
  205/38
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app wins? bo mark) <-) (#f) _) (env (())))\""
  585
  402
  133
  50
  402
  133
  535
  1
  1
  2245/402
  ((119/2 119/2 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app minimax (-> bo <-) that-mark this-mark) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (let (... () (co (-> (app action bo) <-)) () ...) ...) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((60 60 1) (119/2 60 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-))) (env (())))\""
  590
  407
  133
  50
  407
  133
  540
  1
  1
  2270/407
  ((61 61 1) (61 61 1) (61 61 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env (())))\""
  14
  8
  6
  0
  8
  6
  14
  1
  1
  21/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app win) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app minimax bo that-mark this-mark)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  586
  403
  133
  50
  403
  133
  536
  1
  1
  2250/403
  ((59 59 1/2) (119/2 119/2 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env (())))\""
  590
  407
  133
  50
  407
  133
  540
  1
  1
  2270/407
  ((119/2 60 1) (60 60 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env (() ())))\""
  12
  8
  3
  1
  8
  3
  11
  1
  1
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  31
  23
  7
  1
  23
  7
  30
  1
  1
  124/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env (())))\""
  597
  412
  135
  50
  412
  135
  547
  1
  1
  573/103
  ((121/2 121/2 1) (121/2 121/2 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (119/2 119/2 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env (())))\""
  589
  406
  133
  50
  406
  133
  539
  1
  1
  2263/406
  ((119/2 119/2 1) (59 59 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env (())))\""
  7
  3
  4
  0
  3
  4
  7
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  11/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env (())))\""
  593
  407
  136
  50
  407
  136
  543
  1
  1
  2270/407
  ((61 61 1) (123/2 123/2 1) (121/2 121/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env (())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (119/2 119/2 1) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env (())))\""
  595
  410
  135
  50
  410
  135
  545
  1
  1
  2283/410
  ((60 60 1) (60 60 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env (())))\""
  7
  3
  4
  0
  3
  4
  7
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (co) (-> (match (app equal? co₀ co) ...) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  599
  413
  133
  53
  413
  133
  546
  1
  1
  2291/413
  ((63 63 1) (63 63 1) (63 63 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (119/2 119/2 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  19
  10
  9
  0
  10
  9
  19
  1
  1
  27/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (129/2 129/2 1) (129/2 129/2 3/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (119/2 119/2 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 60 1) (121/2 121/2 1) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (60 60 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁)) (env (())))\""
  587
  404
  133
  50
  404
  133
  537
  1
  1
  1127/202
  ((59 59 1) (119/2 119/2 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env (())))\""
  588
  405
  133
  50
  405
  133
  538
  1
  1
  2257/405
  ((119/2 119/2 1) (119/2 60 1) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env (())))\""
  588
  403
  135
  50
  403
  135
  538
  1
  1
  173/31
  ((60 60 1) (60 60 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  586
  403
  133
  50
  403
  133
  536
  1
  1
  2250/403
  ((59 59 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  11/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env (() () ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (60 60 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  77
  54
  22
  1
  54
  22
  76
  1
  1
  151/27
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1/2) (59 59 1) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (59 59 1/2) (59 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (r) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> move-horizon-v <-) (move _ move-horizon-x) _) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env (())))\""
  586
  403
  133
  50
  403
  133
  536
  1
  1
  2250/403
  ((59 59 1) (119/2 119/2 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (119/2 119/2 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  597
  410
  136
  51
  410
  136
  546
  1
  1
  1142/205
  ((61 61 1) (61 61 1) (61 61 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  9
  6
  2
  1
  6
  2
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env (())))\""
  69
  32
  34
  3
  32
  34
  66
  1
  1
  21/4
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env (() ())))\""
  38
  30
  7
  1
  30
  7
  37
  1
  1
  17/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (119/2 119/2 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) bo that-play this-play) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app f (app coord r c) (-> x <-)) (env (() () ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (())))\""
  589
  405
  133
  51
  405
  133
  538
  1
  1
  2258/405
  ((59 59 1/2) (59 59 1/2) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> minimax <-) bo that-mark this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((119/2 119/2 1) (119/2 119/2 1) (119/2 119/2 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((60 60 1) (60 60 1) (60 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1) (59 59 1) (59 59 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env (())))\""
  14
  9
  5
  0
  9
  5
  14
  1
  1
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  584
  401
  133
  50
  401
  133
  534
  1
  1
  2241/401
  ((59 59 1/2) (59 59 1/2) (119/2 119/2 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env (() ())))\""
  77
  54
  22
  1
  54
  22
  76
  1
  1
  151/27
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  588
  404
  133
  51
  404
  133
  537
  1
  1
  1127/202
  ((59 59 1/2) (119/2 119/2 1/2) (59 59 1/2)))
'(clean-cache
  tic-tac-toe
  0
  500
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  589
  405
  133
  51
  405
  133
  538
  1
  1
  2258/405
  ((59 59 1/2) (59 119/2 1/2) (119/2 119/2 1/2)))
'(clean-cache
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  11
  5
  3
  3
  2
  1
  3
  1
  2/9
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  16
  9
  3
  4
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  500
  26
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  500
  26
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  93
  63
  21
  9
  40
  15
  55
  1
  916/1035
  335/63
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  11
  5
  3
  3
  2
  1
  3
  1
  2/9
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  500
  26
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env ((□? (x1 x2)))))\""
  73
  47
  19
  7
  30
  13
  43
  1
  131/171
  249/47
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2)))))\""
  26
  13
  8
  5
  8
  4
  12
  1
  3/4
  68/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  1
  500
  26
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  121
  78
  28
  15
  52
  19
  71
  1
  245/288
  433/78
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-small
  1
  500
  26
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  130
  86
  28
  16
  60
  19
  79
  1
  2771/3150
  475/86
  ((7 7 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  500
  26
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  115
  74
  28
  13
  50
  19
  69
  1
  493/558
  203/37
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  sat-small
  1
  500
  26
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  129
  85
  28
  16
  59
  19
  78
  1
  2681/3060
  469/85
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-small
  1
  500
  26
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env ((□? (x1 x2)))))\""
  32
  19
  8
  5
  12
  4
  16
  1
  3/4
  100/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  18
  9
  3
  6
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env ((□? (x1 x2)))))\""
  28
  13
  8
  7
  9
  5
  14
  1
  17/20
  68/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  1
  500
  26
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  121
  78
  28
  15
  52
  19
  71
  1
  245/288
  433/78
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-small
  1
  500
  26
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  500
  26
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  132
  89
  28
  15
  57
  19
  76
  1
  2321/2880
  500/89
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  500
  26
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  11
  4
  2
  5
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  1
  500
  26
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  129
  86
  28
  15
  58
  19
  77
  1
  2501/2970
  237/43
  ((7 7 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-1
  1
  500
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  901
  631
  178
  92
  213
  59
  272
  1
  22377049/27130950
  3617/631
  ((225 225 5/2) (449/2 449/2 5/2) (451/2 451/2 5/2)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  500
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  838
  585
  178
  75
  179
  59
  238
  1
  25135/29484
  3314/585
  ((219 219 2) (439/2 439/2 2) (220 220 2)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  500
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  38
  19
  8
  11
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  20
  9
  3
  8
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  500
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  900
  630
  178
  92
  212
  59
  271
  1
  43849733/53357535
  3611/630
  ((451/2 451/2 5/2) (451/2 451/2 2) (451/2 451/2 2)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  19
  9
  5
  5
  4
  1
  5
  1
  4/25
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  500
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  892
  623
  178
  91
  205
  59
  264
  1
  83539387/103097610
  3613/623
  ((465/2 465/2 3) (465/2 465/2 3) (233 233 3)))
'(clean-cache
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  220
  129
  48
  43
  33
  15
  48
  1
  281/432
  228/43
  ((35 35 0) (71/2 71/2 0) (71/2 71/2 0)))
'(clean-cache
  sat-1
  1
  500
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  892
  623
  178
  91
  205
  59
  264
  1
  83539387/103097610
  3613/623
  ((465/2 465/2 3) (232 232 3) (232 232 3)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  903
  634
  178
  91
  210
  59
  269
  1
  8191153/10309761
  1859/317
  ((495/2 248 3) (248 248 3) (248 248 3)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  22
  9
  3
  10
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  73
  43
  19
  11
  17
  6
  23
  1
  11/17
  227/43
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  87
  51
  19
  17
  21
  6
  27
  1
  13/21
  271/51
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  500
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  886
  619
  178
  89
  203
  59
  262
  1
  41679257/50644440
  3548/619
  ((451/2 451/2 2) (225 225 2) (225 225 2)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  500
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  900
  631
  178
  91
  211
  59
  270
  1
  42041003/52453170
  3616/631
  ((228 228 3) (227 227 3) (227 227 3)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  18
  9
  3
  6
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  19
  9
  5
  5
  4
  1
  5
  1
  4/25
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  500
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  36
  19
  8
  9
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  34
  13
  8
  13
  9
  5
  14
  1
  17/20
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  38
  19
  8
  11
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  868
  605
  178
  85
  193
  59
  252
  1
  3715279/4439610
  3462/605
  ((447/2 447/2 2) (447/2 447/2 2) (447/2 447/2 2)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  500
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  28
  13
  8
  7
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  754
  574
  133
  47
  157
  43
  200
  1
  124829/146124
  75/14
  ((415/2 415/2 2) (415/2 415/2 2) (207 207 2)))
'(clean-cache
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  605
  431
  131
  43
  123
  41
  164
  1
  3839/6480
  2293/431
  ((339/2 339/2 2) (171 171 2) (339/2 339/2 2)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  24
  9
  3
  12
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  15
  4
  2
  9
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  1
  500
  49
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  36
  19
  8
  9
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  1
  500
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x3 x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  70
  15
  13
  42
  7
  5
  12
  1
  7/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  224
  99
  43
  82
  13
  8
  21
  1
  3/7
  541/99
  ((61/2 61/2 0) (61/2 61/2 0) (31 31 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x4) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  70
  15
  13
  42
  7
  5
  12
  1
  7/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  7
  2
  16
  3
  2
  5
  1
  3/5
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  13
  2
  18
  5
  2
  7
  1
  5/9
  5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  9
  3
  17
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  136
  27
  31
  78
  7
  7
  14
  1
  7/10
  152/27
  ((19/2 19/2 0) (9 9 0) (19/2 19/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  257
  99
  60
  98
  13
  9
  22
  1
  9/17
  61/11
  ((45 45 0) (45 45 1/2) (91/2 91/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  453
  183
  108
  162
  24
  17
  41
  1
  25/54
  330/61
  ((267/2 267/2 3/2) (134 134 3/2) (267/2 267/2 3/2)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x4 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  55
  13
  8
  34
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  55
  13
  8
  34
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  136
  27
  31
  78
  7
  7
  14
  1
  7/10
  152/27
  ((9 9 0) (19/2 19/2 0) (9 9 0)))
'(clean-cache
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  113
  37
  20
  56
  9
  6
  15
  1
  9/14
  202/37
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  80
  25
  13
  42
  9
  5
  14
  1
  9/14
  134/25
  ((7/2 7/2 0) (4 4 0) (4 4 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  9
  3
  21
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  155
  51
  30
  74
  16
  10
  26
  1
  32/51
  91/17
  ((15 15 0) (29/2 29/2 0) (15 15 0)))
'(clean-cache
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  45
  22
  2
  21
  8
  2
  10
  1
  8/15
  5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  293
  131
  60
  102
  14
  10
  24
  1
  10/19
  725/131
  ((107/2 107/2 0) (107/2 107/2 0) (107/2 107/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  37
  16
  2
  19
  6
  2
  8
  1
  6/11
  5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  95
  19
  20
  56
  7
  6
  13
  1
  7/10
  104/19
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  170
  61
  31
  78
  9
  7
  16
  1
  9/14
  338/61
  ((35/2 35/2 0) (35/2 35/2 0) (35/2 35/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  136
  27
  31
  78
  7
  7
  14
  1
  7/10
  152/27
  ((9 9 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  95
  19
  20
  56
  7
  6
  13
  1
  7/10
  104/19
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  10
  2
  17
  4
  2
  6
  1
  4/7
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  9
  3
  9
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  70
  15
  13
  42
  7
  5
  12
  1
  7/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  41
  19
  2
  20
  7
  2
  9
  1
  7/13
  5
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  95
  19
  20
  56
  7
  6
  13
  1
  7/10
  104/19
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  500
  78
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  70
  15
  13
  42
  7
  5
  12
  1
  7/10
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  1
  78
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  23
  9
  3
  11
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  113
  37
  20
  56
  9
  6
  15
  1
  9/14
  202/37
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  80
  25
  13
  42
  9
  5
  14
  1
  9/14
  134/25
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  31
  9
  3
  19
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  27
  9
  3
  15
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  9
  3
  13
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  55
  13
  8
  34
  8
  5
  13
  1
  4/5
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  1
  500
  78
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  259
  99
  60
  100
  13
  9
  22
  1
  9/17
  61/11
  ((91/2 91/2 0) (45 45 0) (91/2 91/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  8
  6
  0
  2
  4
  0
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  9
  3
  21
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  23
  9
  3
  11
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  31
  9
  3
  19
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  12
  4
  16
  1
  3/4
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  12
  4
  16
  1
  3/4
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env ((□? (f)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  9
  5
  14
  1
  17/20
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  9
  5
  14
  1
  17/20
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  9
  3
  17
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  27
  9
  3
  15
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  86
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  19
  8
  18
  12
  4
  16
  1
  3/4
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  106
  47
  19
  40
  20
  7
  27
  1
  13/19
  249/47
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  19
  8
  16
  12
  4
  16
  1
  3/4
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  114
  43
  19
  52
  20
  9
  29
  1
  38/51
  227/43
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  100
  43
  19
  38
  17
  6
  23
  1
  11/17
  227/43
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  9
  3
  13
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  114
  51
  19
  44
  21
  6
  27
  1
  13/21
  271/51
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  sat-3
  1
  500
  86
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  7
  3
  2
  2
  1
  1
  2
  1
  1/4
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  13
  8
  22
  9
  5
  14
  1
  17/20
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  98
  43
  19
  36
  17
  6
  23
  1
  11/17
  227/43
  ((17/2 17/2 0) (9 9 0) (17/2 17/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  19
  8
  18
  12
  4
  16
  1
  3/4
  100/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  9
  3
  9
  5
  2
  7
  1
  5/7
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  500
  86
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  11
  7
  2
  2
  3
  1
  4
  1
  3/8
  33/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  1
  500
  86
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  301
  129
  48
  124
  33
  15
  48
  1
  281/432
  228/43
  ((115/2 115/2 1/2) (58 58 1/2) (115/2 115/2 1/2)))
'(clean-cache
  sat-3
  1
  86
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  500
  86
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1782
  1223
  410
  149
  662
  179
  841
  1
  35933/60795
  7424/1223
  ((345 691/2 15/2) (346 346 15/2) (693/2 693/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  15
  6
  7
  2
  3
  4
  7
  1
  1/4
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  67
  32
  20
  15
  7
  4
  11
  1
  7/19
  87/16
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((685/2 685/2 7) (683/2 342 7) (683/2 683/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  1781
  1222
  410
  149
  660
  179
  839
  1
  286729/486360
  7417/1222
  ((342 685/2 7) (341 683/2 7) (342 342 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((349 349 7) (699/2 699/2 7) (697/2 349 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1784
  1226
  410
  148
  654
  179
  833
  1
  70606/120645
  3733/613
  ((349 349 15/2) (697/2 697/2 15/2) (349 349 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  24
  16
  5
  3
  11
  3
  14
  1
  17/24
  81/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  1784
  1225
  410
  149
  666
  179
  845
  1
  293029/491400
  7428/1225
  ((687/2 687/2 15/2) (729/2 729/2 17/2) (687/2 344 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  1788
  1230
  410
  148
  654
  179
  833
  1
  282949/482580
  3739/615
  ((367 367 15/2) (733/2 733/2 15/2) (739/2 739/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  27
  16
  5
  6
  9
  3
  12
  1
  5/8
  81/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1839
  1268
  421
  150
  682
  183
  865
  1
  295129/498960
  1943/317
  ((735/2 735/2 8) (733/2 367 15/2) (367 735/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  1772
  1213
  410
  149
  654
  179
  833
  1
  283999/482580
  7389/1213
  ((685/2 685/2 15/2) (685/2 685/2 15/2) (685/2 685/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1779
  1221
  410
  148
  654
  179
  833
  1
  283369/482580
  225/37
  ((693/2 693/2 15/2) (693/2 347 15/2) (345 345 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  1805
  1247
  410
  148
  682
  179
  861
  1
  567053/965160
  7572/1247
  ((717/2 717/2 15/2) (357 357 15/2) (358 358 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  43
  22
  15
  6
  14
  8
  22
  1
  7/32
  65/11
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1796
  1237
  410
  149
  667
  179
  846
  1
  287149/487620
  7614/1237
  ((353 353 15/2) (353 353 15/2) (705/2 705/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  36
  17
  4
  15
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  1784
  1224
  410
  150
  654
  179
  833
  1
  284209/482580
  934/153
  ((367 367 8) (737/2 737/2 8) (737/2 369 8)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  1804
  1240
  414
  150
  671
  182
  853
  1
  291979/496440
  3761/620
  ((697/2 697/2 15/2) (695/2 348 15/2) (695/2 695/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  51
  33
  13
  5
  25
  8
  33
  1
  37/46
  178/33
  ((3 3 0) (7/2 7/2 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env ((□? (co)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  36
  17
  4
  15
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  1824
  1264
  410
  150
  682
  179
  861
  1
  144587/246960
  7887/1264
  ((739/2 739/2 15/2) (739/2 739/2 15/2) (369 369 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  1788
  1228
  410
  150
  662
  179
  841
  1
  286309/486360
  3759/614
  ((699/2 699/2 15/2) (349 349 15/2) (347 347 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  38
  28
  7
  3
  23
  4
  27
  1
  65/76
  151/28
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  35
  14
  15
  6
  7
  8
  15
  1
  1/8
  40/7
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  5
  4
  0
  1
  0
  0
  0
  1
  0
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  1778
  1220
  410
  148
  658
  179
  837
  1
  283369/482580
  741/122
  ((339 339 15/2) (679/2 679/2 15/2) (339 339 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  1775
  1216
  410
  149
  656
  179
  835
  1
  285049/483840
  3695/608
  ((687/2 687/2 7) (342 685/2 7) (685/2 685/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((683/2 342 7) (683/2 683/2 7) (342 342 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  1780
  1222
  410
  148
  662
  179
  841
  1
  142157/241290
  7419/1222
  ((338 338 15/2) (338 338 7) (338 338 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  1773
  1215
  410
  148
  654
  179
  833
  1
  282739/482580
  7387/1215
  ((343 343 7) (343 343 7) (342 685/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  46
  29
  12
  5
  12
  7
  19
  1
  7/34
  185/29
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  1792
  1234
  410
  148
  670
  179
  849
  1
  289669/490140
  3732/617
  ((693/2 347 15/2) (347 695/2 7) (693/2 693/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  43
  26
  12
  5
  10
  7
  17
  1
  17/96
  79/13
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  39
  22
  9
  8
  6
  2
  8
  1
  3/13
  115/22
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  1772
  1214
  410
  148
  654
  179
  833
  1
  283999/482580
  3694/607
  ((341 683/2 7) (341 341 7) (343 687/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  1773
  1215
  410
  148
  656
  179
  835
  1
  142157/241290
  7397/1215
  ((685/2 343 15/2) (689/2 345 15/2) (344 344 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((689/2 345 15/2) (693/2 693/2 15/2) (346 346 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  1778
  1220
  410
  148
  654
  179
  833
  1
  284629/482580
  3709/610
  ((681/2 681/2 7) (340 340 7) (340 340 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  1783
  1225
  410
  148
  664
  179
  843
  1
  287149/486360
  7428/1225
  ((673/2 673/2 7) (335 335 7) (336 336 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((375 751/2 17/2) (365 365 15/2) (729/2 729/2 8)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  1772
  1213
  410
  149
  654
  179
  833
  1
  283999/482580
  7385/1213
  ((681/2 681/2 7) (681/2 681/2 7) (340 681/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  1826
  1261
  413
  152
  691
  182
  873
  1
  288409/490140
  7655/1261
  ((709/2 709/2 15/2) (355 355 15/2) (711/2 711/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  18
  10
  4
  4
  3
  1
  4
  1
  3/28
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  1775
  1217
  410
  148
  654
  179
  833
  1
  284629/482580
  7403/1217
  ((341 341 15/2) (341 341 15/2) (683/2 683/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env ((□? (r x)) (□? (f x)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  1778
  1220
  410
  148
  654
  179
  833
  1
  70921/120645
  741/122
  ((679/2 679/2 7) (679/2 679/2 7) (679/2 679/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  1785
  1227
  410
  148
  667
  179
  846
  1
  286519/485100
  2482/409
  ((342 342 15/2) (342 342 15/2) (683/2 342 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  145
  65
  56
  24
  24
  26
  50
  1
  257/672
  339/65
  ((11 11 0) (11 11 0) (11 11 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app X) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  103
  43
  42
  18
  21
  22
  43
  1
  241/528
  222/43
  ((15/2 15/2 0) (7 7 0) (17/2 17/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  1857
  1286
  421
  150
  692
  183
  875
  1
  73231/125055
  7963/1286
  ((767/2 767/2 8) (384 384 8) (767/2 767/2 17/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1800
  1242
  410
  148
  669
  179
  848
  1
  72181/122850
  2539/414
  ((359 359 15/2) (359 359 15/2) (721/2 361 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  47
  18
  15
  14
  0
  3
  3
  1
  0
  11/2
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  1786
  1228
  410
  148
  666
  179
  845
  1
  287989/487620
  1860/307
  ((671/2 671/2 7) (336 336 7) (335 335 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  1785
  1227
  410
  148
  667
  179
  846
  1
  286519/485100
  2482/409
  ((683/2 683/2 15/2) (342 342 15/2) (340 340 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  1775
  1217
  410
  148
  654
  179
  833
  1
  284089/482580
  7403/1217
  ((341 341 7) (342 342 15/2) (341 683/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  47
  18
  15
  14
  0
  3
  3
  1
  0
  11/2
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  1779
  1217
  412
  150
  654
  179
  833
  1
  14222/24129
  7415/1217
  ((721/2 721/2 8) (362 362 8) (719/2 719/2 8)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  156
  92
  41
  23
  21
  14
  35
  1
  67/324
  23/4
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  1774
  1216
  410
  148
  656
  179
  835
  1
  283999/482580
  231/38
  ((338 338 15/2) (677/2 339 15/2) (677/2 677/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  43
  26
  12
  5
  10
  7
  17
  1
  17/96
  79/13
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  1860
  1289
  421
  150
  694
  183
  877
  1
  73441/125370
  7975/1289
  ((385 385 8) (769/2 385 8) (765/2 765/2 8)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  160
  92
  41
  27
  21
  14
  35
  1
  67/324
  23/4
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  1800
  1240
  410
  150
  670
  179
  849
  1
  285049/486360
  7641/1240
  ((737/2 737/2 8) (368 368 8) (368 737/2 8)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  18
  10
  4
  4
  3
  1
  4
  1
  3/28
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma)))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  1773
  1215
  410
  148
  654
  179
  833
  1
  94783/160860
  2464/405
  ((349 349 15/2) (699/2 699/2 15/2) (349 349 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1772
  1214
  410
  148
  654
  179
  833
  1
  142157/241290
  3696/607
  ((689/2 689/2 15/2) (344 344 15/2) (689/2 689/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (b)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  1781
  1222
  410
  149
  660
  179
  839
  1
  286729/486360
  7417/1222
  ((683/2 683/2 7) (685/2 685/2 7) (685/2 685/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  1784
  1225
  410
  149
  665
  179
  844
  1
  288829/487620
  7432/1225
  ((693/2 693/2 15/2) (345 345 15/2) (346 346 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  37
  28
  7
  2
  23
  4
  27
  1
  65/76
  151/28
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app win) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  88
  57
  23
  8
  42
  13
  55
  1
  111/152
  102/19
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  1795
  1231
  414
  150
  667
  182
  849
  1
  292189/492660
  7457/1231
  ((689/2 689/2 15/2) (344 689/2 15/2) (343 343 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  28
  18
  7
  3
  14
  4
  18
  1
  19/24
  49/9
  ((3/2 3/2 0) (3/2 3/2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  1778
  1220
  410
  148
  654
  179
  833
  1
  3690097/6273540
  3713/610
  ((342 342 7) (342 342 7) (683/2 683/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  211
  109
  58
  44
  25
  15
  40
  1
  359/1740
  631/109
  ((18 18 0) (18 18 0) (18 18 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-horizon\")\n  (env ((□? (move-horizon-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  156
  92
  41
  23
  21
  14
  35
  1
  67/324
  23/4
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  1789
  1228
  410
  151
  670
  179
  849
  1
  299119/496440
  7443/1228
  ((340 340 15/2) (340 340 15/2) (679/2 340 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  20
  10
  7
  3
  6
  4
  10
  1
  3/8
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  1804
  1240
  414
  150
  671
  182
  853
  1
  291979/496440
  3761/620
  ((349 349 15/2) (699/2 699/2 15/2) (350 350 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  29
  12
  9
  8
  1
  2
  3
  1
  1/16
  21/4
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  1775
  1216
  410
  149
  656
  179
  835
  1
  285049/483840
  3695/608
  ((685/2 685/2 7) (342 342 7) (343 687/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> empty-board <-) player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  1779
  1221
  410
  148
  654
  179
  833
  1
  282361/482580
  2477/407
  ((356 356 15/2) (356 356 15/2) (356 356 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  1800
  1236
  414
  150
  669
  182
  851
  1
  290719/493920
  1876/309
  ((699/2 350 15/2) (349 349 15/2) (699/2 699/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1786
  1227
  410
  149
  663
  179
  842
  1
  287779/487620
  2480/409
  ((695/2 695/2 15/2) (695/2 695/2 15/2) (691/2 691/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  1778
  1220
  410
  148
  659
  179
  838
  1
  286519/486360
  371/61
  ((685/2 343 7) (343 343 7) (343 343 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  1776
  1218
  410
  148
  654
  179
  833
  1
  283117/482580
  7415/1218
  ((709/2 709/2 15/2) (354 354 7) (354 354 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  1775
  1217
  410
  148
  654
  179
  833
  1
  284089/482580
  7403/1217
  ((341 341 7) (342 342 15/2) (681/2 681/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  1771
  1213
  410
  148
  654
  179
  833
  1
  142157/241290
  7383/1213
  ((344 689/2 15/2) (345 691/2 15/2) (689/2 689/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  1784
  1220
  414
  150
  658
  182
  840
  1
  286309/486360
  3703/610
  ((683/2 683/2 15/2) (342 342 15/2) (344 344 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  1791
  1230
  410
  151
  672
  179
  851
  1
  301639/498960
  7451/1230
  ((681/2 681/2 15/2) (679/2 679/2 15/2) (677/2 339 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((343 343 15/2) (344 344 15/2) (344 344 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1812
  1253
  410
  149
  675
  179
  854
  1
  290509/492660
  7704/1253
  ((363 363 15/2) (363 363 15/2) (725/2 725/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  1778
  1220
  410
  148
  659
  179
  838
  1
  286519/486360
  3713/610
  ((345 691/2 7) (693/2 693/2 15/2) (689/2 689/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  1785
  1227
  410
  148
  661
  179
  840
  1
  284629/485100
  2482/409
  ((683/2 683/2 15/2) (683/2 683/2 7) (683/2 342 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  51
  30
  15
  6
  22
  8
  30
  1
  39/64
  79/15
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env ((□? (f acc l)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  1812
  1247
  413
  152
  681
  182
  863
  1
  287149/487620
  7580/1247
  ((693/2 693/2 15/2) (693/2 693/2 15/2) (347 347 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  15
  14
  0
  3
  3
  1
  0
  27/5
  ((3 3 0) (5/2 5/2 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((364 364 8) (362 362 15/2) (727/2 727/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1776
  1218
  410
  148
  654
  179
  833
  1
  283789/482580
  2469/406
  ((687/2 687/2 15/2) (346 693/2 15/2) (691/2 346 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  1773
  1215
  410
  148
  656
  179
  835
  1
  285259/483840
  2467/405
  ((683/2 683/2 15/2) (341 341 15/2) (681/2 681/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  51
  30
  15
  6
  22
  8
  30
  1
  39/64
  79/15
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  1791
  1233
  410
  148
  654
  179
  833
  1
  94223/160860
  7496/1233
  ((743/2 372 8) (737/2 737/2 15/2) (741/2 741/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  1780
  1222
  410
  148
  654
  179
  833
  1
  141527/241290
  3712/611
  ((348 697/2 15/2) (348 348 15/2) (705/2 705/2 8)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1776
  1218
  410
  148
  654
  179
  833
  1
  70921/120645
  3704/609
  ((689/2 689/2 7) (344 344 15/2) (689/2 345 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((689/2 689/2 15/2) (691/2 691/2 15/2) (345 345 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  1772
  1214
  410
  148
  655
  179
  834
  1
  284209/482580
  3696/607
  ((685/2 685/2 7) (344 344 7) (685/2 685/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  1790
  1231
  410
  149
  666
  179
  845
  1
  289249/491400
  7484/1231
  ((695/2 695/2 15/2) (348 348 15/2) (349 349 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env ((□? (b co m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  1772
  1214
  410
  148
  654
  179
  833
  1
  56825/96516
  3696/607
  ((352 352 15/2) (352 352 15/2) (352 352 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  1808
  1244
  414
  150
  673
  182
  855
  1
  293239/498960
  1885/311
  ((697/2 349 15/2) (349 349 15/2) (695/2 695/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  1776
  1218
  410
  148
  656
  179
  835
  1
  283369/482580
  530/87
  ((349 699/2 15/2) (348 348 15/2) (347 347 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  1787
  1228
  410
  149
  668
  179
  847
  1
  292819/491400
  3721/614
  ((338 677/2 7) (677/2 677/2 7) (340 681/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  1793
  1234
  410
  149
  668
  179
  847
  1
  290089/492660
  3748/617
  ((697/2 349 15/2) (349 349 15/2) (695/2 695/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  1781
  1222
  410
  149
  663
  179
  842
  1
  287989/486360
  3710/611
  ((689/2 689/2 15/2) (693/2 693/2 15/2) (693/2 693/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  1789
  1231
  410
  148
  668
  179
  847
  1
  288829/488880
  7452/1231
  ((691/2 346 7) (693/2 693/2 7) (346 346 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked? <-) (app b (app coord r c)))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1790
  1231
  410
  149
  665
  179
  844
  1
  287989/487620
  7456/1231
  ((695/2 695/2 15/2) (691/2 691/2 15/2) (346 346 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  1775
  1216
  410
  149
  654
  179
  833
  1
  282109/482580
  3703/608
  ((703/2 703/2 15/2) (351 703/2 15/2) (351 351 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  19
  10
  7
  2
  6
  4
  10
  1
  3/8
  27/5
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (5 5 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app lose) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  1843
  1283
  410
  150
  698
  179
  877
  1
  145577/248220
  7992/1283
  ((401 803/2 8) (803/2 803/2 8) (399 399 8)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1784
  1225
  410
  149
  663
  179
  842
  1
  287569/486360
  7432/1225
  ((693/2 693/2 15/2) (693/2 347 15/2) (348 348 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  1772
  1214
  410
  148
  654
  179
  833
  1
  283369/482580
  7383/1214
  ((344 344 15/2) (344 689/2 15/2) (689/2 689/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  74
  45
  21
  8
  33
  12
  45
  1
  25/36
  238/45
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  61
  44
  12
  5
  14
  7
  21
  1
  5/36
  131/22
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  173
  78
  69
  26
  28
  27
  55
  1
  1381/3840
  139/26
  ((15 15 0) (16 16 0) (31/2 31/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  1772
  1214
  410
  148
  655
  179
  834
  1
  285259/483840
  3701/607
  ((343 687/2 7) (342 342 7) (343 343 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> maximin <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  32
  17
  4
  11
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  77
  46
  23
  8
  34
  13
  47
  1
  11/16
  247/46
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  27
  16
  5
  6
  9
  3
  12
  1
  5/8
  81/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1775
  1217
  410
  148
  656
  179
  835
  1
  17809/30240
  7419/1217
  ((683/2 683/2 15/2) (342 342 15/2) (685/2 685/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  28
  18
  7
  3
  14
  4
  18
  1
  19/24
  49/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  27
  18
  7
  2
  14
  4
  18
  1
  19/24
  49/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (c)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  156
  92
  41
  23
  21
  14
  35
  1
  67/324
  23/4
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  1783
  1225
  410
  148
  665
  179
  844
  1
  286519/485100
  1487/245
  ((693/2 693/2 15/2) (347 347 8) (346 346 8)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  1773
  1215
  410
  148
  654
  179
  833
  1
  282739/482580
  7387/1215
  ((344 344 7) (703/2 352 15/2) (344 344 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  27
  18
  7
  2
  14
  4
  18
  1
  19/24
  49/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1779
  1220
  410
  149
  658
  179
  837
  1
  286309/485100
  3723/610
  ((343 343 7) (687/2 687/2 15/2) (343 687/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  65
  30
  20
  15
  7
  4
  11
  1
  7/18
  27/5
  ((9/2 9/2 0) (9/2 9/2 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1791
  1233
  410
  148
  654
  179
  833
  1
  281689/482580
  2504/411
  ((727/2 727/2 8) (729/2 729/2 8) (364 364 8)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  1784
  1224
  410
  150
  665
  179
  844
  1
  293449/492660
  928/153
  ((679/2 679/2 15/2) (339 339 15/2) (679/2 340 15/2)))
'(clean-cache
  tic-tac-toe
  1
  503
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((671/2 671/2 7) (336 336 7) (671/2 671/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  1775
  1217
  410
  148
  654
  179
  833
  1
  281479/482580
  7404/1217
  ((695/2 695/2 15/2) (348 348 15/2) (693/2 347 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((336 336 7) (671/2 671/2 7) (671/2 671/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  1773
  1214
  410
  149
  654
  179
  833
  1
  283789/482580
  3691/607
  ((685/2 343 15/2) (342 342 7) (685/2 685/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  1800
  1242
  410
  148
  678
  179
  857
  1
  70921/120645
  3776/621
  ((350 350 15/2) (350 701/2 15/2) (701/2 701/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((727/2 727/2 8) (727/2 727/2 8) (725/2 725/2 8)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  1775
  1216
  410
  149
  656
  179
  835
  1
  285049/483840
  3695/608
  ((685/2 685/2 7) (685/2 685/2 7) (343 343 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  1773
  1215
  410
  148
  654
  179
  833
  1
  283873/482580
  274/45
  ((705/2 705/2 15/2) (705/2 705/2 15/2) (352 352 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  24
  16
  5
  3
  11
  3
  14
  1
  17/24
  81/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  1777
  1218
  410
  149
  654
  179
  833
  1
  282739/482580
  3704/609
  ((711/2 711/2 7) (711/2 356 7) (713/2 713/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((343 343 15/2) (342 342 15/2) (343 343 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((347 347 15/2) (346 346 15/2) (346 346 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  15
  14
  0
  3
  3
  1
  0
  27/5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  1806
  1241
  413
  152
  677
  182
  859
  1
  287779/487620
  7553/1241
  ((695/2 348 15/2) (346 693/2 15/2) (689/2 689/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1776
  1218
  410
  148
  654
  179
  833
  1
  283789/482580
  2469/406
  ((701/2 701/2 7) (350 350 7) (699/2 699/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((683/2 683/2 7) (342 685/2 7) (342 685/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  80
  36
  32
  12
  20
  18
  38
  1
  241/432
  46/9
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((683/2 683/2 7) (683/2 683/2 7) (340 340 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  1777
  1218
  410
  149
  654
  179
  833
  1
  280849/482580
  7411/1218
  ((687/2 687/2 7) (685/2 685/2 7) (343 343 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  1772
  1214
  410
  148
  655
  179
  834
  1
  284209/482580
  3696/607
  ((683/2 683/2 15/2) (683/2 683/2 15/2) (342 342 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  1777
  1219
  410
  148
  660
  179
  839
  1
  285469/483840
  7404/1219
  ((336 336 15/2) (671/2 671/2 15/2) (334 334 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  1793
  1234
  410
  149
  668
  179
  847
  1
  290089/492660
  3748/617
  ((347 347 15/2) (349 349 15/2) (697/2 349 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app minimax bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  1774
  1215
  410
  149
  655
  179
  834
  1
  284629/483840
  2471/405
  ((346 346 15/2) (687/2 344 15/2) (346 346 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  1866
  1295
  421
  150
  698
  183
  881
  1
  73861/126000
  8002/1295
  ((769/2 769/2 8) (385 385 17/2) (385 385 8)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  1786
  1226
  410
  150
  666
  179
  845
  1
  293449/493920
  3717/613
  ((340 340 15/2) (679/2 679/2 7) (679/2 340 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  1784
  1224
  410
  150
  665
  179
  844
  1
  293449/492660
  928/153
  ((339 339 7) (339 339 15/2) (339 679/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  42
  25
  9
  8
  7
  2
  9
  1
  7/16
  132/25
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((344 689/2 15/2) (691/2 691/2 15/2) (687/2 687/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  1790
  1229
  410
  151
  671
  179
  850
  1
  300379/497700
  7447/1229
  ((339 339 15/2) (338 338 15/2) (677/2 339 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  36
  17
  4
  15
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1788
  1230
  410
  148
  663
  179
  842
  1
  142787/243180
  7547/1230
  ((699/2 699/2 15/2) (350 350 15/2) (349 699/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((673/2 673/2 7) (669/2 669/2 7) (673/2 673/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  1775
  1217
  410
  148
  654
  179
  833
  1
  284629/482580
  7403/1217
  ((341 683/2 15/2) (342 342 15/2) (342 342 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  1782
  1218
  414
  150
  657
  182
  839
  1
  285679/485100
  1233/203
  ((343 687/2 15/2) (687/2 687/2 15/2) (687/2 687/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  16
  6
  7
  3
  3
  4
  7
  1
  1/4
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  1780
  1222
  410
  148
  662
  179
  841
  1
  286309/485100
  3708/611
  ((336 673/2 15/2) (336 336 15/2) (336 336 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  65
  30
  20
  15
  7
  4
  11
  1
  7/18
  27/5
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  1787
  1228
  410
  149
  664
  179
  843
  1
  288409/488880
  1861/307
  ((343 343 7) (342 342 7) (341 683/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  1823
  1252
  423
  148
  663
  188
  851
  1
  2957/5040
  3879/626
  ((497 995/2 23/2) (995/2 995/2 23/2) (498 498 12)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  32
  17
  4
  11
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  49
  32
  12
  5
  25
  8
  33
  1
  37/46
  173/32
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  67
  46
  12
  9
  17
  7
  24
  1
  13/60
  277/46
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  1811
  1249
  410
  152
  685
  179
  864
  1
  290299/490140
  7555/1249
  ((689/2 689/2 15/2) (344 344 15/2) (689/2 689/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  1802
  1231
  423
  148
  663
  188
  851
  1
  569573/965160
  7603/1231
  ((753/2 753/2 15/2) (376 753/2 15/2) (753/2 753/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1774
  1216
  410
  148
  654
  179
  833
  1
  283999/482580
  1849/304
  ((344 689/2 15/2) (687/2 687/2 15/2) (344 344 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  67
  32
  20
  15
  7
  4
  11
  1
  7/19
  87/16
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  65
  44
  15
  6
  35
  8
  43
  1
  133/184
  21/4
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  1774
  1216
  410
  148
  654
  179
  833
  1
  3695137/6273540
  195/32
  ((364 364 8) (364 364 15/2) (725/2 725/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  7
  2
  6
  2
  1
  3
  1
  1/3
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  13
  7
  3
  3
  2
  1
  3
  1
  2/15
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  1
  0
  1
  1
  1/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  91
  60
  23
  8
  41
  13
  54
  1
  13/20
  107/20
  ((11/2 11/2 0) (11/2 6 0) (6 6 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  1811
  1240
  423
  148
  672
  188
  860
  1
  572093/967680
  963/155
  ((737/2 737/2 8) (737/2 369 8) (737/2 369 8)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  1774
  1216
  410
  148
  654
  179
  833
  1
  56825/96516
  3703/608
  ((359 719/2 17/2) (687/2 687/2 15/2) (685/2 343 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  1772
  1213
  410
  149
  654
  179
  833
  1
  284209/482580
  7378/1213
  ((683/2 683/2 7) (342 685/2 7) (687/2 687/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  1772
  1214
  410
  148
  655
  179
  834
  1
  285259/483840
  3701/607
  ((345 345 15/2) (345 345 15/2) (345 345 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((693/2 693/2 15/2) (346 346 15/2) (693/2 347 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  17
  5
  3
  9
  0
  1
  1
  1
  0
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1823
  1253
  421
  149
  674
  183
  857
  1
  146567/248850
  7667/1253
  ((363 363 15/2) (727/2 727/2 15/2) (725/2 725/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((341 341 7) (341 341 7) (683/2 683/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  1824
  1259
  413
  152
  692
  182
  874
  1
  145937/246330
  7637/1259
  ((693/2 693/2 7) (693/2 693/2 15/2) (693/2 347 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  1772
  1213
  410
  149
  654
  179
  833
  1
  142157/241290
  7382/1213
  ((699/2 699/2 7) (699/2 699/2 7) (699/2 350 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  1793
  1234
  410
  149
  668
  179
  847
  1
  290089/492660
  3748/617
  ((349 349 15/2) (697/2 697/2 15/2) (697/2 349 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((669/2 669/2 7) (336 336 7) (671/2 671/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  87
  34
  21
  32
  8
  2
  10
  1
  7/40
  94/17
  ((5 5 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) empty-board player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  1778
  1220
  410
  148
  654
  179
  833
  1
  70921/120645
  741/122
  ((689/2 689/2 15/2) (689/2 689/2 15/2) (345 345 8)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  48
  32
  12
  4
  25
  8
  33
  1
  37/46
  173/32
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-coord\")\n  (env ((□? (move-coord-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  49
  32
  12
  5
  25
  8
  33
  1
  37/46
  173/32
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  7
  2
  6
  2
  1
  3
  1
  1/3
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((342 342 7) (341 341 7) (342 342 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env ((□? (some-v-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  1776
  1218
  410
  148
  654
  179
  833
  1
  284069/482580
  2469/406
  ((689/2 689/2 15/2) (344 344 15/2) (344 689/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  1772
  1214
  410
  148
  654
  179
  833
  1
  56825/96516
  3695/607
  ((353 353 7) (707/2 707/2 15/2) (707/2 707/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1773
  1215
  410
  148
  654
  179
  833
  1
  284209/482580
  2467/405
  ((691/2 691/2 15/2) (346 346 15/2) (689/2 689/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> display <-) \"Cat's game.\\n\")\n  (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  1775
  1217
  410
  148
  654
  179
  833
  1
  281479/482580
  7404/1217
  ((347 347 7) (695/2 348 15/2) (691/2 691/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  1791
  1231
  410
  150
  664
  179
  843
  1
  142997/243180
  7560/1231
  ((350 701/2 15/2) (703/2 703/2 15/2) (705/2 705/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  160
  92
  41
  27
  21
  14
  35
  1
  67/324
  23/4
  ((27/2 27/2 0) (27/2 27/2 0) (29/2 29/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((689/2 345 15/2) (344 344 15/2) (344 344 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  1789
  1225
  414
  150
  663
  182
  845
  1
  290509/490140
  1486/245
  ((689/2 689/2 15/2) (345 345 15/2) (346 346 8)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  1772
  1214
  410
  148
  654
  179
  833
  1
  283369/482580
  7383/1214
  ((341 683/2 7) (341 341 7) (685/2 685/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> minimax <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  1800
  1236
  414
  150
  669
  182
  851
  1
  290719/493920
  1876/309
  ((697/2 697/2 15/2) (697/2 697/2 15/2) (351 351 8)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((345 345 15/2) (689/2 689/2 15/2) (344 344 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1774
  1216
  410
  148
  654
  179
  833
  1
  283999/482580
  1849/304
  ((342 685/2 7) (340 340 7) (679/2 679/2 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  1780
  1222
  410
  148
  662
  179
  841
  1
  142157/241290
  287/47
  ((697/2 697/2 15/2) (695/2 695/2 15/2) (697/2 697/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  1860
  1289
  421
  150
  694
  183
  877
  1
  73441/125370
  7975/1289
  ((389 389 17/2) (777/2 777/2 17/2) (777/2 389 8)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  1793
  1234
  410
  149
  668
  179
  847
  1
  290089/492660
  3748/617
  ((695/2 695/2 15/2) (695/2 695/2 15/2) (349 349 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  1831
  1271
  410
  150
  688
  179
  867
  1
  145127/247590
  7915/1271
  ((372 372 8) (745/2 745/2 15/2) (745/2 745/2 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  103
  43
  42
  18
  21
  22
  43
  1
  241/528
  222/43
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) bo that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  1860
  1289
  421
  150
  694
  183
  877
  1
  73441/125370
  7975/1289
  ((769/2 769/2 8) (385 385 8) (771/2 771/2 17/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  1776
  1218
  410
  148
  654
  179
  833
  1
  284069/482580
  7409/1218
  ((709/2 709/2 8) (709/2 709/2 15/2) (354 354 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  61
  44
  12
  5
  14
  7
  21
  1
  5/36
  131/22
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((343 343 7) (685/2 685/2 7) (685/2 343 7)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  1813
  1242
  423
  148
  673
  188
  861
  1
  571589/967680
  1295/207
  ((369 369 8) (370 370 8) (370 370 8)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  1770
  1212
  410
  148
  654
  179
  833
  1
  284629/482580
  1229/202
  ((687/2 344 15/2) (689/2 689/2 8) (344 344 15/2)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  26
  13
  5
  8
  4
  1
  5
  1
  4/45
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  503
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env ((□? (f x)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
