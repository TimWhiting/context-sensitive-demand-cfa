'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  lambda
  "\"'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-2 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env (() () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  47
  35
  12
  0
  35
  12
  47
  1
  1
  ((1 1 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  44
  32
  12
  0
  32
  12
  44
  1
  1
  ((3 3 2)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env (() () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  45
  33
  12
  0
  33
  12
  45
  1
  1
  ((1 1 0)))
'(clean-cache
  sat-small
  0
  33
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env (() () ())))\""
  32
  23
  9
  0
  23
  9
  32
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  44
  32
  12
  0
  32
  12
  44
  1
  1
  ((0 1 0)))
'(clean-cache
  sat-small
  0
  33
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env (())))\""
  26
  19
  7
  0
  19
  7
  26
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  46
  34
  12
  0
  34
  12
  46
  1
  1
  ((1 1 0)))
'(clean-cache
  sat-small
  0
  33
  lambda
  "\"'(eval (letrec* (... () (phi (-> (λ (x1 x2) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  lambda
  "\"'(eval\n  (letrec* (... try (sat-solve-2 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  44
  32
  12
  0
  32
  12
  44
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env (() () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  44
  32
  12
  0
  32
  12
  44
  1
  1
  ((0 1 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  49
  40
  9
  0
  40
  9
  49
  1
  1
  ((4 4 1)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  10
  5
  5
  0
  5
  5
  10
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  32
  24
  8
  0
  24
  8
  32
  1
  1
  ((1 1 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  76
  60
  16
  0
  60
  16
  76
  1
  1
  ((3 3 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4) (env (() () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  lambda
  "\"'(eval\n  (letrec* (... try (sat-solve-4 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-)) (env (() () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4) (env (() () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  ((3 3 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  10
  5
  5
  0
  5
  5
  10
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4) (env (() () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (λ (n4) (-> (app p n1 n2 n3 n4) <-)) (env (() () () () ())))\""
  55
  44
  11
  0
  44
  11
  55
  1
  1
  ((1 1 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4) (env (() () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  58
  lambda
  "\"'(eval\n  (letrec* (... () (phi (-> (λ (x1 x2 x3 x4) ...) <-)) try ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  lambda
  "\"'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-4 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  74
  58
  16
  0
  58
  16
  74
  1
  1
  ((3 3 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  28
  21
  7
  0
  21
  7
  28
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  75
  59
  16
  0
  59
  16
  75
  1
  1
  ((3 3 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x5) (-> (λ (x6) ...) <-)) (env (() () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x4) (-> (λ (x5) ...) <-)) (env (() () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (app (-> (app p n1) <-) n2) (env (() () () () () () () ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (app (app p n1) n2) (-> n3 <-)) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n7) ...) <-)) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (() () () () () () ())))\""
  22
  10
  12
  0
  10
  12
  22
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env (() () () () () () ())))\""
  24
  14
  10
  0
  14
  10
  24
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (() () () () () () ())))\""
  22
  10
  12
  0
  10
  12
  22
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  32
  21
  11
  0
  21
  11
  32
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  ((6 6 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env (() () () () () () () ())))\""
  13
  11
  2
  0
  11
  2
  13
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  118
  93
  25
  0
  93
  25
  118
  1
  1
  ((5 5 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  ((5 5 0)))
'(clean-cache
  sat-2
  0
  96
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  120
  95
  25
  0
  95
  25
  120
  1
  1
  ((6 6 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  ((6 6 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env (() () () () () () ())))\""
  22
  14
  8
  0
  14
  8
  22
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x2) (-> (λ (x3) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  30
  17
  13
  0
  17
  13
  30
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-)) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  20
  10
  10
  0
  10
  10
  20
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (app (-> (app (app p n1) n2) <-) n3) (env (() () () () () () () ())))\""
  9
  7
  2
  0
  7
  2
  9
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  ((6 6 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env (() () () () () () () ())))\""
  17
  15
  2
  0
  15
  2
  17
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (() () () () () () ())))\""
  22
  14
  8
  0
  14
  8
  22
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (() () () () () () ())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (() () () () () () ())))\""
  24
  14
  10
  0
  14
  10
  24
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env (() () () () () () () ())))\""
  87
  70
  17
  0
  70
  17
  87
  1
  1
  ((4 4 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x1) (-> (λ (x2) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (() () () () () () ())))\""
  30
  17
  13
  0
  17
  13
  30
  1
  1
  ((1 1 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  ((8 8 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  ((6 6 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  36
  24
  12
  0
  24
  12
  36
  1
  1
  ((1 1 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env (() () () () () () () ())))\""
  15
  13
  2
  0
  13
  2
  15
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env (() () () () () () () ())))\""
  11
  9
  2
  0
  9
  2
  11
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n6) ...) <-)) (env (() () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (letrec* (... () (phi (-> (λ (x1) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  26
  17
  9
  0
  17
  9
  26
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  ((5 5 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (() () () () () () ())))\""
  20
  10
  10
  0
  10
  10
  20
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1) (env (() () () () () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  119
  94
  25
  0
  94
  25
  119
  1
  1
  ((5 5 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (() () () () () () ())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  32
  19
  13
  0
  19
  13
  32
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (app p n1) (-> n2 <-)) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x6) (-> (λ (x7) ...) <-)) (env (() () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x3) (-> (λ (x4) ...) <-)) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (() () () () () () ())))\""
  22
  10
  12
  0
  10
  12
  22
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  ((5 6 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (() () () () () () ())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  20
  10
  10
  0
  10
  10
  20
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (() () () () () () ())))\""
  26
  14
  12
  0
  14
  12
  26
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n5) ...) <-)) (env (() () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  ((6 6 0)))
'(clean-cache
  sat-2
  0
  96
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (() () () () () () ())))\""
  69
  54
  15
  0
  54
  15
  69
  1
  1
  ((3 3 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval\n  (letrec* (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (() () () () () () ())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  ((5 5 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  ((5 5 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n6) ...) <-)) (env (() () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n7) ...) <-)) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  6
  4
  2
  0
  4
  2
  6
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n5) ...) <-)) (env (() () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval\n  (letrec* (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  63
  54
  9
  0
  54
  9
  63
  1
  1
  ((3 3 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval\n  (letrec*\n   (... println (phi (-> (λ (x1 x2 x3 x4 x5 x6 x7) ...) <-)) try ...)\n   ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  101
  82
  19
  0
  82
  19
  101
  1
  1
  ((5 5 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  32
  24
  8
  0
  24
  8
  32
  1
  1
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  ((5 5 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  ((5 5 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  102
  83
  19
  0
  83
  19
  102
  1
  1
  ((5 6 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  69
  58
  11
  0
  58
  11
  69
  1
  1
  ((4 4 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  ((5 5 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  26
  19
  7
  0
  19
  7
  26
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  104
  85
  19
  0
  85
  19
  104
  1
  1
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  string
  "\"'(eval (app println (-> \"trying\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  ((5 5 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  28
  21
  7
  0
  21
  7
  28
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  ((5 5 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  ((5 5 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  ((5 5 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (letrec* (... () (println (-> (λ (s) ...) <-)) phi ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... blank? (move-coord (-> (λ (move-coord-v) ...) <-)) move-horizon ...)\n   ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env (())))\""
  14
  8
  6
  0
  8
  6
  14
  1
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-coord\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) that-mark this-mark) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  ((0 0 0)))
