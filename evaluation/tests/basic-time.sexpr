'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env (() () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  44
  32
  12
  0
  32
  12
  44
  1
  1
  173/32
  ((1 1 0)))
'(clean-cache
  sat-small
  0
  10
  33
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-2 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  lambda
  "\"'(eval (letrec (... () (phi (-> (λ (x1 x2) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  app
  "\"'(eval (letrec (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  46
  34
  12
  0
  34
  12
  46
  1
  1
  185/34
  ((3 3 2)))
'(clean-cache
  sat-small
  0
  10
  33
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  44
  32
  12
  0
  32
  12
  44
  1
  1
  173/32
  ((1 1 0)))
'(clean-cache
  sat-small
  0
  10
  33
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  44
  32
  12
  0
  32
  12
  44
  1
  1
  173/32
  ((1 1 0)))
'(clean-cache
  sat-small
  0
  10
  33
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env (())))\""
  26
  19
  7
  0
  19
  7
  26
  1
  1
  101/19
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  45
  33
  12
  0
  33
  12
  45
  1
  1
  179/33
  ((1 1 0)))
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env (() () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-2 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env (() () ())))\""
  32
  23
  9
  0
  23
  9
  32
  1
  1
  122/23
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-2) ...) (env ()))\""
  47
  35
  12
  0
  35
  12
  47
  1
  1
  191/35
  ((1 1 0)))
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  44
  32
  12
  0
  32
  12
  44
  1
  1
  173/32
  ((0 1 0)))
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env (() () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4) (env (() () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-4) ...) (env ()))\""
  76
  60
  16
  0
  60
  16
  76
  1
  1
  67/12
  ((3 3 0)))
'(clean-cache
  sat-1
  0
  10
  58
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4) (env (() () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  32
  24
  8
  0
  24
  8
  32
  1
  1
  43/8
  ((1 1 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  10
  5
  5
  0
  5
  5
  10
  1
  1
  28/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (letrec (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  75
  59
  16
  0
  59
  16
  75
  1
  1
  329/59
  ((2 3 0)))
'(clean-cache
  sat-1
  0
  10
  58
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-4 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  10
  5
  5
  0
  5
  5
  10
  1
  1
  28/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4) (env (() () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4) (env (() () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  74
  58
  16
  0
  58
  16
  74
  1
  1
  323/58
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (n4) (-> (app p n1 n2 n3 n4) <-)) (env (() () () () ())))\""
  55
  44
  11
  0
  44
  11
  55
  1
  1
  60/11
  ((1 1 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  49
  40
  9
  0
  40
  9
  49
  1
  1
  219/40
  ((1 1 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  28
  21
  7
  0
  21
  7
  28
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-4 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  lambda
  "\"'(eval\n  (letrec (... () (phi (-> (λ (x1 x2 x3 x4) ...) <-)) try ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-)) (env (() () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env (() () () () () () () ())))\""
  11
  9
  2
  0
  9
  2
  11
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (() () () () () () ())))\""
  22
  10
  12
  0
  10
  12
  22
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (() () () () () () ())))\""
  22
  14
  8
  0
  14
  8
  22
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((7 7 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (letrec (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  119
  94
  25
  0
  94
  25
  119
  1
  1
  523/94
  ((7 7 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  lambda
  "\"'(eval (app try (-> (λ (n5) ...) <-)) (env (() () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  32
  21
  11
  0
  21
  11
  32
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (app (app p n1) n2) (-> n3 <-)) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env (() () () () () () ())))\""
  24
  14
  10
  0
  14
  10
  24
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  lambda
  "\"'(eval (λ (x2) (-> (λ (x3) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (() () () () () () ())))\""
  69
  54
  15
  0
  54
  15
  69
  1
  1
  299/54
  ((4 4 0)))
'(clean-cache
  sat-2
  0
  10
  96
  lambda
  "\"'(eval (letrec (... () (phi (-> (λ (x1) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  32
  19
  13
  0
  19
  13
  32
  1
  1
  101/19
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  20
  10
  10
  0
  10
  10
  20
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  36
  24
  12
  0
  24
  12
  36
  1
  1
  43/8
  ((1 1 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env (() () () () () () () ())))\""
  17
  15
  2
  0
  15
  2
  17
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((5 6 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (() () () () () () ())))\""
  30
  17
  13
  0
  17
  13
  30
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env (() () () () () () () ())))\""
  87
  70
  17
  0
  70
  17
  87
  1
  1
  38/7
  ((4 4 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (() () () () () () ())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (app (-> (app (app p n1) n2) <-) n3) (env (() () () () () () () ())))\""
  9
  7
  2
  0
  7
  2
  9
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  118
  93
  25
  0
  93
  25
  118
  1
  1
  517/93
  ((6 6 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (() () () () () () ())))\""
  26
  14
  12
  0
  14
  12
  26
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (app (-> (app p n1) <-) n2) (env (() () () () () () () ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  lambda
  "\"'(eval (λ (x6) (-> (λ (x7) ...) <-)) (env (() () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((6 6 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (() () () () () () ())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  lambda
  "\"'(eval (app try (-> (λ (n6) ...) <-)) (env (() () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  lambda
  "\"'(eval (λ (x3) (-> (λ (x4) ...) <-)) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((6 6 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((5 5 0)))
'(clean-cache
  sat-2
  0
  10
  96
  lambda
  "\"'(eval (λ (x1) (-> (λ (x2) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (app p n1) (-> n2 <-)) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  lambda
  "\"'(eval (app try (-> (λ (n7) ...) <-)) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-7) ...) (env ()))\""
  120
  95
  25
  0
  95
  25
  120
  1
  1
  529/95
  ((5 6 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((6 6 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (() () () () () () ())))\""
  20
  10
  10
  0
  10
  10
  20
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env (() () () () () () () ())))\""
  13
  11
  2
  0
  11
  2
  13
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (() () () () () () ())))\""
  22
  10
  12
  0
  10
  12
  22
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  lambda
  "\"'(eval (λ (x5) (-> (λ (x6) ...) <-)) (env (() () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  20
  10
  10
  0
  10
  10
  20
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  30
  17
  13
  0
  17
  13
  30
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((5 5 0)))
'(clean-cache
  sat-2
  0
  10
  96
  lambda
  "\"'(eval (λ (x4) (-> (λ (x5) ...) <-)) (env (() () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env (() () () () () () ())))\""
  22
  14
  8
  0
  14
  8
  22
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  26
  17
  9
  0
  17
  9
  26
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1) (env (() () () () () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-)) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (() () () () () () ())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((5 6 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env (() () () () () () () ())))\""
  15
  13
  2
  0
  13
  2
  15
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (() () () () () () ())))\""
  24
  14
  10
  0
  14
  10
  24
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (() () () () () () ())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (() () () () () () ())))\""
  22
  10
  12
  0
  10
  12
  22
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((6 6 0)))
'(clean-cache
  sat-2
  0
  10
  96
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  104
  85
  19
  0
  85
  19
  104
  1
  1
  479/85
  ((5 5 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((6 7 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((7 7 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((7 7 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  26
  19
  7
  0
  19
  7
  26
  1
  1
  101/19
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  102
  83
  19
  0
  83
  19
  102
  1
  1
  469/83
  ((8 8 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  28
  21
  7
  0
  21
  7
  28
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  lambda
  "\"'(eval (app try (-> (λ (n7) ...) <-)) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((7 7 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  letrec
  "\"'(eval ((top) letrec (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  let
  "\"'(eval (letrec (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((7 7 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((7 7 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  69
  58
  11
  0
  58
  11
  69
  1
  1
  160/29
  ((4 5 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  string
  "\"'(eval (app println (-> \"trying\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  lambda
  "\"'(eval (letrec (... () (println (-> (λ (s) ...) <-)) phi ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  lambda
  "\"'(eval (app try (-> (λ (n5) ...) <-)) (env (() () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  10
  100
  lambda
  "\"'(eval\n  (letrec (... println (phi (-> (λ (x1 x2 x3 x4 x5 x6 x7) ...) <-)) try ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  32
  24
  8
  0
  24
  8
  32
  1
  1
  43/8
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  63
  54
  9
  0
  54
  9
  63
  1
  1
  299/54
  ((4 4 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  101
  82
  19
  0
  82
  19
  101
  1
  1
  463/82
  ((7 7 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((7 7 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  lambda
  "\"'(eval (app try (-> (λ (n6) ...) <-)) (env (() () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((6 7 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  6
  4
  2
  0
  4
  2
  6
  1
  1
  9/2
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env (() ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  number
  "\"'(eval (app horizon (app lose) (-> 0 <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (... marked-with? (i⁻¹ (-> (λ (i) ...) <-)) ormap ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (... maximin (human-action (-> (λ (bo) ...) <-)) make-ai-action ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app minimax bo that-mark (-> this-mark <-)) (env (() ())))\""
  18
  9
  9
  0
  9
  9
  18
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env (() ())))\""
  51
  38
  13
  0
  38
  13
  51
  1
  1
  205/38
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-horizon\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (let (... () (co (-> (app action bo) <-)) () ...) ...) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  30
  19
  11
  0
  19
  11
  30
  1
  1
  102/19
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  11/2
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  45
  22
  23
  0
  22
  23
  45
  1
  1
  113/22
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env (() ())))\""
  37
  30
  7
  0
  30
  7
  37
  1
  1
  17/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env (() ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> this-play <-) (player mark action)) (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  104/17
  ((1 2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  number
  "\"'(eval (app + sc (-> 1 <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app lose) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> display <-) \"Cat's game.\\n\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  11/2
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (... horizon< (horizon-add1 (-> (λ (h) ...) <-)) foldl ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app maximin bo (-> that-mark <-) this-mark) (env (() ())))\""
  18
  9
  9
  0
  9
  9
  18
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co mark bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env (())))\""
  23
  19
  4
  0
  19
  4
  23
  1
  1
  102/19
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  25/4
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           blank?\n           (move-coord (-> (λ (move-coord-v) ...) <-))\n           move-horizon\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (... make-ai-action (draw-board! (-> (λ (bo) ...) <-)) play-turn ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env (())))\""
  66
  32
  34
  0
  32
  34
  66
  1
  1
  21/4
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) empty-board player-one player-two) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord rc rc) m) (env (() ())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  5
  ((0 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env (())))\""
  25
  16
  9
  0
  16
  9
  25
  1
  1
  5
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval (app ormap (-> (λ (c) ...) <-) is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval (app foldl (-> (λ (c x) ...) <-) x is) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           board-mark\n           (board-lookup (-> (λ (co bo) ...) <-))\n           marked-with?\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  number
  "\"'(eval (app horizon (app draw) (-> 0 <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env (())))\""
  7
  3
  4
  0
  3
  4
  7
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> minimax <-) bo that-mark this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (... one-player-game (zero-player-game (-> (λ () ...) <-)) is ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval (app andmap (-> (λ (c) ...) <-) is) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (let (_) (-> (match this-play ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           move-coord\n           (move-horizon (-> (λ (move-horizon-v) ...) <-))\n           mark⁻¹\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  8
  6
  2
  0
  6
  2
  8
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app play-turn bo that-play (-> this-play <-)) (env (())))\""
  23
  16
  7
  0
  16
  7
  23
  1
  1
  47/8
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  11
  8
  3
  0
  8
  3
  11
  1
  1
  41/8
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  30
  23
  7
  0
  23
  7
  30
  1
  1
  124/23
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app some-v (-> (app maximin bo that-mark this-mark) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app f (-> (app coord r c) <-) x) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> move-coord-v <-) (move move-coord-x _) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  letrec
  "\"'(eval (lettypes cons ... player (letrec (some-v ... is) ...)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           draw-board!\n           (play-turn (-> (λ (bo this-play that-play) ...) <-))\n           play-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  57
  28
  29
  0
  28
  29
  57
  1
  1
  145/28
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (... foldl (fold/coord (-> (λ (f x) ...) <-)) min-maybe-move ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval (app andmap (-> (λ (r) ...) <-) is) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  19
  10
  9
  0
  10
  9
  19
  1
  1
  27/5
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env (() ())))\""
  76
  54
  22
  0
  54
  22
  76
  1
  1
  151/27
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (c) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env (() () ())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  5
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-))) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app coord r c) x) (env (() () ())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval (λ (ma) (-> (λ (bo) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval (letrec (... () (loop (-> (λ () ...) <-)) () ...) ...) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  quoted
  "\"'(eval (app error (-> 'human-action <-) \"not implemented\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env (() ())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> marked? <-) (app b (app coord r c))) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (... full? (oc< (-> (λ (oc₀ oc₁) ...) <-)) horizon< ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env (() ())))\""
  11
  8
  3
  0
  8
  3
  11
  1
  1
  41/8
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (... board-lookup (marked-with? (-> (λ (b co m) ...) <-)) i⁻¹ ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env (())))\""
  7
  3
  4
  0
  3
  4
  7
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  45
  22
  23
  0
  22
  23
  45
  1
  1
  113/22
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (... some-v (marked? (-> (λ (a) ...) <-)) blank? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  number
  "\"'(eval (app horizon (app win) (-> 0 <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  let
  "\"'(eval (λ () (-> (let (co) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (-> (app X) <-) (app make-ai-action (app X))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (... andmap (wins? (-> (λ (b m) ...) <-)) full? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo that-mark this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           min-maybe-move\n           (max-maybe-move (-> (λ (mmo mo₁) ...) <-))\n           minimax\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval (letrec (... wins? (full? (-> (λ (b) ...) <-)) oc< ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  11
  8
  3
  0
  8
  3
  11
  1
  1
  41/8
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (let (_) (-> (app display \"Cat's game.\\n\") <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  14/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app minimax bo that-mark this-mark)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma))) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           fold/coord\n           (min-maybe-move (-> (λ (mmo mo₁) ...) <-))\n           max-maybe-move\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           play-game\n           (two-player-game (-> (λ () ...) <-))\n           one-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  30
  19
  11
  0
  19
  11
  30
  1
  1
  102/19
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env (())))\""
  37
  30
  7
  0
  30
  7
  37
  1
  1
  17/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-coord\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app marked-with? b (-> (app coord rc rc) <-) m) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env (())))\""
  15
  7
  8
  0
  7
  8
  15
  1
  1
  40/7
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           minimax\n           (maximin (-> (λ (bo this-mark that-mark) ...) <-))\n           human-action\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  31
  23
  8
  0
  23
  8
  31
  1
  1
  122/23
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (... horizon-add1 (foldl (-> (λ (f acc l) ...) <-)) fold/coord ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app play-turn bo (-> that-play <-) this-play) (env (())))\""
  23
  16
  7
  0
  16
  7
  23
  1
  1
  47/8
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-mark co mark (-> bo <-)) (env (())))\""
  11
  8
  3
  0
  8
  3
  11
  1
  1
  41/8
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app play-turn (-> empty-board <-) player-one player-two) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  30
  23
  7
  0
  23
  7
  30
  1
  1
  124/23
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (c) (-> (app marked? (app b (app coord r c))) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (λ (bo) (-> (app error 'human-action \"not implemented\") <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval (app andmap (-> (λ (rc) ...) <-) is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval (app fold/coord (-> (λ (co mm) ...) <-) (app none)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (move-coord-v) (-> (match move-coord-v ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  string
  "\"'(eval (app error (-> \"invalid match for some-v\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  number
  "\"'(eval (app horizon (app draw) (-> 0 <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo that-mark this-mark)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  let
  "\"'(eval (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env (())))\""
  41
  28
  13
  0
  28
  13
  41
  1
  1
  151/28
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app equal? co₀ co) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  19
  10
  9
  0
  10
  9
  19
  1
  1
  27/5
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-mark co (-> mark <-) bo) (env (())))\""
  37
  30
  7
  0
  30
  7
  37
  1
  1
  17/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (... move-horizon (mark⁻¹ (-> (λ (ma) ...) <-)) empty-board ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app minimax bo (-> that-mark <-) this-mark) (env (() ())))\""
  29
  18
  11
  0
  18
  11
  29
  1
  1
  16/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env (())))\""
  19
  13
  6
  0
  13
  6
  19
  1
  1
  68/13
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (... marked? (blank? (-> (λ (a) ...) <-)) move-coord ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  string
  "\"'(eval (app error (-> \"invalid match for move-coord\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> move-horizon-v <-) (move _ move-horizon-x) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval (app andmap (-> (λ (r) ...) <-) is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  let
  "\"'(eval (λ (bo this-play that-play) (-> (let (_) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env (() ())))\""
  38
  18
  20
  0
  18
  20
  38
  1
  1
  46/9
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app marked? (-> (app b (app coord r c)) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) bo that-play this-play) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  30
  23
  7
  0
  23
  7
  30
  1
  1
  124/23
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  string
  "\"'(eval (app error (-> \"invalid match for move-horizon\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  23
  19
  4
  0
  19
  4
  23
  1
  1
  102/19
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (... ormap (andmap (-> (λ (f xs) ...) <-)) wins? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) that-mark this-mark) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app maximin bo that-mark (-> this-mark <-)) (env (() ())))\""
  29
  18
  11
  0
  18
  11
  29
  1
  1
  16/3
  ((1 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env (())))\""
  14
  8
  6
  0
  8
  6
  14
  1
  1
  21/4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app play-turn empty-board (-> player-one <-) player-two) (env (())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  37/7
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  string
  "\"'(eval (app display (-> \"Cat's game.\\n\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           max-maybe-move\n           (minimax (-> (λ (bo this-mark that-mark) ...) <-))\n           maximin\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  let
  "\"'(eval (match (app full? bo) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  19/4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app wins? bo mark) <-) (#f) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           empty-board\n           (board-mark (-> (λ (co₀ ma bo) ...) <-))\n           board-lookup\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env (())))\""
  8
  5
  3
  0
  5
  3
  8
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval (app ormap (-> (λ (r) ...) <-) is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app play-turn empty-board player-one (-> player-two <-)) (env (())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  37/7
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app play-turn (-> bo <-) that-play this-play) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (... () (some-v (-> (λ (some-v-v) ...) <-)) marked? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  letrec
  "\"'(eval (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (... i⁻¹ (ormap (-> (λ (f xs) ...) <-)) andmap ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  76
  54
  22
  0
  54
  22
  76
  1
  1
  151/27
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env (() ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env (() ())))\""
  76
  54
  22
  0
  54
  22
  76
  1
  1
  151/27
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((0 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  76
  54
  22
  0
  54
  22
  76
  1
  1
  151/27
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env (())))\""
  14
  9
  5
  0
  9
  5
  14
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval (λ (co₀ ma bo) (-> (λ (co) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app horizon (-> (app lose) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app horizon (-> (app win) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval (app andmap (-> (λ (rc) ...) <-) is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app win) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (co) (-> (match (app equal? co₀ co) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval (app fold/coord (-> (λ (co mm) ...) <-) (app none)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  30
  23
  7
  0
  23
  7
  30
  1
  1
  124/23
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval (app andmap (-> (λ (c) ...) <-) is) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) mark bo) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  24
  16
  8
  0
  16
  8
  24
  1
  1
  85/16
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord rc rc) m) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  8
  6
  2
  0
  6
  2
  8
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (move-horizon-v) (-> (match move-horizon-v ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (... mark⁻¹ (empty-board (-> (λ (co) ...) <-)) board-mark ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env (() ())))\""
  22
  16
  6
  0
  16
  6
  22
  1
  1
  21/4
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (c x) (-> (app f (app coord r c) x) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  5
  ((0 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env (() ())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval (app foldl (-> (λ (r x) ...) <-) x is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (letrec (some-v ... is) (-> (app zero-player-game) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           human-action\n           (make-ai-action (-> (λ (ma) ...) <-))\n           draw-board!\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env (())))\""
  24
  16
  8
  0
  16
  8
  24
  1
  1
  85/16
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match (app b co) ((blank) (-> (app #f) <-)) (marked m*)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env (())))\""
  48
  35
  13
  0
  35
  13
  48
  1
  1
  188/35
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (r) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env (() ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (letrec (...\n           zero-player-game\n           (is\n            (->\n             (app\n              cons\n              (app Ze)\n              (app cons (app On) (app cons (app Tw) (app nil))))\n             <-))\n           ()\n           ...)\n    ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (letrec (loop) (-> (app loop) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app f (app coord r c) (-> x <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (... oc< (horizon< (-> (λ (h₀ h₁) ...) <-)) horizon-add1 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env (())))\""
  85
  58
  27
  0
  58
  27
  85
  1
  1
  163/29
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) (app make-ai-action (app X))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           two-player-game\n           (one-player-game (-> (λ () ...) <-))\n           zero-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           play-turn\n           (play-game (-> (λ (player-one player-two) ...) <-))\n           two-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app minimax (-> bo <-) that-mark this-mark) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord rc rc) (-> m <-)) (env (() ())))\""
  76
  54
  22
  0
  54
  22
  76
  1
  1
  151/27
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (app X) (-> (app make-ai-action (app X)) <-)) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (let (bo) (-> (match (app wins? bo mark) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app some-v (-> (app minimax bo that-mark this-mark) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match some-v-v ((some some-v-x) (-> some-v-x <-)) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  string
  "\"'(eval (app error 'human-action (-> \"not implemented\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  10
  33
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2)))))\""
  24
  13
  8
  3
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-small
  1
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  11
  4
  2
  5
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  10
  33
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  120
  86
  28
  6
  58
  19
  77
  1
  2501/2970
  237/43
  ((8 9 0)))
'(clean-cache
  sat-small
  1
  10
  33
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  15
  9
  3
  3
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  10
  33
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  108
  74
  28
  6
  50
  19
  69
  1
  493/558
  203/37
  ((8 8 0)))
'(clean-cache
  sat-small
  1
  10
  33
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  124
  89
  28
  7
  57
  19
  76
  1
  2321/2880
  500/89
  ((10 10 0)))
'(clean-cache
  sat-small
  1
  10
  33
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  10
  33
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env ((□? (x1 x2)))))\""
  30
  19
  8
  3
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-small
  1
  10
  33
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-2 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  10
  33
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  9
  3
  5
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  10
  33
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  10
  33
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  11
  5
  3
  3
  2
  1
  3
  1
  2/9
  26/5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  10
  33
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  10
  33
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  10
  33
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  91
  63
  21
  7
  40
  15
  55
  1
  916/1035
  335/63
  ((6 6 0)))
'(clean-cache
  sat-small
  1
  10
  33
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  10
  33
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  113
  78
  28
  7
  52
  19
  71
  1
  245/288
  433/78
  ((8 8 0)))
'(clean-cache
  sat-small
  1
  10
  33
  lambda
  "\"'(eval (letrec (... () (phi (-> (λ (x1 x2) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  10
  33
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env ((□? (x1 x2)))))\""
  71
  47
  19
  5
  30
  13
  43
  1
  131/171
  249/47
  ((5 5 0)))
'(clean-cache
  sat-small
  1
  10
  33
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env ((□? (x1 x2)))))\""
  26
  13
  8
  5
  9
  5
  14
  1
  17/20
  68/13
  ((1 1 0)))
'(clean-cache
  sat-small
  1
  10
  33
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-2) ...) (env ()))\""
  120
  86
  28
  6
  60
  19
  79
  1
  2771/3150
  475/86
  ((9 10 0)))
'(clean-cache
  sat-small
  1
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  10
  33
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  10
  33
  app
  "\"'(eval (letrec (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  119
  85
  28
  6
  59
  19
  78
  1
  2681/3060
  469/85
  ((8 8 0)))
'(clean-cache
  sat-small
  1
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  11
  5
  3
  3
  2
  1
  3
  1
  2/9
  26/5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  10
  33
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-2 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  10
  33
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  113
  78
  28
  7
  52
  19
  71
  1
  245/288
  433/78
  ((7 8 0)))
'(clean-cache
  sat-1
  1
  10
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  71
  43
  19
  9
  17
  6
  23
  1
  11/17
  227/43
  ((5 6 0)))
'(clean-cache
  sat-1
  1
  10
  58
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  36
  19
  8
  9
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  10
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  85
  51
  19
  15
  21
  6
  27
  1
  13/21
  271/51
  ((6 6 0)))
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  10
  58
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-4 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  9
  5
  14
  1
  17/20
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  10
  58
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-4 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  34
  19
  8
  7
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  9
  3
  5
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  26
  13
  8
  5
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  28
  13
  8
  7
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  10
  58
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  36
  19
  8
  9
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  10
  58
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  34
  19
  8
  7
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  10
  58
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  19
  9
  5
  5
  4
  1
  5
  1
  4/25
  16/3
  ((0 1 0)))
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  28
  13
  8
  7
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  15
  4
  2
  9
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval (letrec (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  19
  9
  3
  7
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  58
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-4) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  23
  9
  3
  11
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  lambda
  "\"'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  19
  9
  5
  5
  4
  1
  5
  1
  4/25
  16/3
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  10
  58
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  10
  58
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  21
  9
  3
  9
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  10
  58
  lambda
  "\"'(eval\n  (letrec (... () (phi (-> (λ (x1 x2 x3 x4) ...) <-)) try ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((2 2 0)))
'(clean-cache
  sat-2
  1
  10
  96
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  78
  25
  13
  40
  9
  5
  14
  1
  9/14
  134/25
  ((4 4 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((2 2 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  26
  9
  3
  14
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  9
  3
  8
  5
  2
  7
  1
  5/7
  46/9
  ((0 1 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  96
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-7) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  96
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x3 x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  96
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  111
  37
  20
  54
  9
  6
  15
  1
  9/14
  202/37
  ((9 9 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  53
  13
  8
  32
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  10
  96
  lambda
  "\"'(eval\n  (λ (x4) (-> (λ (x5) ...) <-))\n  (env ((□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  lambda
  "\"'(eval (λ (x1) (-> (λ (x2) ...) <-)) (env ((□? (x1)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  16
  2
  15
  6
  2
  8
  1
  6/11
  5
  ((2 2 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  68
  15
  13
  40
  7
  5
  12
  1
  7/10
  16/3
  ((3 3 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x4) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval (letrec (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  93
  19
  20
  54
  7
  6
  13
  1
  7/10
  104/19
  ((5 6 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  96
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  22
  9
  3
  10
  5
  2
  7
  1
  5/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  10
  96
  lambda
  "\"'(eval (λ (x2) (-> (λ (x3) ...) <-)) (env ((□? (x2)) (□? (x1)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  68
  15
  13
  40
  7
  5
  12
  1
  7/10
  16/3
  ((3 3 0)))
'(clean-cache
  sat-2
  1
  10
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n5) ...) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  1
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x4 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  lambda
  "\"'(eval (letrec (... () (phi (-> (λ (x1) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  30
  13
  2
  15
  5
  2
  7
  1
  5/9
  5
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  10
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n6) ...) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  1
  0
  6
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  lambda
  "\"'(eval\n  (λ (x6) (-> (λ (x7) ...) <-))\n  (env ((□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  7
  1
  0
  6
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  28
  9
  3
  16
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  32
  9
  3
  20
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  96
  lambda
  "\"'(eval (λ (x3) (-> (λ (x4) ...) <-)) (env ((□? (x3)) (□? (x2)) (□? (x1)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  111
  37
  20
  54
  9
  6
  15
  1
  9/14
  202/37
  ((10 10 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  36
  19
  2
  15
  7
  2
  9
  1
  7/13
  5
  ((2 2 0)))
'(clean-cache
  sat-2
  1
  10
  96
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  78
  25
  13
  40
  9
  5
  14
  1
  9/14
  134/25
  ((4 4 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  24
  9
  3
  12
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  53
  13
  8
  32
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  30
  9
  3
  18
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  96
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  39
  22
  2
  15
  8
  2
  10
  1
  8/15
  5
  ((3 3 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  96
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  53
  13
  8
  32
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  96
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  96
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  24
  7
  2
  15
  3
  2
  5
  1
  3/5
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  27
  10
  2
  15
  4
  2
  6
  1
  4/7
  5
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  68
  15
  13
  40
  7
  5
  12
  1
  7/10
  16/3
  ((3 3 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  93
  19
  20
  54
  7
  6
  13
  1
  7/10
  104/19
  ((5 6 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  10
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n7) ...) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  68
  15
  13
  40
  7
  5
  12
  1
  7/10
  16/3
  ((3 3 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  lambda
  "\"'(eval\n  (λ (x5) (-> (λ (x6) ...) <-))\n  (env ((□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  6
  1
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  93
  19
  20
  54
  7
  6
  13
  1
  7/10
  104/19
  ((6 6 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  9
  3
  8
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  10
  100
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  7
  6
  0
  1
  4
  0
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  19
  8
  18
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  112
  43
  19
  50
  20
  9
  29
  1
  38/51
  227/43
  ((9 9 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  9
  5
  14
  1
  17/20
  68/13
  ((1 2 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 9 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  9
  5
  14
  1
  17/20
  68/13
  ((1 2 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  100
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  19
  8
  14
  12
  4
  16
  1
  3/4
  100/19
  ((2 2 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n7) ...) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  22
  9
  3
  10
  5
  2
  7
  1
  5/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  10
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n5) ...) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  1
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  lambda
  "\"'(eval (letrec (... () (println (-> (λ (s) ...) <-)) phi ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((1 2 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env ((□? (f)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  9
  5
  14
  1
  17/20
  68/13
  ((2 3 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  32
  9
  3
  20
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  string
  "\"'(eval (app println (-> \"trying\" <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n6) ...) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  1
  0
  6
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((2 3 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  30
  9
  3
  18
  5
  2
  7
  1
  5/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((1 2 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  98
  43
  19
  36
  17
  6
  23
  1
  11/17
  227/43
  ((9 10 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  35
  13
  8
  14
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  10
  100
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((2 2 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  10
  100
  letrec
  "\"'(eval ((top) letrec (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  28
  9
  3
  16
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  11
  7
  2
  2
  3
  1
  4
  1
  3/8
  33/7
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  19
  8
  16
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  10
  100
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  26
  9
  3
  14
  5
  2
  7
  1
  5/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  19
  8
  18
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  7
  3
  2
  2
  1
  1
  2
  1
  1/4
  4
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  19
  8
  16
  12
  4
  16
  1
  3/4
  100/19
  ((2 2 0)))
'(clean-cache
  sat-3
  1
  10
  100
  let
  "\"'(eval (letrec (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  lambda
  "\"'(eval\n  (letrec (... println (phi (-> (λ (x1 x2 x3 x4 x5 x6 x7) ...) <-)) try ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  35
  13
  8
  14
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  35
  13
  8
  14
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  112
  51
  19
  42
  21
  6
  27
  1
  13/21
  271/51
  ((9 9 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           fold/coord\n           (min-maybe-move (-> (λ (mmo mo₁) ...) <-))\n           max-maybe-move\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (... marked? (blank? (-> (λ (a) ...) <-)) move-coord ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  26
  16
  5
  5
  9
  3
  12
  1
  5/8
  81/16
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval (app foldl (-> (λ (c x) ...) <-) x is) (env ((□? (r x)) (□? (f x)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env ((□? (co)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> display <-) \"Cat's game.\\n\")\n  (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  letrec
  "\"'(eval (lettypes cons ... player (letrec (some-v ... is) ...)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  quoted
  "\"'(eval (app error (-> 'human-action <-) \"not implemented\") (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) empty-board player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (a)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  48
  32
  12
  4
  25
  8
  33
  1
  37/46
  173/32
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app lose) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (... some-v (marked? (-> (λ (a) ...) <-)) blank? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  26
  16
  5
  5
  9
  3
  12
  1
  5/8
  81/16
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((5 6 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> empty-board <-) player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  47
  18
  15
  14
  0
  3
  3
  1
  0
  11/2
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  23
  16
  5
  2
  11
  3
  14
  1
  17/24
  81/16
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  51
  30
  15
  6
  22
  8
  30
  1
  39/64
  79/15
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval (letrec (... wins? (full? (-> (λ (b) ...) <-)) oc< ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  27
  18
  7
  2
  14
  4
  18
  1
  19/24
  49/9
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  number
  "\"'(eval\n  (app horizon (app win) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  51
  30
  15
  6
  22
  8
  30
  1
  39/64
  79/15
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  28
  18
  7
  3
  14
  4
  18
  1
  19/24
  49/9
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app minimax bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  43
  26
  12
  5
  10
  7
  17
  1
  17/96
  79/13
  ((4 5 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval (app foldl (-> (λ (r x) ...) <-) x is) (env ((□? (f x)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           board-mark\n           (board-lookup (-> (λ (co bo) ...) <-))\n           marked-with?\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env ((□? (f acc l)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  27
  18
  7
  2
  14
  4
  18
  1
  19/24
  49/9
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  7
  2
  5
  2
  1
  3
  1
  1/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((5 6 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (... () (loop (-> (λ () ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval (app andmap (-> (λ (r) ...) <-) is) (env ((□? (b)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  35
  17
  4
  14
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app X) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (... foldl (fold/coord (-> (λ (f x) ...) <-)) min-maybe-move ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  17
  5
  3
  9
  0
  1
  1
  1
  0
  26/5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval (app ormap (-> (λ (r) ...) <-) is) (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (... one-player-game (zero-player-game (-> (λ () ...) <-)) is ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (a)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (... horizon< (horizon-add1 (-> (λ (h) ...) <-)) foldl ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  number
  "\"'(eval\n  (app horizon (app lose) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval (app andmap (-> (λ (r) ...) <-) is) (env ((□? (c)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  67
  28
  28
  11
  12
  14
  26
  1
  59/144
  36/7
  ((7 7 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           max-maybe-move\n           (minimax (-> (λ (bo this-mark that-mark) ...) <-))\n           maximin\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  18
  10
  4
  4
  3
  1
  4
  1
  3/28
  26/5
  ((2 4 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  3
  0
  3
  1
  3/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           min-maybe-move\n           (max-maybe-move (-> (λ (mmo mo₁) ...) <-))\n           minimax\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  43
  22
  15
  6
  14
  8
  22
  1
  7/32
  65/11
  ((7 9 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (... make-ai-action (draw-board! (-> (λ (bo) ...) <-)) play-turn ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  13
  7
  3
  3
  2
  1
  3
  1
  2/15
  5
  ((1 3 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  51
  33
  13
  5
  25
  8
  33
  1
  37/46
  178/33
  ((6 8 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  51/10
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (a)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  6
  2
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) bo that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  35
  17
  4
  14
  4
  1
  5
  1
  1/6
  87/17
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  6
  2
  4
  1
  0
  1
  1
  1/5
  5
  ((0 1 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  3
  0
  3
  1
  3/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  77
  46
  23
  8
  34
  13
  47
  1
  11/16
  247/46
  ((8 10 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  15
  6
  7
  2
  3
  4
  7
  1
  1/4
  16/3
  ((2 4 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  6
  2
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  number
  "\"'(eval\n  (app horizon (app draw) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (... mark⁻¹ (empty-board (-> (λ (co) ...) <-)) board-mark ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           play-turn\n           (play-game (-> (λ (player-one player-two) ...) <-))\n           two-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (... marked-with? (i⁻¹ (-> (λ (i) ...) <-)) ormap ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  49
  32
  12
  5
  25
  8
  33
  1
  37/46
  173/32
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (app fold/coord (-> (λ (co mm) ...) <-) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env ((□? (r x)) (□? (f x)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (c)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  66
  32
  20
  14
  7
  4
  11
  1
  7/19
  87/16
  ((7 7 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval (app andmap (-> (λ (rc) ...) <-) is) (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           empty-board\n           (board-mark (-> (λ (co₀ ma bo) ...) <-))\n           board-lookup\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  31
  17
  4
  10
  4
  1
  5
  1
  1/6
  87/17
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  26
  13
  5
  8
  4
  1
  5
  1
  4/45
  68/13
  ((1 2 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> minimax <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval (app andmap (-> (λ (rc) ...) <-) is) (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  string
  "\"'(eval\n  (app error (-> \"invalid match for move-coord\" <-))\n  (env ((□? (move-coord-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           move-coord\n           (move-horizon (-> (λ (move-horizon-v) ...) <-))\n           mark⁻¹\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (b co m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (... horizon-add1 (foldl (-> (λ (f acc l) ...) <-)) fold/coord ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval (app andmap (-> (λ (c) ...) <-) is) (env ((□? (r)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (... ormap (andmap (-> (λ (f xs) ...) <-)) wins? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  15
  14
  0
  3
  3
  1
  0
  27/5
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (app fold/coord (-> (λ (co mm) ...) <-) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  38
  28
  7
  3
  23
  4
  27
  1
  65/76
  151/28
  ((5 7 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  string
  "\"'(eval\n  (app error (-> \"invalid match for move-horizon\" <-))\n  (env ((□? (move-horizon-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  87
  57
  23
  7
  42
  13
  55
  1
  111/152
  102/19
  ((8 8 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  90
  35
  38
  17
  13
  18
  31
  1
  59/176
  26/5
  ((9 9 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  14/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  7
  2
  5
  2
  1
  3
  1
  1/3
  5
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  string
  "\"'(eval (app error 'human-action (-> \"not implemented\" <-)) (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (... () (some-v (-> (λ (some-v-v) ...) <-)) marked? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (... board-lookup (marked-with? (-> (λ (b co m) ...) <-)) i⁻¹ ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  3
  0
  3
  1
  3/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  23
  16
  5
  2
  11
  3
  14
  1
  17/24
  81/16
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  41
  25
  9
  7
  7
  2
  9
  1
  7/16
  132/25
  ((3 4 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  number
  "\"'(eval (app + sc (-> 1 <-)) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (a)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval (λ (co₀ ma bo) (-> (λ (co) ...) <-)) (env ((□? (co₀ ma bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  19
  10
  7
  2
  6
  4
  10
  1
  3/8
  27/5
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env ((□? (some-v-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  46
  29
  12
  5
  12
  7
  19
  1
  7/34
  185/29
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           draw-board!\n           (play-turn (-> (λ (bo this-play that-play) ...) <-))\n           play-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-horizon\")\n  (env ((□? (move-horizon-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  16
  6
  7
  3
  3
  4
  7
  1
  1/4
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (b)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  64
  30
  20
  14
  7
  4
  11
  1
  7/18
  27/5
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           blank?\n           (move-coord (-> (λ (move-coord-v) ...) <-))\n           move-horizon\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  90
  35
  38
  17
  13
  18
  31
  1
  59/176
  26/5
  ((9 9 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-coord\")\n  (env ((□? (move-coord-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((7 7 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  6
  2
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval (app andmap (-> (λ (c) ...) <-) is) (env ((□? (r)) (□? (b)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           play-game\n           (two-player-game (-> (λ () ...) <-))\n           one-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  28
  18
  7
  3
  14
  4
  18
  1
  19/24
  49/9
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  6
  2
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  47
  18
  15
  14
  0
  3
  3
  1
  0
  11/2
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env ((□? (f x)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  66
  46
  12
  8
  17
  7
  24
  1
  13/60
  277/46
  ((8 8 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval (app ormap (-> (λ (c) ...) <-) is) (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           minimax\n           (maximin (-> (λ (bo this-mark that-mark) ...) <-))\n           human-action\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  61
  44
  12
  5
  14
  7
  21
  1
  5/36
  131/22
  ((7 7 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app win) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env ((□? (b co m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (... move-horizon (mark⁻¹ (-> (λ (ma) ...) <-)) empty-board ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  31
  17
  4
  10
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  6
  2
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (... oc< (horizon< (-> (λ (h₀ h₁) ...) <-)) horizon-add1 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (letrec (some-v ... is) (-> (app zero-player-game) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (letrec (...\n           zero-player-game\n           (is\n            (->\n             (app\n              cons\n              (app Ze)\n              (app cons (app On) (app cons (app Tw) (app nil))))\n             <-))\n           ()\n           ...)\n    ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  49
  32
  12
  5
  25
  8
  33
  1
  37/46
  173/32
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  51/10
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (... andmap (wins? (-> (λ (b m) ...) <-)) full? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (... i⁻¹ (ormap (-> (λ (f xs) ...) <-)) andmap ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (... full? (oc< (-> (λ (oc₀ oc₁) ...) <-)) horizon< ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  35
  17
  4
  14
  4
  1
  5
  1
  1/6
  87/17
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  string
  "\"'(eval\n  (app display (-> \"Cat's game.\\n\" <-))\n  (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked? <-) (app b (app coord r c)))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           human-action\n           (make-ai-action (-> (λ (ma) ...) <-))\n           draw-board!\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  66
  32
  20
  14
  7
  4
  11
  1
  7/19
  87/16
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((7 8 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  string
  "\"'(eval (app error (-> \"invalid match for some-v\" <-)) (env ((□? (some-v-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  43
  26
  12
  5
  10
  7
  17
  1
  17/96
  79/13
  ((4 5 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> maximin <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  86
  34
  21
  31
  8
  2
  10
  1
  7/40
  94/17
  ((7 7 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  number
  "\"'(eval\n  (app horizon (app draw) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (... maximin (human-action (-> (λ (bo) ...) <-)) make-ai-action ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  15
  14
  0
  3
  3
  1
  0
  27/5
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma)))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  18
  10
  4
  4
  3
  1
  4
  1
  3/28
  26/5
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  29
  12
  9
  8
  1
  2
  3
  1
  1/16
  21/4
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval (λ (ma) (-> (λ (bo) ...) <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           two-player-game\n           (one-player-game (-> (λ () ...) <-))\n           zero-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((6 7 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  20
  10
  7
  3
  6
  4
  10
  1
  3/8
  27/5
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  5
  4
  0
  1
  0
  0
  0
  1
  0
  19/4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  37
  28
  7
  2
  23
  4
  27
  1
  65/76
  151/28
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  10
  569
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  39
  22
  9
  8
  6
  2
  8
  1
  3/13
  115/22
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  10
  569
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-small
  2
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  13
  5
  3
  5
  0
  1
  1
  1
  0
  26/5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  10
  33
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  10
  33
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env ((□? (x1 x2)))))\""
  38
  25
  8
  5
  11
  2
  13
  1
  13/28
  134/25
  ((2 2 0)))
'(clean-cache
  sat-small
  2
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  13
  5
  3
  5
  0
  1
  1
  1
  0
  26/5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  10
  33
  lambda
  "\"'(eval (letrec (... () (phi (-> (λ (x1 x2) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  33
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-small
  2
  10
  33
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  10
  33
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  11
  4
  2
  5
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  10
  33
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-2 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  33
  app
  "\"'(eval (letrec (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-small
  2
  10
  33
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  33
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-2) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-small
  2
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  10
  33
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  18
  9
  3
  6
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  10
  33
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-2 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  10
  33
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  10
  33
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2)))))\""
  28
  15
  8
  5
  5
  2
  7
  1
  7/20
  16/3
  ((1 1 0)))
'(clean-cache
  sat-small
  2
  10
  33
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env ((□? (x1 x2)))))\""
  27
  13
  8
  6
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-small
  2
  10
  33
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env ((□? (x1 x2)))))\""
  97
  67
  23
  7
  40
  15
  55
  1
  122/171
  357/67
  ((8 9 0)))
'(clean-cache
  sat-small
  2
  33
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-small
  2
  33
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-small
  2
  10
  33
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  33
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-small
  2
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  10
  33
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  16
  9
  3
  4
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  10
  33
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  117
  83
  25
  9
  50
  17
  67
  1
  781/1035
  443/83
  ((9 9 0)))
'(clean-cache
  sat-small
  2
  10
  33
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  33
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  58
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  10
  58
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  38
  19
  8
  11
  5
  2
  7
  1
  5/14
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  58
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-4) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  15
  4
  2
  9
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  10
  58
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  58
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  18
  9
  3
  6
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  10
  58
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  36
  19
  8
  9
  5
  2
  7
  1
  5/14
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  58
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  58
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  10
  58
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  58
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  30
  15
  8
  7
  5
  2
  7
  1
  7/20
  16/3
  ((2 2 0)))
'(clean-cache
  sat-1
  2
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  58
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  33
  13
  8
  12
  8
  5
  13
  1
  4/5
  68/13
  ((2 2 0)))
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  24
  9
  3
  12
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  58
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  58
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  10
  58
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  10
  58
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  10
  58
  lambda
  "\"'(eval\n  (letrec (... () (phi (-> (λ (x1 x2 x3 x4) ...) <-)) try ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  10
  58
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-4 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  10
  58
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  10
  58
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-4 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  58
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  10
  58
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  20
  9
  3
  8
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  23
  9
  5
  9
  0
  1
  1
  1
  0
  16/3
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  10
  58
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  36
  19
  8
  9
  5
  2
  7
  1
  5/14
  100/19
  ((2 2 0)))
'(clean-cache
  sat-1
  2
  10
  58
  lambda
  "\"'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  58
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  23
  9
  5
  9
  0
  1
  1
  1
  0
  16/3
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  10
  58
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  22
  9
  3
  10
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  10
  58
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  38
  19
  8
  11
  5
  2
  7
  1
  5/14
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  10
  58
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  58
  app
  "\"'(eval (letrec (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  96
  lambda
  "\"'(eval (λ (x3) (-> (λ (x4) ...) <-)) (env ((□? (x3)) (□? (x2)) (□? (x1)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  9
  3
  9
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  54
  13
  8
  33
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  10
  96
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  82
  25
  13
  44
  5
  2
  7
  1
  5/14
  134/25
  ((4 5 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x4) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  54
  13
  8
  33
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  38
  15
  8
  15
  0
  1
  1
  1
  0
  27/5
  ((2 2 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  96
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-7) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  9
  3
  21
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  13
  2
  18
  2
  2
  4
  1
  2/9
  5
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  10
  2
  17
  2
  2
  4
  1
  2/7
  5
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  10
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  96
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  45
  22
  2
  21
  2
  2
  4
  1
  2/15
  5
  ((3 3 0)))
'(clean-cache
  sat-2
  2
  10
  96
  lambda
  "\"'(eval (letrec (... () (phi (-> (λ (x1) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  82
  25
  13
  44
  5
  2
  7
  1
  5/14
  134/25
  ((5 5 0)))
'(clean-cache
  sat-2
  2
  10
  96
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  7
  2
  16
  2
  2
  4
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  72
  15
  13
  44
  3
  2
  5
  1
  3/10
  16/3
  ((4 4 0)))
'(clean-cache
  sat-2
  2
  10
  96
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  72
  15
  13
  44
  3
  2
  5
  1
  3/10
  16/3
  ((3 3 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n5) ...) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  1
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  72
  15
  13
  44
  3
  2
  5
  1
  3/10
  16/3
  ((3 3 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  23
  9
  3
  11
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  96
  lambda
  "\"'(eval (λ (x1) (-> (λ (x2) ...) <-)) (env ((□? (x1)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x4 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  31
  9
  3
  19
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  96
  lambda
  "\"'(eval\n  (λ (x5) (-> (λ (x6) ...) <-))\n  (env ((□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  6
  1
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n6) ...) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  1
  0
  6
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  101
  19
  20
  62
  3
  2
  5
  1
  3/10
  104/19
  ((7 7 0)))
'(clean-cache
  sat-2
  2
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  96
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval (letrec (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  38
  15
  8
  15
  0
  1
  1
  1
  0
  27/5
  ((2 2 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  lambda
  "\"'(eval\n  (λ (x6) (-> (λ (x7) ...) <-))\n  (env ((□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  7
  1
  0
  6
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x3 x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  9
  3
  17
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  101
  19
  20
  62
  3
  2
  5
  1
  3/10
  104/19
  ((6 7 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  27
  9
  3
  15
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n7) ...) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  54
  13
  8
  33
  8
  5
  13
  1
  4/5
  68/13
  ((2 2 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  72
  15
  13
  44
  3
  2
  5
  1
  3/10
  16/3
  ((3 3 0)))
'(clean-cache
  sat-2
  2
  10
  96
  lambda
  "\"'(eval\n  (λ (x4) (-> (λ (x5) ...) <-))\n  (env ((□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  9
  3
  13
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  101
  19
  20
  62
  3
  2
  5
  1
  3/10
  104/19
  ((6 6 0)))
'(clean-cache
  sat-2
  2
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  41
  19
  2
  20
  2
  2
  4
  1
  2/13
  5
  ((3 3 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  lambda
  "\"'(eval (λ (x2) (-> (λ (x3) ...) <-)) (env ((□? (x2)) (□? (x1)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  37
  16
  2
  19
  2
  2
  4
  1
  2/11
  5
  ((2 3 0)))
'(clean-cache
  sat-2
  2
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  100
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  5
  2
  7
  1
  5/14
  100/19
  ((2 2 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  23
  9
  3
  11
  1
  0
  1
  1
  1/7
  46/9
  ((1 2 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  9
  3
  17
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  10
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n5) ...) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  1
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  9
  3
  21
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env ((□? (f)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  100
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  42
  13
  8
  21
  8
  5
  13
  1
  4/5
  68/13
  ((3 7 0)))
'(clean-cache
  sat-3
  2
  100
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  3
  2
  5
  1
  3/10
  68/13
  ((4 5 0)))
'(clean-cache
  sat-3
  2
  10
  100
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  3
  2
  5
  1
  3/10
  68/13
  ((3 3 0)))
'(clean-cache
  sat-3
  2
  100
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  19
  8
  18
  5
  2
  7
  1
  5/14
  100/19
  ((3 4 0)))
'(clean-cache
  sat-3
  2
  10
  100
  string
  "\"'(eval (app println (-> \"trying\" <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  let
  "\"'(eval (letrec (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n7) ...) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  9
  3
  13
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  31
  9
  3
  19
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  3
  2
  5
  1
  3/10
  68/13
  ((2 3 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  8
  6
  0
  2
  1
  0
  1
  1
  1/6
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  100
  letrec
  "\"'(eval ((top) letrec (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  38
  15
  8
  15
  0
  1
  1
  1
  0
  27/5
  ((3 3 0)))
'(clean-cache
  sat-3
  2
  10
  100
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  12
  7
  2
  3
  0
  1
  1
  1
  0
  33/7
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  27
  9
  3
  15
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  42
  13
  8
  21
  8
  5
  13
  1
  4/5
  68/13
  ((2 2 0)))
'(clean-cache
  sat-3
  2
  10
  100
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  5
  2
  7
  1
  5/14
  100/19
  ((2 2 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  3
  2
  5
  1
  3/10
  68/13
  ((2 2 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  3
  2
  5
  1
  3/10
  68/13
  ((2 2 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  3
  2
  5
  1
  3/10
  68/13
  ((2 2 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  100
  lambda
  "\"'(eval (letrec (... () (println (-> (λ (s) ...) <-)) phi ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  38
  15
  8
  15
  0
  1
  1
  1
  0
  27/5
  ((3 3 0)))
'(clean-cache
  sat-3
  2
  10
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n6) ...) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  1
  0
  6
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  3
  2
  5
  1
  3/10
  68/13
  ((2 2 0)))
'(clean-cache
  sat-3
  2
  10
  100
  lambda
  "\"'(eval\n  (letrec (... println (phi (-> (λ (x1 x2 x3 x4 x5 x6 x7) ...) <-)) try ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  3
  2
  5
  1
  3/10
  68/13
  ((2 2 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  3
  2
  5
  1
  3/10
  68/13
  ((2 2 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  10
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  9
  3
  9
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  42
  13
  8
  21
  8
  5
  13
  1
  4/5
  68/13
  ((2 2 0)))
'(clean-cache
  sat-3
  2
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app X) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval (λ (co₀ ma bo) (-> (λ (co) ...) <-)) (env ((□? (co₀ ma bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (... marked-with? (i⁻¹ (-> (λ (i) ...) <-)) ormap ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (... andmap (wins? (-> (λ (b m) ...) <-)) full? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked? <-) (app b (app coord r c)))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  6
  2
  6
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  50
  15
  15
  20
  0
  3
  3
  1
  0
  27/5
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  67
  41
  17
  9
  25
  8
  33
  1
  361/483
  227/41
  ((7 7 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  37
  17
  4
  16
  1
  1
  2
  1
  1/12
  87/17
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (... move-horizon (mark⁻¹ (-> (λ (ma) ...) <-)) empty-board ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (... horizon< (horizon-add1 (-> (λ (h) ...) <-)) foldl ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  number
  "\"'(eval\n  (app horizon (app draw) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env ((□? (co)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  26/5
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  15
  7
  3
  5
  0
  1
  1
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (a)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  50
  15
  15
  20
  0
  3
  3
  1
  0
  27/5
  ((3 4 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  string
  "\"'(eval (app error (-> \"invalid match for some-v\" <-)) (env ((□? (some-v-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  37
  17
  4
  16
  1
  1
  2
  1
  1/12
  87/17
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  71
  30
  20
  21
  1
  4
  5
  1
  1/18
  27/5
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env ((□? (f acc l)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  73
  32
  20
  21
  1
  4
  5
  1
  1/19
  87/16
  ((7 8 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  number
  "\"'(eval (app + sc (-> 1 <-)) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  73
  32
  20
  21
  1
  4
  5
  1
  1/19
  87/16
  ((6 7 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (letrec (some-v ... is) (-> (app zero-player-game) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  31
  16
  10
  5
  6
  4
  10
  1
  3/14
  45/8
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  43
  26
  7
  10
  10
  3
  13
  1
  29/60
  11/2
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  24
  10
  4
  10
  0
  1
  1
  1
  0
  51/10
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (c)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  16
  7
  2
  7
  1
  1
  2
  1
  1/6
  5
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (... horizon-add1 (foldl (-> (λ (f acc l) ...) <-)) fold/coord ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  string
  "\"'(eval\n  (app display (-> \"Cat's game.\\n\" <-))\n  (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  number
  "\"'(eval\n  (app horizon (app win) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  6
  2
  6
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  41
  17
  4
  20
  1
  1
  2
  1
  1/12
  87/17
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval (λ (ma) (-> (λ (bo) ...) <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> minimax <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  53
  18
  15
  20
  0
  3
  3
  1
  0
  11/2
  ((5 6 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (... some-v (marked? (-> (λ (a) ...) <-)) blank? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval (app andmap (-> (λ (c) ...) <-) is) (env ((□? (r)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           minimax\n           (maximin (-> (λ (bo this-mark that-mark) ...) <-))\n           human-action\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  96
  34
  21
  41
  1
  2
  3
  1
  1/16
  94/17
  ((9 9 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval (app ormap (-> (λ (r) ...) <-) is) (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (... maximin (human-action (-> (λ (bo) ...) <-)) make-ai-action ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  38
  26
  7
  5
  12
  3
  15
  1
  8/15
  11/2
  ((5 6 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           empty-board\n           (board-mark (-> (λ (co₀ ma bo) ...) <-))\n           board-lookup\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  6
  2
  6
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           move-coord\n           (move-horizon (-> (λ (move-horizon-v) ...) <-))\n           mark⁻¹\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  40
  24
  10
  6
  14
  4
  18
  1
  31/42
  137/24
  ((9 10 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  52
  37
  10
  5
  23
  4
  27
  1
  107/133
  208/37
  ((8 8 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  6
  2
  6
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma)))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval (letrec (... wins? (full? (-> (λ (b) ...) <-)) oc< ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  6
  2
  6
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (... i⁻¹ (ormap (-> (λ (f xs) ...) <-)) andmap ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (letrec (...\n           zero-player-game\n           (is\n            (->\n             (app\n              cons\n              (app Ze)\n              (app cons (app On) (app cons (app Tw) (app nil))))\n             <-))\n           ()\n           ...)\n    ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval (app foldl (-> (λ (c x) ...) <-) x is) (env ((□? (r x)) (□? (f x)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           play-game\n           (two-player-game (-> (λ () ...) <-))\n           one-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  43
  26
  7
  10
  10
  3
  13
  1
  29/60
  11/2
  ((5 6 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  quoted
  "\"'(eval (app error (-> 'human-action <-) \"not implemented\") (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval (app andmap (-> (λ (c) ...) <-) is) (env ((□? (r)) (□? (b)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           play-turn\n           (play-game (-> (λ (player-one player-two) ...) <-))\n           two-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  24
  10
  4
  10
  0
  1
  1
  1
  0
  51/10
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  25
  9
  10
  6
  3
  4
  7
  1
  1/7
  50/9
  ((3 4 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app minimax bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           blank?\n           (move-coord (-> (λ (move-coord-v) ...) <-))\n           move-horizon\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval (app andmap (-> (λ (rc) ...) <-) is) (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  5
  4
  0
  1
  0
  0
  0
  1
  0
  19/4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  39
  24
  10
  5
  14
  4
  18
  1
  31/42
  137/24
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (... marked? (blank? (-> (λ (a) ...) <-)) move-coord ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (... foldl (fold/coord (-> (λ (f x) ...) <-)) min-maybe-move ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (... one-player-game (zero-player-game (-> (λ () ...) <-)) is ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> empty-board <-) player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) bo that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  string
  "\"'(eval (app error 'human-action (-> \"not implemented\" <-)) (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  38
  26
  7
  5
  12
  3
  15
  1
  8/15
  11/2
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval (app andmap (-> (λ (rc) ...) <-) is) (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (app fold/coord (-> (λ (co mm) ...) <-) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  65
  41
  17
  7
  25
  8
  33
  1
  361/483
  227/41
  ((7 7 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (... make-ai-action (draw-board! (-> (λ (bo) ...) <-)) play-turn ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-coord\")\n  (env ((□? (move-coord-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           max-maybe-move\n           (minimax (-> (λ (bo this-mark that-mark) ...) <-))\n           maximin\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval (app foldl (-> (λ (r x) ...) <-) x is) (env ((□? (f x)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (... mark⁻¹ (empty-board (-> (λ (co) ...) <-)) board-mark ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           two-player-game\n           (one-player-game (-> (λ () ...) <-))\n           zero-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  string
  "\"'(eval\n  (app error (-> \"invalid match for move-horizon\" <-))\n  (env ((□? (move-horizon-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  86
  31
  33
  22
  8
  12
  20
  1
  5/18
  159/31
  ((7 7 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  14/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval (app andmap (-> (λ (r) ...) <-) is) (env ((□? (b)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  letrec
  "\"'(eval (lettypes cons ... player (letrec (some-v ... is) ...)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval (app andmap (-> (λ (r) ...) <-) is) (env ((□? (c)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (... ormap (andmap (-> (λ (f xs) ...) <-)) wins? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  24
  9
  10
  5
  3
  4
  7
  1
  1/7
  50/9
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (... () (loop (-> (λ () ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           draw-board!\n           (play-turn (-> (λ (bo this-play that-play) ...) <-))\n           play-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (... full? (oc< (-> (λ (oc₀ oc₁) ...) <-)) horizon< ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  45
  25
  9
  11
  1
  2
  3
  1
  1/16
  132/25
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  53
  18
  15
  20
  0
  3
  3
  1
  0
  11/2
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  41
  17
  4
  20
  1
  1
  2
  1
  1/12
  87/17
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           fold/coord\n           (min-maybe-move (-> (λ (mmo mo₁) ...) <-))\n           max-maybe-move\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (b)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (a)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> maximin <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  19
  5
  3
  11
  0
  1
  1
  1
  0
  26/5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  26/5
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  number
  "\"'(eval\n  (app horizon (app lose) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> display <-) \"Cat's game.\\n\")\n  (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (... () (some-v (-> (λ (some-v-v) ...) <-)) marked? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-horizon\")\n  (env ((□? (move-horizon-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env ((□? (b co m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  number
  "\"'(eval\n  (app horizon (app draw) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app win) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env ((□? (some-v-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           board-mark\n           (board-lookup (-> (λ (co bo) ...) <-))\n           marked-with?\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           human-action\n           (make-ai-action (-> (λ (ma) ...) <-))\n           draw-board!\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  30
  13
  5
  12
  0
  1
  1
  1
  0
  68/13
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (b co m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  41
  17
  4
  20
  1
  1
  2
  1
  1/12
  87/17
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  53
  37
  10
  6
  23
  4
  27
  1
  107/133
  208/37
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  string
  "\"'(eval\n  (app error (-> \"invalid match for move-coord\" <-))\n  (env ((□? (move-coord-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  33
  12
  9
  12
  0
  2
  2
  1
  0
  21/4
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (a)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app lose) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env ((□? (f x)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (...\n           min-maybe-move\n           (max-maybe-move (-> (λ (mmo mo₁) ...) <-))\n           minimax\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  71
  30
  20
  21
  1
  4
  5
  1
  1/18
  27/5
  ((6 7 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (... board-lookup (marked-with? (-> (λ (b co m) ...) <-)) i⁻¹ ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (letrec (... oc< (horizon< (-> (λ (h₀ h₁) ...) <-)) horizon-add1 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval\n  (app fold/coord (-> (λ (co mm) ...) <-) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  39
  24
  10
  5
  14
  4
  18
  1
  31/42
  137/24
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  lambda
  "\"'(eval (app ormap (-> (λ (c) ...) <-) is) (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  43
  22
  9
  12
  0
  2
  2
  1
  0
  115/22
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  40
  24
  10
  6
  14
  4
  18
  1
  31/42
  137/24
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env ((□? (r x)) (□? (f x)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) empty-board player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  32
  16
  10
  6
  6
  4
  10
  1
  3/14
  45/8
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (a)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  6
  2
  6
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  16
  7
  2
  7
  1
  1
  2
  1
  1/6
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  74
  45
  20
  9
  27
  9
  36
  1
  52/69
  247/45
  ((8 8 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  10
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  10
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  67
  41
  17
  9
  25
  8
  33
  1
  361/483
  227/41
  ((7 8 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-small
  0
  100
  33
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  45
  33
  12
  0
  33
  12
  45
  1
  1
  179/33
  ((1 1 0)))
'(clean-cache
  sat-small
  0
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env (() () ())))\""
  32
  23
  9
  0
  23
  9
  32
  1
  1
  122/23
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  44
  32
  12
  0
  32
  12
  44
  1
  1
  173/32
  ((1 1 0)))
'(clean-cache
  sat-small
  0
  100
  33
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  44
  32
  12
  0
  32
  12
  44
  1
  1
  173/32
  ((1 1 0)))
'(clean-cache
  sat-small
  0
  100
  33
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-2) ...) (env ()))\""
  47
  35
  12
  0
  35
  12
  47
  1
  1
  191/35
  ((1 1 0)))
'(clean-cache
  sat-small
  0
  100
  33
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-2 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env (() () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-2 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  44
  32
  12
  0
  32
  12
  44
  1
  1
  173/32
  ((1 1 0)))
'(clean-cache
  sat-small
  0
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env (())))\""
  26
  19
  7
  0
  19
  7
  26
  1
  1
  101/19
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  app
  "\"'(eval (letrec (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  46
  34
  12
  0
  34
  12
  46
  1
  1
  185/34
  ((1 1 0)))
'(clean-cache
  sat-small
  0
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  lambda
  "\"'(eval (letrec (... () (phi (-> (λ (x1 x2) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  44
  32
  12
  0
  32
  12
  44
  1
  1
  173/32
  ((1 1 0)))
'(clean-cache
  sat-small
  0
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env (() () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  100
  33
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env (() () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((3 3 0)))
'(clean-cache
  sat-1
  0
  100
  58
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-4 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4) (env (() () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((3 3 0)))
'(clean-cache
  sat-1
  0
  100
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  28
  21
  7
  0
  21
  7
  28
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  10
  5
  5
  0
  5
  5
  10
  1
  1
  28/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  app
  "\"'(eval (λ (n4) (-> (app p n1 n2 n3 n4) <-)) (env (() () () () ())))\""
  55
  44
  11
  0
  44
  11
  55
  1
  1
  60/11
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  10
  5
  5
  0
  5
  5
  10
  1
  1
  28/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((3 3 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((3 3 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  74
  58
  16
  0
  58
  16
  74
  1
  1
  323/58
  ((3 3 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4) (env (() () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-4) ...) (env ()))\""
  76
  60
  16
  0
  60
  16
  76
  1
  1
  67/12
  ((3 3 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  49
  40
  9
  0
  40
  9
  49
  1
  1
  219/40
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  100
  58
  app
  "\"'(eval (letrec (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  75
  59
  16
  0
  59
  16
  75
  1
  1
  329/59
  ((3 3 0)))
'(clean-cache
  sat-1
  0
  100
  58
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((2 3 0)))
'(clean-cache
  sat-1
  0
  100
  58
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  32
  24
  8
  0
  24
  8
  32
  1
  1
  43/8
  ((1 1 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((2 3 0)))
'(clean-cache
  sat-1
  0
  100
  58
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4) (env (() () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-)) (env (() () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  lambda
  "\"'(eval\n  (letrec (... () (phi (-> (λ (x1 x2 x3 x4) ...) <-)) try ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4) (env (() () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  100
  58
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-4 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((7 7 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((7 7 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (() () () () () () ())))\""
  22
  14
  8
  0
  14
  8
  22
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  lambda
  "\"'(eval (λ (x4) (-> (λ (x5) ...) <-)) (env (() () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env (() () () () () () ())))\""
  24
  14
  10
  0
  14
  10
  24
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  20
  10
  10
  0
  10
  10
  20
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  32
  19
  13
  0
  19
  13
  32
  1
  1
  101/19
  ((1 1 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-)) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((7 7 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (() () () () () () ())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  118
  93
  25
  0
  93
  25
  118
  1
  1
  517/93
  ((7 7 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  lambda
  "\"'(eval (λ (x3) (-> (λ (x4) ...) <-)) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (() () () () () () ())))\""
  22
  10
  12
  0
  10
  12
  22
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  20
  10
  10
  0
  10
  10
  20
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env (() () () () () () () ())))\""
  15
  13
  2
  0
  13
  2
  15
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env (() () () () () () () ())))\""
  87
  70
  17
  0
  70
  17
  87
  1
  1
  38/7
  ((5 5 0)))
'(clean-cache
  sat-2
  0
  100
  96
  lambda
  "\"'(eval (λ (x5) (-> (λ (x6) ...) <-)) (env (() () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval (app (-> (app (app p n1) n2) <-) n3) (env (() () () () () () () ())))\""
  9
  7
  2
  0
  7
  2
  9
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  lambda
  "\"'(eval (λ (x6) (-> (λ (x7) ...) <-)) (env (() () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((7 7 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((7 7 0)))
'(clean-cache
  sat-2
  0
  100
  96
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval (letrec (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  119
  94
  25
  0
  94
  25
  119
  1
  1
  523/94
  ((7 8 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env (() () () () () () () ())))\""
  17
  15
  2
  0
  15
  2
  17
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (() () () () () () ())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((7 7 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env (() () () () () () ())))\""
  22
  14
  8
  0
  14
  8
  22
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (app (app p n1) n2) (-> n3 <-)) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-7) ...) (env ()))\""
  120
  95
  25
  0
  95
  25
  120
  1
  1
  529/95
  ((8 8 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (() () () () () () ())))\""
  24
  14
  10
  0
  14
  10
  24
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  36
  24
  12
  0
  24
  12
  36
  1
  1
  43/8
  ((1 1 0)))
'(clean-cache
  sat-2
  0
  100
  96
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (() () () () () () ())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (() () () () () () ())))\""
  30
  17
  13
  0
  17
  13
  30
  1
  1
  90/17
  ((1 1 0)))
'(clean-cache
  sat-2
  0
  100
  96
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (app p n1) (-> n2 <-)) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  32
  21
  11
  0
  21
  11
  32
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1) (env (() () () () () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  lambda
  "\"'(eval (app try (-> (λ (n7) ...) <-)) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((7 7 0)))
'(clean-cache
  sat-2
  0
  100
  96
  lambda
  "\"'(eval (λ (x2) (-> (λ (x3) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (() () () () () () ())))\""
  22
  10
  12
  0
  10
  12
  22
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  lambda
  "\"'(eval (letrec (... () (phi (-> (λ (x1) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env (() () () () () () () ())))\""
  13
  11
  2
  0
  11
  2
  13
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (() () () () () () ())))\""
  26
  14
  12
  0
  14
  12
  26
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  30
  17
  13
  0
  17
  13
  30
  1
  1
  90/17
  ((1 1 0)))
'(clean-cache
  sat-2
  0
  100
  96
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (() () () () () () ())))\""
  22
  10
  12
  0
  10
  12
  22
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env (() () () () () () () ())))\""
  11
  9
  2
  0
  9
  2
  11
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval (app (-> (app p n1) <-) n2) (env (() () () () () () () ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  lambda
  "\"'(eval (app try (-> (λ (n6) ...) <-)) (env (() () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  lambda
  "\"'(eval (λ (x1) (-> (λ (x2) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((7 7 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (() () () () () () ())))\""
  20
  10
  10
  0
  10
  10
  20
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((7 7 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  26
  17
  9
  0
  17
  9
  26
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (() () () () () () ())))\""
  69
  54
  15
  0
  54
  15
  69
  1
  1
  299/54
  ((4 4 0)))
'(clean-cache
  sat-2
  0
  100
  96
  lambda
  "\"'(eval (app try (-> (λ (n5) ...) <-)) (env (() () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  100
  96
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (() () () () () () ())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  102
  83
  19
  0
  83
  19
  102
  1
  1
  469/83
  ((7 7 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  6
  4
  2
  0
  4
  2
  6
  1
  1
  9/2
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  28
  21
  7
  0
  21
  7
  28
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  lambda
  "\"'(eval (app try (-> (λ (n5) ...) <-)) (env (() () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  lambda
  "\"'(eval (app try (-> (λ (n7) ...) <-)) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  lambda
  "\"'(eval\n  (letrec (... println (phi (-> (λ (x1 x2 x3 x4 x5 x6 x7) ...) <-)) try ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  101
  82
  19
  0
  82
  19
  101
  1
  1
  463/82
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((5 6 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  string
  "\"'(eval (app println (-> \"trying\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  63
  54
  9
  0
  54
  9
  63
  1
  1
  299/54
  ((3 3 0)))
'(clean-cache
  sat-3
  0
  100
  100
  letrec
  "\"'(eval ((top) letrec (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  32
  24
  8
  0
  24
  8
  32
  1
  1
  43/8
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  100
  100
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((5 6 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  69
  58
  11
  0
  58
  11
  69
  1
  1
  160/29
  ((4 4 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  104
  85
  19
  0
  85
  19
  104
  1
  1
  479/85
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  26
  19
  7
  0
  19
  7
  26
  1
  1
  101/19
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  lambda
  "\"'(eval (app try (-> (λ (n6) ...) <-)) (env (() () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  let
  "\"'(eval (letrec (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  lambda
  "\"'(eval (letrec (... () (println (-> (λ (s) ...) <-)) phi ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (... marked? (blank? (-> (λ (a) ...) <-)) move-coord ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((70 72 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 68 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           min-maybe-move\n           (max-maybe-move (-> (λ (mmo mo₁) ...) <-))\n           minimax\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env (())))\""
  14
  9
  5
  0
  9
  5
  14
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 67 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           fold/coord\n           (min-maybe-move (-> (λ (mmo mo₁) ...) <-))\n           max-maybe-move\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  542
  409
  133
  0
  409
  133
  542
  1
  1
  2273/409
  ((72 73 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((69 71 3)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((68 69 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (letrec (some-v ... is) (-> (app zero-player-game) <-)) (env ()))\""
  545
  412
  133
  0
  412
  133
  545
  1
  1
  2287/412
  ((73 75 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (... mark⁻¹ (empty-board (-> (λ (co) ...) <-)) board-mark ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval (letrec (... wins? (full? (-> (λ (b) ...) <-)) oc< ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 68 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  string
  "\"'(eval (app error 'human-action (-> \"not implemented\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 69 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  string
  "\"'(eval (app error (-> \"invalid match for move-horizon\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (λ (bo) (-> (app error 'human-action \"not implemented\") <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (())))\""
  537
  404
  133
  0
  404
  133
  537
  1
  1
  1127/202
  ((67 69 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> move-horizon-v <-) (move _ move-horizon-x) _) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 69 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  8
  6
  2
  0
  6
  2
  8
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((68 71 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 67 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval (app ormap (-> (λ (c) ...) <-) is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 67 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 68 3)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  30
  23
  7
  0
  23
  7
  30
  1
  1
  124/23
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 68 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env (())))\""
  19
  13
  6
  0
  13
  6
  19
  1
  1
  68/13
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  30
  19
  11
  0
  19
  11
  30
  1
  1
  102/19
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app maximin bo that-mark (-> this-mark <-)) (env (() ())))\""
  29
  18
  11
  0
  18
  11
  29
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (λ (c) (-> (app marked? (app b (app coord r c))) <-)) (env (() () ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((77 79 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((69 71 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (λ (c) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 68 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 66 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  string
  "\"'(eval (app error (-> \"invalid match for move-coord\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env (())))\""
  544
  409
  135
  0
  409
  135
  544
  1
  1
  2276/409
  ((64 66 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env (())))\""
  539
  404
  135
  0
  404
  135
  539
  1
  1
  2253/404
  ((66 67 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app board-mark co (-> mark <-) bo) (env (())))\""
  37
  30
  7
  0
  30
  7
  37
  1
  1
  17/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app f (-> (app coord r c) <-) x) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (... some-v (marked? (-> (λ (a) ...) <-)) blank? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  57
  28
  29
  0
  28
  29
  57
  1
  1
  145/28
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 66 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 69 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env (())))\""
  545
  409
  136
  0
  409
  136
  545
  1
  1
  2279/409
  ((69 71 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  let
  "\"'(eval (match (app full? bo) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  19/4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  string
  "\"'(eval (app error (-> \"invalid match for some-v\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-)) (env (())))\""
  537
  404
  133
  0
  404
  133
  537
  1
  1
  1127/202
  ((64 66 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  number
  "\"'(eval (app + sc (-> 1 <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((69 71 3)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  30
  19
  11
  0
  19
  11
  30
  1
  1
  102/19
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app f (app coord r c) (-> x <-)) (env (() () ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((64 66 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (())))\""
  538
  405
  133
  0
  405
  133
  538
  1
  1
  2258/405
  ((69 71 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((71 73 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  547
  414
  133
  0
  414
  133
  547
  1
  1
  255/46
  ((72 74 3)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo that-mark this-mark)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           move-coord\n           (move-horizon (-> (λ (move-horizon-v) ...) <-))\n           mark⁻¹\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env (() ())))\""
  51
  38
  13
  0
  38
  13
  51
  1
  1
  205/38
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord rc rc) m) (env (() ())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((64 65 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env (())))\""
  66
  32
  34
  0
  32
  34
  66
  1
  1
  21/4
  ((4 5 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env (())))\""
  537
  404
  133
  0
  404
  133
  537
  1
  1
  2253/404
  ((67 69 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env (())))\""
  543
  408
  135
  0
  408
  135
  543
  1
  1
  379/68
  ((64 67 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  number
  "\"'(eval (app horizon (app draw) (-> 0 <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((70 72 3)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           empty-board\n           (board-mark (-> (λ (co₀ ma bo) ...) <-))\n           board-lookup\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((71 73 3)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((70 71 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((68 69 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  25/4
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo that-mark this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  number
  "\"'(eval (app horizon (app draw) (-> 0 <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app play-turn bo (-> that-play <-) this-play) (env (())))\""
  23
  16
  7
  0
  16
  7
  23
  1
  1
  47/8
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env (())))\""
  541
  408
  133
  0
  408
  133
  541
  1
  1
  2269/408
  ((70 72 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2250/403
  ((69 70 3)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (... full? (oc< (-> (λ (oc₀ oc₁) ...) <-)) horizon< ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (match (-> (app wins? bo mark) <-) (#f) _) (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  2245/402
  ((67 68 3)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval (let (bo) (-> (match (app wins? bo mark) ...) <-)) (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  173/31
  ((66 67 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2250/403
  ((66 68 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval (app fold/coord (-> (λ (co mm) ...) <-) (app none)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval (λ (ma) (-> (λ (bo) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 68 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env (() ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((1 2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 68 3)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval (app ormap (-> (λ (r) ...) <-) is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (let (_) (-> (app display \"Cat's game.\\n\") <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  14/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((68 70 3)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env (())))\""
  540
  407
  133
  0
  407
  133
  540
  1
  1
  2270/407
  ((62 64 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           board-mark\n           (board-lookup (-> (λ (co bo) ...) <-))\n           marked-with?\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  2245/402
  ((69 71 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  number
  "\"'(eval (app horizon (app lose) (-> 0 <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord rc rc) m) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((68 70 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((82 93 3)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval (let (_) (-> (match this-play ...) <-)) (env (())))\""
  539
  406
  133
  0
  406
  133
  539
  1
  1
  323/58
  ((82 85 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 69 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  749/134
  ((73 76 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((70 72 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((68 69 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) that-mark this-mark) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app play-turn empty-board player-one (-> player-two <-)) (env (())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  37/7
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env (())))\""
  542
  406
  136
  0
  406
  136
  542
  1
  1
  1133/203
  ((66 67 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env (())))\""
  85
  58
  27
  0
  58
  27
  85
  1
  1
  163/29
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 67 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  2245/402
  ((60 62 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((60 61 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env (())))\""
  543
  407
  136
  0
  407
  136
  543
  1
  1
  2270/407
  ((62 64 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma))) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁)) (env (())))\""
  537
  404
  133
  0
  404
  133
  537
  1
  1
  1127/202
  ((63 64 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env (())))\""
  543
  410
  133
  0
  410
  133
  543
  1
  1
  1139/205
  ((67 69 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (match some-v-v ((some some-v-x) (-> some-v-x <-)) _) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((63 64 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  45
  22
  23
  0
  22
  23
  45
  1
  1
  113/22
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  string
  "\"'(eval (app display (-> \"Cat's game.\\n\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((62 64 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           human-action\n           (make-ai-action (-> (λ (ma) ...) <-))\n           draw-board!\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((64 66 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 66 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  542
  409
  133
  0
  409
  133
  542
  1
  1
  2273/409
  ((69 71 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 68 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env (())))\""
  14
  8
  6
  0
  8
  6
  14
  1
  1
  21/4
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (match (-> (app equal? co₀ co) <-) (#f) _) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((71 73 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  2245/402
  ((69 71 3)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           play-game\n           (two-player-game (-> (λ () ...) <-))\n           one-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((58 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env (())))\""
  538
  405
  133
  0
  405
  133
  538
  1
  1
  2257/405
  ((58 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           blank?\n           (move-coord (-> (λ (move-coord-v) ...) <-))\n           move-horizon\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval (app andmap (-> (λ (rc) ...) <-) is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval (app andmap (-> (λ (r) ...) <-) is) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app play-turn bo that-play (-> this-play <-)) (env (())))\""
  23
  16
  7
  0
  16
  7
  23
  1
  1
  47/8
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (... move-horizon (mark⁻¹ (-> (λ (ma) ...) <-)) empty-board ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((57 58 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((57 58 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           two-player-game\n           (one-player-game (-> (λ () ...) <-))\n           zero-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (... one-player-game (zero-player-game (-> (λ () ...) <-)) is ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env (())))\""
  543
  407
  136
  0
  407
  136
  543
  1
  1
  2270/407
  ((68 70 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((58 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (let (... () (co (-> (app action bo) <-)) () ...) ...) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((62 64 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  30
  23
  7
  0
  23
  7
  30
  1
  1
  124/23
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((58 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env (())))\""
  541
  408
  133
  0
  408
  133
  541
  1
  1
  2269/408
  ((65 67 3)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval (app andmap (-> (λ (c) ...) <-) is) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env (())))\""
  41
  28
  13
  0
  28
  13
  41
  1
  1
  151/28
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  537
  404
  133
  0
  404
  133
  537
  1
  1
  1127/202
  ((66 67 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((57 58 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((59 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval (app andmap (-> (λ (r) ...) <-) is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> this-play <-) (player mark action)) (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  104/17
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env (() ())))\""
  76
  54
  22
  0
  54
  22
  76
  1
  1
  151/27
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval (λ (move-horizon-v) (-> (match move-horizon-v ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 68 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  letrec
  "\"'(eval (lettypes cons ... player (letrec (some-v ... is) ...)) (env ()))\""
  546
  413
  133
  0
  413
  133
  546
  1
  1
  2291/413
  ((68 70 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-horizon\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((55 57 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((55 57 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env (())))\""
  545
  410
  135
  0
  410
  135
  545
  1
  1
  2283/410
  ((53 54 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2250/403
  ((55 57 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env (())))\""
  540
  407
  133
  0
  407
  133
  540
  1
  1
  2270/407
  ((56 57 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  8
  6
  2
  0
  6
  2
  8
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env (())))\""
  543
  408
  135
  0
  408
  135
  543
  1
  1
  379/68
  ((59 61 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (... maximin (human-action (-> (λ (bo) ...) <-)) make-ai-action ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env (())))\""
  37
  30
  7
  0
  30
  7
  37
  1
  1
  17/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (... () (some-v (-> (λ (some-v-v) ...) <-)) marked? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) (app make-ai-action (app X))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env (() ())))\""
  37
  30
  7
  0
  30
  7
  37
  1
  1
  17/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((61 62 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  546
  410
  136
  0
  410
  136
  546
  1
  1
  1142/205
  ((59 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env (())))\""
  539
  406
  133
  0
  406
  133
  539
  1
  1
  1133/203
  ((57 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env (())))\""
  25
  16
  9
  0
  16
  9
  25
  1
  1
  5
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  19
  10
  9
  0
  10
  9
  19
  1
  1
  27/5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((63 65 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((54 55 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env (())))\""
  538
  403
  135
  0
  403
  135
  538
  1
  1
  173/31
  ((54 56 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env (())))\""
  539
  406
  133
  0
  406
  133
  539
  1
  1
  2263/406
  ((60 62 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  letrec
  "\"'(eval (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((64 65 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((60 61 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env (())))\""
  543
  407
  136
  0
  407
  136
  543
  1
  1
  2270/407
  ((55 56 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((60 61 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  11/2
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2250/403
  ((63 65 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env (())))\""
  7
  3
  4
  0
  3
  4
  7
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((62 63 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((69 70 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app player (-> (app X) <-) (app make-ai-action (app X))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app play-turn empty-board (-> player-one <-) player-two) (env (())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  37/7
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> move-coord-v <-) (move move-coord-x _) _) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 68 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app lose) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           play-turn\n           (play-game (-> (λ (player-one player-two) ...) <-))\n           two-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2251/403
  ((81 87 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((68 70 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) bo that-play this-play) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  number
  "\"'(eval (app horizon (app win) (-> 0 <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((57 58 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env (() () ())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (... i⁻¹ (ormap (-> (λ (f xs) ...) <-)) andmap ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval (λ (move-coord-v) (-> (match move-coord-v ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((55 56 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((59 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  45
  22
  23
  0
  22
  23
  45
  1
  1
  113/22
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (λ (c x) (-> (app f (app coord r c) x) <-)) (env (() () ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((58 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  quoted
  "\"'(eval (app error (-> 'human-action <-) \"not implemented\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> display <-) \"Cat's game.\\n\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (match (app b co) ((blank) (-> (app #f) <-)) (marked m*)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env (() ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  19
  10
  9
  0
  10
  9
  19
  1
  1
  27/5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app minimax (-> bo <-) that-mark this-mark) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app board-mark co mark (-> bo <-)) (env (())))\""
  11
  8
  3
  0
  8
  3
  11
  1
  1
  41/8
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           draw-board!\n           (play-turn (-> (λ (bo this-play that-play) ...) <-))\n           play-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env (())))\""
  8
  5
  3
  0
  5
  3
  8
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app marked-with? b (-> (app coord rc rc) <-) m) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval (app foldl (-> (λ (c x) ...) <-) x is) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((55 56 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  23
  19
  4
  0
  19
  4
  23
  1
  1
  102/19
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((55 56 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app horizon (-> (app lose) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((57 58 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env (() ())))\""
  22
  16
  6
  0
  16
  6
  22
  1
  1
  21/4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((56 57 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env (() ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  24
  16
  8
  0
  16
  8
  24
  1
  1
  85/16
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval (app fold/coord (-> (λ (co mm) ...) <-) (app none)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (... marked-with? (i⁻¹ (-> (λ (i) ...) <-)) ormap ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           minimax\n           (maximin (-> (λ (bo this-mark that-mark) ...) <-))\n           human-action\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app maximin bo (-> that-mark <-) this-mark) (env (() ())))\""
  18
  9
  9
  0
  9
  9
  18
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((57 58 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 68 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env (() ())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-coord\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env (() ())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((54 55 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env (() ())))\""
  11
  8
  3
  0
  8
  3
  11
  1
  1
  41/8
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((61 63 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (... foldl (fold/coord (-> (λ (f x) ...) <-)) min-maybe-move ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  538
  405
  133
  0
  405
  133
  538
  1
  1
  2258/405
  ((61 63 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env (())))\""
  547
  412
  135
  0
  412
  135
  547
  1
  1
  573/103
  ((57 58 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env (())))\""
  24
  16
  8
  0
  16
  8
  24
  1
  1
  85/16
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((63 65 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env (() ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord rc rc) (-> m <-)) (env (() ())))\""
  76
  54
  22
  0
  54
  22
  76
  1
  1
  151/27
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (... board-lookup (marked-with? (-> (λ (b co m) ...) <-)) i⁻¹ ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  546
  410
  136
  0
  410
  136
  546
  1
  1
  1142/205
  ((55 56 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app minimax bo (-> that-mark <-) this-mark) (env (() ())))\""
  29
  18
  11
  0
  18
  11
  29
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((55 56 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app some-v (-> (app maximin bo that-mark this-mark) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 68 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((58 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  11
  8
  3
  0
  8
  3
  11
  1
  1
  41/8
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  let
  "\"'(eval (λ () (-> (let (co) ...) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((56 58 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((53 55 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env (())))\""
  7
  3
  4
  0
  3
  4
  7
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (λ (r) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((54 55 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  let
  "\"'(eval (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((55 57 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  11
  8
  3
  0
  8
  3
  11
  1
  1
  41/8
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((59 61 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval (letrec (... () (loop (-> (λ () ...) <-)) () ...) ...) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env (() ())))\""
  76
  54
  22
  0
  54
  22
  76
  1
  1
  151/27
  ((4 5 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app minimax bo that-mark this-mark)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((59 61 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((57 58 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2251/403
  ((62 63 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  11/2
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (letrec (...\n           zero-player-game\n           (is\n            (->\n             (app\n              cons\n              (app Ze)\n              (app cons (app On) (app cons (app Tw) (app nil))))\n             <-))\n           ()\n           ...)\n    ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) empty-board player-one player-two) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  2245/402
  ((55 56 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  1123/201
  ((64 65 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval (λ (co₀ ma bo) (-> (λ (co) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co mark bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> marked? <-) (app b (app coord r c))) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((54 56 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (... oc< (horizon< (-> (λ (h₀ h₁) ...) <-)) horizon-add1 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-))) (env (())))\""
  540
  407
  133
  0
  407
  133
  540
  1
  1
  2270/407
  ((56 57 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> minimax <-) bo that-mark this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app some-v (-> (app minimax bo that-mark this-mark) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((59 61 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app marked? (-> (app b (app coord r c)) <-)) (env (() () ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((54 55 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  let
  "\"'(eval (λ (bo this-play that-play) (-> (let (_) ...) <-)) (env (())))\""
  540
  407
  133
  0
  407
  133
  540
  1
  1
  2265/407
  ((58 59 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (letrec (loop) (-> (app loop) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((55 58 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((56 57 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (... horizon< (horizon-add1 (-> (λ (h) ...) <-)) foldl ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app minimax bo that-mark (-> this-mark <-)) (env (() ())))\""
  18
  9
  9
  0
  9
  9
  18
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((54 55 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env (())))\""
  23
  19
  4
  0
  19
  4
  23
  1
  1
  102/19
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (... make-ai-action (draw-board! (-> (λ (bo) ...) <-)) play-turn ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env (() ())))\""
  38
  18
  20
  0
  18
  20
  38
  1
  1
  46/9
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (... horizon-add1 (foldl (-> (λ (f acc l) ...) <-)) fold/coord ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  542
  407
  135
  0
  407
  135
  542
  1
  1
  2267/407
  ((59 61 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env (())))\""
  48
  35
  13
  0
  35
  13
  48
  1
  1
  188/35
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  30
  23
  7
  0
  23
  7
  30
  1
  1
  124/23
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (... ormap (andmap (-> (λ (f xs) ...) <-)) wins? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app play-turn (-> bo <-) that-play this-play) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app win) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env (())))\""
  15
  7
  8
  0
  7
  8
  15
  1
  1
  40/7
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  76
  54
  22
  0
  54
  22
  76
  1
  1
  151/27
  ((4 5 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app play-turn (-> empty-board <-) player-one player-two) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2251/403
  ((64 69 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((56 57 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval (app andmap (-> (λ (rc) ...) <-) is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2250/403
  ((60 61 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app horizon (-> (app win) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((59 61 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  76
  54
  22
  0
  54
  22
  76
  1
  1
  151/27
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (... andmap (wins? (-> (λ (b m) ...) <-)) full? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           max-maybe-move\n           (minimax (-> (λ (bo this-mark that-mark) ...) <-))\n           maximin\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  749/134
  ((58 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval (app andmap (-> (λ (c) ...) <-) is) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2251/403
  ((62 63 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval (λ (co) (-> (match (app equal? co₀ co) ...) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((57 59 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  30
  23
  7
  0
  23
  7
  30
  1
  1
  124/23
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  lambda
  "\"'(eval (app foldl (-> (λ (r x) ...) <-) x is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((58 60 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) mark bo) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((58 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  31
  23
  8
  0
  23
  8
  31
  1
  1
  122/23
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env (())))\""
  540
  407
  133
  0
  407
  133
  540
  1
  1
  2270/407
  ((57 58 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env (())))\""
  545
  410
  135
  0
  410
  135
  545
  1
  1
  2283/410
  ((62 64 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  537
  404
  133
  0
  404
  133
  537
  1
  1
  1127/202
  ((55 57 2)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  538
  405
  133
  0
  405
  133
  538
  1
  1
  2258/405
  ((58 59 1)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  app
  "\"'(eval (app player (app X) (-> (app make-ai-action (app X)) <-)) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app coord r c) x) (env (() () ())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  100
  569
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  100
  33
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  120
  86
  28
  6
  58
  19
  77
  1
  2501/2970
  237/43
  ((7 7 0)))
'(clean-cache
  sat-small
  1
  100
  33
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  15
  9
  3
  3
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  11
  4
  2
  5
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  100
  33
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  108
  74
  28
  6
  50
  19
  69
  1
  493/558
  203/37
  ((6 6 0)))
'(clean-cache
  sat-small
  1
  100
  33
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2)))))\""
  24
  13
  8
  3
  8
  4
  12
  1
  3/4
  68/13
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  100
  33
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-2) ...) (env ()))\""
  120
  86
  28
  6
  60
  19
  79
  1
  2771/3150
  475/86
  ((7 7 0)))
'(clean-cache
  sat-small
  1
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  100
  33
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env ((□? (x1 x2)))))\""
  71
  47
  19
  5
  30
  13
  43
  1
  131/171
  249/47
  ((4 4 0)))
'(clean-cache
  sat-small
  1
  100
  33
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  11
  5
  3
  3
  2
  1
  3
  1
  2/9
  26/5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  100
  33
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  100
  33
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env ((□? (x1 x2)))))\""
  30
  19
  8
  3
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-small
  1
  100
  33
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  113
  78
  28
  7
  52
  19
  71
  1
  245/288
  433/78
  ((7 7 0)))
'(clean-cache
  sat-small
  1
  100
  33
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  113
  78
  28
  7
  52
  19
  71
  1
  245/288
  433/78
  ((7 7 0)))
'(clean-cache
  sat-small
  1
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  100
  33
  app
  "\"'(eval (letrec (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  119
  85
  28
  6
  59
  19
  78
  1
  2681/3060
  469/85
  ((7 7 0)))
'(clean-cache
  sat-small
  1
  100
  33
  lambda
  "\"'(eval (letrec (... () (phi (-> (λ (x1 x2) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  100
  33
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  100
  33
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  11
  5
  3
  3
  2
  1
  3
  1
  2/9
  26/5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  100
  33
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  9
  3
  5
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  100
  33
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  100
  33
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  100
  33
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  124
  89
  28
  7
  57
  19
  76
  1
  2321/2880
  500/89
  ((8 8 0)))
'(clean-cache
  sat-small
  1
  100
  33
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  100
  33
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  91
  63
  21
  7
  40
  15
  55
  1
  916/1035
  335/63
  ((5 5 0)))
'(clean-cache
  sat-small
  1
  100
  33
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-2 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  100
  33
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env ((□? (x1 x2)))))\""
  26
  13
  8
  5
  9
  5
  14
  1
  17/20
  68/13
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  100
  33
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-2 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  19
  9
  3
  7
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  28
  13
  8
  7
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  100
  58
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  218
  129
  48
  41
  33
  15
  48
  1
  281/432
  228/43
  ((39 39 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  19
  9
  5
  5
  4
  1
  5
  1
  4/25
  16/3
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  100
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  85
  51
  19
  15
  21
  6
  27
  1
  13/21
  271/51
  ((6 6 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  9
  3
  5
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  23
  9
  3
  11
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  34
  19
  8
  7
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  58
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-4) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  100
  58
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  36
  19
  8
  9
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  100
  58
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  19
  9
  5
  5
  4
  1
  5
  1
  4/25
  16/3
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  100
  58
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  lambda
  "\"'(eval\n  (letrec (... () (phi (-> (λ (x1 x2 x3 x4) ...) <-)) try ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  100
  58
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  36
  19
  8
  9
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  100
  58
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  26
  13
  8
  5
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  100
  58
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  34
  19
  8
  7
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  100
  58
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  100
  58
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  28
  13
  8
  7
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  9
  5
  14
  1
  17/20
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  100
  58
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval (letrec (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  lambda
  "\"'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  15
  4
  2
  9
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  71
  43
  19
  9
  17
  6
  23
  1
  11/17
  227/43
  ((6 6 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  21
  9
  3
  9
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-4 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  100
  58
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-4 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval (letrec (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  9
  3
  8
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  255
  99
  60
  96
  13
  9
  22
  1
  9/17
  61/11
  ((44 45 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  68
  15
  13
  40
  7
  5
  12
  1
  7/10
  16/3
  ((2 3 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  32
  9
  3
  20
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  291
  131
  60
  100
  14
  10
  24
  1
  10/19
  725/131
  ((56 57 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  lambda
  "\"'(eval (λ (x1) (-> (λ (x2) ...) <-)) (env ((□? (x1)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  lambda
  "\"'(eval\n  (λ (x6) (-> (λ (x7) ...) <-))\n  (env ((□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  7
  1
  0
  6
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n7) ...) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  53
  13
  8
  32
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  93
  19
  20
  54
  7
  6
  13
  1
  7/10
  104/19
  ((5 5 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  24
  9
  3
  12
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  lambda
  "\"'(eval (letrec (... () (phi (-> (λ (x1) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  96
  lambda
  "\"'(eval (λ (x3) (-> (λ (x4) ...) <-)) (env ((□? (x3)) (□? (x2)) (□? (x1)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n5) ...) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  1
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  39
  22
  2
  15
  8
  2
  10
  1
  8/15
  5
  ((2 2 0)))
'(clean-cache
  sat-2
  1
  100
  96
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  22
  9
  3
  10
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  26
  9
  3
  14
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  68
  15
  13
  40
  7
  5
  12
  1
  7/10
  16/3
  ((2 2 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  93
  19
  20
  54
  7
  6
  13
  1
  7/10
  104/19
  ((5 5 0)))
'(clean-cache
  sat-2
  1
  100
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  222
  99
  43
  80
  13
  8
  21
  1
  3/7
  541/99
  ((33 33 0)))
'(clean-cache
  sat-2
  1
  100
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  16
  2
  15
  6
  2
  8
  1
  6/11
  5
  ((1 2 0)))
'(clean-cache
  sat-2
  1
  100
  96
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  78
  25
  13
  40
  9
  5
  14
  1
  9/14
  134/25
  ((4 4 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  30
  9
  3
  18
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  28
  9
  3
  16
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  24
  7
  2
  15
  3
  2
  5
  1
  3/5
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  93
  19
  20
  54
  7
  6
  13
  1
  7/10
  104/19
  ((4 4 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  96
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  111
  37
  20
  54
  9
  6
  15
  1
  9/14
  202/37
  ((7 7 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n6) ...) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  1
  0
  6
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  30
  13
  2
  15
  5
  2
  7
  1
  5/9
  5
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  96
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  27
  10
  2
  15
  4
  2
  6
  1
  4/7
  5
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x4 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  134
  27
  31
  76
  7
  7
  14
  1
  7/10
  152/27
  ((9 10 0)))
'(clean-cache
  sat-2
  1
  100
  96
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  111
  37
  20
  54
  9
  6
  15
  1
  9/14
  202/37
  ((7 7 0)))
'(clean-cache
  sat-2
  1
  100
  96
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  53
  13
  8
  32
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  100
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  257
  99
  60
  98
  13
  9
  22
  1
  9/17
  61/11
  ((50 51 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  134
  27
  31
  76
  7
  7
  14
  1
  7/10
  152/27
  ((10 10 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  53
  13
  8
  32
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  100
  96
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  134
  27
  31
  76
  7
  7
  14
  1
  7/10
  152/27
  ((9 9 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  96
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  78
  25
  13
  40
  9
  5
  14
  1
  9/14
  134/25
  ((3 3 0)))
'(clean-cache
  sat-2
  1
  100
  96
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x4) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  lambda
  "\"'(eval (λ (x2) (-> (λ (x3) ...) <-)) (env ((□? (x2)) (□? (x1)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  lambda
  "\"'(eval\n  (λ (x5) (-> (λ (x6) ...) <-))\n  (env ((□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  6
  1
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  68
  15
  13
  40
  7
  5
  12
  1
  7/10
  16/3
  ((2 2 0)))
'(clean-cache
  sat-2
  1
  100
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  36
  19
  2
  15
  7
  2
  9
  1
  7/13
  5
  ((2 2 0)))
'(clean-cache
  sat-2
  1
  100
  96
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  153
  51
  30
  72
  16
  10
  26
  1
  32/51
  91/17
  ((15 15 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-7) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  96
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  168
  61
  31
  76
  9
  7
  16
  1
  9/14
  338/61
  ((18 18 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  100
  96
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  68
  15
  13
  40
  7
  5
  12
  1
  7/10
  16/3
  ((2 2 0)))
'(clean-cache
  sat-2
  1
  100
  96
  lambda
  "\"'(eval\n  (λ (x4) (-> (λ (x5) ...) <-))\n  (env ((□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x3 x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  100
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  7
  6
  0
  1
  4
  0
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((2 2 0)))
'(clean-cache
  sat-3
  1
  100
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  19
  8
  16
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  98
  43
  19
  36
  17
  6
  23
  1
  11/17
  227/43
  ((9 9 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  100
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  string
  "\"'(eval (app println (-> \"trying\" <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  9
  5
  14
  1
  17/20
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  112
  43
  19
  50
  20
  9
  29
  1
  38/51
  227/43
  ((9 10 0)))
'(clean-cache
  sat-3
  1
  100
  100
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  19
  8
  16
  12
  4
  16
  1
  3/4
  100/19
  ((1 2 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  24
  9
  3
  12
  5
  2
  7
  1
  5/7
  46/9
  ((0 1 0)))
'(clean-cache
  sat-3
  1
  100
  100
  let
  "\"'(eval (letrec (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  35
  13
  8
  14
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  100
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env ((□? (f)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  35
  13
  8
  14
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  19
  8
  14
  12
  4
  16
  1
  3/4
  100/19
  ((2 2 0)))
'(clean-cache
  sat-3
  1
  100
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  299
  129
  48
  122
  33
  15
  48
  1
  281/432
  228/43
  ((62 63 1)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  30
  9
  3
  18
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  7
  3
  2
  2
  1
  1
  2
  1
  1/4
  4
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n7) ...) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  lambda
  "\"'(eval\n  (letrec (... println (phi (-> (λ (x1 x2 x3 x4 x5 x6 x7) ...) <-)) try ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  11
  7
  2
  2
  3
  1
  4
  1
  3/8
  33/7
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  96
  43
  19
  34
  17
  6
  23
  1
  11/17
  227/43
  ((10 10 0)))
'(clean-cache
  sat-3
  1
  100
  100
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  19
  8
  18
  12
  4
  16
  1
  3/4
  100/19
  ((2 2 0)))
'(clean-cache
  sat-3
  1
  100
  100
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((2 2 0)))
'(clean-cache
  sat-3
  1
  100
  100
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  100
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  19
  8
  18
  12
  4
  16
  1
  3/4
  100/19
  ((2 2 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  112
  51
  19
  42
  21
  6
  27
  1
  13/21
  271/51
  ((11 11 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  9
  3
  8
  5
  2
  7
  1
  5/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n6) ...) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  1
  0
  6
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  22
  9
  3
  10
  5
  2
  7
  1
  5/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  letrec
  "\"'(eval ((top) letrec (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  100
  lambda
  "\"'(eval (letrec (... () (println (-> (λ (s) ...) <-)) phi ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  32
  9
  3
  20
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  9
  5
  14
  1
  17/20
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  28
  9
  3
  16
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  26
  9
  3
  14
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  9
  5
  14
  1
  17/20
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  35
  13
  8
  14
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  100
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n5) ...) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  1
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((2 2 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  100
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  104
  47
  19
  38
  20
  7
  27
  1
  13/19
  249/47
  ((9 9 0)))
'(clean-cache
  sat-3
  1
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  43
  22
  15
  6
  14
  8
  22
  1
  7/32
  65/11
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           two-player-game\n           (one-player-game (-> (λ () ...) <-))\n           zero-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  28
  18
  7
  3
  14
  4
  18
  1
  19/24
  49/9
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (letrec (...\n           zero-player-game\n           (is\n            (->\n             (app\n              cons\n              (app Ze)\n              (app cons (app On) (app cons (app Tw) (app nil))))\n             <-))\n           ()\n           ...)\n    ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  168
  76
  67
  25
  26
  25
  51
  1
  1301/3840
  407/76
  ((17 17 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (b)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  38
  28
  7
  3
  23
  4
  27
  1
  65/76
  151/28
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  67
  28
  28
  11
  12
  14
  26
  1
  59/144
  36/7
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (b co m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  90
  35
  38
  17
  13
  18
  31
  1
  59/176
  26/5
  ((7 7 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  91
  60
  23
  8
  41
  13
  54
  1
  13/20
  107/20
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  49
  32
  12
  5
  25
  8
  33
  1
  37/46
  173/32
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  26
  13
  5
  8
  4
  1
  5
  1
  4/45
  68/13
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  65
  44
  15
  6
  35
  8
  43
  1
  133/184
  21/4
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (a)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (... move-horizon (mark⁻¹ (-> (λ (ma) ...) <-)) empty-board ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           draw-board!\n           (play-turn (-> (λ (bo this-play that-play) ...) <-))\n           play-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (... mark⁻¹ (empty-board (-> (λ (co) ...) <-)) board-mark ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (... horizon-add1 (foldl (-> (λ (f acc l) ...) <-)) fold/coord ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  155
  92
  41
  22
  21
  14
  35
  1
  67/324
  23/4
  ((14 14 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env ((□? (co)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  27
  18
  7
  2
  14
  4
  18
  1
  19/24
  49/9
  ((1 2 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (a)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  77
  46
  23
  8
  34
  13
  47
  1
  11/16
  247/46
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (a)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (... make-ai-action (draw-board! (-> (λ (bo) ...) <-)) play-turn ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  159
  92
  41
  26
  21
  14
  35
  1
  67/324
  23/4
  ((14 14 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  64
  30
  20
  14
  7
  4
  11
  1
  7/18
  27/5
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  51
  30
  15
  6
  22
  8
  30
  1
  39/64
  79/15
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  17
  5
  3
  9
  0
  1
  1
  1
  0
  26/5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  number
  "\"'(eval\n  (app horizon (app draw) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  6
  2
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  140
  63
  54
  23
  22
  24
  46
  1
  241/672
  47/9
  ((11 11 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           play-turn\n           (play-game (-> (λ (player-one player-two) ...) <-))\n           two-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) empty-board player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  number
  "\"'(eval\n  (app horizon (app win) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  26
  16
  5
  5
  9
  3
  12
  1
  5/8
  81/16
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (... marked? (blank? (-> (λ (a) ...) <-)) move-coord ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  20
  10
  7
  3
  6
  4
  10
  1
  3/8
  27/5
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval (λ (ma) (-> (λ (bo) ...) <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  3
  0
  3
  1
  3/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval (letrec (... wins? (full? (-> (λ (b) ...) <-)) oc< ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  61
  44
  12
  5
  14
  7
  21
  1
  5/36
  131/22
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  15
  14
  0
  3
  3
  1
  0
  27/5
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval (app andmap (-> (λ (rc) ...) <-) is) (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  74
  45
  21
  8
  33
  12
  45
  1
  25/36
  238/45
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  48
  32
  12
  4
  25
  8
  33
  1
  37/46
  173/32
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           empty-board\n           (board-mark (-> (λ (co₀ ma bo) ...) <-))\n           board-lookup\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  39
  22
  9
  8
  6
  2
  8
  1
  3/13
  115/22
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  47
  18
  15
  14
  0
  3
  3
  1
  0
  11/2
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  35
  17
  4
  14
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           play-game\n           (two-player-game (-> (λ () ...) <-))\n           one-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  14/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  29
  12
  9
  8
  1
  2
  3
  1
  1/16
  21/4
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           blank?\n           (move-coord (-> (λ (move-coord-v) ...) <-))\n           move-horizon\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (... one-player-game (zero-player-game (-> (λ () ...) <-)) is ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  90
  35
  38
  17
  13
  18
  31
  1
  59/176
  26/5
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           max-maybe-move\n           (minimax (-> (λ (bo this-mark that-mark) ...) <-))\n           maximin\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  18
  10
  4
  4
  3
  1
  4
  1
  3/28
  26/5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> display <-) \"Cat's game.\\n\")\n  (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           min-maybe-move\n           (max-maybe-move (-> (λ (mmo mo₁) ...) <-))\n           minimax\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  string
  "\"'(eval\n  (app display (-> \"Cat's game.\\n\" <-))\n  (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  87
  57
  23
  7
  42
  13
  55
  1
  111/152
  102/19
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (... maximin (human-action (-> (λ (bo) ...) <-)) make-ai-action ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  46
  29
  12
  5
  12
  7
  19
  1
  7/34
  185/29
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  number
  "\"'(eval\n  (app horizon (app lose) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  155
  92
  41
  22
  21
  14
  35
  1
  67/324
  23/4
  ((15 15 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (... board-lookup (marked-with? (-> (λ (b co m) ...) <-)) i⁻¹ ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  35
  17
  4
  14
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  37
  28
  7
  2
  23
  4
  27
  1
  65/76
  151/28
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  51
  30
  15
  6
  22
  8
  30
  1
  39/64
  79/15
  ((3 4 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  6
  2
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval (app andmap (-> (λ (r) ...) <-) is) (env ((□? (b)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  47
  18
  15
  14
  0
  3
  3
  1
  0
  11/2
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  51/10
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           human-action\n           (make-ai-action (-> (λ (ma) ...) <-))\n           draw-board!\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           move-coord\n           (move-horizon (-> (λ (move-horizon-v) ...) <-))\n           mark⁻¹\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (... full? (oc< (-> (λ (oc₀ oc₁) ...) <-)) horizon< ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  string
  "\"'(eval\n  (app error (-> \"invalid match for move-horizon\" <-))\n  (env ((□? (move-horizon-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  18
  10
  4
  4
  3
  1
  4
  1
  3/28
  26/5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-horizon\")\n  (env ((□? (move-horizon-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env ((□? (b co m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  66
  32
  20
  14
  7
  4
  11
  1
  7/19
  87/16
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  3
  0
  3
  1
  3/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked? <-) (app b (app coord r c)))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval (app andmap (-> (λ (c) ...) <-) is) (env ((□? (r)) (□? (b)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> empty-board <-) player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  28
  18
  7
  3
  14
  4
  18
  1
  19/24
  49/9
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app X) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval (app andmap (-> (λ (r) ...) <-) is) (env ((□? (c)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  64
  30
  20
  14
  7
  4
  11
  1
  7/18
  27/5
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  19
  10
  7
  2
  6
  4
  10
  1
  3/8
  27/5
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           fold/coord\n           (min-maybe-move (-> (λ (mmo mo₁) ...) <-))\n           max-maybe-move\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  3
  0
  3
  1
  3/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (... marked-with? (i⁻¹ (-> (λ (i) ...) <-)) ormap ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (... andmap (wins? (-> (λ (b m) ...) <-)) full? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (... ormap (andmap (-> (λ (f xs) ...) <-)) wins? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  7
  2
  5
  2
  1
  3
  1
  1/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  155
  92
  41
  22
  21
  14
  35
  1
  67/324
  23/4
  ((16 17 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval (app ormap (-> (λ (c) ...) <-) is) (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval (app ormap (-> (λ (r) ...) <-) is) (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (... i⁻¹ (ormap (-> (λ (f xs) ...) <-)) andmap ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval (λ (co₀ ma bo) (-> (λ (co) ...) <-)) (env ((□? (co₀ ma bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app minimax bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma)))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  number
  "\"'(eval\n  (app horizon (app draw) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  number
  "\"'(eval (app + sc (-> 1 <-)) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  6
  2
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  86
  34
  21
  31
  8
  2
  10
  1
  7/40
  94/17
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  66
  46
  12
  8
  17
  7
  24
  1
  13/60
  277/46
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  6
  2
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> maximin <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  6
  2
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           minimax\n           (maximin (-> (λ (bo this-mark that-mark) ...) <-))\n           human-action\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  41
  25
  9
  7
  7
  2
  9
  1
  7/16
  132/25
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  27
  18
  7
  2
  14
  4
  18
  1
  19/24
  49/9
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  string
  "\"'(eval (app error 'human-action (-> \"not implemented\" <-)) (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  31
  17
  4
  10
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  49
  32
  12
  5
  25
  8
  33
  1
  37/46
  173/32
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  43
  26
  12
  5
  10
  7
  17
  1
  17/96
  79/13
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env ((□? (f x)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  43
  26
  12
  5
  10
  7
  17
  1
  17/96
  79/13
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  13
  7
  3
  3
  2
  1
  3
  1
  2/15
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval (app foldl (-> (λ (c x) ...) <-) x is) (env ((□? (r x)) (□? (f x)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (... horizon< (horizon-add1 (-> (λ (h) ...) <-)) foldl ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  quoted
  "\"'(eval (app error (-> 'human-action <-) \"not implemented\") (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  string
  "\"'(eval (app error (-> \"invalid match for some-v\" <-)) (env ((□? (some-v-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env ((□? (r x)) (□? (f x)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  51
  33
  13
  5
  25
  8
  33
  1
  37/46
  178/33
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env ((□? (f acc l)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  letrec
  "\"'(eval (lettypes cons ... player (letrec (some-v ... is) ...)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app win) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (... () (some-v (-> (λ (some-v-v) ...) <-)) marked? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> minimax <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  159
  92
  41
  26
  21
  14
  35
  1
  67/324
  23/4
  ((15 16 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (app fold/coord (-> (λ (co mm) ...) <-) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  23
  16
  5
  2
  11
  3
  14
  1
  17/24
  81/16
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  35
  17
  4
  14
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval (app foldl (-> (λ (r x) ...) <-) x is) (env ((□? (f x)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  66
  32
  20
  14
  7
  4
  11
  1
  7/19
  87/16
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (... () (loop (-> (λ () ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  5
  4
  0
  1
  0
  0
  0
  1
  0
  19/4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  23
  16
  5
  2
  11
  3
  14
  1
  17/24
  81/16
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval (app andmap (-> (λ (rc) ...) <-) is) (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  16
  6
  7
  3
  3
  4
  7
  1
  1/4
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  15
  6
  7
  2
  3
  4
  7
  1
  1/4
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  61
  44
  12
  5
  14
  7
  21
  1
  5/36
  131/22
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  31
  17
  4
  10
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) bo that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (... some-v (marked? (-> (λ (a) ...) <-)) blank? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (... foldl (fold/coord (-> (λ (f x) ...) <-)) min-maybe-move ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           board-mark\n           (board-lookup (-> (λ (co bo) ...) <-))\n           marked-with?\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app lose) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval (app andmap (-> (λ (c) ...) <-) is) (env ((□? (r)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (letrec (... oc< (horizon< (-> (λ (h₀ h₁) ...) <-)) horizon-add1 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  6
  2
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (c)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  35
  14
  15
  6
  7
  8
  15
  1
  1/8
  40/7
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  7
  2
  5
  2
  1
  3
  1
  1/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (a)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  lambda
  "\"'(eval\n  (app fold/coord (-> (λ (co mm) ...) <-) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (letrec (some-v ... is) (-> (app zero-player-game) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-coord\")\n  (env ((□? (move-coord-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  26
  16
  5
  5
  9
  3
  12
  1
  5/8
  81/16
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  15
  14
  0
  3
  3
  1
  0
  27/5
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  210
  109
  58
  43
  25
  15
  40
  1
  359/1740
  631/109
  ((20 21 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  string
  "\"'(eval\n  (app error (-> \"invalid match for move-coord\" <-))\n  (env ((□? (move-coord-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env ((□? (some-v-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  100
  569
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  51/10
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-small
  2
  100
  33
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  139
  100
  32
  7
  66
  21
  87
  1
  439/558
  279/50
  ((10 10 0)))
'(clean-cache
  sat-small
  2
  100
  33
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  198
  145
  32
  21
  73
  21
  94
  1
  823/1152
  819/145
  ((16 17 0)))
'(clean-cache
  sat-small
  2
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  100
  33
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  100
  33
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env ((□? (x1 x2)))))\""
  97
  67
  23
  7
  40
  15
  55
  1
  122/171
  357/67
  ((6 7 0)))
'(clean-cache
  sat-small
  2
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  11
  4
  2
  5
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  13
  5
  3
  5
  0
  1
  1
  1
  0
  26/5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  100
  33
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2)))))\""
  28
  15
  8
  5
  5
  2
  7
  1
  7/20
  16/3
  ((1 1 0)))
'(clean-cache
  sat-small
  2
  100
  33
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-2) ...) (env ()))\""
  145
  106
  32
  7
  76
  21
  97
  1
  383/450
  294/53
  ((10 11 0)))
'(clean-cache
  sat-small
  2
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  100
  33
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  100
  33
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  100
  33
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  117
  83
  25
  9
  50
  17
  67
  1
  781/1035
  443/83
  ((7 8 0)))
'(clean-cache
  sat-small
  2
  100
  33
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  100
  33
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-2 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  100
  33
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  152
  112
  32
  8
  74
  21
  95
  1
  1138/1485
  311/56
  ((10 10 0)))
'(clean-cache
  sat-small
  2
  100
  33
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  157
  110
  32
  15
  64
  21
  85
  1
  905/1152
  613/110
  ((12 12 0)))
'(clean-cache
  sat-small
  2
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  13
  5
  3
  5
  0
  1
  1
  1
  0
  26/5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  100
  33
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  157
  110
  32
  15
  64
  21
  85
  1
  905/1152
  613/110
  ((11 11 0)))
'(clean-cache
  sat-small
  2
  100
  33
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env ((□? (x1 x2)))))\""
  38
  25
  8
  5
  11
  2
  13
  1
  13/28
  134/25
  ((1 1 0)))
'(clean-cache
  sat-small
  2
  100
  33
  lambda
  "\"'(eval (letrec (... () (phi (-> (λ (x1 x2) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  100
  33
  app
  "\"'(eval (letrec (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  144
  105
  32
  7
  75
  21
  96
  1
  2591/3060
  194/35
  ((9 10 0)))
'(clean-cache
  sat-small
  2
  100
  33
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  100
  33
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  100
  33
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env ((□? (x1 x2)))))\""
  27
  13
  8
  6
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-small
  2
  100
  33
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-2 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  100
  33
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  100
  33
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  18
  9
  3
  6
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  100
  33
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  16
  9
  3
  4
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  100
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  58
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  58
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  24
  9
  3
  12
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  15
  4
  2
  9
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  18
  9
  3
  6
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  38
  19
  8
  11
  5
  2
  7
  1
  5/14
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  100
  58
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  36
  19
  8
  9
  5
  2
  7
  1
  5/14
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  100
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  100
  59
  23
  18
  13
  6
  19
  1
  1/3
  311/59
  ((8 8 0)))
'(clean-cache
  sat-1
  2
  58
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  30
  15
  8
  7
  5
  2
  7
  1
  7/20
  16/3
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  58
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  22
  9
  3
  10
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  245
  145
  56
  44
  32
  19
  51
  1
  157/378
  764/145
  ((47 48 1)))
'(clean-cache
  sat-1
  2
  100
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  82
  51
  19
  12
  13
  2
  15
  1
  7/17
  91/17
  ((8 8 0)))
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  100
  58
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-4 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  58
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  100
  58
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  58
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-4) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  23
  9
  5
  9
  0
  1
  1
  1
  0
  16/3
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  58
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  58
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  100
  58
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  58
  app
  "\"'(eval (letrec (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  100
  58
  lambda
  "\"'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  38
  19
  8
  11
  5
  2
  7
  1
  5/14
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  20
  9
  3
  8
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-4 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  100
  58
  lambda
  "\"'(eval\n  (letrec (... () (phi (-> (λ (x1 x2 x3 x4) ...) <-)) try ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  100
  58
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  58
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  100
  58
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  36
  19
  8
  9
  5
  2
  7
  1
  5/14
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  33
  13
  8
  12
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  58
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  2
  100
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  23
  9
  5
  9
  0
  1
  1
  1
  0
  16/3
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  82
  25
  13
  44
  5
  2
  7
  1
  5/14
  134/25
  ((3 3 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  100
  96
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  119
  37
  20
  62
  5
  2
  7
  1
  5/14
  202/37
  ((9 9 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  54
  13
  8
  33
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  101
  19
  20
  62
  3
  2
  5
  1
  3/10
  104/19
  ((5 5 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x4) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-7) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  100
  96
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  10
  2
  17
  2
  2
  4
  1
  2/7
  5
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  100
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n7) ...) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  100
  96
  lambda
  "\"'(eval (λ (x3) (-> (λ (x4) ...) <-)) (env ((□? (x3)) (□? (x2)) (□? (x1)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  9
  3
  21
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  45
  22
  2
  21
  2
  2
  4
  1
  2/15
  5
  ((2 2 0)))
'(clean-cache
  sat-2
  2
  100
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  37
  16
  2
  19
  2
  2
  4
  1
  2/11
  5
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  72
  15
  13
  44
  3
  2
  5
  1
  3/10
  16/3
  ((3 3 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  72
  15
  13
  44
  3
  2
  5
  1
  3/10
  16/3
  ((2 2 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  lambda
  "\"'(eval\n  (λ (x5) (-> (λ (x6) ...) <-))\n  (env ((□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  6
  1
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  119
  37
  20
  62
  5
  2
  7
  1
  5/14
  202/37
  ((7 8 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  9
  3
  9
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  100
  96
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  169
  59
  34
  76
  20
  11
  31
  1
  29/51
  313/59
  ((18 18 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  9
  3
  17
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  38
  15
  8
  15
  0
  1
  1
  1
  0
  27/5
  ((2 2 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  82
  25
  13
  44
  5
  2
  7
  1
  5/14
  134/25
  ((4 4 0)))
'(clean-cache
  sat-2
  2
  100
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  274
  99
  60
  115
  5
  2
  7
  1
  5/17
  61/11
  ((49 50 1)))
'(clean-cache
  sat-2
  2
  100
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  284
  107
  64
  113
  13
  6
  19
  1
  7/17
  589/107
  ((45 46 0)))
'(clean-cache
  sat-2
  2
  100
  96
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  9
  3
  13
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  100
  96
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  7
  2
  16
  2
  2
  4
  1
  2/5
  5
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  31
  9
  3
  19
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n5) ...) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  1
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  54
  13
  8
  33
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x4 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval (letrec (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  100
  96
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n6) ...) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  1
  0
  6
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  101
  19
  20
  62
  3
  2
  5
  1
  3/10
  104/19
  ((4 5 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  184
  61
  31
  92
  5
  2
  7
  1
  5/14
  338/61
  ((19 20 0)))
'(clean-cache
  sat-2
  2
  100
  96
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  27
  9
  3
  15
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  150
  27
  31
  92
  3
  2
  5
  1
  3/10
  152/27
  ((9 9 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  72
  15
  13
  44
  3
  2
  5
  1
  3/10
  16/3
  ((2 2 0)))
'(clean-cache
  sat-2
  2
  100
  96
  lambda
  "\"'(eval\n  (λ (x4) (-> (λ (x5) ...) <-))\n  (env ((□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  lambda
  "\"'(eval (letrec (... () (phi (-> (λ (x1) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  150
  27
  31
  92
  3
  2
  5
  1
  3/10
  152/27
  ((11 11 0)))
'(clean-cache
  sat-2
  2
  100
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  100
  96
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  13
  2
  18
  2
  2
  4
  1
  2/9
  5
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  38
  15
  8
  15
  0
  1
  1
  1
  0
  27/5
  ((2 2 0)))
'(clean-cache
  sat-2
  2
  100
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  243
  107
  47
  89
  13
  6
  19
  1
  1/3
  581/107
  ((38 38 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  23
  9
  3
  11
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  100
  96
  lambda
  "\"'(eval\n  (λ (x6) (-> (λ (x7) ...) <-))\n  (env ((□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  7
  1
  0
  6
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  150
  27
  31
  92
  3
  2
  5
  1
  3/10
  152/27
  ((11 11 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  54
  13
  8
  33
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  72
  15
  13
  44
  3
  2
  5
  1
  3/10
  16/3
  ((2 2 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  100
  96
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  101
  19
  20
  62
  3
  2
  5
  1
  3/10
  104/19
  ((5 5 0)))
'(clean-cache
  sat-2
  2
  100
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  41
  19
  2
  20
  2
  2
  4
  1
  2/13
  5
  ((2 2 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x3 x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  lambda
  "\"'(eval (λ (x2) (-> (λ (x3) ...) <-)) (env ((□? (x2)) (□? (x1)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  307
  131
  60
  116
  10
  5
  15
  1
  8/19
  725/131
  ((64 65 1)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  100
  96
  lambda
  "\"'(eval (λ (x1) (-> (λ (x2) ...) <-)) (env ((□? (x1)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  100
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  27
  9
  3
  15
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  38
  15
  8
  15
  0
  1
  1
  1
  0
  27/5
  ((2 2 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  9
  3
  13
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  100
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  101
  43
  19
  39
  5
  2
  7
  1
  5/17
  227/43
  ((10 10 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  42
  13
  8
  21
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  100
  100
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  19
  8
  16
  5
  2
  7
  1
  5/14
  100/19
  ((2 2 0)))
'(clean-cache
  sat-3
  2
  100
  100
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  9
  3
  17
  1
  0
  1
  1
  1/7
  46/9
  ((0 1 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  126
  51
  23
  52
  20
  11
  31
  1
  29/51
  89/17
  ((12 12 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  127
  59
  23
  45
  13
  6
  19
  1
  1/3
  311/59
  ((12 12 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  100
  100
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  12
  7
  2
  3
  0
  1
  1
  1
  0
  33/7
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  326
  145
  56
  125
  32
  19
  51
  1
  157/378
  764/145
  ((80 82 1)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  8
  6
  0
  2
  1
  0
  1
  1
  1/6
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  23
  9
  3
  11
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  106
  47
  19
  40
  10
  5
  15
  1
  8/19
  249/47
  ((8 9 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env ((□? (f)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  111
  51
  23
  37
  13
  6
  19
  1
  7/17
  89/17
  ((9 10 0)))
'(clean-cache
  sat-3
  2
  100
  100
  let
  "\"'(eval (letrec (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  5
  2
  7
  1
  5/14
  100/19
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  100
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  100
  100
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  100
  100
  lambda
  "\"'(eval\n  (letrec (... println (phi (-> (λ (x1 x2 x3 x4 x5 x6 x7) ...) <-)) try ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  42
  13
  8
  21
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  100
  100
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  letrec
  "\"'(eval ((top) letrec (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  9
  3
  9
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  31
  9
  3
  19
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  42
  13
  8
  21
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  100
  100
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  5
  2
  7
  1
  5/14
  100/19
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  9
  3
  21
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n7) ...) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  string
  "\"'(eval (app println (-> \"trying\" <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n6) ...) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  1
  0
  6
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  lambda
  "\"'(eval (letrec (... () (println (-> (λ (s) ...) <-)) phi ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  100
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n5) ...) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  1
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  19
  8
  18
  5
  2
  7
  1
  5/14
  100/19
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  100
  100
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  100
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  38
  15
  8
  15
  0
  1
  1
  1
  0
  27/5
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  100
  100
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  19
  8
  18
  5
  2
  7
  1
  5/14
  100/19
  ((1 2 0)))
'(clean-cache
  sat-3
  2
  100
  100
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  53
  18
  15
  20
  0
  3
  3
  1
  0
  11/2
  ((4 4 1)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (... () (some-v (-> (λ (some-v-v) ...) <-)) marked? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  40
  24
  10
  6
  14
  4
  18
  1
  31/42
  137/24
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env ((□? (b co m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  string
  "\"'(eval\n  (app error (-> \"invalid match for move-horizon\" <-))\n  (env ((□? (move-horizon-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval (app andmap (-> (λ (r) ...) <-) is) (env ((□? (b)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app win) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  191
  82
  65
  44
  18
  19
  37
  1
  1/4
  477/82
  ((22 23 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  53
  37
  10
  6
  23
  4
  27
  1
  107/133
  208/37
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  91
  64
  17
  10
  20
  7
  27
  1
  1/12
  103/16
  ((16 16 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  39
  24
  10
  5
  14
  4
  18
  1
  31/42
  137/24
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  41
  17
  4
  20
  1
  1
  2
  1
  1/12
  87/17
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (c)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (... oc< (horizon< (-> (λ (h₀ h₁) ...) <-)) horizon-add1 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (... make-ai-action (draw-board! (-> (λ (bo) ...) <-)) play-turn ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           move-coord\n           (move-horizon (-> (λ (move-horizon-v) ...) <-))\n           mark⁻¹\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env ((□? (r x)) (□? (f x)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> minimax <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (... horizon-add1 (foldl (-> (λ (f acc l) ...) <-)) fold/coord ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  210
  114
  51
  45
  21
  17
  38
  1
  7/108
  691/114
  ((25 26 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  104
  61
  29
  14
  33
  12
  45
  1
  259/405
  339/61
  ((11 12 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  104
  66
  17
  21
  17
  7
  24
  1
  31/240
  217/33
  ((14 14 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           two-player-game\n           (one-player-game (-> (λ () ...) <-))\n           zero-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  53
  18
  15
  20
  0
  3
  3
  1
  0
  11/2
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  19
  5
  3
  11
  0
  1
  1
  1
  0
  26/5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  56
  21
  22
  13
  7
  8
  15
  1
  1/15
  50/7
  ((7 7 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  6
  2
  6
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (... move-horizon (mark⁻¹ (-> (λ (ma) ...) <-)) empty-board ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval (app foldl (-> (λ (c x) ...) <-) x is) (env ((□? (r x)) (□? (f x)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval (letrec (... wins? (full? (-> (λ (b) ...) <-)) oc< ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           fold/coord\n           (min-maybe-move (-> (λ (mmo mo₁) ...) <-))\n           max-maybe-move\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (... marked? (blank? (-> (λ (a) ...) <-)) move-coord ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (b)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  32
  16
  10
  6
  6
  4
  10
  1
  3/14
  45/8
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  41
  17
  4
  20
  1
  1
  2
  1
  1/12
  87/17
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  24
  10
  4
  10
  0
  1
  1
  1
  0
  51/10
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  104
  61
  29
  14
  33
  12
  45
  1
  259/405
  339/61
  ((13 14 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  30
  13
  5
  12
  0
  1
  1
  1
  0
  68/13
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  31
  16
  10
  5
  6
  4
  10
  1
  3/14
  45/8
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  string
  "\"'(eval (app error 'human-action (-> \"not implemented\" <-)) (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  37
  17
  4
  16
  1
  1
  2
  1
  1/12
  87/17
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  24
  10
  4
  10
  0
  1
  1
  1
  0
  51/10
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env ((□? (some-v-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (a)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  39
  24
  10
  5
  14
  4
  18
  1
  31/42
  137/24
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  43
  26
  7
  10
  10
  3
  13
  1
  29/60
  11/2
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  104
  61
  29
  14
  33
  12
  45
  1
  259/405
  339/61
  ((11 12 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           play-turn\n           (play-game (-> (λ (player-one player-two) ...) <-))\n           two-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked? <-) (app b (app coord r c)))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  14/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma)))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  25
  9
  10
  6
  3
  4
  7
  1
  1/7
  50/9
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  91
  64
  17
  10
  20
  7
  27
  1
  1/12
  103/16
  ((14 15 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (app fold/coord (-> (λ (co mm) ...) <-) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  63
  36
  17
  10
  10
  7
  17
  1
  5/64
  20/3
  ((11 11 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  number
  "\"'(eval\n  (app horizon (app draw) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval (app andmap (-> (λ (rc) ...) <-) is) (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  104
  61
  29
  14
  33
  12
  45
  1
  259/405
  339/61
  ((10 10 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (... () (loop (-> (λ () ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  65
  41
  17
  7
  25
  8
  33
  1
  361/483
  227/41
  ((5 6 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  104
  61
  29
  14
  33
  12
  45
  1
  259/405
  339/61
  ((10 10 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  71
  36
  22
  13
  14
  8
  22
  1
  7/60
  15/2
  ((11 11 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (... foldl (fold/coord (-> (λ (f x) ...) <-)) min-maybe-move ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (... full? (oc< (-> (λ (oc₀ oc₁) ...) <-)) horizon< ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-coord\")\n  (env ((□? (move-coord-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  26/5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  71
  44
  17
  10
  15
  7
  22
  1
  15/136
  7
  ((11 11 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  63
  36
  17
  10
  10
  7
  17
  1
  5/64
  20/3
  ((10 10 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  204
  114
  51
  39
  21
  17
  38
  1
  7/108
  691/114
  ((25 25 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  79
  44
  22
  13
  22
  8
  30
  1
  67/120
  249/44
  ((8 8 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (letrec (some-v ... is) (-> (app zero-player-game) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           min-maybe-move\n           (max-maybe-move (-> (λ (mmo mo₁) ...) <-))\n           minimax\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (... i⁻¹ (ormap (-> (λ (f xs) ...) <-)) andmap ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  43
  26
  7
  10
  10
  3
  13
  1
  29/60
  11/2
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  letrec
  "\"'(eval (lettypes cons ... player (letrec (some-v ... is) ...)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  287
  137
  76
  74
  21
  18
  39
  1
  7/116
  829/137
  ((35 36 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (... marked-with? (i⁻¹ (-> (λ (i) ...) <-)) ormap ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  71
  30
  20
  21
  1
  4
  5
  1
  1/18
  27/5
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           play-game\n           (two-player-game (-> (λ () ...) <-))\n           one-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval (app ormap (-> (λ (c) ...) <-) is) (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (... one-player-game (zero-player-game (-> (λ () ...) <-)) is ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  132
  84
  33
  15
  42
  13
  55
  1
  167/285
  39/7
  ((14 14 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  number
  "\"'(eval\n  (app horizon (app draw) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           minimax\n           (maximin (-> (λ (bo this-mark that-mark) ...) <-))\n           human-action\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (... maximin (human-action (-> (λ (bo) ...) <-)) make-ai-action ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  26/5
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  114
  39
  43
  32
  8
  13
  21
  1
  5/22
  203/39
  ((14 16 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  number
  "\"'(eval (app + sc (-> 1 <-)) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval (app andmap (-> (λ (c) ...) <-) is) (env ((□? (r)) (□? (b)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  6
  2
  6
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval (app andmap (-> (λ (r) ...) <-) is) (env ((□? (c)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env ((□? (f acc l)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  6
  2
  6
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval (λ (co₀ ma bo) (-> (λ (co) ...) <-)) (env ((□? (co₀ ma bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval (app foldl (-> (λ (r x) ...) <-) x is) (env ((□? (f x)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  104
  61
  29
  14
  33
  12
  45
  1
  259/405
  339/61
  ((10 10 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app X) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  quoted
  "\"'(eval (app error (-> 'human-action <-) \"not implemented\") (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  number
  "\"'(eval\n  (app horizon (app lose) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  string
  "\"'(eval (app error (-> \"invalid match for some-v\" <-)) (env ((□? (some-v-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  16
  7
  2
  7
  1
  1
  2
  1
  1/6
  5
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           blank?\n           (move-coord (-> (λ (move-coord-v) ...) <-))\n           move-horizon\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> display <-) \"Cat's game.\\n\")\n  (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (... ormap (andmap (-> (λ (f xs) ...) <-)) wins? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (app fold/coord (-> (λ (co mm) ...) <-) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (a)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app minimax bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  113
  65
  32
  16
  35
  13
  48
  1
  52/81
  359/65
  ((13 13 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  204
  114
  51
  39
  21
  17
  38
  1
  7/108
  691/114
  ((27 28 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  5
  4
  0
  1
  0
  0
  0
  1
  0
  19/4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  100
  65
  22
  13
  35
  8
  43
  1
  77/115
  28/5
  ((13 13 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  38
  26
  7
  5
  12
  3
  15
  1
  8/15
  11/2
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  15
  7
  3
  5
  0
  1
  1
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval (app andmap (-> (λ (rc) ...) <-) is) (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  37
  17
  4
  16
  1
  1
  2
  1
  1/12
  87/17
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval (app ormap (-> (λ (r) ...) <-) is) (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  67
  41
  17
  9
  25
  8
  33
  1
  361/483
  227/41
  ((5 6 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (... andmap (wins? (-> (λ (b m) ...) <-)) full? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  73
  32
  20
  21
  1
  4
  5
  1
  1/19
  87/16
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           human-action\n           (make-ai-action (-> (λ (ma) ...) <-))\n           draw-board!\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           max-maybe-move\n           (minimax (-> (λ (bo this-mark that-mark) ...) <-))\n           maximin\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  6
  2
  6
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env ((□? (co)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  string
  "\"'(eval\n  (app error (-> \"invalid match for move-coord\" <-))\n  (env ((□? (move-coord-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  6
  2
  6
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (... horizon< (horizon-add1 (-> (λ (h) ...) <-)) foldl ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  number
  "\"'(eval\n  (app horizon (app win) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (a)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  113
  64
  33
  16
  34
  13
  47
  1
  22/35
  45/8
  ((12 12 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  204
  114
  51
  39
  21
  17
  38
  1
  7/108
  691/114
  ((26 27 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval (λ (ma) (-> (λ (bo) ...) <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  50
  15
  15
  20
  0
  3
  3
  1
  0
  27/5
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  40
  24
  10
  6
  14
  4
  18
  1
  31/42
  137/24
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval (app andmap (-> (λ (c) ...) <-) is) (env ((□? (r)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (... board-lookup (marked-with? (-> (λ (b co m) ...) <-)) i⁻¹ ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  210
  114
  51
  45
  21
  17
  38
  1
  7/108
  691/114
  ((26 26 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  86
  31
  33
  22
  8
  12
  20
  1
  5/18
  159/31
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  67
  41
  17
  9
  25
  8
  33
  1
  361/483
  227/41
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  45
  25
  9
  11
  1
  2
  3
  1
  1/16
  132/25
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  string
  "\"'(eval\n  (app display (-> \"Cat's game.\\n\" <-))\n  (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (letrec (...\n           zero-player-game\n           (is\n            (->\n             (app\n              cons\n              (app Ze)\n              (app cons (app On) (app cons (app Tw) (app nil))))\n             <-))\n           ()\n           ...)\n    ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-horizon\")\n  (env ((□? (move-horizon-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  74
  45
  20
  9
  27
  9
  36
  1
  52/69
  247/45
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  96
  34
  21
  41
  1
  2
  3
  1
  1/16
  94/17
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  16
  7
  2
  7
  1
  1
  2
  1
  1/6
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (... some-v (marked? (-> (λ (a) ...) <-)) blank? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (... mark⁻¹ (empty-board (-> (λ (co) ...) <-)) board-mark ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  134
  85
  33
  16
  41
  13
  54
  1
  299/525
  471/85
  ((12 13 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  38
  26
  7
  5
  12
  3
  15
  1
  8/15
  11/2
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> empty-board <-) player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  43
  22
  9
  12
  0
  2
  2
  1
  0
  115/22
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) bo that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           empty-board\n           (board-mark (-> (λ (co₀ ma bo) ...) <-))\n           board-lookup\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) empty-board player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  233
  98
  83
  52
  18
  20
  38
  1
  7/32
  593/98
  ((32 33 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  6
  4
  0
  2
  1
  0
  1
  1
  1/4
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (a)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env ((□? (f x)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           board-mark\n           (board-lookup (-> (λ (co bo) ...) <-))\n           marked-with?\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  73
  32
  20
  21
  1
  4
  5
  1
  1/19
  87/16
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  79
  44
  22
  13
  22
  8
  30
  1
  67/120
  249/44
  ((10 11 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (b co m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  114
  39
  43
  32
  8
  13
  21
  1
  5/22
  203/39
  ((8 8 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  52
  37
  10
  5
  23
  4
  27
  1
  107/133
  208/37
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> maximin <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  24
  9
  10
  5
  3
  4
  7
  1
  1/7
  50/9
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  33
  12
  9
  12
  0
  2
  2
  1
  0
  21/4
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  104
  61
  29
  14
  33
  12
  45
  1
  259/405
  339/61
  ((12 13 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  50
  15
  15
  20
  0
  3
  3
  1
  0
  27/5
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  6
  2
  6
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  10
  4
  2
  4
  0
  1
  1
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  lambda
  "\"'(eval\n  (letrec (...\n           draw-board!\n           (play-turn (-> (λ (bo this-play that-play) ...) <-))\n           play-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  569
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  71
  30
  20
  21
  1
  4
  5
  1
  1/18
  27/5
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app lose) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  100
  569
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  41
  17
  4
  20
  1
  1
  2
  1
  1/12
  87/17
  ((1 1 0)))
'(clean-cache
  sat-small
  0
  500
  33
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  app
  "\"'(eval (letrec (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  46
  34
  12
  0
  34
  12
  46
  1
  1
  185/34
  ((1 1 0)))
'(clean-cache
  sat-small
  0
  500
  33
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  45
  33
  12
  0
  33
  12
  45
  1
  1
  179/33
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  lambda
  "\"'(eval (letrec (... () (phi (-> (λ (x1 x2) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env (())))\""
  26
  19
  7
  0
  19
  7
  26
  1
  1
  101/19
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-2 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-2 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env (() () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env (() () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  44
  32
  12
  0
  32
  12
  44
  1
  1
  173/32
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-2) ...) (env ()))\""
  47
  35
  12
  0
  35
  12
  47
  1
  1
  191/35
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  44
  32
  12
  0
  32
  12
  44
  1
  1
  173/32
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  44
  32
  12
  0
  32
  12
  44
  1
  1
  173/32
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  44
  32
  12
  0
  32
  12
  44
  1
  1
  173/32
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env (() () ())))\""
  32
  23
  9
  0
  23
  9
  32
  1
  1
  122/23
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  500
  33
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env (() () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  32
  24
  8
  0
  24
  8
  32
  1
  1
  43/8
  ((1 1 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((3 3 0)))
'(clean-cache
  sat-1
  0
  500
  58
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((3 3 0)))
'(clean-cache
  sat-1
  0
  500
  58
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  74
  58
  16
  0
  58
  16
  74
  1
  1
  323/58
  ((3 3 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-)) (env (() () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4) (env (() () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-4) ...) (env ()))\""
  76
  60
  16
  0
  60
  16
  76
  1
  1
  67/12
  ((3 3 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((3 3 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  10
  5
  5
  0
  5
  5
  10
  1
  1
  28/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  49
  40
  9
  0
  40
  9
  49
  1
  1
  219/40
  ((1 1 0)))
'(clean-cache
  sat-1
  0
  500
  58
  app
  "\"'(eval (letrec (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  75
  59
  16
  0
  59
  16
  75
  1
  1
  329/59
  ((3 3 0)))
'(clean-cache
  sat-1
  0
  500
  58
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-4 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((2 3 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  10
  5
  5
  0
  5
  5
  10
  1
  1
  28/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4) (env (() () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  lambda
  "\"'(eval\n  (letrec (... () (phi (-> (λ (x1 x2 x3 x4) ...) <-)) try ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4) (env (() () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((3 3 0)))
'(clean-cache
  sat-1
  0
  500
  58
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((3 3 0)))
'(clean-cache
  sat-1
  0
  500
  58
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-4 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  28
  21
  7
  0
  21
  7
  28
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4) (env (() () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  app
  "\"'(eval (λ (n4) (-> (app p n1 n2 n3 n4) <-)) (env (() () () () ())))\""
  55
  44
  11
  0
  44
  11
  55
  1
  1
  60/11
  ((1 2 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  500
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  lambda
  "\"'(eval (letrec (... () (phi (-> (λ (x1) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  lambda
  "\"'(eval (app try (-> (λ (n5) ...) <-)) (env (() () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (() () () () () () ())))\""
  26
  14
  12
  0
  14
  12
  26
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-7) ...) (env ()))\""
  120
  95
  25
  0
  95
  25
  120
  1
  1
  529/95
  ((7 7 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env (() () () () () () () ())))\""
  87
  70
  17
  0
  70
  17
  87
  1
  1
  38/7
  ((5 5 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env (() () () () () () () ())))\""
  15
  13
  2
  0
  13
  2
  15
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  32
  21
  11
  0
  21
  11
  32
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env (() () () () () () () ())))\""
  11
  9
  2
  0
  9
  2
  11
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env (() () () () () () () ())))\""
  13
  11
  2
  0
  11
  2
  13
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  lambda
  "\"'(eval (λ (x4) (-> (λ (x5) ...) <-)) (env (() () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (() () () () () () ())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((6 6 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env (() () () () () () ())))\""
  24
  14
  10
  0
  14
  10
  24
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  lambda
  "\"'(eval (λ (x1) (-> (λ (x2) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  30
  17
  13
  0
  17
  13
  30
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-)) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (() () () () () () ())))\""
  22
  10
  12
  0
  10
  12
  22
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  lambda
  "\"'(eval (λ (x5) (-> (λ (x6) ...) <-)) (env (() () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((6 6 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  36
  24
  12
  0
  24
  12
  36
  1
  1
  43/8
  ((1 1 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  lambda
  "\"'(eval (λ (x2) (-> (λ (x3) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  20
  10
  10
  0
  10
  10
  20
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((7 7 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((7 7 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1) (env (() () () () () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  lambda
  "\"'(eval (app try (-> (λ (n6) ...) <-)) (env (() () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  lambda
  "\"'(eval (λ (x6) (-> (λ (x7) ...) <-)) (env (() () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (() () () () () () ())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  26
  17
  9
  0
  17
  9
  26
  1
  1
  90/17
  ((1 1 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  lambda
  "\"'(eval (app try (-> (λ (n7) ...) <-)) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (() () () () () () ())))\""
  22
  14
  8
  0
  14
  8
  22
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  32
  19
  13
  0
  19
  13
  32
  1
  1
  101/19
  ((1 1 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval (app (-> (app p n1) <-) n2) (env (() () () () () () () ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (() () () () () () ())))\""
  22
  10
  12
  0
  10
  12
  22
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  20
  10
  10
  0
  10
  10
  20
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval (letrec (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  119
  94
  25
  0
  94
  25
  119
  1
  1
  523/94
  ((7 7 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((7 9 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (() () () () () () ())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (() () () () () () ())))\""
  20
  10
  10
  0
  10
  10
  20
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((7 7 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (app p n1) (-> n2 <-)) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (() () () () () () ())))\""
  22
  10
  12
  0
  10
  12
  22
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env (() () () () () () ())))\""
  22
  14
  8
  0
  14
  8
  22
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (app (app p n1) n2) (-> n3 <-)) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (() () () () () () ())))\""
  30
  17
  13
  0
  17
  13
  30
  1
  1
  90/17
  ((1 1 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  118
  93
  25
  0
  93
  25
  118
  1
  1
  517/93
  ((7 7 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env (() () () () () () () ())))\""
  17
  15
  2
  0
  15
  2
  17
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval (app (-> (app (app p n1) n2) <-) n3) (env (() () () () () () () ())))\""
  9
  7
  2
  0
  7
  2
  9
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((6 6 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((6 6 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (() () () () () () ())))\""
  24
  14
  10
  0
  14
  10
  24
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  lambda
  "\"'(eval (λ (x3) (-> (λ (x4) ...) <-)) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((5 6 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (() () () () () () ())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  500
  96
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (() () () () () () ())))\""
  69
  54
  15
  0
  54
  15
  69
  1
  1
  299/54
  ((5 5 0)))
'(clean-cache
  sat-2
  0
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  string
  "\"'(eval (app println (-> \"trying\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  32
  24
  8
  0
  24
  8
  32
  1
  1
  43/8
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  500
  100
  lambda
  "\"'(eval (app try (-> (λ (n6) ...) <-)) (env (() () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  101
  82
  19
  0
  82
  19
  101
  1
  1
  463/82
  ((5 6 0)))
'(clean-cache
  sat-3
  0
  500
  100
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((5 6 0)))
'(clean-cache
  sat-3
  0
  500
  100
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  28
  21
  7
  0
  21
  7
  28
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((5 6 0)))
'(clean-cache
  sat-3
  0
  500
  100
  lambda
  "\"'(eval\n  (letrec (... println (phi (-> (λ (x1 x2 x3 x4 x5 x6 x7) ...) <-)) try ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  lambda
  "\"'(eval (app try (-> (λ (n5) ...) <-)) (env (() () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  104
  85
  19
  0
  85
  19
  104
  1
  1
  479/85
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((5 6 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  let
  "\"'(eval (letrec (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  letrec
  "\"'(eval ((top) letrec (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  lambda
  "\"'(eval (app try (-> (λ (n7) ...) <-)) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  26
  19
  7
  0
  19
  7
  26
  1
  1
  101/19
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  63
  54
  9
  0
  54
  9
  63
  1
  1
  299/54
  ((3 4 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((5 6 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  102
  83
  19
  0
  83
  19
  102
  1
  1
  469/83
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  69
  58
  11
  0
  58
  11
  69
  1
  1
  160/29
  ((4 4 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  500
  100
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  lambda
  "\"'(eval (letrec (... () (println (-> (λ (s) ...) <-)) phi ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  6
  4
  2
  0
  4
  2
  6
  1
  1
  9/2
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> move-coord-v <-) (move move-coord-x _) _) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((57 58 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((57 58 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env (() ())))\""
  38
  18
  20
  0
  18
  20
  38
  1
  1
  46/9
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((62 64 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁)) (env (())))\""
  537
  404
  133
  0
  404
  133
  537
  1
  1
  1127/202
  ((65 67 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env (())))\""
  7
  3
  4
  0
  3
  4
  7
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  number
  "\"'(eval (app horizon (app draw) (-> 0 <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((64 67 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env (())))\""
  540
  407
  133
  0
  407
  133
  540
  1
  1
  2270/407
  ((67 69 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval (letrec (... () (loop (-> (λ () ...) <-)) () ...) ...) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  542
  409
  133
  0
  409
  133
  542
  1
  1
  2273/409
  ((68 70 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) empty-board player-one player-two) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env (() ())))\""
  76
  54
  22
  0
  54
  22
  76
  1
  1
  151/27
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env (())))\""
  7
  3
  4
  0
  3
  4
  7
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((64 66 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  string
  "\"'(eval (app error (-> \"invalid match for move-coord\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env (())))\""
  545
  409
  136
  0
  409
  136
  545
  1
  1
  2279/409
  ((61 63 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (())))\""
  537
  404
  133
  0
  404
  133
  537
  1
  1
  1127/202
  ((67 69 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo that-mark this-mark)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  749/134
  ((61 62 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo that-mark this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env (())))\""
  540
  407
  133
  0
  407
  133
  540
  1
  1
  2270/407
  ((61 63 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) (app make-ai-action (app X))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (match some-v-v ((some some-v-x) (-> some-v-x <-)) _) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((58 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval (λ (co) (-> (match (app equal? co₀ co) ...) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((59 61 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((64 66 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           blank?\n           (move-coord (-> (λ (move-coord-v) ...) <-))\n           move-horizon\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           fold/coord\n           (min-maybe-move (-> (λ (mmo mo₁) ...) <-))\n           max-maybe-move\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((57 58 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (λ (c) (-> (app marked? (app b (app coord r c))) <-)) (env (() () ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((59 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  537
  404
  133
  0
  404
  133
  537
  1
  1
  1127/202
  ((54 56 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env (() ())))\""
  22
  16
  6
  0
  16
  6
  22
  1
  1
  21/4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (λ (bo) (-> (app error 'human-action \"not implemented\") <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> move-horizon-v <-) (move _ move-horizon-x) _) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((54 56 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app f (app coord r c) (-> x <-)) (env (() () ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((63 65 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env (())))\""
  85
  58
  27
  0
  58
  27
  85
  1
  1
  163/29
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  8
  6
  2
  0
  6
  2
  8
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2250/403
  ((61 64 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env (() ())))\""
  51
  38
  13
  0
  38
  13
  51
  1
  1
  205/38
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env (() ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (... ormap (andmap (-> (λ (f xs) ...) <-)) wins? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval (λ (ma) (-> (λ (bo) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((58 59 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval (app foldl (-> (λ (r x) ...) <-) x is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  string
  "\"'(eval (app error (-> \"invalid match for move-horizon\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env (() ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((1 2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env (())))\""
  543
  408
  135
  0
  408
  135
  543
  1
  1
  379/68
  ((63 64 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env (() () ())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (())))\""
  538
  405
  133
  0
  405
  133
  538
  1
  1
  2258/405
  ((66 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) mark bo) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((64 66 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env (())))\""
  547
  412
  135
  0
  412
  135
  547
  1
  1
  573/103
  ((70 73 3)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2250/403
  ((65 67 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  letrec
  "\"'(eval (lettypes cons ... player (letrec (some-v ... is) ...)) (env ()))\""
  546
  413
  133
  0
  413
  133
  546
  1
  1
  2291/413
  ((57 59 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  538
  405
  133
  0
  405
  133
  538
  1
  1
  2258/405
  ((58 60 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env (())))\""
  543
  408
  135
  0
  408
  135
  543
  1
  1
  379/68
  ((57 59 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval (let (_) (-> (match this-play ...) <-)) (env (())))\""
  539
  406
  133
  0
  406
  133
  539
  1
  1
  323/58
  ((70 99 3)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app play-turn empty-board player-one (-> player-two <-)) (env (())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  37/7
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  19
  10
  9
  0
  10
  9
  19
  1
  1
  27/5
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord rc rc) m) (env (() ())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  5
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((88 97 3)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((90 97 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (... move-horizon (mark⁻¹ (-> (λ (ma) ...) <-)) empty-board ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval (let (bo) (-> (match (app wins? bo mark) ...) <-)) (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  173/31
  ((76 79 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env (())))\""
  543
  407
  136
  0
  407
  136
  543
  1
  1
  2270/407
  ((71 73 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env (())))\""
  538
  403
  135
  0
  403
  135
  538
  1
  1
  173/31
  ((67 69 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval (letrec (... wins? (full? (-> (λ (b) ...) <-)) oc< ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((69 71 3)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((68 71 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((63 65 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env (() ())))\""
  76
  54
  22
  0
  54
  22
  76
  1
  1
  151/27
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app marked? (-> (app b (app coord r c)) <-)) (env (() () ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 67 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  let
  "\"'(eval (λ () (-> (let (co) ...) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 68 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app play-turn bo that-play (-> this-play <-)) (env (())))\""
  23
  16
  7
  0
  16
  7
  23
  1
  1
  47/8
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (... mark⁻¹ (empty-board (-> (λ (co) ...) <-)) board-mark ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval (app andmap (-> (λ (r) ...) <-) is) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2251/403
  ((55 56 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  546
  410
  136
  0
  410
  136
  546
  1
  1
  1142/205
  ((57 58 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app player (app X) (-> (app make-ai-action (app X)) <-)) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((64 66 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  546
  410
  136
  0
  410
  136
  546
  1
  1
  1142/205
  ((70 72 3)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval (λ (co₀ ma bo) (-> (λ (co) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env (())))\""
  545
  410
  135
  0
  410
  135
  545
  1
  1
  2283/410
  ((65 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app some-v (-> (app maximin bo that-mark this-mark) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 68 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  30
  23
  7
  0
  23
  7
  30
  1
  1
  124/23
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  2245/402
  ((65 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  24
  16
  8
  0
  16
  8
  24
  1
  1
  85/16
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (... () (some-v (-> (λ (some-v-v) ...) <-)) marked? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           draw-board!\n           (play-turn (-> (λ (bo this-play that-play) ...) <-))\n           play-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((68 70 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env (() ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  547
  414
  133
  0
  414
  133
  547
  1
  1
  255/46
  ((70 72 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-))) (env (())))\""
  540
  407
  133
  0
  407
  133
  540
  1
  1
  2270/407
  ((69 70 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  30
  19
  11
  0
  19
  11
  30
  1
  1
  102/19
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 67 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (λ (c x) (-> (app f (app coord r c) x) <-)) (env (() () ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 68 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((68 69 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (letrec (some-v ... is) (-> (app zero-player-game) <-)) (env ()))\""
  545
  412
  133
  0
  412
  133
  545
  1
  1
  2287/412
  ((72 74 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval (app andmap (-> (λ (r) ...) <-) is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  1123/201
  ((69 70 3)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           empty-board\n           (board-mark (-> (λ (co₀ ma bo) ...) <-))\n           board-lookup\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (... board-lookup (marked-with? (-> (λ (b co m) ...) <-)) i⁻¹ ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env (())))\""
  539
  406
  133
  0
  406
  133
  539
  1
  1
  2263/406
  ((68 70 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           board-mark\n           (board-lookup (-> (λ (co bo) ...) <-))\n           marked-with?\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 66 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  45
  22
  23
  0
  22
  23
  45
  1
  1
  113/22
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env (())))\""
  41
  28
  13
  0
  28
  13
  41
  1
  1
  151/28
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2250/403
  ((59 61 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env (() ())))\""
  11
  8
  3
  0
  8
  3
  11
  1
  1
  41/8
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  let
  "\"'(eval (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((62 63 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  19
  10
  9
  0
  10
  9
  19
  1
  1
  27/5
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 68 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  letrec
  "\"'(eval (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((64 66 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-coord\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env (())))\""
  15
  7
  8
  0
  7
  8
  15
  1
  1
  40/7
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((64 66 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (letrec (...\n           zero-player-game\n           (is\n            (->\n             (app\n              cons\n              (app Ze)\n              (app cons (app On) (app cons (app Tw) (app nil))))\n             <-))\n           ()\n           ...)\n    ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2251/403
  ((65 66 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app win) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           max-maybe-move\n           (minimax (-> (λ (bo this-mark that-mark) ...) <-))\n           maximin\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 69 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (match (-> (app equal? co₀ co) <-) (#f) _) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 68 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((68 70 3)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env (())))\""
  24
  16
  8
  0
  16
  8
  24
  1
  1
  85/16
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (letrec (loop) (-> (app loop) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((68 69 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-horizon\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env (())))\""
  537
  404
  133
  0
  404
  133
  537
  1
  1
  2253/404
  ((66 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma))) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env (())))\""
  545
  410
  135
  0
  410
  135
  545
  1
  1
  2283/410
  ((67 69 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 67 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app some-v (-> (app minimax bo that-mark this-mark) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (λ (r) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((61 63 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((56 57 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((56 57 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env (())))\""
  544
  409
  135
  0
  409
  135
  544
  1
  1
  2276/409
  ((61 63 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  number
  "\"'(eval (app horizon (app win) (-> 0 <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval (app foldl (-> (λ (c x) ...) <-) x is) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  57
  28
  29
  0
  28
  29
  57
  1
  1
  145/28
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((68 70 3)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> this-play <-) (player mark action)) (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  104/17
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 68 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  537
  404
  133
  0
  404
  133
  537
  1
  1
  1127/202
  ((67 69 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           two-player-game\n           (one-player-game (-> (λ () ...) <-))\n           zero-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 68 3)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app lose) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2250/403
  ((67 77 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (match (app b co) ((blank) (-> (app #f) <-)) (marked m*)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  11
  8
  3
  0
  8
  3
  11
  1
  1
  41/8
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  number
  "\"'(eval (app + sc (-> 1 <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env (())))\""
  25
  16
  9
  0
  16
  9
  25
  1
  1
  5
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) that-mark this-mark) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app play-turn (-> empty-board <-) player-one player-two) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env (())))\""
  543
  410
  133
  0
  410
  133
  543
  1
  1
  1139/205
  ((70 72 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  76
  54
  22
  0
  54
  22
  76
  1
  1
  151/27
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 68 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (... horizon< (horizon-add1 (-> (λ (h) ...) <-)) foldl ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (... one-player-game (zero-player-game (-> (λ () ...) <-)) is ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co mark bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval (app ormap (-> (λ (r) ...) <-) is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2251/403
  ((67 68 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  2245/402
  ((66 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  542
  409
  133
  0
  409
  133
  542
  1
  1
  2273/409
  ((69 70 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 68 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app play-turn bo (-> that-play <-) this-play) (env (())))\""
  23
  16
  7
  0
  16
  7
  23
  1
  1
  47/8
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((69 70 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (... oc< (horizon< (-> (λ (h₀ h₁) ...) <-)) horizon-add1 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env (())))\""
  539
  404
  135
  0
  404
  135
  539
  1
  1
  2253/404
  ((69 71 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  2245/402
  ((65 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 66 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           human-action\n           (make-ai-action (-> (λ (ma) ...) <-))\n           draw-board!\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((68 69 3)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-)) (env (())))\""
  537
  404
  133
  0
  404
  133
  537
  1
  1
  1127/202
  ((66 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 66 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app coord r c) x) (env (() () ())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (... foldl (fold/coord (-> (λ (f x) ...) <-)) min-maybe-move ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 69 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  76
  54
  22
  0
  54
  22
  76
  1
  1
  151/27
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env (())))\""
  48
  35
  13
  0
  35
  13
  48
  1
  1
  188/35
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env (())))\""
  543
  407
  136
  0
  407
  136
  543
  1
  1
  2270/407
  ((65 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  string
  "\"'(eval (app display (-> \"Cat's game.\\n\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((68 69 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 67 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env (() ())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  11/2
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2250/403
  ((67 69 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env (() ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  number
  "\"'(eval (app horizon (app draw) (-> 0 <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((68 70 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 69 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env (() ())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app minimax bo (-> that-mark <-) this-mark) (env (() ())))\""
  29
  18
  11
  0
  18
  11
  29
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app board-mark co mark (-> bo <-)) (env (())))\""
  11
  8
  3
  0
  8
  3
  11
  1
  1
  41/8
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2251/403
  ((66 68 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app horizon (-> (app lose) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app play-turn empty-board (-> player-one <-) player-two) (env (())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  37/7
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 69 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> display <-) \"Cat's game.\\n\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval (λ (move-horizon-v) (-> (match move-horizon-v ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((69 70 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (λ (c) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 69 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> marked? <-) (app b (app coord r c))) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 68 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app minimax bo that-mark this-mark)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app player (-> (app X) <-) (app make-ai-action (app X))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           minimax\n           (maximin (-> (λ (bo this-mark that-mark) ...) <-))\n           human-action\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord rc rc) m) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env (())))\""
  541
  408
  133
  0
  408
  133
  541
  1
  1
  2269/408
  ((69 71 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 69 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  11
  8
  3
  0
  8
  3
  11
  1
  1
  41/8
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval (λ (move-coord-v) (-> (match move-coord-v ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((61 63 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (match (-> (app wins? bo mark) <-) (#f) _) (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  2245/402
  ((63 64 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env (())))\""
  14
  9
  5
  0
  9
  5
  14
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           move-coord\n           (move-horizon (-> (λ (move-horizon-v) ...) <-))\n           mark⁻¹\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 69 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app minimax bo that-mark (-> this-mark <-)) (env (() ())))\""
  18
  9
  9
  0
  9
  9
  18
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval (app andmap (-> (λ (c) ...) <-) is) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  quoted
  "\"'(eval (app error (-> 'human-action <-) \"not implemented\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (let (_) (-> (app display \"Cat's game.\\n\") <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  14/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env (())))\""
  541
  408
  133
  0
  408
  133
  541
  1
  1
  2269/408
  ((73 75 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (... marked? (blank? (-> (λ (a) ...) <-)) move-coord ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  8
  6
  2
  0
  6
  2
  8
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  25/4
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 69 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env (())))\""
  66
  32
  34
  0
  32
  34
  66
  1
  1
  21/4
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app minimax (-> bo <-) that-mark this-mark) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env (())))\""
  37
  30
  7
  0
  30
  7
  37
  1
  1
  17/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  11/2
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((68 69 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 68 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env (())))\""
  23
  19
  4
  0
  19
  4
  23
  1
  1
  102/19
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           play-turn\n           (play-game (-> (λ (player-one player-two) ...) <-))\n           two-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (... i⁻¹ (ormap (-> (λ (f xs) ...) <-)) andmap ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env (())))\""
  8
  5
  3
  0
  5
  3
  8
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (... andmap (wins? (-> (λ (b m) ...) <-)) full? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((60 62 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (... horizon-add1 (foldl (-> (λ (f acc l) ...) <-)) fold/coord ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((61 62 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  2245/402
  ((67 69 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env (())))\""
  538
  405
  133
  0
  405
  133
  538
  1
  1
  2257/405
  ((69 71 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (... marked-with? (i⁻¹ (-> (λ (i) ...) <-)) ormap ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 68 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((68 70 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app maximin bo (-> that-mark <-) this-mark) (env (() ())))\""
  18
  9
  9
  0
  9
  9
  18
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env (())))\""
  542
  406
  136
  0
  406
  136
  542
  1
  1
  1133/203
  ((67 68 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 68 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((68 70 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  31
  23
  8
  0
  23
  8
  31
  1
  1
  122/23
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app marked-with? b (-> (app coord rc rc) <-) m) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  string
  "\"'(eval (app error 'human-action (-> \"not implemented\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 69 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app board-mark co (-> mark <-) bo) (env (())))\""
  37
  30
  7
  0
  30
  7
  37
  1
  1
  17/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  538
  405
  133
  0
  405
  133
  538
  1
  1
  2258/405
  ((67 69 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval (app ormap (-> (λ (c) ...) <-) is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env (())))\""
  539
  406
  133
  0
  406
  133
  539
  1
  1
  1133/203
  ((64 66 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  30
  19
  11
  0
  19
  11
  30
  1
  1
  102/19
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (... full? (oc< (-> (λ (oc₀ oc₁) ...) <-)) horizon< ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((60 61 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((60 62 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (... maximin (human-action (-> (λ (bo) ...) <-)) make-ai-action ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  30
  23
  7
  0
  23
  7
  30
  1
  1
  124/23
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  23
  19
  4
  0
  19
  4
  23
  1
  1
  102/19
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) bo that-play this-play) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval (app andmap (-> (λ (rc) ...) <-) is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 66 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  30
  23
  7
  0
  23
  7
  30
  1
  1
  124/23
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  number
  "\"'(eval (app horizon (app lose) (-> 0 <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 69 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((68 69 3)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env (())))\""
  19
  13
  6
  0
  13
  6
  19
  1
  1
  68/13
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app maximin bo that-mark (-> this-mark <-)) (env (() ())))\""
  29
  18
  11
  0
  18
  11
  29
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           play-game\n           (two-player-game (-> (λ () ...) <-))\n           one-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           min-maybe-move\n           (max-maybe-move (-> (λ (mmo mo₁) ...) <-))\n           minimax\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval (app andmap (-> (λ (c) ...) <-) is) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env (())))\""
  14
  8
  6
  0
  8
  6
  14
  1
  1
  21/4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env (())))\""
  540
  407
  133
  0
  407
  133
  540
  1
  1
  2270/407
  ((67 68 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env (())))\""
  543
  407
  136
  0
  407
  136
  543
  1
  1
  2270/407
  ((67 68 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 69 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval (app fold/coord (-> (λ (co mm) ...) <-) (app none)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval (app fold/coord (-> (λ (co mm) ...) <-) (app none)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  30
  23
  7
  0
  23
  7
  30
  1
  1
  124/23
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (... some-v (marked? (-> (λ (a) ...) <-)) blank? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app f (-> (app coord r c) <-) x) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  749/134
  ((65 66 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env (() ())))\""
  37
  30
  7
  0
  30
  7
  37
  1
  1
  17/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 69 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 67 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (let (... () (co (-> (app action bo) <-)) () ...) ...) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 66 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((63 65 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval\n  (letrec (... make-ai-action (draw-board! (-> (λ (bo) ...) <-)) play-turn ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  let
  "\"'(eval (match (app full? bo) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  19/4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  542
  407
  135
  0
  407
  135
  542
  1
  1
  2267/407
  ((68 69 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  string
  "\"'(eval (app error (-> \"invalid match for some-v\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> minimax <-) bo that-mark this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  let
  "\"'(eval (λ (bo this-play that-play) (-> (let (_) ...) <-)) (env (())))\""
  540
  407
  133
  0
  407
  133
  540
  1
  1
  2265/407
  ((73 74 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord rc rc) (-> m <-)) (env (() ())))\""
  76
  54
  22
  0
  54
  22
  76
  1
  1
  151/27
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app play-turn (-> bo <-) that-play this-play) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  45
  22
  23
  0
  22
  23
  45
  1
  1
  113/22
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  lambda
  "\"'(eval (app andmap (-> (λ (rc) ...) <-) is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 2)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((68 70 1)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  app
  "\"'(eval (app horizon (-> (app win) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  500
  33
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  500
  33
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env ((□? (x1 x2)))))\""
  26
  13
  8
  5
  9
  5
  14
  1
  17/20
  68/13
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  500
  33
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-2 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  500
  33
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  124
  89
  28
  7
  57
  19
  76
  1
  2321/2880
  500/89
  ((9 9 0)))
'(clean-cache
  sat-small
  1
  500
  33
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env ((□? (x1 x2)))))\""
  71
  47
  19
  5
  30
  13
  43
  1
  131/171
  249/47
  ((4 4 0)))
'(clean-cache
  sat-small
  1
  500
  33
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  113
  78
  28
  7
  52
  19
  71
  1
  245/288
  433/78
  ((8 8 0)))
'(clean-cache
  sat-small
  1
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  11
  5
  3
  3
  2
  1
  3
  1
  2/9
  26/5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  500
  33
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2)))))\""
  24
  13
  8
  3
  8
  4
  12
  1
  3/4
  68/13
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  500
  33
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  15
  9
  3
  3
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  500
  33
  lambda
  "\"'(eval (letrec (... () (phi (-> (λ (x1 x2) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  500
  33
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  500
  33
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  91
  63
  21
  7
  40
  15
  55
  1
  916/1035
  335/63
  ((6 6 0)))
'(clean-cache
  sat-small
  1
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  500
  33
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env ((□? (x1 x2)))))\""
  30
  19
  8
  3
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-small
  1
  500
  33
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  500
  33
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  500
  33
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  500
  33
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  113
  78
  28
  7
  52
  19
  71
  1
  245/288
  433/78
  ((8 8 0)))
'(clean-cache
  sat-small
  1
  500
  33
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  108
  74
  28
  6
  50
  19
  69
  1
  493/558
  203/37
  ((8 8 0)))
'(clean-cache
  sat-small
  1
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  11
  4
  2
  5
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  500
  33
  app
  "\"'(eval (letrec (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  119
  85
  28
  6
  59
  19
  78
  1
  2681/3060
  469/85
  ((9 9 0)))
'(clean-cache
  sat-small
  1
  500
  33
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  120
  86
  28
  6
  58
  19
  77
  1
  2501/2970
  237/43
  ((8 9 0)))
'(clean-cache
  sat-small
  1
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  11
  5
  3
  3
  2
  1
  3
  1
  2/9
  26/5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  500
  33
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-2) ...) (env ()))\""
  120
  86
  28
  6
  60
  19
  79
  1
  2771/3150
  475/86
  ((8 8 0)))
'(clean-cache
  sat-small
  1
  500
  33
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  500
  33
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  500
  33
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  9
  3
  5
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  500
  33
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-2 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  218
  129
  48
  41
  33
  15
  48
  1
  281/432
  228/43
  ((40 41 0)))
'(clean-cache
  sat-1
  1
  500
  58
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-4 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  28
  13
  8
  7
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  500
  58
  lambda
  "\"'(eval\n  (letrec (... () (phi (-> (λ (x1 x2 x3 x4) ...) <-)) try ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  853
  631
  178
  44
  211
  59
  270
  1
  42041003/52453170
  3616/631
  ((245 250 6)))
'(clean-cache
  sat-1
  1
  500
  58
  lambda
  "\"'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  9
  5
  14
  1
  17/20
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-4) ...) (env ()))\""
  853
  631
  178
  44
  213
  59
  272
  1
  22377049/27130950
  3617/631
  ((232 237 5)))
'(clean-cache
  sat-1
  1
  500
  58
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  500
  58
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  36
  19
  8
  9
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  500
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  71
  43
  19
  9
  17
  6
  23
  1
  11/17
  227/43
  ((5 5 0)))
'(clean-cache
  sat-1
  1
  500
  58
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  603
  431
  131
  41
  123
  41
  164
  1
  3839/6480
  2293/431
  ((183 187 4)))
'(clean-cache
  sat-1
  1
  500
  58
  app
  "\"'(eval (letrec (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  852
  630
  178
  44
  212
  59
  271
  1
  43849733/53357535
  3611/630
  ((255 260 7)))
'(clean-cache
  sat-1
  1
  500
  58
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  752
  574
  133
  45
  157
  43
  200
  1
  124829/146124
  75/14
  ((223 229 5)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  500
  58
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  34
  19
  8
  7
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  9
  3
  5
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  19
  9
  3
  7
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-4 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  21
  9
  3
  9
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  36
  19
  8
  9
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  500
  58
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  846
  623
  178
  45
  205
  59
  264
  1
  83539387/103097610
  3613/623
  ((247 253 6)))
'(clean-cache
  sat-1
  1
  500
  58
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  846
  623
  178
  45
  205
  59
  264
  1
  83539387/103097610
  3613/623
  ((237 242 5)))
'(clean-cache
  sat-1
  1
  500
  58
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  500
  58
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  19
  9
  5
  5
  4
  1
  5
  1
  4/25
  16/3
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  15
  4
  2
  9
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  23
  9
  3
  11
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  807
  585
  178
  44
  179
  59
  238
  1
  25135/29484
  3314/585
  ((239 245 5)))
'(clean-cache
  sat-1
  1
  500
  58
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  857
  634
  178
  45
  210
  59
  269
  1
  8191153/10309761
  1859/317
  ((253 259 6)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  26
  13
  8
  5
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  500
  58
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  827
  605
  178
  44
  193
  59
  252
  1
  3715279/4439610
  3462/605
  ((231 236 5)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  19
  9
  5
  5
  4
  1
  5
  1
  4/25
  16/3
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  841
  619
  178
  44
  203
  59
  262
  1
  41679257/50644440
  3548/619
  ((234 239 7)))
'(clean-cache
  sat-1
  1
  500
  58
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  34
  19
  8
  7
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  85
  51
  19
  15
  21
  6
  27
  1
  13/21
  271/51
  ((7 7 0)))
'(clean-cache
  sat-1
  1
  500
  58
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  500
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  28
  13
  8
  7
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  500
  58
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  lambda
  "\"'(eval (λ (x2) (-> (λ (x3) ...) <-)) (env ((□? (x2)) (□? (x1)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  32
  9
  3
  20
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  257
  99
  60
  98
  13
  9
  22
  1
  9/17
  61/11
  ((53 55 1)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  24
  9
  3
  12
  5
  2
  7
  1
  5/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  500
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  451
  183
  108
  160
  24
  17
  41
  1
  25/54
  330/61
  ((154 158 3)))
'(clean-cache
  sat-2
  1
  500
  96
  lambda
  "\"'(eval\n  (λ (x4) (-> (λ (x5) ...) <-))\n  (env ((□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  68
  15
  13
  40
  7
  5
  12
  1
  7/10
  16/3
  ((2 2 0)))
'(clean-cache
  sat-2
  1
  500
  96
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  30
  13
  2
  15
  5
  2
  7
  1
  5/9
  5
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  30
  9
  3
  18
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  78
  25
  13
  40
  9
  5
  14
  1
  9/14
  134/25
  ((3 4 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  53
  13
  8
  32
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  500
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  36
  19
  2
  15
  7
  2
  9
  1
  7/13
  5
  ((2 2 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  500
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-7) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  500
  96
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval (letrec (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  500
  96
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 6 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  68
  15
  13
  40
  7
  5
  12
  1
  7/10
  16/3
  ((3 3 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  134
  27
  31
  76
  7
  7
  14
  1
  7/10
  152/27
  ((11 11 0)))
'(clean-cache
  sat-2
  1
  500
  96
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  153
  51
  30
  72
  16
  10
  26
  1
  32/51
  91/17
  ((17 17 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  68
  15
  13
  40
  7
  5
  12
  1
  7/10
  16/3
  ((3 3 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  500
  96
  lambda
  "\"'(eval (letrec (... () (phi (-> (λ (x1) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  28
  9
  3
  16
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  27
  10
  2
  15
  4
  2
  6
  1
  4/7
  5
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  134
  27
  31
  76
  7
  7
  14
  1
  7/10
  152/27
  ((11 12 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  53
  13
  8
  32
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  500
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  255
  99
  60
  96
  13
  9
  22
  1
  9/17
  61/11
  ((52 54 1)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  22
  9
  3
  10
  5
  2
  7
  1
  5/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  500
  96
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  78
  25
  13
  40
  9
  5
  14
  1
  9/14
  134/25
  ((4 4 0)))
'(clean-cache
  sat-2
  1
  500
  96
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  26
  9
  3
  14
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  111
  37
  20
  54
  9
  6
  15
  1
  9/14
  202/37
  ((9 9 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((2 2 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  500
  96
  lambda
  "\"'(eval (λ (x3) (-> (λ (x4) ...) <-)) (env ((□? (x3)) (□? (x2)) (□? (x1)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  24
  7
  2
  15
  3
  2
  5
  1
  3/5
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  291
  131
  60
  100
  14
  10
  24
  1
  10/19
  725/131
  ((62 63 1)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  68
  15
  13
  40
  7
  5
  12
  1
  7/10
  16/3
  ((3 3 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x3 x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  lambda
  "\"'(eval (λ (x1) (-> (λ (x2) ...) <-)) (env ((□? (x1)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  93
  19
  20
  54
  7
  6
  13
  1
  7/10
  104/19
  ((5 5 0)))
'(clean-cache
  sat-2
  1
  500
  96
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n5) ...) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  1
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n6) ...) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  1
  0
  6
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  222
  99
  43
  80
  13
  8
  21
  1
  3/7
  541/99
  ((35 36 0)))
'(clean-cache
  sat-2
  1
  500
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  39
  22
  2
  15
  8
  2
  10
  1
  8/15
  5
  ((2 2 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x4 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  134
  27
  31
  76
  7
  7
  14
  1
  7/10
  152/27
  ((10 10 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  53
  13
  8
  32
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  93
  19
  20
  54
  7
  6
  13
  1
  7/10
  104/19
  ((5 5 0)))
'(clean-cache
  sat-2
  1
  500
  96
  lambda
  "\"'(eval\n  (λ (x5) (-> (λ (x6) ...) <-))\n  (env ((□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  6
  1
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  111
  37
  20
  54
  9
  6
  15
  1
  9/14
  202/37
  ((8 9 0)))
'(clean-cache
  sat-2
  1
  500
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n7) ...) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  93
  19
  20
  54
  7
  6
  13
  1
  7/10
  104/19
  ((5 5 0)))
'(clean-cache
  sat-2
  1
  500
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  16
  2
  15
  6
  2
  8
  1
  6/11
  5
  ((2 2 0)))
'(clean-cache
  sat-2
  1
  500
  96
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x4) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((2 2 0)))
'(clean-cache
  sat-2
  1
  500
  96
  lambda
  "\"'(eval\n  (λ (x6) (-> (λ (x7) ...) <-))\n  (env ((□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  7
  1
  0
  6
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  9
  3
  8
  5
  2
  7
  1
  5/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  500
  96
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  168
  61
  31
  76
  9
  7
  16
  1
  9/14
  338/61
  ((20 21 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  9
  5
  14
  1
  17/20
  68/13
  ((2 2 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  28
  9
  3
  16
  5
  2
  7
  1
  5/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  string
  "\"'(eval (app println (-> \"trying\" <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  11
  7
  2
  2
  3
  1
  4
  1
  3/8
  33/7
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n6) ...) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  1
  0
  6
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  7
  3
  2
  2
  1
  1
  2
  1
  1/4
  4
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  104
  47
  19
  38
  20
  7
  27
  1
  13/19
  249/47
  ((12 12 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  19
  8
  16
  12
  4
  16
  1
  3/4
  100/19
  ((2 2 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  30
  9
  3
  18
  5
  2
  7
  1
  5/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((2 2 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  19
  8
  14
  12
  4
  16
  1
  3/4
  100/19
  ((2 2 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  letrec
  "\"'(eval ((top) letrec (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  35
  13
  8
  14
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  9
  5
  14
  1
  17/20
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  32
  9
  3
  20
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  500
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  112
  51
  19
  42
  21
  6
  27
  1
  13/21
  271/51
  ((10 10 0)))
'(clean-cache
  sat-3
  1
  500
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  let
  "\"'(eval (letrec (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  22
  9
  3
  10
  5
  2
  7
  1
  5/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  500
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  299
  129
  48
  122
  33
  15
  48
  1
  281/432
  228/43
  ((65 66 1)))
'(clean-cache
  sat-3
  1
  100
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  500
  100
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  19
  8
  16
  12
  4
  16
  1
  3/4
  100/19
  ((1 2 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  26
  9
  3
  14
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  98
  43
  19
  36
  17
  6
  23
  1
  11/17
  227/43
  ((11 12 0)))
'(clean-cache
  sat-3
  1
  500
  100
  lambda
  "\"'(eval (letrec (... () (println (-> (λ (s) ...) <-)) phi ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  35
  13
  8
  14
  8
  4
  12
  1
  3/4
  68/13
  ((2 2 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  9
  5
  14
  1
  17/20
  68/13
  ((2 2 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  35
  13
  8
  14
  8
  4
  12
  1
  3/4
  68/13
  ((2 2 0)))
'(clean-cache
  sat-3
  1
  500
  100
  lambda
  "\"'(eval\n  (letrec (... println (phi (-> (λ (x1 x2 x3 x4 x5 x6 x7) ...) <-)) try ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n5) ...) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  1
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  9
  3
  8
  5
  2
  7
  1
  5/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  19
  8
  18
  12
  4
  16
  1
  3/4
  100/19
  ((2 2 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((2 2 0)))
'(clean-cache
  sat-3
  1
  500
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n7) ...) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  96
  43
  19
  34
  17
  6
  23
  1
  11/17
  227/43
  ((10 11 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  500
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  19
  8
  18
  12
  4
  16
  1
  3/4
  100/19
  ((2 2 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((2 2 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  24
  9
  3
  12
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  112
  43
  19
  50
  20
  9
  29
  1
  38/51
  227/43
  ((11 11 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((1 2 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env ((□? (f)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  7
  6
  0
  1
  4
  0
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  500
  100
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  500
  100
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  500
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  1714
  1231
  410
  73
  666
  179
  845
  1
  289249/491400
  7484/1231
  ((384 393 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  49
  32
  12
  5
  25
  8
  33
  1
  37/46
  173/32
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  77
  46
  23
  8
  34
  13
  47
  1
  11/16
  247/46
  ((6 7 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  1698
  1215
  410
  73
  654
  179
  833
  1
  283873/482580
  274/45
  ((416 434 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  31
  17
  4
  10
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  87
  57
  23
  7
  42
  13
  55
  1
  111/152
  102/19
  ((7 7 1)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  35
  17
  4
  14
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  31
  17
  4
  10
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval (app andmap (-> (λ (c) ...) <-) is) (env ((□? (r)) (□? (b)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  1717
  1234
  410
  73
  668
  179
  847
  1
  290089/492660
  3748/617
  ((358 366 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  letrec
  "\"'(eval (lettypes cons ... player (letrec (some-v ... is) ...)) (env ()))\""
  1711
  1229
  410
  72
  671
  179
  850
  1
  300379/497700
  7447/1229
  ((326 334 9)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval (app andmap (-> (λ (rc) ...) <-) is) (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  1746
  1261
  413
  72
  691
  182
  873
  1
  288409/490140
  7655/1261
  ((388 397 14)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  3
  0
  3
  1
  3/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  1696
  1214
  410
  72
  654
  179
  833
  1
  283369/482580
  7383/1214
  ((374 402 16)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  66
  32
  20
  14
  7
  4
  11
  1
  7/19
  87/16
  ((5 6 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  29
  12
  9
  8
  1
  2
  3
  1
  1/16
  21/4
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  1697
  1215
  410
  72
  654
  179
  833
  1
  94783/160860
  2464/405
  ((431 461 12)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  number
  "\"'(eval\n  (app horizon (app draw) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((364 372 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  1718
  1231
  414
  73
  667
  182
  849
  1
  292189/492660
  7457/1231
  ((365 374 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (... andmap (wins? (-> (λ (b m) ...) <-)) full? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (... i⁻¹ (ormap (-> (λ (f xs) ...) <-)) andmap ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  1783
  1289
  421
  73
  694
  183
  877
  1
  73441/125370
  7975/1289
  ((423 433 13)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  1705
  1222
  410
  73
  660
  179
  839
  1
  286729/486360
  7417/1222
  ((385 394 16)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  1697
  1214
  410
  73
  654
  179
  833
  1
  283789/482580
  3691/607
  ((387 397 17)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((338 346 14)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  1696
  1214
  410
  72
  655
  179
  834
  1
  285259/483840
  3701/607
  ((368 376 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env ((□? (rc)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  quoted
  "\"'(eval (app error (-> 'human-action <-) \"not implemented\") (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  1696
  1213
  410
  73
  654
  179
  833
  1
  142157/241290
  7382/1213
  ((372 380 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  1726
  1231
  423
  72
  663
  188
  851
  1
  569573/965160
  7603/1231
  ((417 427 12)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1705
  1223
  410
  72
  662
  179
  841
  1
  35933/60795
  7424/1223
  ((378 387 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (... horizon< (horizon-add1 (-> (λ (h) ...) <-)) foldl ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (... move-horizon (mark⁻¹ (-> (λ (ma) ...) <-)) empty-board ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1699
  1217
  410
  72
  656
  179
  835
  1
  17809/30240
  7419/1217
  ((367 376 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((377 386 13)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  6
  2
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  49
  32
  12
  5
  25
  8
  33
  1
  37/46
  173/32
  ((2 3 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  1709
  1227
  410
  72
  661
  179
  840
  1
  284629/485100
  2482/409
  ((369 378 15)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval (letrec (... wins? (full? (-> (λ (b) ...) <-)) oc< ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  61
  44
  12
  5
  14
  7
  21
  1
  5/36
  131/22
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  19
  10
  7
  2
  6
  4
  10
  1
  3/8
  27/5
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           empty-board\n           (board-mark (-> (λ (co₀ ma bo) ...) <-))\n           board-lookup\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> minimax <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  38
  28
  7
  3
  23
  4
  27
  1
  65/76
  151/28
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  1697
  1215
  410
  72
  654
  179
  833
  1
  282739/482580
  7387/1215
  ((378 386 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  1702
  1220
  410
  72
  659
  179
  838
  1
  286519/486360
  371/61
  ((367 375 12)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (app fold/coord (-> (λ (co mm) ...) <-) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> maximin <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1708
  1226
  410
  72
  654
  179
  833
  1
  70606/120645
  3733/613
  ((386 395 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  6
  2
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  15
  14
  0
  3
  3
  1
  0
  27/5
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  1783
  1289
  421
  73
  694
  183
  877
  1
  73441/125370
  7975/1289
  ((407 417 12)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((363 372 14)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  1744
  1259
  413
  72
  692
  182
  874
  1
  145937/246330
  7637/1259
  ((388 397 17)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  51
  33
  13
  5
  25
  8
  33
  1
  37/46
  178/33
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (a)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval (app andmap (-> (λ (rc) ...) <-) is) (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  1732
  1244
  414
  74
  673
  182
  855
  1
  293239/498960
  1885/311
  ((377 385 16)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  43
  26
  12
  5
  10
  7
  17
  1
  17/96
  79/13
  ((3 4 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  17
  5
  3
  9
  0
  1
  1
  1
  0
  26/5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  43
  22
  15
  6
  14
  8
  22
  1
  7/32
  65/11
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) empty-board player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app win) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  1699
  1217
  410
  72
  654
  179
  833
  1
  281479/482580
  7404/1217
  ((380 390 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  159
  92
  41
  26
  21
  14
  35
  1
  67/324
  23/4
  ((14 14 1)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  1709
  1227
  410
  72
  667
  179
  846
  1
  286519/485100
  2482/409
  ((362 371 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  3
  0
  3
  1
  3/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  1701
  1218
  410
  73
  654
  179
  833
  1
  280849/482580
  7411/1218
  ((372 381 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((374 382 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env ((□? (f xs)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  1707
  1225
  410
  72
  666
  179
  845
  1
  293029/491400
  7428/1225
  ((371 379 15)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (... () (some-v (-> (λ (some-v-v) ...) <-)) marked? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((370 379 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((389 399 16)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  28
  18
  7
  3
  14
  4
  18
  1
  19/24
  49/9
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  1711
  1228
  410
  73
  662
  179
  841
  1
  286309/486360
  3759/614
  ((377 385 16)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  1708
  1226
  410
  72
  666
  179
  845
  1
  293449/493920
  3717/613
  ((355 364 13)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  1712
  1230
  410
  72
  654
  179
  833
  1
  282949/482580
  3739/615
  ((400 409 16)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  27
  18
  7
  2
  14
  4
  18
  1
  19/24
  49/9
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  1731
  1249
  410
  72
  685
  179
  864
  1
  290299/490140
  7555/1249
  ((359 368 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (... foldl (fold/coord (-> (λ (f x) ...) <-)) min-maybe-move ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  1698
  1216
  410
  72
  656
  179
  835
  1
  283999/482580
  231/38
  ((369 379 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  64
  30
  20
  14
  7
  4
  11
  1
  7/18
  27/5
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  86
  34
  21
  31
  8
  2
  10
  1
  7/40
  94/17
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  7
  2
  5
  2
  1
  3
  1
  1/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((349 357 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (... some-v (marked? (-> (λ (a) ...) <-)) blank? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((357 366 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((389 398 17)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  5
  4
  0
  1
  0
  0
  0
  1
  0
  19/4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  6
  2
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((367 376 15)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  20
  10
  7
  3
  6
  4
  10
  1
  3/8
  27/5
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((396 406 17)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  6
  2
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (... marked-with? (i⁻¹ (-> (λ (i) ...) <-)) ormap ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  35
  17
  4
  14
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-horizon\")\n  (env ((□? (move-horizon-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  1699
  1217
  410
  72
  654
  179
  833
  1
  284089/482580
  7403/1217
  ((369 377 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  168
  76
  67
  25
  26
  25
  51
  1
  1301/3840
  407/76
  ((14 14 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  7
  2
  5
  2
  1
  3
  1
  1/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1700
  1218
  410
  72
  654
  179
  833
  1
  283789/482580
  2469/406
  ((367 377 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  1696
  1214
  410
  72
  655
  179
  834
  1
  285259/483840
  3701/607
  ((370 378 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  1698
  1216
  410
  72
  654
  179
  833
  1
  56825/96516
  3703/608
  ((362 371 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval (app andmap (-> (λ (r) ...) <-) is) (env ((□? (b)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  61
  44
  12
  5
  14
  7
  21
  1
  5/36
  131/22
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  15
  14
  0
  3
  3
  1
  0
  27/5
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  1696
  1214
  410
  72
  654
  179
  833
  1
  283369/482580
  7383/1214
  ((387 397 16)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (... make-ai-action (draw-board! (-> (λ (bo) ...) <-)) play-turn ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  1724
  1236
  414
  74
  669
  182
  851
  1
  290719/493920
  1876/309
  ((366 375 12)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  string
  "\"'(eval\n  (app error (-> \"invalid match for move-coord\" <-))\n  (env ((□? (move-coord-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  1697
  1215
  410
  72
  656
  179
  835
  1
  142157/241290
  7397/1215
  ((368 377 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval (λ (ma) (-> (λ (bo) ...) <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  46
  29
  12
  5
  12
  7
  19
  1
  7/34
  185/29
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  28
  18
  7
  3
  14
  4
  18
  1
  19/24
  49/9
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1696
  1214
  410
  72
  654
  179
  833
  1
  142157/241290
  3696/607
  ((367 376 12)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  1702
  1220
  410
  72
  654
  179
  833
  1
  284629/482580
  3709/610
  ((357 366 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  155
  92
  41
  22
  21
  14
  35
  1
  67/324
  23/4
  ((14 15 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (a)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((369 378 12)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  26
  16
  5
  5
  9
  3
  12
  1
  5/8
  81/16
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  1696
  1213
  410
  73
  654
  179
  833
  1
  283999/482580
  7389/1213
  ((357 365 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  1699
  1217
  410
  72
  654
  179
  833
  1
  284629/482580
  7403/1217
  ((378 388 16)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> error <-) \"invalid match for move-coord\")\n  (env ((□? (move-coord-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1761
  1268
  421
  72
  682
  183
  865
  1
  295129/498960
  1943/317
  ((403 412 16)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  1700
  1218
  410
  72
  654
  179
  833
  1
  284069/482580
  2469/406
  ((361 370 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  1701
  1219
  410
  72
  660
  179
  839
  1
  285469/483840
  7404/1219
  ((355 364 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  1707
  1225
  410
  72
  665
  179
  844
  1
  286519/485100
  1487/245
  ((369 379 12)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1715
  1233
  410
  72
  654
  179
  833
  1
  281689/482580
  2504/411
  ((393 403 15)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1719
  1237
  410
  72
  667
  179
  846
  1
  287149/487620
  7614/1237
  ((382 392 16)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  18
  10
  4
  4
  3
  1
  4
  1
  3/28
  26/5
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (letrec (some-v ... is) (-> (app zero-player-game) <-)) (env ()))\""
  1710
  1228
  410
  72
  670
  179
  849
  1
  299119/496440
  7443/1228
  ((373 382 15)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1713
  1231
  410
  72
  665
  179
  844
  1
  287989/487620
  7456/1231
  ((383 392 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  66
  46
  12
  8
  17
  7
  24
  1
  13/60
  277/46
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  1696
  1214
  410
  72
  655
  179
  834
  1
  284209/482580
  3696/607
  ((367 376 12)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env ((□? (some-v-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  15
  6
  7
  2
  3
  4
  7
  1
  1/4
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((389 400 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  26
  16
  5
  5
  9
  3
  12
  1
  5/8
  81/16
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (... oc< (horizon< (-> (λ (h₀ h₁) ...) <-)) horizon-add1 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((394 403 12)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  1698
  1215
  410
  73
  655
  179
  834
  1
  284629/483840
  2471/405
  ((372 381 15)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  1708
  1224
  410
  74
  654
  179
  833
  1
  284209/482580
  934/153
  ((405 416 14)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  1724
  1242
  410
  72
  678
  179
  857
  1
  70921/120645
  3776/621
  ((366 375 14)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  1747
  1264
  410
  73
  682
  179
  861
  1
  144587/246960
  7887/1264
  ((430 446 14)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  1701
  1218
  410
  73
  654
  179
  833
  1
  283117/482580
  7415/1218
  ((380 390 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1698
  1216
  410
  72
  654
  179
  833
  1
  283999/482580
  1849/304
  ((373 381 12)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1707
  1225
  410
  72
  663
  179
  842
  1
  287569/486360
  7432/1225
  ((383 392 16)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((404 415 17)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  1702
  1220
  410
  72
  658
  179
  837
  1
  283369/482580
  741/122
  ((353 362 13)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  1696
  1214
  410
  72
  655
  179
  834
  1
  284209/482580
  3696/607
  ((370 379 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  39
  22
  9
  8
  6
  2
  8
  1
  3/13
  115/22
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (... horizon-add1 (foldl (-> (λ (f acc l) ...) <-)) fold/coord ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  1706
  1218
  414
  74
  657
  182
  839
  1
  285679/485100
  1233/203
  ((401 420 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  155
  92
  41
  22
  21
  14
  35
  1
  67/324
  23/4
  ((14 15 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  1702
  1220
  410
  72
  654
  179
  833
  1
  70921/120645
  741/122
  ((343 351 9)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((350 358 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  48
  32
  12
  4
  25
  8
  33
  1
  37/46
  173/32
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> display <-) \"Cat's game.\\n\")\n  (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  1711
  1228
  410
  73
  664
  179
  843
  1
  288409/488880
  1861/307
  ((357 365 16)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  35
  17
  4
  14
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  1702
  1220
  410
  72
  654
  179
  833
  1
  70921/120645
  741/122
  ((358 367 13)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  159
  92
  41
  26
  21
  14
  35
  1
  67/324
  23/4
  ((13 14 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  1710
  1228
  410
  72
  666
  179
  845
  1
  287989/487620
  1860/307
  ((317 324 9)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  number
  "\"'(eval\n  (app horizon (app lose) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  18
  10
  4
  4
  3
  1
  4
  1
  3/28
  26/5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app minimax bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  1704
  1221
  410
  73
  654
  179
  833
  1
  282361/482580
  2477/407
  ((364 372 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           two-player-game\n           (one-player-game (-> (λ () ...) <-))\n           zero-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  51
  30
  15
  6
  22
  8
  30
  1
  39/64
  79/15
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((327 334 9)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env ((□? (f xs)))))\""
  51
  30
  15
  6
  22
  8
  30
  1
  39/64
  79/15
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ((□? (i)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  1713
  1231
  410
  72
  668
  179
  847
  1
  288829/488880
  7452/1231
  ((316 323 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  1726
  1241
  413
  72
  677
  182
  859
  1
  287779/487620
  7553/1241
  ((322 330 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  1717
  1234
  410
  73
  668
  179
  847
  1
  290089/492660
  3748/617
  ((351 358 13)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  1738
  1242
  423
  73
  673
  188
  861
  1
  571589/967680
  1295/207
  ((362 370 15)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1712
  1230
  410
  72
  663
  179
  842
  1
  142787/243180
  7547/1230
  ((322 329 9)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env ((□? (b co m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1700
  1218
  410
  72
  654
  179
  833
  1
  283789/482580
  2469/406
  ((333 340 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1700
  1218
  410
  72
  654
  179
  833
  1
  70921/120645
  3704/609
  ((320 327 9)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  1717
  1234
  410
  73
  668
  179
  847
  1
  290089/492660
  3748/617
  ((348 356 9)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env ((□? (r x)) (□? (f x)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  91
  60
  23
  8
  41
  13
  54
  1
  13/20
  107/20
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  1712
  1225
  414
  73
  663
  182
  845
  1
  290509/490140
  1486/245
  ((336 344 14)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  1732
  1247
  413
  72
  681
  182
  863
  1
  287149/487620
  7580/1247
  ((332 339 13)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  1729
  1247
  410
  72
  682
  179
  861
  1
  567053/965160
  7572/1247
  ((351 359 14)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (a)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  67
  28
  28
  11
  12
  14
  26
  1
  59/144
  36/7
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  3
  0
  3
  1
  3/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? (ma)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  1699
  1217
  410
  72
  654
  179
  833
  1
  284089/482580
  7403/1217
  ((323 330 9)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  1700
  1218
  410
  72
  654
  179
  833
  1
  284069/482580
  7409/1218
  ((329 337 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  1728
  1240
  414
  74
  671
  182
  853
  1
  291979/496440
  3761/620
  ((343 350 9)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (b)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  1699
  1217
  410
  72
  654
  179
  833
  1
  284629/482580
  7403/1217
  ((325 332 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  1696
  1213
  410
  73
  654
  179
  833
  1
  284209/482580
  7378/1213
  ((312 319 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           draw-board!\n           (play-turn (-> (λ (bo this-play that-play) ...) <-))\n           play-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  47
  18
  15
  14
  0
  3
  3
  1
  0
  11/2
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  1704
  1222
  410
  72
  662
  179
  841
  1
  142157/241290
  287/47
  ((348 356 14)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval (app ormap (-> (λ (r) ...) <-) is) (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  51/10
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  23
  16
  5
  2
  11
  3
  14
  1
  17/24
  81/16
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  1723
  1240
  410
  73
  670
  179
  849
  1
  285049/486360
  7641/1240
  ((354 362 14)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  74
  45
  21
  8
  33
  12
  45
  1
  25/36
  238/45
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  1717
  1234
  410
  73
  668
  179
  847
  1
  290089/492660
  3748/617
  ((326 333 8)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> empty-board <-) player-one player-two)\n  (env ((□? (player-one player-two)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  37
  28
  7
  2
  23
  4
  27
  1
  65/76
  151/28
  ((3 3 1)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (... () (loop (-> (λ () ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           minimax\n           (maximin (-> (λ (bo this-mark that-mark) ...) <-))\n           human-action\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((323 330 9)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  13
  7
  3
  3
  2
  1
  3
  1
  2/15
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((322 329 9)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           play-turn\n           (play-game (-> (λ (player-one player-two) ...) <-))\n           two-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((345 366 9)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (app fold/coord (-> (λ (co mm) ...) <-) (app none))\n  (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  1697
  1215
  410
  72
  654
  179
  833
  1
  282739/482580
  7387/1215
  ((332 339 14)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  1696
  1213
  410
  73
  654
  179
  833
  1
  283999/482580
  7385/1213
  ((319 326 13)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  90
  35
  38
  17
  13
  18
  31
  1
  59/176
  26/5
  ((5 6 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> board-mark <-) co mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env ((□? (b m)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  43
  26
  12
  5
  10
  7
  17
  1
  17/96
  79/13
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  1782
  1287
  423
  72
  663
  188
  851
  1
  560753/965160
  8039/1287
  ((451 461 15)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  1766
  1283
  410
  73
  698
  179
  877
  1
  145577/248220
  7992/1283
  ((376 385 12)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1709
  1227
  410
  72
  663
  179
  842
  1
  287779/487620
  2480/409
  ((320 328 12)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           play-game\n           (two-player-game (-> (λ () ...) <-))\n           one-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  1716
  1234
  410
  72
  670
  179
  849
  1
  289669/490140
  3732/617
  ((382 450 17)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app lose) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           human-action\n           (make-ai-action (-> (λ (ma) ...) <-))\n           draw-board!\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval (app ormap (-> (λ (c) ...) <-) is) (env ((□? (b m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  1710
  1228
  410
  72
  668
  179
  847
  1
  292819/491400
  3721/614
  ((351 359 13)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  1703
  1217
  412
  74
  654
  179
  833
  1
  14222/24129
  7415/1217
  ((371 476 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((314 321 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  16
  6
  7
  3
  3
  4
  7
  1
  1/4
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  1709
  1227
  410
  72
  667
  179
  846
  1
  286519/485100
  2482/409
  ((329 336 9)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  64
  30
  20
  14
  7
  4
  11
  1
  7/18
  27/5
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  35
  14
  15
  6
  7
  8
  15
  1
  1/8
  40/7
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           max-maybe-move\n           (minimax (-> (λ (bo this-mark that-mark) ...) <-))\n           maximin\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  1699
  1216
  410
  73
  656
  179
  835
  1
  285049/483840
  3695/608
  ((328 335 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  number
  "\"'(eval (app + sc (-> 1 <-)) (env ((□? (h)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (... board-lookup (marked-with? (-> (λ (b co m) ...) <-)) i⁻¹ ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((331 338 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  1702
  1220
  410
  72
  659
  179
  838
  1
  286519/486360
  3713/610
  ((366 374 14)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  1699
  1217
  410
  72
  654
  179
  833
  1
  281479/482580
  7404/1217
  ((354 361 15)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  65
  44
  15
  6
  35
  8
  43
  1
  133/184
  21/4
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  155
  92
  41
  22
  21
  14
  35
  1
  67/324
  23/4
  ((12 12 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  1702
  1220
  410
  72
  654
  179
  833
  1
  3690097/6273540
  3713/610
  ((315 322 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  1754
  1271
  410
  73
  688
  179
  867
  1
  145127/247590
  7915/1271
  ((378 387 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1697
  1215
  410
  72
  654
  179
  833
  1
  284209/482580
  2467/405
  ((335 343 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  1698
  1216
  410
  72
  654
  179
  833
  1
  3695137/6273540
  195/32
  ((370 379 12)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  1704
  1222
  410
  72
  663
  179
  842
  1
  287989/486360
  3710/611
  ((359 367 13)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (letrec (...\n           zero-player-game\n           (is\n            (->\n             (app\n              cons\n              (app Ze)\n              (app cons (app On) (app cons (app Tw) (app nil))))\n             <-))\n           ()\n           ...)\n    ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  1695
  1213
  410
  72
  654
  179
  833
  1
  142157/241290
  7383/1213
  ((330 337 14)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (... marked? (blank? (-> (λ (a) ...) <-)) move-coord ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  string
  "\"'(eval\n  (app display (-> \"Cat's game.\\n\" <-))\n  (env ((□? (bo this-play that-play)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  14/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  210
  109
  58
  43
  25
  15
  40
  1
  359/1740
  631/109
  ((16 17 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  23
  16
  5
  2
  11
  3
  14
  1
  17/24
  81/16
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((315 322 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval (app foldl (-> (λ (r x) ...) <-) x is) (env ((□? (f x)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  1704
  1222
  410
  72
  654
  179
  833
  1
  141527/241290
  3712/611
  ((339 346 9)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  66
  32
  20
  14
  7
  4
  11
  1
  7/19
  87/16
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env ((□? (f acc l)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma)))\n  (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  1700
  1218
  410
  72
  656
  179
  835
  1
  283369/482580
  530/87
  ((339 347 9)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  1697
  1214
  410
  73
  654
  179
  833
  1
  56825/96516
  3695/607
  ((334 341 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  1783
  1289
  421
  73
  694
  183
  877
  1
  73441/125370
  7975/1289
  ((365 373 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  47
  18
  15
  14
  0
  3
  3
  1
  0
  11/2
  ((2 3 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  1697
  1215
  410
  72
  656
  179
  835
  1
  285259/483840
  2467/405
  ((349 356 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1746
  1253
  421
  72
  674
  183
  857
  1
  146567/248850
  7667/1253
  ((372 380 15)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (a)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> player <-) (app X) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  1697
  1214
  410
  73
  654
  179
  833
  1
  56825/96516
  3696/607
  ((351 358 15)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  1699
  1216
  410
  73
  656
  179
  835
  1
  285049/483840
  3695/608
  ((357 365 16)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  27
  18
  7
  2
  14
  4
  18
  1
  19/24
  49/9
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  1699
  1216
  410
  73
  656
  179
  835
  1
  285049/483840
  3695/608
  ((365 466 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1703
  1221
  410
  72
  654
  179
  833
  1
  283369/482580
  225/37
  ((354 362 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  string
  "\"'(eval\n  (app error (-> \"invalid match for move-horizon\" <-))\n  (env ((□? (move-horizon-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  21
  10
  4
  7
  0
  1
  1
  1
  0
  51/10
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env ((□? (oc₀ oc₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  41
  25
  9
  7
  7
  2
  9
  1
  7/16
  132/25
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  1699
  1216
  410
  73
  654
  179
  833
  1
  282109/482580
  3703/608
  ((346 354 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  1789
  1295
  421
  73
  698
  183
  881
  1
  73861/126000
  8002/1295
  ((388 395 12)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  1707
  1225
  410
  72
  664
  179
  843
  1
  287149/486360
  7428/1225
  ((335 343 13)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  number
  "\"'(eval\n  (app horizon (app draw) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  6
  5
  0
  1
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  1705
  1222
  410
  73
  660
  179
  839
  1
  286729/486360
  7417/1222
  ((323 329 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  1728
  1240
  414
  74
  671
  182
  853
  1
  291979/496440
  3761/620
  ((357 365 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  1707
  1225
  410
  72
  665
  179
  844
  1
  288829/487620
  7432/1225
  ((338 345 9)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env ((□? (bo)) (□? (ma)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval (app foldl (-> (λ (c x) ...) <-) x is) (env ((□? (r x)) (□? (f x)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  1708
  1220
  414
  74
  658
  182
  840
  1
  286309/486360
  3703/610
  ((306 313 9)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  1780
  1286
  421
  73
  692
  183
  875
  1
  73231/125055
  7963/1286
  ((379 388 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  1701
  1218
  410
  73
  654
  179
  833
  1
  282739/482580
  3704/609
  ((366 374 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  1696
  1214
  410
  72
  654
  179
  833
  1
  283999/482580
  3694/607
  ((345 353 15)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           blank?\n           (move-coord (-> (λ (move-coord-v) ...) <-))\n           move-horizon\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval (app andmap (-> (λ (c) ...) <-) is) (env ((□? (r)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  number
  "\"'(eval\n  (app horizon (app win) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked? <-) (app b (app coord r c)))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  1706
  1224
  410
  72
  665
  179
  844
  1
  293449/492660
  928/153
  ((312 318 12)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  71
  44
  20
  7
  33
  12
  45
  1
  25/36
  233/44
  ((4 5 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env ((□? (co)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  26
  13
  5
  8
  4
  1
  5
  1
  4/45
  68/13
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  6
  2
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           min-maybe-move\n           (max-maybe-move (-> (λ (mmo mo₁) ...) <-))\n           minimax\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (c)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  6
  2
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (... mark⁻¹ (empty-board (-> (λ (co) ...) <-)) board-mark ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (... one-player-game (zero-player-game (-> (λ () ...) <-)) is ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  1714
  1231
  410
  73
  664
  179
  843
  1
  142997/243180
  7560/1231
  ((348 357 9)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  1704
  1222
  410
  72
  662
  179
  841
  1
  286309/485100
  3708/611
  ((331 338 9)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (... ormap (andmap (-> (λ (f xs) ...) <-)) wins? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           board-mark\n           (board-lookup (-> (λ (co bo) ...) <-))\n           marked-with?\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1724
  1242
  410
  72
  669
  179
  848
  1
  72181/122850
  2539/414
  ((342 349 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  1712
  1230
  410
  72
  672
  179
  851
  1
  301639/498960
  7451/1230
  ((318 325 9)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  1735
  1240
  423
  72
  672
  188
  860
  1
  572093/967680
  963/155
  ((386 395 17)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           fold/coord\n           (min-maybe-move (-> (λ (mmo mo₁) ...) <-))\n           max-maybe-move\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  string
  "\"'(eval (app error (-> \"invalid match for some-v\" <-)) (env ((□? (some-v-v)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  1706
  1224
  410
  72
  665
  179
  844
  1
  293449/492660
  928/153
  ((387 401 15)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env ((□? (f x)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (b co m)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  1724
  1236
  414
  74
  669
  182
  851
  1
  290719/493920
  1876/309
  ((333 341 13)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (... maximin (human-action (-> (λ (bo) ...) <-)) make-ai-action ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  140
  63
  54
  23
  22
  24
  46
  1
  241/672
  47/9
  ((9 9 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (... full? (oc< (-> (λ (oc₀ oc₁) ...) <-)) horizon< ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1735
  1253
  410
  72
  675
  179
  854
  1
  290509/492660
  7704/1253
  ((341 348 9)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  1715
  1233
  410
  72
  654
  179
  833
  1
  94223/160860
  7496/1233
  ((350 357 11)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval (app andmap (-> (λ (r) ...) <-) is) (env ((□? (c)) (□? (b m)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f xs)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  90
  35
  38
  17
  13
  18
  31
  1
  59/176
  26/5
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1702
  1220
  410
  72
  658
  179
  837
  1
  286309/485100
  3723/610
  ((323 330 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval\n  (letrec (...\n           move-coord\n           (move-horizon (-> (λ (move-horizon-v) ...) <-))\n           mark⁻¹\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  1698
  1216
  410
  72
  654
  179
  833
  1
  283999/482580
  1849/304
  ((332 339 9)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((318 325 10)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  string
  "\"'(eval (app error 'human-action (-> \"not implemented\" <-)) (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  9
  4
  2
  3
  1
  1
  2
  1
  1/6
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  lambda
  "\"'(eval (λ (co₀ ma bo) (-> (λ (co) ...) <-)) (env ((□? (co₀ ma bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  500
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> play-turn <-) bo that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  500
  33
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  13
  5
  3
  5
  0
  1
  1
  1
  0
  26/5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  11
  4
  2
  5
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  500
  33
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  500
  33
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  16
  9
  3
  4
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  500
  33
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  117
  83
  25
  9
  50
  17
  67
  1
  781/1035
  443/83
  ((7 7 0)))
'(clean-cache
  sat-small
  2
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  500
  33
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env ((□? (x1 x2)))))\""
  27
  13
  8
  6
  8
  5
  13
  1
  4/5
  68/13
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  500
  33
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  500
  33
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  18
  9
  3
  6
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  500
  33
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  500
  33
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-2) ...) (env ()))\""
  145
  106
  32
  7
  76
  21
  97
  1
  383/450
  294/53
  ((10 10 1)))
'(clean-cache
  sat-small
  2
  500
  33
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2)))))\""
  28
  15
  8
  5
  5
  2
  7
  1
  7/20
  16/3
  ((1 1 0)))
'(clean-cache
  sat-small
  2
  500
  33
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-2 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  500
  33
  lambda
  "\"'(eval (letrec (... () (phi (-> (λ (x1 x2) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  500
  33
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  157
  110
  32
  15
  64
  21
  85
  1
  905/1152
  613/110
  ((11 11 0)))
'(clean-cache
  sat-small
  2
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  500
  33
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env ((□? (x1 x2)))))\""
  97
  67
  23
  7
  40
  15
  55
  1
  122/171
  357/67
  ((6 6 0)))
'(clean-cache
  sat-small
  2
  500
  33
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  157
  110
  32
  15
  64
  21
  85
  1
  905/1152
  613/110
  ((12 12 0)))
'(clean-cache
  sat-small
  2
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  500
  33
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  500
  33
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env ((□? (x1 x2)))))\""
  38
  25
  8
  5
  11
  2
  13
  1
  13/28
  134/25
  ((1 1 0)))
'(clean-cache
  sat-small
  2
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  500
  33
  app
  "\"'(eval (letrec (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  144
  105
  32
  7
  75
  21
  96
  1
  2591/3060
  194/35
  ((10 10 0)))
'(clean-cache
  sat-small
  2
  500
  33
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  500
  33
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  198
  145
  32
  21
  73
  21
  94
  1
  823/1152
  819/145
  ((17 17 0)))
'(clean-cache
  sat-small
  2
  500
  33
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-2 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  500
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  13
  5
  3
  5
  0
  1
  1
  1
  0
  26/5
  ((0 0 0)))
'(clean-cache
  sat-small
  2
  500
  33
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  139
  100
  32
  7
  66
  21
  87
  1
  439/558
  279/50
  ((10 10 0)))
'(clean-cache
  sat-small
  2
  500
  33
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  152
  112
  32
  8
  74
  21
  95
  1
  1138/1485
  311/56
  ((10 10 0)))
'(clean-cache
  sat-small
  2
  500
  33
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  18
  9
  3
  6
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  lambda
  "\"'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  1063
  780
  190
  93
  254
  65
  319
  1
  915659/1200420
  4583/780
  ((282 288 9)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  82
  51
  19
  12
  13
  2
  15
  1
  7/17
  91/17
  ((6 6 0)))
'(clean-cache
  sat-1
  2
  500
  58
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  36
  19
  8
  9
  5
  2
  7
  1
  5/14
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  1063
  780
  190
  93
  254
  65
  319
  1
  915659/1200420
  4583/780
  ((295 301 9)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  38
  19
  8
  11
  5
  2
  7
  1
  5/14
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  500
  58
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  927
  690
  190
  47
  256
  65
  321
  1
  5688407/7234920
  669/115
  ((260 265 7)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  24
  9
  3
  12
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  907
  670
  190
  47
  240
  65
  305
  1
  3517963/4439610
  3901/670
  ((290 296 9)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  881
  644
  190
  47
  220
  65
  285
  1
  116603/147420
  267/46
  ((253 259 7)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  23
  9
  5
  9
  0
  1
  1
  1
  0
  16/3
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  30
  15
  8
  7
  5
  2
  7
  1
  7/20
  16/3
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-4 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  lambda
  "\"'(eval\n  (letrec (... () (phi (-> (λ (x1 x2 x3 x4) ...) <-)) try ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  20
  9
  3
  8
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  23
  9
  5
  9
  0
  1
  1
  1
  0
  16/3
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  1226
  899
  190
  137
  263
  65
  328
  1
  15594077/21492135
  5325/899
  ((340 346 13)))
'(clean-cache
  sat-1
  2
  500
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  100
  59
  23
  18
  13
  6
  19
  1
  1/3
  311/59
  ((6 6 0)))
'(clean-cache
  sat-1
  2
  500
  58
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  940
  702
  190
  48
  264
  65
  329
  1
  32221993/41962536
  2039/351
  ((248 253 7)))
'(clean-cache
  sat-1
  2
  500
  58
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  38
  19
  8
  11
  5
  2
  7
  1
  5/14
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  22
  9
  3
  10
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-4 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  33
  13
  8
  12
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  689
  501
  143
  45
  158
  47
  205
  1
  18223/32400
  891/167
  ((248 254 7)))
'(clean-cache
  sat-1
  2
  500
  58
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  245
  145
  56
  44
  32
  19
  51
  1
  157/378
  764/145
  ((44 45 1)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  838
  644
  145
  49
  192
  49
  241
  1
  238457/365310
  3455/644
  ((259 264 7)))
'(clean-cache
  sat-1
  2
  500
  58
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-4) ...) (env ()))\""
  933
  696
  190
  47
  266
  65
  331
  1
  2183443/2713095
  337/58
  ((252 257 7)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  15
  4
  2
  9
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  500
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  500
  58
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  36
  19
  8
  9
  5
  2
  7
  1
  5/14
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  500
  58
  app
  "\"'(eval (letrec (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  932
  695
  190
  47
  265
  65
  330
  1
  8552899/10671507
  4038/695
  ((286 390 7)))
'(clean-cache
  sat-2
  2
  500
  96
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  500
  96
  lambda
  "\"'(eval\n  (λ (x6) (-> (λ (x7) ...) <-))\n  (env ((□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  7
  1
  0
  6
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  lambda
  "\"'(eval\n  (λ (x5) (-> (λ (x6) ...) <-))\n  (env ((□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  6
  1
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  38
  15
  8
  15
  0
  1
  1
  1
  0
  27/5
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  9
  3
  17
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  72
  15
  13
  44
  3
  2
  5
  1
  3/10
  16/3
  ((2 2 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n7) ...) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  54
  13
  8
  33
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  500
  96
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  119
  37
  20
  62
  5
  2
  7
  1
  5/14
  202/37
  ((8 8 0)))
'(clean-cache
  sat-2
  2
  500
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  lambda
  "\"'(eval (λ (x1) (-> (λ (x2) ...) <-)) (env ((□? (x1)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  307
  131
  60
  116
  10
  5
  15
  1
  8/19
  725/131
  ((56 57 0)))
'(clean-cache
  sat-2
  2
  500
  96
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  9
  3
  9
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  243
  107
  47
  89
  13
  6
  19
  1
  1/3
  581/107
  ((32 33 0)))
'(clean-cache
  sat-2
  2
  500
  96
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  150
  27
  31
  92
  3
  2
  5
  1
  3/10
  152/27
  ((10 10 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  54
  13
  8
  33
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  500
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  274
  99
  60
  115
  5
  2
  7
  1
  5/17
  61/11
  ((47 48 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  23
  9
  3
  11
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  169
  59
  34
  76
  20
  11
  31
  1
  29/51
  313/59
  ((15 15 0)))
'(clean-cache
  sat-2
  2
  500
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n5) ...) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  1
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x4) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  500
  96
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  150
  27
  31
  92
  3
  2
  5
  1
  3/10
  152/27
  ((10 10 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  184
  61
  31
  92
  5
  2
  7
  1
  5/14
  338/61
  ((21 22 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  150
  27
  31
  92
  3
  2
  5
  1
  3/10
  152/27
  ((11 11 0)))
'(clean-cache
  sat-2
  2
  500
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  41
  19
  2
  20
  2
  2
  4
  1
  2/13
  5
  ((2 2 0)))
'(clean-cache
  sat-2
  2
  500
  96
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  13
  2
  18
  2
  2
  4
  1
  2/9
  5
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  500
  96
  lambda
  "\"'(eval (λ (x3) (-> (λ (x4) ...) <-)) (env ((□? (x3)) (□? (x2)) (□? (x1)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  lambda
  "\"'(eval\n  (λ (x4) (-> (λ (x5) ...) <-))\n  (env ((□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  500
  96
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  82
  25
  13
  44
  5
  2
  7
  1
  5/14
  134/25
  ((3 3 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  500
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  484
  199
  116
  169
  32
  19
  51
  1
  157/378
  1070/199
  ((185 188 3)))
'(clean-cache
  sat-2
  2
  500
  96
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  10
  2
  17
  2
  2
  4
  1
  2/7
  5
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  101
  19
  20
  62
  3
  2
  5
  1
  3/10
  104/19
  ((4 5 0)))
'(clean-cache
  sat-2
  2
  500
  96
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  82
  25
  13
  44
  5
  2
  7
  1
  5/14
  134/25
  ((3 3 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  7
  2
  16
  2
  2
  4
  1
  2/5
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  119
  37
  20
  62
  5
  2
  7
  1
  5/14
  202/37
  ((7 7 0)))
'(clean-cache
  sat-2
  2
  500
  96
  lambda
  "\"'(eval (λ (x2) (-> (λ (x3) ...) <-)) (env ((□? (x2)) (□? (x1)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  101
  19
  20
  62
  3
  2
  5
  1
  3/10
  104/19
  ((4 4 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  72
  15
  13
  44
  3
  2
  5
  1
  3/10
  16/3
  ((2 2 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  9
  3
  21
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  38
  15
  8
  15
  0
  1
  1
  1
  0
  27/5
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-7) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  9
  3
  13
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  284
  107
  64
  113
  13
  6
  19
  1
  7/17
  589/107
  ((51 52 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  lambda
  "\"'(eval (letrec (... () (phi (-> (λ (x1) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  31
  9
  3
  19
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n6) ...) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  1
  0
  6
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  72
  15
  13
  44
  3
  2
  5
  1
  3/10
  16/3
  ((3 3 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x4 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  101
  19
  20
  62
  3
  2
  5
  1
  3/10
  104/19
  ((5 5 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  54
  13
  8
  33
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x3 x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  27
  9
  3
  15
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  45
  22
  2
  21
  2
  2
  4
  1
  2/15
  5
  ((3 3 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval (letrec (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  500
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  37
  16
  2
  19
  2
  2
  4
  1
  2/11
  5
  ((1 2 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  96
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  2
  500
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  72
  15
  13
  44
  3
  2
  5
  1
  3/10
  16/3
  ((2 2 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  500
  100
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  127
  59
  23
  45
  13
  6
  19
  1
  1/3
  311/59
  ((10 11 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  500
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  27
  9
  3
  15
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  31
  9
  3
  19
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  9
  3
  13
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n5) ...) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  1
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  3
  2
  5
  1
  3/10
  68/13
  ((2 2 0)))
'(clean-cache
  sat-3
  2
  500
  100
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  126
  51
  23
  52
  20
  11
  31
  1
  29/51
  89/17
  ((12 12 0)))
'(clean-cache
  sat-3
  2
  500
  100
  let
  "\"'(eval (letrec (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  500
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  111
  51
  23
  37
  13
  6
  19
  1
  7/17
  89/17
  ((9 9 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  500
  100
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env ((□? (f)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  string
  "\"'(eval (app println (-> \"trying\" <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  42
  13
  8
  21
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  500
  100
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  19
  8
  18
  5
  2
  7
  1
  5/14
  100/19
  ((2 2 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  23
  9
  3
  11
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  500
  100
  letrec
  "\"'(eval ((top) letrec (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n6) ...) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  1
  0
  6
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  326
  145
  56
  125
  32
  19
  51
  1
  157/378
  764/145
  ((90 91 1)))
'(clean-cache
  sat-3
  2
  500
  100
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  3
  2
  5
  1
  3/10
  68/13
  ((2 2 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  lambda
  "\"'(eval\n  (letrec (... println (phi (-> (λ (x1 x2 x3 x4 x5 x6 x7) ...) <-)) try ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  42
  13
  8
  21
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  38
  15
  8
  15
  0
  1
  1
  1
  0
  27/5
  ((2 2 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  500
  100
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  3
  2
  5
  1
  3/10
  68/13
  ((2 2 0)))
'(clean-cache
  sat-3
  2
  500
  100
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  5
  2
  7
  1
  5/14
  100/19
  ((2 2 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  12
  7
  2
  3
  0
  1
  1
  1
  0
  33/7
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  9
  3
  21
  1
  0
  1
  1
  1/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  106
  47
  19
  40
  10
  5
  15
  1
  8/19
  249/47
  ((9 10 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  38
  15
  8
  15
  0
  1
  1
  1
  0
  27/5
  ((1 2 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  500
  100
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  3
  2
  5
  1
  3/10
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  500
  100
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  19
  8
  16
  5
  2
  7
  1
  5/14
  100/19
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  500
  100
  lambda
  "\"'(eval (letrec (... () (println (-> (λ (s) ...) <-)) phi ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  42
  13
  8
  21
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  500
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  101
  43
  19
  39
  5
  2
  7
  1
  5/17
  227/43
  ((10 10 0)))
'(clean-cache
  sat-3
  2
  500
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  47
  19
  8
  20
  5
  2
  7
  1
  5/14
  100/19
  ((2 2 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  29
  9
  3
  17
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  19
  8
  18
  5
  2
  7
  1
  5/14
  100/19
  ((2 2 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  3
  2
  5
  1
  3/10
  68/13
  ((2 2 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  500
  100
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  8
  6
  0
  2
  1
  0
  1
  1
  1/6
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n7) ...) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  100
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  2
  500
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  9
  3
  9
  1
  0
  1
  1
  1/7
  46/9
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  500
  569
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  569
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
