'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env (() () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  lambda
  "\"'(eval (letrec (... () (phi (-> (λ (x1 x2) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-2) ...) (env ()))\""
  47
  35
  12
  0
  35
  12
  47
  1
  1
  191/35
  ((1 1 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env (() () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  44
  32
  12
  0
  32
  12
  44
  1
  1
  173/32
  ((1 1 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env (())))\""
  26
  19
  7
  0
  19
  7
  26
  1
  1
  101/19
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-2 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  44
  32
  12
  0
  32
  12
  44
  1
  1
  173/32
  ((1 1 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env (() () ())))\""
  32
  23
  9
  0
  23
  9
  32
  1
  1
  122/23
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  44
  32
  12
  0
  32
  12
  44
  1
  1
  173/32
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-2 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  45
  33
  12
  0
  33
  12
  45
  1
  1
  179/33
  ((1 1 0)))
'(clean-cache
  sat-small
  0
  33
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  44
  32
  12
  0
  32
  12
  44
  1
  1
  173/32
  ((0 0 0)))
'(clean-cache
  sat-small
  0
  33
  app
  "\"'(eval (letrec (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  46
  34
  12
  0
  34
  12
  46
  1
  1
  185/34
  ((1 1 0)))
'(clean-cache
  sat-small
  0
  33
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env (() () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (letrec (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  75
  59
  16
  0
  59
  16
  75
  1
  1
  329/59
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4) (env (() () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-)) (env (() () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  lambda
  "\"'(eval\n  (letrec (... () (phi (-> (λ (x1 x2 x3 x4) ...) <-)) try ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-4 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  10
  5
  5
  0
  5
  5
  10
  1
  1
  28/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  74
  58
  16
  0
  58
  16
  74
  1
  1
  323/58
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  32
  24
  8
  0
  24
  8
  32
  1
  1
  43/8
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4) (env (() () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((3 3 0)))
'(clean-cache
  sat-1
  0
  58
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4) (env (() () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-4) ...) (env ()))\""
  76
  60
  16
  0
  60
  16
  76
  1
  1
  67/12
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  49
  40
  9
  0
  40
  9
  49
  1
  1
  219/40
  ((1 1 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  73
  57
  16
  0
  57
  16
  73
  1
  1
  317/57
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4) (env (() () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  28
  21
  7
  0
  21
  7
  28
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  10
  5
  5
  0
  5
  5
  10
  1
  1
  28/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-4 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  58
  app
  "\"'(eval (λ (n4) (-> (app p n1 n2 n3 n4) <-)) (env (() () () () ())))\""
  55
  44
  11
  0
  44
  11
  55
  1
  1
  60/11
  ((1 1 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (app (app p n1) n2) (-> n3 <-)) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  26
  17
  9
  0
  17
  9
  26
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  32
  19
  13
  0
  19
  13
  32
  1
  1
  101/19
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  30
  17
  13
  0
  17
  13
  30
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (() () () () () () ())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (app p n1) (-> n2 <-)) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (() () () () () () ())))\""
  22
  10
  12
  0
  10
  12
  22
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (() () () () () () ())))\""
  22
  10
  12
  0
  10
  12
  22
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (letrec (... () (phi (-> (λ (x1) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env (() () () () () () () ())))\""
  87
  70
  17
  0
  70
  17
  87
  1
  1
  38/7
  ((4 4 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (() () () () () () ())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (() () () () () () ())))\""
  22
  10
  12
  0
  10
  12
  22
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env (() () () () () () () ())))\""
  13
  11
  2
  0
  11
  2
  13
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env (() () () () () () ())))\""
  24
  14
  10
  0
  14
  10
  24
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env (() () () () () () ())))\""
  22
  14
  8
  0
  14
  8
  22
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (() () () () () () ())))\""
  22
  14
  8
  0
  14
  8
  22
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env (() () () () () () () ())))\""
  11
  9
  2
  0
  9
  2
  11
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  118
  93
  25
  0
  93
  25
  118
  1
  1
  517/93
  ((5 6 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((5 6 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (app (-> (app (app p n1) n2) <-) n3) (env (() () () () () () () ())))\""
  9
  7
  2
  0
  7
  2
  9
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (app (-> (app p n1) <-) n2) (env (() () () () () () () ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (() () () () () () ())))\""
  69
  54
  15
  0
  54
  15
  69
  1
  1
  299/54
  ((4 4 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x6) (-> (λ (x7) ...) <-)) (env (() () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n5) ...) <-)) (env (() () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x2) (-> (λ (x3) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env (() () () () () () () ())))\""
  15
  13
  2
  0
  13
  2
  15
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((5 5 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x4) (-> (λ (x5) ...) <-)) (env (() () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (() () () () () () ())))\""
  24
  14
  10
  0
  14
  10
  24
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  36
  24
  12
  0
  24
  12
  36
  1
  1
  43/8
  ((1 1 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  32
  21
  11
  0
  21
  11
  32
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x5) (-> (λ (x6) ...) <-)) (env (() () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x3) (-> (λ (x4) ...) <-)) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (() () () () () () ())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (() () () () () () ())))\""
  26
  14
  12
  0
  14
  12
  26
  1
  1
  73/14
  ((1 1 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((8 8 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((6 6 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-7) ...) (env ()))\""
  120
  95
  25
  0
  95
  25
  120
  1
  1
  529/95
  ((6 6 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x1) (-> (λ (x2) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (letrec (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  119
  94
  25
  0
  94
  25
  119
  1
  1
  523/94
  ((6 6 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1) (env (() () () () () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((6 6 0)))
'(clean-cache
  sat-2
  0
  96
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (() () () () () () ())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((5 6 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env (() () () () () () () ())))\""
  17
  15
  2
  0
  15
  2
  17
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((5 6 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-)) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  20
  10
  10
  0
  10
  10
  20
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n6) ...) <-)) (env (() () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  20
  10
  10
  0
  10
  10
  20
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (() () () () () () ())))\""
  20
  10
  10
  0
  10
  10
  20
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (() () () () () () ())))\""
  30
  17
  13
  0
  17
  13
  30
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((5 5 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n7) ...) <-)) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  117
  92
  25
  0
  92
  25
  117
  1
  1
  511/92
  ((5 5 0)))
'(clean-cache
  sat-2
  0
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  32
  24
  8
  0
  24
  8
  32
  1
  1
  43/8
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((5 5 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((5 5 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (letrec (... () (println (-> (λ (s) ...) <-)) phi ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  63
  54
  9
  0
  54
  9
  63
  1
  1
  299/54
  ((3 3 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((5 5 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((5 5 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n5) ...) <-)) (env (() () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((5 6 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n6) ...) <-)) (env (() () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  string
  "\"'(eval (app println (-> \"trying\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  102
  83
  19
  0
  83
  19
  102
  1
  1
  469/83
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((5 5 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n7) ...) <-)) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((5 5 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  90/17
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  28
  21
  7
  0
  21
  7
  28
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  101
  82
  19
  0
  82
  19
  101
  1
  1
  463/82
  ((5 6 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  6
  4
  2
  0
  4
  2
  6
  1
  1
  9/2
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  100
  81
  19
  0
  81
  19
  100
  1
  1
  457/81
  ((5 6 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  16
  10
  6
  0
  10
  6
  16
  1
  1
  26/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  26
  19
  7
  0
  19
  7
  26
  1
  1
  101/19
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval\n  (letrec (... println (phi (-> (λ (x1 x2 x3 x4 x5 x6 x7) ...) <-)) try ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  69
  58
  11
  0
  58
  11
  69
  1
  1
  160/29
  ((4 4 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  104
  85
  19
  0
  85
  19
  104
  1
  1
  479/85
  ((6 6 0)))
'(clean-cache
  sat-3
  0
  100
  letrec
  "\"'(eval ((top) letrec (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  let
  "\"'(eval (letrec (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  20
  14
  6
  0
  14
  6
  20
  1
  1
  73/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) bo that-play this-play) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env (())))\""
  545
  410
  135
  0
  410
  135
  545
  1
  1
  2283/410
  ((53 54 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app minimax bo (-> that-mark <-) this-mark) (env (() ())))\""
  29
  18
  11
  0
  18
  11
  29
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((54 55 3)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((52 53 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  30
  19
  11
  0
  19
  11
  30
  1
  1
  102/19
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env (())))\""
  547
  412
  135
  0
  412
  135
  547
  1
  1
  573/103
  ((53 54 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (...\n           human-action\n           (make-ai-action (-> (λ (ma) ...) <-))\n           draw-board!\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  25/4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env (())))\""
  543
  408
  135
  0
  408
  135
  543
  1
  1
  379/68
  ((52 53 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-))) (env (())))\""
  540
  407
  133
  0
  407
  133
  540
  1
  1
  2270/407
  ((55 57 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-mark co (-> mark <-) bo) (env (())))\""
  37
  30
  7
  0
  30
  7
  37
  1
  1
  17/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (move-coord-v) (-> (match move-coord-v ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((54 55 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  76
  54
  22
  0
  54
  22
  76
  1
  1
  151/27
  ((3 4 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) mark bo) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((53 55 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env (())))\""
  37
  30
  7
  0
  30
  7
  37
  1
  1
  17/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (... marked? (blank? (-> (λ (a) ...) <-)) move-coord ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env (())))\""
  540
  407
  133
  0
  407
  133
  540
  1
  1
  2270/407
  ((60 61 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (... board-lookup (marked-with? (-> (λ (b co m) ...) <-)) i⁻¹ ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  30
  23
  7
  0
  23
  7
  30
  1
  1
  124/23
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env (() ())))\""
  76
  54
  22
  0
  54
  22
  76
  1
  1
  151/27
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env (())))\""
  542
  406
  136
  0
  406
  136
  542
  1
  1
  1133/203
  ((68 70 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 66 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  11/2
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app marked-with? b (-> (app coord rc rc) <-) m) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) that-mark this-mark) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 67 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env (() ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  546
  410
  136
  0
  410
  136
  546
  1
  1
  1142/205
  ((69 71 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 69 3)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app player (-> (app X) <-) (app make-ai-action (app X))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app andmap (-> (λ (r) ...) <-) is) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  76
  54
  22
  0
  54
  22
  76
  1
  1
  151/27
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 68 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (... one-player-game (zero-player-game (-> (λ () ...) <-)) is ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((58 59 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2250/403
  ((55 56 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env (())))\""
  543
  407
  136
  0
  407
  136
  543
  1
  1
  2270/407
  ((54 56 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  537
  404
  133
  0
  404
  133
  537
  1
  1
  1127/202
  ((57 59 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((57 59 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (λ (co₀ ma bo) (-> (λ (co) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (())))\""
  538
  405
  133
  0
  405
  133
  538
  1
  1
  2258/405
  ((57 59 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (())))\""
  537
  404
  133
  0
  404
  133
  537
  1
  1
  1127/202
  ((62 64 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (... full? (oc< (-> (λ (oc₀ oc₁) ...) <-)) horizon< ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 67 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  2245/402
  ((62 63 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app wins? bo mark) <-) (#f) _) (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  2245/402
  ((60 62 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  11
  8
  3
  0
  8
  3
  11
  1
  1
  41/8
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app fold/coord (-> (λ (co mm) ...) <-) (app none)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env (())))\""
  545
  409
  136
  0
  409
  136
  545
  1
  1
  2279/409
  ((56 57 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((56 57 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (let (_) (-> (match this-play ...) <-)) (env (())))\""
  539
  406
  133
  0
  406
  133
  539
  1
  1
  323/58
  ((63 64 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env (())))\""
  7
  3
  4
  0
  3
  4
  7
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env (())))\""
  41
  28
  13
  0
  28
  13
  41
  1
  1
  151/28
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((53 54 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env (())))\""
  24
  16
  8
  0
  16
  8
  24
  1
  1
  85/16
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app marked? (-> (app b (app coord r c)) <-)) (env (() () ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((53 54 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (... horizon-add1 (foldl (-> (λ (f acc l) ...) <-)) fold/coord ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  2245/402
  ((52 54 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((52 53 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (app b co) ((blank) (-> (app #f) <-)) (marked m*)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((50 52 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  538
  405
  133
  0
  405
  133
  538
  1
  1
  2258/405
  ((54 55 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app f (app coord r c) (-> x <-)) (env (() () ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((57 59 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁)) (env (())))\""
  537
  404
  133
  0
  404
  133
  537
  1
  1
  1127/202
  ((57 58 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (...\n           empty-board\n           (board-mark (-> (λ (co₀ ma bo) ...) <-))\n           board-lookup\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  string
  "\"'(eval (app error 'human-action (-> \"not implemented\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app coord r c) x) (env (() () ())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (... horizon< (horizon-add1 (-> (λ (h) ...) <-)) foldl ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (...\n           move-coord\n           (move-horizon (-> (λ (move-horizon-v) ...) <-))\n           mark⁻¹\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  string
  "\"'(eval (app error (-> \"invalid match for move-horizon\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((54 56 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord rc rc) m) (env (() ())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app andmap (-> (λ (c) ...) <-) is) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  542
  409
  133
  0
  409
  133
  542
  1
  1
  2273/409
  ((57 59 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((54 55 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord rc rc) (-> m <-)) (env (() ())))\""
  76
  54
  22
  0
  54
  22
  76
  1
  1
  151/27
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (... andmap (wins? (-> (λ (b m) ...) <-)) full? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> move-horizon-v <-) (move _ move-horizon-x) _) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((55 56 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env (())))\""
  543
  410
  133
  0
  410
  133
  543
  1
  1
  1139/205
  ((54 56 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (...\n           play-turn\n           (play-game (-> (λ (player-one player-two) ...) <-))\n           two-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo that-mark this-mark)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((52 53 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2251/403
  ((51 52 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app maximin bo that-mark (-> this-mark <-)) (env (() ())))\""
  29
  18
  11
  0
  18
  11
  29
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app fold/coord (-> (λ (co mm) ...) <-) (app none)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env (() () ())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> display <-) \"Cat's game.\\n\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((54 55 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((53 55 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env (())))\""
  540
  407
  133
  0
  407
  133
  540
  1
  1
  2270/407
  ((62 63 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((52 53 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-horizon\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  letrec
  "\"'(eval (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((52 53 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((53 55 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((56 58 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env (())))\""
  544
  409
  135
  0
  409
  135
  544
  1
  1
  2276/409
  ((58 59 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env (())))\""
  539
  406
  133
  0
  406
  133
  539
  1
  1
  1133/203
  ((58 60 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((76 78 3)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app andmap (-> (λ (c) ...) <-) is) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((80 82 3)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  number
  "\"'(eval (app horizon (app draw) (-> 0 <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  letrec
  "\"'(eval (lettypes cons ... player (letrec (some-v ... is) ...)) (env ()))\""
  546
  413
  133
  0
  413
  133
  546
  1
  1
  2291/413
  ((76 78 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((63 64 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2251/403
  ((58 59 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app play-turn bo (-> that-play <-) this-play) (env (())))\""
  23
  16
  7
  0
  16
  7
  23
  1
  1
  47/8
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  23
  19
  4
  0
  19
  4
  23
  1
  1
  102/19
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env (())))\""
  19
  13
  6
  0
  13
  6
  19
  1
  1
  68/13
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (c) (-> (app marked? (app b (app coord r c))) <-)) (env (() () ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((62 63 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 3)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app play-turn empty-board (-> player-one <-) player-two) (env (())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  37/7
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((62 63 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> marked? <-) (app b (app coord r c))) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (... make-ai-action (draw-board! (-> (λ (bo) ...) <-)) play-turn ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env (())))\""
  48
  35
  13
  0
  35
  13
  48
  1
  1
  188/35
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (bo) (-> (app error 'human-action \"not implemented\") <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((62 64 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord rc rc) m) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (...\n           max-maybe-move\n           (minimax (-> (λ (bo this-mark that-mark) ...) <-))\n           maximin\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app andmap (-> (λ (rc) ...) <-) is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((57 59 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (... i⁻¹ (ormap (-> (λ (f xs) ...) <-)) andmap ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((56 58 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env (())))\""
  543
  408
  135
  0
  408
  135
  543
  1
  1
  379/68
  ((64 66 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((59 61 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> minimax <-) bo that-mark this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  30
  23
  7
  0
  23
  7
  30
  1
  1
  124/23
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (...\n           min-maybe-move\n           (max-maybe-move (-> (λ (mmo mo₁) ...) <-))\n           minimax\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (λ (ma) (-> (λ (bo) ...) <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  542
  409
  133
  0
  409
  133
  542
  1
  1
  2273/409
  ((59 60 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((54 56 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((55 56 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app horizon (-> (app win) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app play-turn (-> bo <-) that-play this-play) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  30
  19
  11
  0
  19
  11
  30
  1
  1
  102/19
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app ormap (-> (λ (r) ...) <-) is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  let
  "\"'(eval (λ (bo this-play that-play) (-> (let (_) ...) <-)) (env (())))\""
  540
  407
  133
  0
  407
  133
  540
  1
  1
  2265/407
  ((58 59 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (co) (-> (match (app equal? co₀ co) ...) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((57 58 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  749/134
  ((56 57 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((53 54 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  19
  10
  9
  0
  10
  9
  19
  1
  1
  27/5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (... () (some-v (-> (λ (some-v-v) ...) <-)) marked? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  string
  "\"'(eval (app error (-> \"invalid match for some-v\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  number
  "\"'(eval (app + sc (-> 1 <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((58 60 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app foldl (-> (λ (r x) ...) <-) x is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2250/403
  ((54 56 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((53 55 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((53 55 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((53 55 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((53 54 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((59 60 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  11
  8
  3
  0
  8
  3
  11
  1
  1
  41/8
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((59 60 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (r) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((59 60 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((56 57 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (c x) (-> (app f (app coord r c) x) <-)) (env (() () ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((53 54 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  2245/402
  ((57 59 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app win) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  546
  410
  136
  0
  410
  136
  546
  1
  1
  1142/205
  ((58 60 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  quoted
  "\"'(eval (app error (-> 'human-action <-) \"not implemented\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app player (app X) (-> (app make-ai-action (app X)) <-)) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((65 67 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> zero-player-game <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  let
  "\"'(eval (λ () (-> (let (co) ...) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((77 79 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app ormap (-> (λ (c) ...) <-) is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((78 80 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma))) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (... maximin (human-action (-> (λ (bo) ...) <-)) make-ai-action ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  30
  23
  7
  0
  23
  7
  30
  1
  1
  124/23
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (...\n           play-game\n           (two-player-game (-> (λ () ...) <-))\n           one-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  string
  "\"'(eval (app display (-> \"Cat's game.\\n\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((61 63 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env (())))\""
  538
  403
  135
  0
  403
  135
  538
  1
  1
  173/31
  ((55 56 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2250/403
  ((53 54 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((62 63 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (...\n           fold/coord\n           (min-maybe-move (-> (λ (mmo mo₁) ...) <-))\n           max-maybe-move\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (... marked-with? (i⁻¹ (-> (λ (i) ...) <-)) ormap ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) (app make-ai-action (app X))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  57
  28
  29
  0
  28
  29
  57
  1
  1
  145/28
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((54 55 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (...\n           two-player-game\n           (one-player-game (-> (λ () ...) <-))\n           zero-player-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) empty-board player-one player-two) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((60 61 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app minimax bo that-mark this-mark)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((70 72 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env (())))\""
  537
  404
  133
  0
  404
  133
  537
  1
  1
  2253/404
  ((78 80 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app horizon (-> (app lose) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((74 75 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2251/403
  ((58 59 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app play-turn empty-board player-one (-> player-two <-)) (env (())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  37/7
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env (() ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((55 57 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((56 58 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  547
  414
  133
  0
  414
  133
  547
  1
  1
  255/46
  ((60 62 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  45
  22
  23
  0
  22
  23
  45
  1
  1
  113/22
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env (())))\""
  543
  407
  136
  0
  407
  136
  543
  1
  1
  2270/407
  ((54 56 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((56 57 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((53 54 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((54 56 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2250/403
  ((57 58 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app minimax bo that-mark (-> this-mark <-)) (env (() ())))\""
  18
  9
  9
  0
  9
  9
  18
  1
  1
  16/3
  ((0 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (...\n           blank?\n           (move-coord (-> (λ (move-coord-v) ...) <-))\n           move-horizon\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (letrec (... wins? (full? (-> (λ (b) ...) <-)) oc< ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env (())))\""
  85
  58
  27
  0
  58
  27
  85
  1
  1
  163/29
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-mark co mark (-> bo <-)) (env (())))\""
  11
  8
  3
  0
  8
  3
  11
  1
  1
  41/8
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> this-play <-) (player mark action)) (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  104/17
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  45
  22
  23
  0
  22
  23
  45
  1
  1
  113/22
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((74 76 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env (())))\""
  14
  8
  6
  0
  8
  6
  14
  1
  1
  21/4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((75 76 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  538
  405
  133
  0
  405
  133
  538
  1
  1
  2258/405
  ((72 73 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((62 64 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (let (bo) (-> (match (app wins? bo mark) ...) <-)) (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  173/31
  ((62 63 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app some-v (-> (app minimax bo that-mark this-mark) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((60 61 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((53 54 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((53 54 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  30
  23
  7
  0
  23
  7
  30
  1
  1
  124/23
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo that-mark this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env (())))\""
  23
  19
  4
  0
  19
  4
  23
  1
  1
  102/19
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app play-turn (-> empty-board <-) player-one player-two) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (... ormap (andmap (-> (λ (f xs) ...) <-)) wins? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2251/403
  ((54 55 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  24
  16
  8
  0
  16
  8
  24
  1
  1
  85/16
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-)) (env (())))\""
  537
  404
  133
  0
  404
  133
  537
  1
  1
  1127/202
  ((52 54 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  1123/201
  ((55 57 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (... some-v (marked? (-> (λ (a) ...) <-)) blank? ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (...\n           board-mark\n           (board-lookup (-> (λ (co bo) ...) <-))\n           marked-with?\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env (() ())))\""
  37
  30
  7
  0
  30
  7
  37
  1
  1
  17/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env (())))\""
  541
  408
  133
  0
  408
  133
  541
  1
  1
  2269/408
  ((58 60 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  let
  "\"'(eval (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((55 56 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((58 59 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((68 70 3)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env (() ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app equal? co₀ co) <-) (#f) _) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((76 77 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (letrec (... () (loop (-> (λ () ...) <-)) () ...) ...) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env (())))\""
  543
  407
  136
  0
  407
  136
  543
  1
  1
  2270/407
  ((71 73 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (... move-horizon (mark⁻¹ (-> (λ (ma) ...) <-)) empty-board ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (... mark⁻¹ (empty-board (-> (λ (co) ...) <-)) board-mark ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env (() ())))\""
  11
  8
  3
  0
  8
  3
  11
  1
  1
  41/8
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((67 69 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env (())))\""
  8
  5
  3
  0
  5
  3
  8
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (letrec (some-v ... is) (-> (app zero-player-game) <-)) (env ()))\""
  545
  412
  133
  0
  412
  133
  545
  1
  1
  2287/412
  ((62 63 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app f (-> (app coord r c) <-) x) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((55 56 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env (())))\""
  14
  9
  5
  0
  9
  5
  14
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env (() ())))\""
  51
  38
  13
  0
  38
  13
  51
  1
  1
  205/38
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env (())))\""
  25
  16
  9
  0
  16
  9
  25
  1
  1
  5
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app some-v (-> (app maximin bo that-mark this-mark) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((53 55 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env (() ())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((53 54 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((54 55 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((57 58 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (...\n           draw-board!\n           (play-turn (-> (λ (bo this-play that-play) ...) <-))\n           play-game\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env (())))\""
  538
  405
  133
  0
  405
  133
  538
  1
  1
  2257/405
  ((56 57 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env (())))\""
  15
  7
  8
  0
  7
  8
  15
  1
  1
  40/7
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((54 56 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app play-turn bo that-play (-> this-play <-)) (env (())))\""
  23
  16
  7
  0
  16
  7
  23
  1
  1
  47/8
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app minimax (-> bo <-) that-mark this-mark) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env (())))\""
  540
  407
  133
  0
  407
  133
  540
  1
  1
  2270/407
  ((55 56 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  19
  10
  9
  0
  10
  9
  19
  1
  1
  27/5
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> move-coord-v <-) (move move-coord-x _) _) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((52 53 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  536
  403
  133
  0
  403
  133
  536
  1
  1
  2250/403
  ((57 59 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  537
  404
  133
  0
  404
  133
  537
  1
  1
  1127/202
  ((53 54 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((57 58 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env (() ())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  36/7
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app foldl (-> (λ (c x) ...) <-) x is) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((55 56 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((57 58 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((75 76 3)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app lose) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app maximin bo (-> that-mark <-) this-mark) (env (() ())))\""
  18
  9
  9
  0
  9
  9
  18
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env (())))\""
  66
  32
  34
  0
  32
  34
  66
  1
  1
  21/4
  ((5 6 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  11/2
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (let (... () (co (-> (app action bo) <-)) () ...) ...) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((80 82 3)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env (() ())))\""
  76
  54
  22
  0
  54
  22
  76
  1
  1
  151/27
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match some-v-v ((some some-v-x) (-> some-v-x <-)) _) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((72 74 3)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  number
  "\"'(eval (app horizon (app win) (-> 0 <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env (() ())))\""
  22
  16
  6
  0
  16
  6
  22
  1
  1
  21/4
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((66 67 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env (())))\""
  541
  408
  133
  0
  408
  133
  541
  1
  1
  2269/408
  ((63 65 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-mark co this-mark (-> bo <-)) (env (() ())))\""
  8
  6
  2
  0
  6
  2
  8
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  8
  6
  2
  0
  6
  2
  8
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env (())))\""
  539
  404
  135
  0
  404
  135
  539
  1
  1
  2253/404
  ((55 57 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env (() ())))\""
  38
  18
  20
  0
  18
  20
  38
  1
  1
  46/9
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co mark bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((68 69 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (... foldl (fold/coord (-> (λ (f x) ...) <-)) min-maybe-move ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env (())))\""
  539
  406
  133
  0
  406
  133
  539
  1
  1
  2263/406
  ((61 62 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((56 57 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((59 61 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  let
  "\"'(eval (match (app full? bo) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  19/4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((53 55 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (letrec (loop) (-> (app loop) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((58 59 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (c) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((57 58 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (let (_) (-> (app display \"Cat's game.\\n\") <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  14/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((54 56 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env (())))\""
  545
  410
  135
  0
  410
  135
  545
  1
  1
  2283/410
  ((55 56 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  string
  "\"'(eval (app error (-> \"invalid match for move-coord\" <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app andmap (-> (λ (r) ...) <-) is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app andmap (-> (λ (rc) ...) <-) is) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-coord\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((52 53 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  542
  407
  135
  0
  407
  135
  542
  1
  1
  2267/407
  ((53 54 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (move-horizon-v) (-> (match move-horizon-v ...) <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((52 53 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (... oc< (horizon< (-> (λ (h₀ h₁) ...) <-)) horizon-add1 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  number
  "\"'(eval (app horizon (app lose) (-> 0 <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  749/134
  ((56 57 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec (...\n           minimax\n           (maximin (-> (λ (bo this-mark that-mark) ...) <-))\n           human-action\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (letrec (...\n           zero-player-game\n           (is\n            (->\n             (app\n              cons\n              (app Ze)\n              (app cons (app On) (app cons (app Tw) (app nil))))\n             <-))\n           ()\n           ...)\n    ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> < <-) sc₀ sc₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  31
  23
  8
  0
  23
  8
  31
  1
  1
  122/23
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  number
  "\"'(eval (app horizon (app draw) (-> 0 <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  4
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env (())))\""
  535
  402
  133
  0
  402
  133
  535
  1
  1
  2245/402
  ((52 53 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((56 57 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((57 58 1)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env (() ())))\""
  38
  27
  11
  0
  27
  11
  38
  1
  1
  16/3
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env (())))\""
  534
  401
  133
  0
  401
  133
  534
  1
  1
  2241/401
  ((54 55 2)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env (())))\""
  7
  3
  4
  0
  3
  4
  7
  1
  1
  16/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  33
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  33
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-2) ...) (env ()))\""
  120
  86
  28
  6
  60
  19
  79
  1
  2771/3150
  475/86
  ((7 7 0)))
'(clean-cache
  sat-small
  1
  33
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  108
  74
  28
  6
  50
  19
  69
  1
  493/558
  203/37
  ((5 5 0)))
'(clean-cache
  sat-small
  1
  33
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  113
  78
  28
  7
  52
  19
  71
  1
  245/288
  433/78
  ((7 8 0)))
'(clean-cache
  sat-small
  1
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  33
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  33
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  113
  78
  28
  7
  52
  19
  71
  1
  245/288
  433/78
  ((6 6 0)))
'(clean-cache
  sat-small
  1
  33
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-2 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  33
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-2 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  33
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  9
  3
  5
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  33
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  11
  5
  3
  3
  2
  1
  3
  1
  2/9
  26/5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  33
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  33
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  120
  86
  28
  6
  58
  19
  77
  1
  2501/2970
  237/43
  ((6 6 0)))
'(clean-cache
  sat-small
  1
  33
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  11
  4
  2
  5
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  11
  5
  3
  3
  2
  1
  3
  1
  2/9
  26/5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  33
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  91
  63
  21
  7
  40
  15
  55
  1
  916/1035
  335/63
  ((5 5 0)))
'(clean-cache
  sat-small
  1
  33
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  33
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  33
  app
  "\"'(eval (letrec (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  119
  85
  28
  6
  59
  19
  78
  1
  2681/3060
  469/85
  ((6 6 0)))
'(clean-cache
  sat-small
  1
  33
  lambda
  "\"'(eval (letrec (... () (phi (-> (λ (x1 x2) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  33
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env ((□? (x1 x2)))))\""
  30
  19
  8
  3
  12
  4
  16
  1
  3/4
  100/19
  ((0 1 0)))
'(clean-cache
  sat-small
  1
  33
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  124
  89
  28
  7
  57
  19
  76
  1
  2321/2880
  500/89
  ((7 7 0)))
'(clean-cache
  sat-small
  1
  33
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  33
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2)))))\""
  24
  13
  8
  3
  8
  4
  12
  1
  3/4
  68/13
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  33
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  33
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env ((□? (x1 x2)))))\""
  71
  47
  19
  5
  30
  13
  43
  1
  131/171
  249/47
  ((3 3 0)))
'(clean-cache
  sat-small
  1
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  33
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  15
  9
  3
  3
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  33
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-small
  1
  33
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env ((□? (x1 x2)))))\""
  26
  13
  8
  5
  9
  5
  14
  1
  17/20
  68/13
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  15
  4
  2
  9
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  807
  585
  178
  44
  179
  59
  238
  1
  25135/29484
  3314/585
  ((203 207 4)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-4 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  26
  13
  8
  5
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  36
  19
  8
  9
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  58
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  218
  129
  48
  41
  33
  15
  48
  1
  281/432
  228/43
  ((32 32 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  9
  3
  5
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  32
  13
  8
  11
  9
  5
  14
  1
  17/20
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  58
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-4) ...) (env ()))\""
  853
  631
  178
  44
  213
  59
  272
  1
  22377049/27130950
  3617/631
  ((201 206 4)))
'(clean-cache
  sat-1
  1
  58
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  827
  605
  178
  44
  193
  59
  252
  1
  3715279/4439610
  3462/605
  ((200 204 4)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  752
  574
  133
  45
  157
  43
  200
  1
  124829/146124
  75/14
  ((192 196 4)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  853
  631
  178
  44
  211
  59
  270
  1
  42041003/52453170
  3616/631
  ((213 217 4)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  846
  623
  178
  45
  205
  59
  264
  1
  83539387/103097610
  3613/623
  ((218 222 5)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  23
  9
  3
  11
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  lambda
  "\"'(eval\n  (letrec (... () (phi (-> (λ (x1 x2 x3 x4) ...) <-)) try ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  21
  9
  3
  9
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-4 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  841
  619
  178
  44
  203
  59
  262
  1
  41679257/50644440
  3548/619
  ((214 218 6)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  19
  9
  5
  5
  4
  1
  5
  1
  4/25
  16/3
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  846
  623
  178
  45
  205
  59
  264
  1
  83539387/103097610
  3613/623
  ((210 215 6)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  58
  lambda
  "\"'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  19
  9
  3
  7
  5
  2
  7
  1
  5/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  58
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  34
  19
  8
  7
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  13
  8
  9
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  58
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  85
  51
  19
  15
  21
  6
  27
  1
  13/21
  271/51
  ((5 5 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  28
  13
  8
  7
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  71
  43
  19
  9
  17
  6
  23
  1
  11/17
  227/43
  ((5 5 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  603
  431
  131
  41
  123
  41
  164
  1
  3839/6480
  2293/431
  ((153 156 4)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  36
  19
  8
  9
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  19
  9
  5
  5
  4
  1
  5
  1
  4/25
  16/3
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  28
  13
  8
  7
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval (letrec (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  852
  630
  178
  44
  212
  59
  271
  1
  43849733/53357535
  3611/630
  ((201 205 7)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  857
  634
  178
  45
  210
  59
  269
  1
  8191153/10309761
  1859/317
  ((219 224 5)))
'(clean-cache
  sat-1
  1
  58
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-1
  1
  58
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  34
  19
  8
  7
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  96
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x4 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  68
  15
  13
  40
  7
  5
  12
  1
  7/10
  16/3
  ((3 3 0)))
'(clean-cache
  sat-2
  1
  96
  lambda
  "\"'(eval (letrec (... () (phi (-> (λ (x1) ...) <-)) try ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  lambda
  "\"'(eval\n  (λ (x5) (-> (λ (x6) ...) <-))\n  (env ((□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  6
  1
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  39
  22
  2
  15
  8
  2
  10
  1
  8/15
  5
  ((2 2 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  451
  183
  108
  160
  24
  17
  41
  1
  25/54
  330/61
  ((122 124 2)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  lambda
  "\"'(eval (λ (x3) (-> (λ (x4) ...) <-)) (env ((□? (x3)) (□? (x2)) (□? (x1)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  134
  27
  31
  76
  7
  7
  14
  1
  7/10
  152/27
  ((8 9 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  68
  15
  13
  40
  7
  5
  12
  1
  7/10
  16/3
  ((2 2 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  24
  7
  2
  15
  3
  2
  5
  1
  3/5
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  257
  99
  60
  98
  13
  9
  22
  1
  9/17
  61/11
  ((47 48 1)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  30
  9
  3
  18
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  93
  19
  20
  54
  7
  6
  13
  1
  7/10
  104/19
  ((5 5 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  68
  15
  13
  40
  7
  5
  12
  1
  7/10
  16/3
  ((3 3 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  22
  9
  3
  10
  5
  2
  7
  1
  5/7
  46/9
  ((0 1 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  78
  25
  13
  40
  9
  5
  14
  1
  9/14
  134/25
  ((4 4 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((2 2 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  134
  27
  31
  76
  7
  7
  14
  1
  7/10
  152/27
  ((10 10 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  28
  9
  3
  16
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  letrec
  "\"'(eval ((top) letrec (phi ... sat-solve-7) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  27
  10
  2
  15
  4
  2
  6
  1
  4/7
  5
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  96
  lambda
  "\"'(eval\n  (λ (x4) (-> (λ (x5) ...) <-))\n  (env ((□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  53
  13
  8
  32
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  36
  19
  2
  15
  7
  2
  9
  1
  7/13
  5
  ((2 2 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  53
  13
  8
  32
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x4) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  111
  37
  20
  54
  9
  6
  15
  1
  9/14
  202/37
  ((8 8 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  32
  9
  3
  20
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  222
  99
  43
  80
  13
  8
  21
  1
  3/7
  541/99
  ((29 30 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  134
  27
  31
  76
  7
  7
  14
  1
  7/10
  152/27
  ((8 8 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x3)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  9
  3
  8
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  lambda
  "\"'(eval (λ (x1) (-> (λ (x2) ...) <-)) (env ((□? (x1)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  168
  61
  31
  76
  9
  7
  16
  1
  9/14
  338/61
  ((22 22 0)))
'(clean-cache
  sat-2
  1
  96
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  26
  9
  3
  14
  5
  2
  7
  1
  5/7
  46/9
  ((0 1 0)))
'(clean-cache
  sat-2
  1
  96
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((2 2 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  68
  15
  13
  40
  7
  5
  12
  1
  7/10
  16/3
  ((3 3 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  30
  13
  2
  15
  5
  2
  7
  1
  5/9
  5
  ((2 2 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> not <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  78
  25
  13
  40
  9
  5
  14
  1
  9/14
  134/25
  ((5 5 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  33
  16
  2
  15
  6
  2
  8
  1
  6/11
  5
  ((2 2 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  291
  131
  60
  100
  14
  10
  24
  1
  10/19
  725/131
  ((68 69 1)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n7) ...) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n6) ...) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  1
  0
  6
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  111
  37
  20
  54
  9
  6
  15
  1
  9/14
  202/37
  ((10 10 0)))
'(clean-cache
  sat-2
  1
  96
  lambda
  "\"'(eval\n  (λ (x6) (-> (λ (x7) ...) <-))\n  (env ((□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  7
  1
  0
  6
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  255
  99
  60
  96
  13
  9
  22
  1
  9/17
  61/11
  ((55 56 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval (letrec (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  96
  lambda
  "\"'(eval (λ (x2) (-> (λ (x3) ...) <-)) (env ((□? (x2)) (□? (x1)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  24
  9
  3
  12
  5
  2
  7
  1
  5/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  93
  19
  20
  54
  7
  6
  13
  1
  7/10
  104/19
  ((6 6 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  153
  51
  30
  72
  16
  10
  26
  1
  32/51
  91/17
  ((18 18 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  93
  19
  20
  54
  7
  6
  13
  1
  7/10
  104/19
  ((5 5 0)))
'(clean-cache
  sat-2
  1
  96
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x3 x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  lambda
  "\"'(eval\n  (app try (-> (λ (n5) ...) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  1
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-2
  1
  96
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  53
  13
  8
  32
  8
  5
  13
  1
  4/5
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  874
  459
  131
  284
  73
  25
  98
  1
  1615/2916
  2453/459
  ((487 497 8)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  19
  8
  18
  12
  4
  16
  1
  3/4
  100/19
  ((2 2 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  lambda
  "\"'(eval\n  (letrec (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  32
  9
  3
  20
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  7
  6
  0
  1
  4
  0
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  4
  1
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  30
  9
  3
  18
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  string
  "\"'(eval (app println (-> \"trying\" <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  4
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  28
  9
  3
  16
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  letrec
  "\"'(eval ((top) letrec (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env ((□? (f)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  98
  43
  19
  36
  17
  6
  23
  1
  11/17
  227/43
  ((10 10 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  24
  9
  3
  12
  5
  2
  7
  1
  5/7
  46/9
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ((□? (s)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((2 2 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  9
  5
  14
  1
  17/20
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  31
  15
  8
  8
  7
  1
  8
  1
  7/64
  27/5
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  21
  4
  2
  15
  2
  2
  4
  1
  2/3
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  constructor
  "\"'(eval (app (-> #f <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  35
  13
  8
  14
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  35
  13
  8
  14
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  19
  8
  16
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n5) ...) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  1
  0
  5
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n6) ...) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  7
  1
  0
  6
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  9
  3
  8
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  26
  9
  3
  14
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  96
  43
  19
  34
  17
  6
  23
  1
  11/17
  227/43
  ((9 9 0)))
'(clean-cache
  sat-3
  1
  100
  lambda
  "\"'(eval\n  (letrec (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  let
  "\"'(eval (letrec (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  constructor
  "\"'(eval (app (-> #t <-)) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  1
  0
  4
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  112
  51
  19
  42
  21
  6
  27
  1
  13/21
  271/51
  ((11 11 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  299
  129
  48
  122
  33
  15
  48
  1
  281/432
  228/43
  ((56 57 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  104
  47
  19
  38
  20
  7
  27
  1
  13/19
  249/47
  ((8 8 0)))
'(clean-cache
  sat-3
  1
  100
  lambda
  "\"'(eval\n  (letrec (... println (phi (-> (λ (x1 x2 x3 x4 x5 x6 x7) ...) <-)) try ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  19
  8
  16
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  13
  8
  16
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  13
  8
  18
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  9
  5
  14
  1
  17/20
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  112
  43
  19
  50
  20
  9
  29
  1
  38/51
  227/43
  ((12 12 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  19
  8
  14
  12
  4
  16
  1
  3/4
  100/19
  ((2 2 0)))
'(clean-cache
  sat-3
  1
  100
  lambda
  "\"'(eval (letrec (... () (println (-> (λ (s) ...) <-)) phi ...) ...) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  11
  7
  2
  2
  3
  1
  4
  1
  3/8
  33/7
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  13
  8
  20
  9
  5
  14
  1
  17/20
  68/13
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  lambda
  "\"'(eval\n  (app try (-> (λ (n7) ...) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  8
  1
  0
  7
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  45
  19
  8
  18
  12
  4
  16
  1
  3/4
  100/19
  ((1 1 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))\""
  3
  1
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  1012
  588
  133
  291
  75
  27
  102
  1
  1361/1566
  3155/588
  ((735 752 11)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  7
  3
  2
  2
  1
  1
  2
  1
  1/4
  4
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  22
  9
  3
  10
  5
  2
  7
  1
  5/7
  46/9
  ((0 0 0)))
'(clean-cache
  sat-3
  1
  100
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  35
  13
  8
  14
  8
  4
  12
  1
  3/4
  68/13
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  1746
  1261
  413
  72
  691
  182
  873
  1
  288409/490140
  7655/1261
  ((334 341 12)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env ((□? (r x)) (□? (f x)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  1706
  1224
  410
  72
  665
  179
  844
  1
  293449/492660
  928/153
  ((302 310 8)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((324 332 9)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  14/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  lambda
  "\"'(eval\n  (letrec (...\n           blank?\n           (move-coord (-> (λ (move-coord-v) ...) <-))\n           move-horizon\n           ...)\n    ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  1704
  1222
  410
  72
  662
  179
  841
  1
  286309/485100
  3708/611
  ((305 312 9)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  1697
  1215
  410
  72
  656
  179
  835
  1
  285259/483840
  2467/405
  ((308 315 10)))
'(clean-cache
  tic-tac-toe
  1
  569
  lambda
  "\"'(eval\n  (letrec (... oc< (horizon< (-> (λ (h₀ h₁) ...) <-)) horizon-add1 ...) ...)\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  35
  17
  4
  14
  4
  1
  5
  1
  1/6
  87/17
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  1694
  1212
  410
  72
  654
  179
  833
  1
  284629/482580
  1229/202
  ((332 339 14)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  1696
  1214
  410
  72
  655
  179
  834
  1
  285259/483840
  3701/607
  ((357 365 17)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env ((□? (bo)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  86
  34
  21
  31
  8
  2
  10
  1
  7/40
  94/17
  ((7 7 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  6
  2
  4
  1
  0
  1
  1
  1/5
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  569
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0)))
