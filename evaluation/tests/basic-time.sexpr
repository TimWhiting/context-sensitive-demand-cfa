'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  33
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  51
  33
  12
  6
  33
  12
  45
  1
  1
  179/33
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  33
  lambda
  "\"'(eval (letrec* (... () (phi (-> (λ (x1 x2) ...) <-)) try ...) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-small
  0
  10
  33
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-small
  0
  10
  33
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-small
  0
  10
  33
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-small
  0
  10
  33
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env (())))\""
  28
  19
  7
  2
  19
  7
  26
  1
  1
  101/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  0
  33
  lambda
  "\"'(eval\n  (letrec* (... try (sat-solve-2 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env (() () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  33
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-small
  0
  10
  33
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env (() () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-small
  0
  33
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-small
  0
  10
  33
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env (() () ())))\""
  35
  23
  9
  3
  23
  9
  32
  1
  1
  122/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-small
  0
  10
  33
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-small
  0
  33
  lambda
  "\"'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-2 ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env (() () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-small
  0
  33
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-small
  0
  10
  33
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  58
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (n4) (-> (app p n1 n2 n3 n4) <-)) (env (() () () () ())))\""
  58
  44
  11
  3
  44
  11
  55
  1
  1
  60/11
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4) (env (() () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  sat-1
  0
  58
  lambda
  "\"'(eval\n  (letrec* (... () (phi (-> (λ (x1 x2 x3 x4) ...) <-)) try ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  30
  21
  7
  2
  21
  7
  28
  1
  1
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4) (env (() () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-)) (env (() () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  58
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  58
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  10
  5
  5
  0
  5
  5
  10
  1
  1
  28/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  58
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  58
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((3 3 0) (3 3 0) (7/2 7/2 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  34
  24
  8
  2
  24
  8
  32
  1
  1
  43/8
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  58
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4) (env (() () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((5/2 5/2 0) (5/2 3 0) (3 3 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  81
  57
  16
  8
  57
  16
  73
  1
  1
  317/57
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  58
  lambda
  "\"'(eval\n  (letrec* (... try (sat-solve-4 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((0 0 0) (1/2 1/2 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  58
  lambda
  "\"'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-4 ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  51
  40
  9
  2
  40
  9
  49
  1
  1
  219/40
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  82
  58
  16
  8
  58
  16
  74
  1
  1
  323/58
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  10
  5
  5
  0
  5
  5
  10
  1
  1
  28/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4) (env (() () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (() () () () () () ())))\""
  24
  14
  8
  2
  14
  8
  22
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env (() () () () () () () ())))\""
  23
  15
  2
  6
  15
  2
  17
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x6) (-> (λ (x7) ...) <-)) (env (() () () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n7) ...) <-)) (env (() () () () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  22
  10
  10
  2
  10
  10
  20
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x4) (-> (λ (x5) ...) <-)) (env (() () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (() () () () () () ())))\""
  20
  10
  8
  2
  10
  8
  18
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env (() () () () () () ())))\""
  24
  14
  8
  2
  14
  8
  22
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x1) (-> (λ (x2) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  22
  10
  10
  2
  10
  10
  20
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (() () () () () () ())))\""
  32
  17
  13
  2
  17
  13
  30
  1
  1
  90/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (letrec* (... () (phi (-> (λ (x1) ...) <-)) try ...) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1) (env (() () () () () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (app (-> (app (app p n1) n2) <-) n3) (env (() () () () () () () ())))\""
  11
  7
  2
  2
  7
  2
  9
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env (() () () () () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env (() () () () () () () ())))\""
  20
  13
  2
  5
  13
  2
  15
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (0 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-)) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (app (app p n1) n2) (-> n3 <-)) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x3) (-> (λ (x4) ...) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x5) (-> (λ (x6) ...) <-)) (env (() () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (() () () () () () ())))\""
  71
  54
  15
  2
  54
  15
  69
  1
  1
  299/54
  ((9/2 9/2 0) (9/2 9/2 0) (5 5 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  28
  17
  9
  2
  17
  9
  26
  1
  1
  90/17
  ((1 1 0) (1 1 0) (1/2 1 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env (() () () () () () () ())))\""
  17
  11
  2
  4
  11
  2
  13
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (() () () () () () ())))\""
  22
  10
  10
  2
  10
  10
  20
  1
  1
  26/5
  ((1 5/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  38
  24
  12
  2
  24
  12
  36
  1
  1
  43/8
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (() () () () () () ())))\""
  24
  10
  12
  2
  10
  12
  22
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  96
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (app (-> (app p n1) <-) n2) (env (() () () () () () () ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (() () () () () () ())))\""
  26
  14
  10
  2
  14
  10
  24
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (() () () () () () ())))\""
  24
  10
  12
  2
  10
  12
  22
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env (() () () () () () ())))\""
  26
  14
  10
  2
  14
  10
  24
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env (() () () () () () () ())))\""
  14
  9
  2
  3
  9
  2
  11
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (app p n1) (-> n2 <-)) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (() () () () () () ())))\""
  24
  10
  12
  2
  10
  12
  22
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  96
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  34
  21
  11
  2
  21
  11
  32
  1
  1
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (() () () () () () ())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  20
  10
  8
  2
  10
  8
  18
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval\n  (letrec* (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  96
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  20
  10
  8
  2
  10
  8
  18
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  32
  17
  13
  2
  17
  13
  30
  1
  1
  90/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (() () () () () () ())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (() () () () () () ())))\""
  28
  14
  12
  2
  14
  12
  26
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  96
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (() () () () () () ())))\""
  20
  10
  8
  2
  10
  8
  18
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x2) (-> (λ (x3) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n5) ...) <-)) (env (() () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n6) ...) <-)) (env (() () () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  34
  19
  13
  2
  19
  13
  32
  1
  1
  101/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  34
  24
  8
  2
  24
  8
  32
  1
  1
  43/8
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n5) ...) <-)) (env (() () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  10
  100
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  6
  4
  2
  0
  4
  2
  6
  1
  1
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  65
  54
  9
  2
  54
  9
  63
  1
  1
  299/54
  ((5 5 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  10
  100
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  100
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n6) ...) <-)) (env (() () () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (letrec* (... () (println (-> (λ (s) ...) <-)) phi ...) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  28
  19
  7
  2
  19
  7
  26
  1
  1
  101/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  23/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval\n  (letrec*\n   (... println (phi (-> (λ (x1 x2 x3 x4 x5 x6 x7) ...) <-)) try ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  90/17
  ((1/2 1 0) (1/2 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  100
  string
  "\"'(eval (app println (-> \"trying\" <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  90/17
  ((1 1 0) (1 1 0) (1/2 1 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  7
  6
  0
  1
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval\n  (letrec* (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  90/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n7) ...) <-)) (env (() () () () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  30
  21
  7
  2
  21
  7
  28
  1
  1
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  100
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... horizon-add1 (foldl (-> (λ (f acc l) ...) <-)) fold/coord ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... full? (oc< (-> (λ (oc₀ oc₁) ...) <-)) horizon< ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  string
  "\"'(eval (app error 'human-action (-> \"not implemented\" <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app horizon (-> (app lose) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env (() ())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1/2 1/2 0) (1 1 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (r) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app f (app coord r c) (-> x <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) empty-board player-one player-two) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1 1 0) (1 1 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (letrec* (... wins? (full? (-> (λ (b) ...) <-)) oc< ...) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app foldl (-> (λ (c x) ...) <-) x is) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app minimax bo that-mark (-> this-mark <-)) (env (() ())))\""
  18
  9
  9
  0
  9
  9
  18
  1
  1
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env (() ())))\""
  12
  8
  3
  1
  8
  3
  11
  1
  1
  41/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (...\n    max-maybe-move\n    (minimax (-> (λ (bo this-mark that-mark) ...) <-))\n    maximin\n    ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app fold/coord (-> (λ (co mm) ...) <-) (app none)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  let
  "\"'(eval (λ (bo this-play that-play) (-> (let (_) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  9
  6
  2
  1
  6
  2
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (let (... () (co (-> (app action bo) <-)) () ...) ...) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  letrec
  "\"'(eval (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  string
  "\"'(eval (app error (-> \"invalid match for some-v\" <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  11/2
  ((1/2 1/2 0) (0 0 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env (())))\""
  37
  30
  7
  0
  30
  7
  37
  1
  1
  17/3
  ((2 2 0) (2 2 0) (2 5/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... board-lookup (marked-with? (-> (λ (b co m) ...) <-)) i⁻¹ ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord rc rc) m) (env (() ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... () (some-v (-> (λ (some-v-v) ...) <-)) marked? ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env (())))\""
  7
  3
  4
  0
  3
  4
  7
  1
  1
  16/3
  ((0 0 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (λ (co₀ ma bo) (-> (λ (co) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env (())))\""
  42
  28
  13
  1
  28
  13
  41
  1
  1
  151/28
  ((2 2 0) (2 5/2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app maximin bo that-mark (-> this-mark <-)) (env (() ())))\""
  30
  18
  11
  1
  18
  11
  29
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... some-v (marked? (-> (λ (a) ...) <-)) blank? ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  23
  19
  4
  0
  19
  4
  23
  1
  1
  102/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... blank? (move-coord (-> (λ (move-coord-v) ...) <-)) move-horizon ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... play-game (two-player-game (-> (λ () ...) <-)) one-player-game ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  31
  23
  7
  1
  23
  7
  30
  1
  1
  124/23
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  24
  16
  8
  0
  16
  8
  24
  1
  1
  85/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env (() ())))\""
  23
  16
  6
  1
  16
  6
  22
  1
  1
  21/4
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app some-v (-> (app maximin bo that-mark this-mark) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  number
  "\"'(eval (app + sc (-> 1 <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  number
  "\"'(eval (app horizon (app win) (-> 0 <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app play-turn (-> empty-board <-) player-one player-two) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  31
  23
  7
  1
  23
  7
  30
  1
  1
  124/23
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env (())))\""
  14
  9
  5
  0
  9
  5
  14
  1
  1
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... move-coord (move-horizon (-> (λ (move-horizon-v) ...) <-)) is ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (let (_) (-> (match this-play ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (co) (-> (match (app equal? co₀ co) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env (() ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((5/2 5/2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  31
  23
  7
  1
  23
  7
  30
  1
  1
  124/23
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env (() () ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env (() ())))\""
  41
  18
  20
  3
  18
  20
  38
  1
  1
  46/9
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env (())))\""
  14
  8
  6
  0
  8
  6
  14
  1
  1
  21/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> move-coord-v <-) (move move-coord-x _) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app andmap (-> (λ (c) ...) <-) is) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env (())))\""
  26
  16
  9
  1
  16
  9
  25
  1
  1
  5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app play-turn empty-board player-one (-> player-two <-)) (env (())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  37/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app minimax bo that-mark this-mark)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> display <-) \"Cat's game.\\n\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app f (-> (app coord r c) <-) x) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env (() ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app minimax bo (-> that-mark <-) this-mark) (env (() ())))\""
  30
  18
  11
  1
  18
  11
  29
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-mark co (-> mark <-) bo) (env (())))\""
  37
  30
  7
  0
  30
  7
  37
  1
  1
  17/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> move-horizon-v <-) (move _ move-horizon-x) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app andmap (-> (λ (rc) ...) <-) is) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (...\n    play-turn\n    (play-game (-> (λ (player-one player-two) ...) <-))\n    two-player-game\n    ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env (() ())))\""
  53
  38
  13
  2
  38
  13
  51
  1
  1
  205/38
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... ormap (andmap (-> (λ (f xs) ...) <-)) wins? ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... andmap (wins? (-> (λ (b m) ...) <-)) full? ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app marked-with? b (-> (app coord rc rc) <-) m) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... human-action (make-ai-action (-> (λ (ma) ...) <-)) draw-board! ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (move-coord-v) (-> (match move-coord-v ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) mark bo) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> this-play <-) (player mark action)) (env (())))\""
  24
  17
  7
  0
  17
  7
  24
  1
  1
  104/17
  ((3/2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  number
  "\"'(eval (app horizon (app draw) (-> 0 <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... board-mark (board-lookup (-> (λ (co bo) ...) <-)) marked-with? ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-))) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (...\n    fold/coord\n    (min-maybe-move (-> (λ (mmo mo₁) ...) <-))\n    max-maybe-move\n    ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo that-mark this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... oc< (horizon< (-> (λ (h₀ h₁) ...) <-)) horizon-add1 ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  31
  23
  8
  0
  23
  8
  31
  1
  1
  122/23
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> minimax <-) bo that-mark this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... foldl (fold/coord (-> (λ (f x) ...) <-)) min-maybe-move ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app ormap (-> (λ (c) ...) <-) is) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app coord r c) x) (env (() () ())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (λ (ma) (-> (λ (bo) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-horizon\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... empty-board (board-mark (-> (λ (co₀ ma bo) ...) <-)) board-lookup ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (...\n    two-player-game\n    (one-player-game (-> (λ () ...) <-))\n    zero-player-game\n    ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env (() ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env (())))\""
  15
  7
  8
  0
  7
  8
  15
  1
  1
  40/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  31
  19
  11
  1
  19
  11
  30
  1
  1
  102/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (c) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env (())))\""
  8
  5
  3
  0
  5
  3
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  quoted
  "\"'(eval (app error (-> 'human-action <-) \"not implemented\") (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (...\n    minimax\n    (maximin (-> (λ (bo this-mark that-mark) ...) <-))\n    human-action\n    ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  string
  "\"'(eval (app display (-> \"Cat's game.\\n\" <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  12
  8
  3
  1
  8
  3
  11
  1
  1
  41/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app andmap (-> (λ (r) ...) <-) is) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... one-player-game (zero-player-game (-> (λ () ...) <-)) () ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) (app make-ai-action (app X))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app some-v (-> (app minimax bo that-mark this-mark) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  number
  "\"'(eval (app horizon (app lose) (-> 0 <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env (())))\""
  49
  35
  13
  1
  35
  13
  48
  1
  1
  188/35
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... marked? (blank? (-> (λ (a) ...) <-)) move-coord ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (letrec (... () (loop (-> (λ () ...) <-)) () ...) ...) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... is (mark⁻¹ (-> (λ (ma) ...) <-)) empty-board ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  25/4
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... i⁻¹ (ormap (-> (λ (f xs) ...) <-)) andmap ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app play-turn empty-board (-> player-one <-) player-two) (env (())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  37/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env (() ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) bo that-play this-play) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  48
  22
  23
  3
  22
  23
  45
  1
  1
  113/22
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  let
  "\"'(eval (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  11/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  8
  5
  2
  1
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  60
  28
  29
  3
  28
  29
  57
  1
  1
  145/28
  ((7/2 4 0) (7/2 4 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... horizon< (horizon-add1 (-> (λ (h) ...) <-)) foldl ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app ormap (-> (λ (r) ...) <-) is) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... mark⁻¹ (empty-board (-> (λ (co) ...) <-)) board-mark ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... min-maybe-move (max-maybe-move (-> (λ (mmo mo₁) ...) <-)) minimax ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (app X) (-> (app make-ai-action (app X)) <-)) (env (())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (let (bo) (-> (match (app wins? bo mark) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... marked-with? (i⁻¹ (-> (λ (i) ...) <-)) ormap ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  31
  19
  11
  1
  19
  11
  30
  1
  1
  102/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app play-turn bo (-> that-play <-) this-play) (env (())))\""
  23
  16
  7
  0
  16
  7
  23
  1
  1
  47/8
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env (())))\""
  23
  19
  4
  0
  19
  4
  23
  1
  1
  102/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-coord\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord rc rc) m) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  19
  10
  9
  0
  10
  9
  19
  1
  1
  27/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (move-horizon-v) (-> (match move-horizon-v ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env (() ())))\""
  38
  30
  7
  1
  30
  7
  37
  1
  1
  17/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  number
  "\"'(eval (app horizon (app draw) (-> 0 <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env (())))\""
  19
  13
  6
  0
  13
  6
  19
  1
  1
  68/13
  ((1/2 1 0) (1 1 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  string
  "\"'(eval (app error (-> \"invalid match for move-coord\" <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (...\n    draw-board!\n    (play-turn (-> (λ (bo this-play that-play) ...) <-))\n    play-game\n    ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (c x) (-> (app f (app coord r c) x) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma))) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app andmap (-> (λ (c) ...) <-) is) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app andmap (-> (λ (r) ...) <-) is) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-mark co mark (-> bo <-)) (env (())))\""
  12
  8
  3
  1
  8
  3
  11
  1
  1
  41/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  19
  10
  9
  0
  10
  9
  19
  1
  1
  27/5
  ((1 3/2 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app wins? bo mark) <-) (#f) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo that-mark this-mark)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1/2 1 0) (1 1 0) (1/2 1 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env (())))\""
  24
  16
  8
  0
  16
  8
  24
  1
  1
  85/16
  ((3/2 3/2 0) (1 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (letrec (loop) (-> (app loop) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord rc rc) (-> m <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  let
  "\"'(eval (λ () (-> (let (co) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  let
  "\"'(eval (match (app full? bo) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  string
  "\"'(eval (app error (-> \"invalid match for move-horizon\" <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app play-turn (-> bo <-) that-play this-play) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env (())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app horizon (-> (app win) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... maximin (human-action (-> (λ (bo) ...) <-)) make-ai-action ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) that-mark this-mark) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
