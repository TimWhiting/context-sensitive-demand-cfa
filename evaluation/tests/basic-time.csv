"app-num", 0, "(list 'eval '(top) (menv '()))", 11,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(λ (y) (-> y <-)) (menv '(())))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(let (x) (-> (let ((_ (app x 1))) (app x 2)) <-)) (menv '()))", 10,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(let ((-> _ = (app x 1) <-)) bod) (menv '()))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(app x (-> 1 <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(app (-> x <-) 1) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(let (_) (-> (app x 2) <-)) (menv '()))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(app x (-> 2 <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(app (-> x <-) 2) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(top) (menv '()))", 20,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list
 'eval
 '(letrec ((->
            a
            =
            (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
            <-))
    bod)
 (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list
 'eval
 '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
 (menv '(())))", 17,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list
 'eval
 '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
 (menv '(())))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list
 'eval
 '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
 (menv '(())))", 17,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app a (-> (app - y 1) <-)) (menv '(())))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app - y (-> 1 <-)) (menv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app - (-> y <-) 1) (menv '(())))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app (-> - <-) y 1) (menv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app (-> a <-) (app - y 1)) (menv '(())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list
 'eval
 '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
 (menv '(())))", 12,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app equal? y (-> 0 <-)) (menv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app equal? (-> y <-) 0) (menv '(())))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app (-> equal? <-) y 0) (menv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(letrec (a) (-> (app a 2) <-)) (menv '()))", 19,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app a (-> 2 <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app (-> a <-) 2) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 0, "(list 'eval '(top) (menv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 0, "(list 'eval '(let* (a (-> b = a <-)) bod) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 0, "(list 'eval '(let* ((-> a = 10 <-) b) bod) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 0, "(list 'eval '(let* (a b) (-> a <-)) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(top) (menv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(let ((-> x = (app cons 1 nil) <-)) bod) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(app cons 1 (-> nil <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(app cons (-> 1 <-) nil) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(app (-> cons <-) 1 nil) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(let (x) (-> (match x ((cons 1 n) n) (_ x)) <-)) (menv '()))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(match x ((cons 1 n) n) (-> _ x <-)) (menv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(match x (-> (cons 1 n) n <-) (_ x)) (menv '()))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(match (-> x <-) ((cons 1 n) n) (_ x)) (menv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 0, "(list 'eval '(top) (menv '()))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 0, "(list 'eval '(app (λ (x) (app x x)) (-> 2 <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 0, "(list 'eval '(app (-> (λ (x) (app x x)) <-) 2) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 0, "(list 'eval '(λ (x) (-> (app x x) <-)) (menv '(())))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 0, "(list 'eval '(app x (-> x <-)) (menv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 0, "(list 'eval '(app (-> x <-) x) (menv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 0, "(list 'eval '(top) (menv '()))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 0, "(list 'eval '(app (λ (x) x) (-> (λ (y) y) <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 0, "(list 'eval '(λ (y) (-> y <-)) (menv '(())))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 0, "(list 'eval '(app (-> (λ (x) x) <-) (λ (y) y)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 0, "(list 'eval '(λ (x) (-> x <-)) (menv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 0, "(list 'eval '(top) (menv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 0, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 0, "(list 'eval '(λ (y) (-> y <-)) (menv '(())))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 0, "(list 'eval '(let (x) (-> (app x 1) <-)) (menv '()))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 0, "(list 'eval '(app x (-> 1 <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 0, "(list 'eval '(app (-> x <-) 1) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 0, "(list 'eval '(top) (menv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 0, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 0, "(list 'eval '(λ (y) (-> y <-)) (menv '(())))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 0, "(list 'eval '(let (x) (-> x <-)) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(top) (menv '()))", 11,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(app (λ (x y) (app x y)) (λ (z) z) (-> 2 <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(app (λ (x y) (app x y)) (-> (λ (z) z) <-) 2) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(λ (z) (-> z <-)) (menv '(())))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(app (-> (λ (x y) (app x y)) <-) (λ (z) z) 2) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(λ (x y) (-> (app x y) <-)) (menv '(())))", 10,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(app x (-> y <-)) (menv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(app (-> x <-) y) (menv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(top) (menv '()))", 45,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(letrec ((->
            ack
            =
            (λ (m n)
              (match
               (app = m 0)
               (#f
                (match
                 (app = n 0)
                 (#f (app ack (app - m 1) (app ack m (app - n 1))))
                 (_ (app ack (app - m 1) 1))))
               (_ (app + n 1))))
            <-))
    bod)
 (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (menv '(())))", 42,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(match
   (app = m 0)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (menv '(())))", 42,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app + n (-> 1 <-)) (menv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app + (-> n <-) 1) (menv '(())))", 42,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> + <-) n 1) (menv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(match
   (app = m 0)
   (->
    #f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (menv '(())))", 42,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(match
   (app = n 0)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (menv '(())))", 42,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app ack (app - m 1) (-> 1 <-)) (menv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app ack (-> (app - m 1) <-) 1) (menv '(())))", 15,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app - m (-> 1 <-)) (menv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app - (-> m <-) 1) (menv '(())))", 15,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> - <-) m 1) (menv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> ack <-) (app - m 1) 1) (menv '(())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(match
   (app = n 0)
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (menv '(())))", 42,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (menv '(())))", 42,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app ack m (-> (app - n 1) <-)) (menv '(())))", 42,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app - n (-> 1 <-)) (menv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app - (-> n <-) 1) (menv '(())))", 42,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> - <-) n 1) (menv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app ack (-> m <-) (app - n 1)) (menv '(())))", 15,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> ack <-) m (app - n 1)) (menv '(())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (menv '(())))", 15,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app - m (-> 1 <-)) (menv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app - (-> m <-) 1) (menv '(())))", 15,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> - <-) m 1) (menv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (menv '(())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(match
   (-> (app = n 0) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (menv '(())))", 42,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app = n (-> 0 <-)) (menv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app = (-> n <-) 0) (menv '(())))", 42,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> = <-) n 0) (menv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(match
   (-> (app = m 0) <-)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (menv '(())))", 19,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app = m (-> 0 <-)) (menv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app = (-> m <-) 0) (menv '(())))", 16,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> = <-) m 0) (menv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(letrec (ack) (-> (app ack 3 12) <-)) (menv '()))", 44,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app ack 3 (-> 12 <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app ack (-> 3 <-) 12) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> ack <-) 3 12) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(top) (menv '()))", 29,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(app
   (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
   (->
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    <-))
 (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(λ (x1)
    (->
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     <-))
 (menv '(())))", 23,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(app
   (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
   (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
 (menv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
 (menv '(() ())))", 16,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
 (menv '(() ())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(λ (y1 y2) (-> y1 <-)) (menv '(() () ())))", 11,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
 (menv '(() ())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(λ (z) (-> (app z x1 x2) <-)) (menv '(() () ())))", 15,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app z x1 (-> x2 <-)) (menv '(() () ())))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app z (-> x1 <-) x2) (menv '(() () ())))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app (-> z <-) x1 x2) (menv '(() () ())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(app
   (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
   (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
 (menv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
 (menv '(() ())))", 21,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(let ((-> _ = (app f2 #t) <-)) bod) (menv '(() ())))", 20,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app f2 (-> #t <-)) (menv '(() ())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app (-> f2 <-) #t) (menv '(() ())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(let (_) (-> (app f2 #f) <-)) (menv '(() ())))", 20,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app f2 (-> #f <-)) (menv '(() ())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app (-> f2 <-) #f) (menv '(() ())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(app
   (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
   (λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
 (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(λ (f1) (-> (let ((_ (app f1 #t))) (app f1 #f)) <-)) (menv '(())))", 28,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(let ((-> _ = (app f1 #t) <-)) bod) (menv '(())))", 27,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app f1 (-> #t <-)) (menv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app (-> f1 <-) #t) (menv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(let (_) (-> (app f1 #f) <-)) (menv '(())))", 27,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app f1 (-> #f <-)) (menv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app (-> f1 <-) #f) (menv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(top) (menv '()))", 15,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(app (λ (x) (app x x)) (-> (λ (y) (app y y)) <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(λ (y) (-> (app y y) <-)) (menv '(())))", 13,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(app y (-> y <-)) (menv '(())))", 12,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(app (-> y <-) y) (menv '(())))", 12,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(app (-> (λ (x) (app x x)) <-) (λ (y) (app y y))) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(λ (x) (-> (app x x) <-)) (menv '(())))", 14,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(app x (-> x <-)) (menv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(app (-> x <-) x) (menv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(top) (menv '()))", 10,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(λ (y) (-> y <-)) (menv '((□? (y)))))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(let (x) (-> (let ((_ (app x 1))) (app x 2)) <-)) (menv '()))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(let ((-> _ = (app x 1) <-)) bod) (menv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(app x (-> 1 <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(app (-> x <-) 1) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(let (_) (-> (app x 2) <-)) (menv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(app x (-> 2 <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(app (-> x <-) 2) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(top) (menv '()))", 39,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list
 'eval
 '(letrec ((->
            a
            =
            (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
            <-))
    bod)
 (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list
 'eval
 '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
 (menv '((□? (y)))))", 44,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list
 'eval
 '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
 (menv '((□? (y)))))", 22,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list
 'eval
 '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
 (menv '((□? (y)))))", 32,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app a (-> (app - y 1) <-)) (menv '((□? (y)))))", 19,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app - y (-> 1 <-)) (menv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app - (-> y <-) 1) (menv '((□? (y)))))", 19,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app (-> - <-) y 1) (menv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app (-> a <-) (app - y 1)) (menv '((□? (y)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list
 'eval
 '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
 (menv '((□? (y)))))", 31,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app equal? y (-> 0 <-)) (menv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app equal? (-> y <-) 0) (menv '((□? (y)))))", 22,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app (-> equal? <-) y 0) (menv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(letrec (a) (-> (app a 2) <-)) (menv '()))", 38,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app a (-> 2 <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app (-> a <-) 2) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 1, "(list 'eval '(top) (menv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 1, "(list 'eval '(let* (a (-> b = a <-)) bod) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 1, "(list 'eval '(let* ((-> a = 10 <-) b) bod) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 1, "(list 'eval '(let* (a b) (-> a <-)) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(top) (menv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(let ((-> x = (app cons 1 nil) <-)) bod) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(app cons 1 (-> nil <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(app cons (-> 1 <-) nil) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(app (-> cons <-) 1 nil) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(let (x) (-> (match x ((cons 1 n) n) (_ x)) <-)) (menv '()))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(match x ((cons 1 n) n) (-> _ x <-)) (menv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(match x (-> (cons 1 n) n <-) (_ x)) (menv '()))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(match (-> x <-) ((cons 1 n) n) (_ x)) (menv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 1, "(list 'eval '(top) (menv '()))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 1, "(list 'eval '(app (λ (x) (app x x)) (-> 2 <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 1, "(list 'eval '(app (-> (λ (x) (app x x)) <-) 2) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 1, "(list 'eval '(λ (x) (-> (app x x) <-)) (menv '((□? (x)))))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 1, "(list 'eval '(app x (-> x <-)) (menv '((□? (x)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 1, "(list 'eval '(app (-> x <-) x) (menv '((□? (x)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 1, "(list 'eval '(top) (menv '()))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 1, "(list 'eval '(app (λ (x) x) (-> (λ (y) y) <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 1, "(list 'eval '(λ (y) (-> y <-)) (menv '((□? (y)))))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 1, "(list 'eval '(app (-> (λ (x) x) <-) (λ (y) y)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 1, "(list 'eval '(λ (x) (-> x <-)) (menv '((□? (x)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 1, "(list 'eval '(top) (menv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 1, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 1, "(list 'eval '(λ (y) (-> y <-)) (menv '((□? (y)))))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 1, "(list 'eval '(let (x) (-> (app x 1) <-)) (menv '()))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 1, "(list 'eval '(app x (-> 1 <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 1, "(list 'eval '(app (-> x <-) 1) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 1, "(list 'eval '(top) (menv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 1, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 1, "(list 'eval '(λ (y) (-> y <-)) (menv '((□? (y)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 1, "(list 'eval '(let (x) (-> x <-)) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(top) (menv '()))", 11,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(app (λ (x y) (app x y)) (λ (z) z) (-> 2 <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(app (λ (x y) (app x y)) (-> (λ (z) z) <-) 2) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(λ (z) (-> z <-)) (menv '((□? (z)))))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(app (-> (λ (x y) (app x y)) <-) (λ (z) z) 2) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(λ (x y) (-> (app x y) <-)) (menv '((□? (x y)))))", 13,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(app x (-> y <-)) (menv '((□? (x y)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(app (-> x <-) y) (menv '((□? (x y)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(top) (menv '()))", 176,0,2,2,0,1,3,3,0,2,2,2,0,3,3,3,0,4,2,2,0
"ack", 1, "(list
 'eval
 '(letrec ((->
            ack
            =
            (λ (m n)
              (match
               (app = m 0)
               (#f
                (match
                 (app = n 0)
                 (#f (app ack (app - m 1) (app ack m (app - n 1))))
                 (_ (app ack (app - m 1) 1))))
               (_ (app + n 1))))
            <-))
    bod)
 (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (menv '((□? (m n)))))", 191,0,4,4,0,1,4,4,0,2,4,4,0,3,4,4,0,4,3,3,0
"ack", 1, "(list
 'eval
 '(match
   (app = m 0)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (menv '((□? (m n)))))", 163,0,3,3,0,1,3,3,0,2,3,3,0,3,3,3,0,4,3,3,0
"ack", 1, "(list 'eval '(app + n (-> 1 <-)) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app + (-> n <-) 1) (menv '((□? (m n)))))", 157,0,2,2,0,1,2,2,0,2,2,2,0,3,3,3,0,4,2,2,0
"ack", 1, "(list 'eval '(app (-> + <-) n 1) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(match
   (app = m 0)
   (->
    #f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (menv '((□? (m n)))))", 173,0,3,3,0,1,3,3,0,2,3,3,0,3,3,3,0,4,3,3,0
"ack", 1, "(list
 'eval
 '(match
   (app = n 0)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (menv '((□? (m n)))))", 159,0,2,2,0,1,2,2,0,2,3,3,0,3,2,2,0,4,2,2,0
"ack", 1, "(list 'eval '(app ack (app - m 1) (-> 1 <-)) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))", 64,0,1,1,0,1,1,1,0,2,1,1,0,3,1,1,0,4,1,1,0
"ack", 1, "(list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))", 64,0,1,1,0,1,1,1,0,2,1,1,0,3,1,1,0,4,1,1,0
"ack", 1, "(list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(match
   (app = n 0)
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (menv '((□? (m n)))))", 159,0,3,3,0,1,3,3,0,2,2,2,0,3,2,2,0,4,3,3,0
"ack", 1, "(list
 'eval
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (menv '((□? (m n)))))", 155,0,2,2,0,1,2,2,0,2,2,2,0,3,3,3,0,4,2,2,0
"ack", 1, "(list 'eval '(app ack m (-> (app - n 1) <-)) (menv '((□? (m n)))))", 155,0,2,2,0,1,2,2,0,2,2,2,0,3,3,3,0,4,2,2,0
"ack", 1, "(list 'eval '(app - n (-> 1 <-)) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app - (-> n <-) 1) (menv '((□? (m n)))))", 155,0,3,3,0,1,2,2,0,2,2,2,0,3,2,2,0,4,3,3,0
"ack", 1, "(list 'eval '(app (-> - <-) n 1) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))", 64,0,1,1,0,1,1,1,0,2,1,1,0,3,1,1,0,4,1,1,0
"ack", 1, "(list 'eval '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (menv '((□? (m n)))))", 64,0,1,1,0,1,1,1,0,2,1,1,0,3,1,1,0,4,1,1,0
"ack", 1, "(list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))", 64,0,1,1,0,1,1,1,0,2,1,1,0,3,1,1,0,4,1,1,0
"ack", 1, "(list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (menv '((□? (m n)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(match
   (-> (app = n 0) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (menv '((□? (m n)))))", 163,0,3,3,0,1,3,3,0,2,3,3,0,3,3,3,0,4,3,3,0
"ack", 1, "(list 'eval '(app = n (-> 0 <-)) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app = (-> n <-) 0) (menv '((□? (m n)))))", 157,0,3,3,0,1,2,2,0,2,3,3,0,3,2,2,0,4,3,3,0
"ack", 1, "(list 'eval '(app (-> = <-) n 0) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(match
   (-> (app = m 0) <-)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (menv '((□? (m n)))))", 84,0,1,1,0,1,1,1,0,2,1,1,0,3,1,1,0,4,1,1,0
"ack", 1, "(list 'eval '(app = m (-> 0 <-)) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app = (-> m <-) 0) (menv '((□? (m n)))))", 69,0,1,1,0,1,1,1,0,2,1,1,0,3,1,1,0,4,1,1,0
"ack", 1, "(list 'eval '(app (-> = <-) m 0) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(letrec (ack) (-> (app ack 3 12) <-)) (menv '()))", 175,0,3,3,0,1,3,3,0,2,3,3,0,3,3,3,0,4,3,3,0
"ack", 1, "(list 'eval '(app ack 3 (-> 12 <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app ack (-> 3 <-) 12) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app (-> ack <-) 3 12) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(top) (menv '()))", 28,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(app
   (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
   (->
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    <-))
 (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(λ (x1)
    (->
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     <-))
 (menv '((□? (x1)))))", 58,0,1,1,0,1,1,1,0,2,1,1,0,3,1,1,0,4,1,1,0
"kcfa-2", 1, "(list
 'eval
 '(app
   (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
   (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
 (menv '((□? (x1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
 (menv '((□? (x2)) (□? (x1)))))", 40,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
 (menv '((□? (x2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(λ (y1 y2) (-> y1 <-)) (menv '((□? (y1 y2)) (□? (x2)) (□? (x1)))))", 31,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
 (menv '((□? (x2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(λ (z) (-> (app z x1 x2) <-))
 (menv '((□? (z)) (□? (x2)) (□? (x1)))))", 46,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app z x1 (-> x2 <-)) (menv '((□? (z)) (□? (x2)) (□? (x1)))))", 14,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app z (-> x1 <-) x2) (menv '((□? (z)) (□? (x2)) (□? (x1)))))", 16,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app (-> z <-) x1 x2) (menv '((□? (z)) (□? (x2)) (□? (x1)))))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(app
   (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
   (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
 (menv '((□? (x1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
 (menv '((□? (f2)) (□? (x1)))))", 64,0,1,1,0,1,1,1,0,2,1,1,0,3,1,1,0,4,1,1,0
"kcfa-2", 1, "(list 'eval '(let ((-> _ = (app f2 #t) <-)) bod) (menv '((□? (f2)) (□? (x1)))))", 58,0,1,1,0,1,1,1,0,2,1,1,0,3,1,1,0,4,1,1,0
"kcfa-2", 1, "(list 'eval '(app f2 (-> #t <-)) (menv '((□? (f2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app (-> f2 <-) #t) (menv '((□? (f2)) (□? (x1)))))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(let (_) (-> (app f2 #f) <-)) (menv '((□? (f2)) (□? (x1)))))", 58,0,1,1,0,1,1,1,0,2,1,1,0,3,1,1,0,4,1,1,0
"kcfa-2", 1, "(list 'eval '(app f2 (-> #f <-)) (menv '((□? (f2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app (-> f2 <-) #f) (menv '((□? (f2)) (□? (x1)))))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(app
   (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
   (λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
 (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(λ (f1) (-> (let ((_ (app f1 #t))) (app f1 #f)) <-))
 (menv '((□? (f1)))))", 31,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(let ((-> _ = (app f1 #t) <-)) bod) (menv '((□? (f1)))))", 29,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app f1 (-> #t <-)) (menv '((□? (f1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app (-> f1 <-) #t) (menv '((□? (f1)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(let (_) (-> (app f1 #f) <-)) (menv '((□? (f1)))))", 29,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app f1 (-> #f <-)) (menv '((□? (f1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app (-> f1 <-) #f) (menv '((□? (f1)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(top) (menv '()))", 20,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(app (λ (x) (app x x)) (-> (λ (y) (app y y)) <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(λ (y) (-> (app y y) <-)) (menv '((□? (y)))))", 21,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(app y (-> y <-)) (menv '((□? (y)))))", 18,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(app (-> y <-) y) (menv '((□? (y)))))", 18,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(app (-> (λ (x) (app x x)) <-) (λ (y) (app y y))) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(λ (x) (-> (app x x) <-)) (menv '((□? (x)))))", 22,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(app x (-> x <-)) (menv '((□? (x)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(app (-> x <-) x) (menv '((□? (x)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(top) (menv '()))", 10,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(λ (y) (-> y <-)) (menv '((□? (y)))))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(let (x) (-> (let ((_ (app x 1))) (app x 2)) <-)) (menv '()))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(let ((-> _ = (app x 1) <-)) bod) (menv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(app x (-> 1 <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(app (-> x <-) 1) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(let (_) (-> (app x 2) <-)) (menv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(app x (-> 2 <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(app (-> x <-) 2) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(top) (menv '()))", 21,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list
 'eval
 '(letrec ((->
            a
            =
            (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
            <-))
    bod)
 (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list
 'eval
 '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
 (menv '((□? (y)))))", 71,0,1,1,0,1,1,1,0,2,1,1,0,3,1,1,0,4,1,1,0
"basic-letrec", 2, "(list
 'eval
 '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
 (menv '((□? (y)))))", 35,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list
 'eval
 '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
 (menv '((□? (y)))))", 59,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app a (-> (app - y 1) <-)) (menv '((□? (y)))))", 30,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app - y (-> 1 <-)) (menv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app - (-> y <-) 1) (menv '((□? (y)))))", 30,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app (-> - <-) y 1) (menv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app (-> a <-) (app - y 1)) (menv '((□? (y)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list
 'eval
 '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
 (menv '((□? (y)))))", 50,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app equal? y (-> 0 <-)) (menv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app equal? (-> y <-) 0) (menv '((□? (y)))))", 35,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app (-> equal? <-) y 0) (menv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(letrec (a) (-> (app a 2) <-)) (menv '()))", 20,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app a (-> 2 <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app (-> a <-) 2) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 2, "(list 'eval '(top) (menv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 2, "(list 'eval '(let* (a (-> b = a <-)) bod) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 2, "(list 'eval '(let* ((-> a = 10 <-) b) bod) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 2, "(list 'eval '(let* (a b) (-> a <-)) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(top) (menv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(let ((-> x = (app cons 1 nil) <-)) bod) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(app cons 1 (-> nil <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(app cons (-> 1 <-) nil) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(app (-> cons <-) 1 nil) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(let (x) (-> (match x ((cons 1 n) n) (_ x)) <-)) (menv '()))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(match x ((cons 1 n) n) (-> _ x <-)) (menv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(match x (-> (cons 1 n) n <-) (_ x)) (menv '()))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(match (-> x <-) ((cons 1 n) n) (_ x)) (menv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 2, "(list 'eval '(top) (menv '()))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 2, "(list 'eval '(app (λ (x) (app x x)) (-> 2 <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 2, "(list 'eval '(app (-> (λ (x) (app x x)) <-) 2) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 2, "(list 'eval '(λ (x) (-> (app x x) <-)) (menv '((□? (x)))))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 2, "(list 'eval '(app x (-> x <-)) (menv '((□? (x)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 2, "(list 'eval '(app (-> x <-) x) (menv '((□? (x)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 2, "(list 'eval '(top) (menv '()))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 2, "(list 'eval '(app (λ (x) x) (-> (λ (y) y) <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 2, "(list 'eval '(λ (y) (-> y <-)) (menv '((□? (y)))))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 2, "(list 'eval '(app (-> (λ (x) x) <-) (λ (y) y)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 2, "(list 'eval '(λ (x) (-> x <-)) (menv '((□? (x)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 2, "(list 'eval '(top) (menv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 2, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 2, "(list 'eval '(λ (y) (-> y <-)) (menv '((□? (y)))))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 2, "(list 'eval '(let (x) (-> (app x 1) <-)) (menv '()))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 2, "(list 'eval '(app x (-> 1 <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 2, "(list 'eval '(app (-> x <-) 1) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 2, "(list 'eval '(top) (menv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 2, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 2, "(list 'eval '(λ (y) (-> y <-)) (menv '((□? (y)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 2, "(list 'eval '(let (x) (-> x <-)) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(top) (menv '()))", 11,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(app (λ (x y) (app x y)) (λ (z) z) (-> 2 <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(app (λ (x y) (app x y)) (-> (λ (z) z) <-) 2) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(λ (z) (-> z <-)) (menv '((□? (z)))))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(app (-> (λ (x y) (app x y)) <-) (λ (z) z) 2) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(λ (x y) (-> (app x y) <-)) (menv '((□? (x y)))))", 15,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(app x (-> y <-)) (menv '((□? (x y)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(app (-> x <-) y) (menv '((□? (x y)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(top) (menv '()))", 38,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(letrec ((->
            ack
            =
            (λ (m n)
              (match
               (app = m 0)
               (#f
                (match
                 (app = n 0)
                 (#f (app ack (app - m 1) (app ack m (app - n 1))))
                 (_ (app ack (app - m 1) 1))))
               (_ (app + n 1))))
            <-))
    bod)
 (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (menv '((□? (m n)))))", 638,0,29,29,0,1,29,29,0,2,29,29,0,3,29,29,0,4,29,29,0
"ack", 2, "(list
 'eval
 '(match
   (app = m 0)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (menv '((□? (m n)))))", 554,0,22,22,0,1,21,21,0,2,21,21,0,3,21,21,0,4,22,22,0
"ack", 2, "(list 'eval '(app + n (-> 1 <-)) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app + (-> n <-) 1) (menv '((□? (m n)))))", 536,0,22,22,1,1,21,21,0,2,21,21,0,3,20,20,0,4,21,21,0
"ack", 2, "(list 'eval '(app (-> + <-) n 1) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(match
   (app = m 0)
   (->
    #f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (menv '((□? (m n)))))", 620,0,28,28,0,1,28,28,0,2,28,28,0,3,29,29,1,4,28,28,0
"ack", 2, "(list
 'eval
 '(match
   (app = n 0)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (menv '((□? (m n)))))", 574,0,23,23,0,1,23,23,0,2,24,24,1,3,23,23,0,4,23,23,0
"ack", 2, "(list 'eval '(app ack (app - m 1) (-> 1 <-)) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))", 211,0,9,9,0,1,10,10,0,2,9,9,0,3,9,9,0,4,9,9,0
"ack", 2, "(list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))", 211,0,9,9,0,1,10,10,0,2,9,9,0,3,10,10,0,4,9,9,0
"ack", 2, "(list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(match
   (app = n 0)
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (menv '((□? (m n)))))", 574,0,23,23,0,1,23,23,0,2,24,24,0,3,23,23,0,4,23,23,0
"ack", 2, "(list
 'eval
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (menv '((□? (m n)))))", 530,0,21,21,0,1,21,21,0,2,21,21,0,3,21,21,0,4,21,21,0
"ack", 2, "(list 'eval '(app ack m (-> (app - n 1) <-)) (menv '((□? (m n)))))", 530,0,20,20,0,1,20,20,0,2,20,20,0,3,21,21,1,4,20,20,0
"ack", 2, "(list 'eval '(app - n (-> 1 <-)) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app - (-> n <-) 1) (menv '((□? (m n)))))", 530,0,20,20,0,1,21,21,0,2,20,20,0,3,20,20,0,4,21,21,0
"ack", 2, "(list 'eval '(app (-> - <-) n 1) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))", 211,0,9,9,0,1,9,9,0,2,9,9,0,3,9,9,0,4,9,9,0
"ack", 2, "(list 'eval '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (menv '((□? (m n)))))", 211,0,9,9,0,1,9,9,0,2,9,9,0,3,9,9,0,4,9,9,0
"ack", 2, "(list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))", 211,0,9,9,0,1,9,9,0,2,9,9,0,3,9,9,0,4,9,9,0
"ack", 2, "(list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (menv '((□? (m n)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(match
   (-> (app = n 0) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (menv '((□? (m n)))))", 554,0,21,21,0,1,22,22,0,2,21,21,0,3,21,21,0,4,22,22,0
"ack", 2, "(list 'eval '(app = n (-> 0 <-)) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app = (-> n <-) 0) (menv '((□? (m n)))))", 536,0,21,21,0,1,21,21,0,2,20,20,0,3,21,21,1,4,20,20,0
"ack", 2, "(list 'eval '(app (-> = <-) n 0) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(match
   (-> (app = m 0) <-)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (menv '((□? (m n)))))", 279,0,13,13,0,1,12,12,0,2,12,12,0,3,12,12,0,4,12,12,0
"ack", 2, "(list 'eval '(app = m (-> 0 <-)) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app = (-> m <-) 0) (menv '((□? (m n)))))", 228,0,10,10,0,1,10,10,0,2,10,10,0,3,10,10,0,4,10,10,0
"ack", 2, "(list 'eval '(app (-> = <-) m 0) (menv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(letrec (ack) (-> (app ack 3 12) <-)) (menv '()))", 37,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app ack 3 (-> 12 <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app ack (-> 3 <-) 12) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app (-> ack <-) 3 12) (menv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(top) (menv '()))", 28,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(app
   (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
   (->
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    <-))
 (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(λ (x1)
    (->
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     <-))
 (menv '((□? (x1)))))", 79,0,1,1,0,1,1,1,0,2,1,1,0,3,1,1,0,4,1,1,0
"kcfa-2", 2, "(list
 'eval
 '(app
   (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
   (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
 (menv '((□? (x1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
 (menv '((□? (x2)) (□? (x1)))))", 43,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
 (menv '((□? (x2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(λ (y1 y2) (-> y1 <-)) (menv '((□? (y1 y2)) (□? (x2)) (□? (x1)))))", 34,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
 (menv '((□? (x2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(λ (z) (-> (app z x1 x2) <-))
 (menv '((□? (z)) (□? (x2)) (□? (x1)))))", 55,0,1,1,0,1,1,1,0,2,1,1,0,3,1,1,0,4,1,1,0
"kcfa-2", 2, "(list 'eval '(app z x1 (-> x2 <-)) (menv '((□? (z)) (□? (x2)) (□? (x1)))))", 15,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app z (-> x1 <-) x2) (menv '((□? (z)) (□? (x2)) (□? (x1)))))", 16,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app (-> z <-) x1 x2) (menv '((□? (z)) (□? (x2)) (□? (x1)))))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(app
   (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
   (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
 (menv '((□? (x1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
 (menv '((□? (f2)) (□? (x1)))))", 118,0,3,3,0,1,3,3,0,2,3,3,0,3,3,3,0,4,3,3,0
"kcfa-2", 2, "(list 'eval '(let ((-> _ = (app f2 #t) <-)) bod) (menv '((□? (f2)) (□? (x1)))))", 106,0,3,3,0,1,3,3,0,2,3,3,0,3,3,3,0,4,3,3,0
"kcfa-2", 2, "(list 'eval '(app f2 (-> #t <-)) (menv '((□? (f2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app (-> f2 <-) #t) (menv '((□? (f2)) (□? (x1)))))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(let (_) (-> (app f2 #f) <-)) (menv '((□? (f2)) (□? (x1)))))", 106,0,3,3,0,1,3,3,0,2,3,3,0,3,3,3,0,4,3,3,0
"kcfa-2", 2, "(list 'eval '(app f2 (-> #f <-)) (menv '((□? (f2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app (-> f2 <-) #f) (menv '((□? (f2)) (□? (x1)))))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(app
   (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
   (λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
 (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(λ (f1) (-> (let ((_ (app f1 #t))) (app f1 #f)) <-))
 (menv '((□? (f1)))))", 49,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(let ((-> _ = (app f1 #t) <-)) bod) (menv '((□? (f1)))))", 47,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,1,1,0
"kcfa-2", 2, "(list 'eval '(app f1 (-> #t <-)) (menv '((□? (f1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app (-> f1 <-) #t) (menv '((□? (f1)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(let (_) (-> (app f1 #f) <-)) (menv '((□? (f1)))))", 47,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app f1 (-> #f <-)) (menv '((□? (f1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app (-> f1 <-) #f) (menv '((□? (f1)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(top) (menv '()))", 25,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(app (λ (x) (app x x)) (-> (λ (y) (app y y)) <-)) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(λ (y) (-> (app y y) <-)) (menv '((□? (y)))))", 29,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(app y (-> y <-)) (menv '((□? (y)))))", 22,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(app (-> y <-) y) (menv '((□? (y)))))", 22,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(app (-> (λ (x) (app x x)) <-) (λ (y) (app y y))) (menv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(λ (x) (-> (app x x) <-)) (menv '((□? (x)))))", 30,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(app x (-> x <-)) (menv '((□? (x)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(app (-> x <-) x) (menv '((□? (x)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
