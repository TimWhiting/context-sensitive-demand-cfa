'(clean-cache
  kcfa-3
  4
  700
  45
  app
  "'(eval ((top) app (λ (f1) ...) (λ (x1) ...)) (env ()))"
  #f
  36
  27
  9
  0
  27
  9
  36
  1
  1
  27
  #t
  1
  (2 2 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  lambda
  "'(eval (app (λ (f1) ...) (-> (λ (x1) ...) <-)) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  app
  "'(eval (λ (x1) (-> (app (λ (f2) ...) (λ (x2) ...)) <-)) (env ((□? (x1)))))"
  #f
  202
  150
  42
  10
  69
  21
  90
  1
  4171/7560
  122
  #f
  22/15
  (94 97 1))
'(clean-cache
  kcfa-3
  4
  700
  45
  lambda
  "'(eval (app (λ (f2) ...) (-> (λ (x2) ...) <-)) (env ((□? (x1)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  app
  "'(eval\n  (λ (x2) (-> (app (λ (f3) ...) (λ (x3) ...)) <-))\n  (env ((□? (x2)) (□? (x1)))))"
  #f
  70
  42
  15
  13
  5
  3
  8
  1
  5/18
  35
  #f
  61/42
  (12 12 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  lambda
  "'(eval (app (λ (f3) ...) (-> (λ (x3) ...) <-)) (env ((□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  app
  "'(eval\n  (λ (x3) (-> (app (λ (z) ...) (λ (y1 y2 y3) ...)) <-))\n  (env ((□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  49
  24
  12
  13
  5
  3
  8
  1
  5/12
  20
  #f
  17/12
  (8 8 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  lambda
  "'(eval\n  (app (λ (z) ...) (-> (λ (y1 y2 y3) ...) <-))\n  (env ((□? (x3)) (□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  ref-or-constructor
  "'(eval\n  (λ (y1 y2 y3) (-> y1 <-))\n  (env ((□? (y1 y2 y3)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  34
  12
  9
  13
  5
  3
  8
  1
  5/8
  10
  #f
  4/3
  (3 3 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  lambda
  "'(eval\n  (app (-> (λ (z) ...) <-) (λ (y1 y2 y3) ...))\n  (env ((□? (x3)) (□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  app
  "'(eval\n  (λ (z) (-> (app z x1 x2 x3) <-))\n  (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  56
  25
  12
  19
  5
  3
  8
  1
  5/11
  21
  #f
  37/25
  (11 11 1))
'(clean-cache
  kcfa-3
  4
  700
  45
  ref-or-constructor
  "'(eval (app z x1 x2 (-> x3 <-)) (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  14
  6
  3
  5
  0
  0
  0
  1
  0
  5
  #f
  7/6
  (1 1 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  ref-or-constructor
  "'(eval (app z x1 (-> x2 <-) x3) (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  14
  6
  3
  5
  0
  0
  0
  1
  0
  5
  #f
  7/6
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  ref-or-constructor
  "'(eval (app z (-> x1 <-) x2 x3) (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  13
  6
  3
  4
  5
  3
  8
  1
  5/6
  5
  #f
  7/6
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  ref-or-constructor
  "'(eval (app (-> z <-) x1 x2 x3) (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  7
  2
  1
  4
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  lambda
  "'(eval (app (-> (λ (f3) ...) <-) (λ (x3) ...)) (env ((□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  let
  "'(eval (λ (f3) (-> (let (_) ...) <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  #f
  110
  61
  24
  25
  5
  3
  8
  1
  5/16
  50
  #f
  90/61
  (22 23 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  app
  "'(eval\n  (let (... () (_ (-> (app f3 (app #t)) <-)) () ...) ...)\n  (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  #f
  102
  55
  24
  23
  5
  3
  8
  1
  1/3
  46
  #f
  82/55
  (21 21 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  app
  "'(eval (app f3 (-> (app #t) <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  #f
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  ref-or-constructor
  "'(eval (app (-> f3 <-) (app #t)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  #f
  6
  2
  1
  3
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  app
  "'(eval\n  (let (_) (-> (app f3 (app #f)) <-))\n  (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  #f
  102
  55
  24
  23
  5
  3
  8
  1
  1/3
  46
  #f
  82/55
  (22 22 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  app
  "'(eval (app f3 (-> (app #f) <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  #f
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  ref-or-constructor
  "'(eval (app (-> f3 <-) (app #f)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  #f
  6
  2
  1
  3
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  lambda
  "'(eval (app (-> (λ (f2) ...) <-) (λ (x2) ...)) (env ((□? (x1)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  let
  "'(eval (λ (f2) (-> (let (_) ...) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  259
  183
  54
  22
  63
  21
  84
  1
  31/66
  148
  #f
  272/183
  (161 172 2))
'(clean-cache
  kcfa-3
  4
  700
  45
  app
  "'(eval\n  (let (... () (_ (-> (app f2 (app #t)) <-)) () ...) ...)\n  (env ((□? (f2)) (□? (x1)))))"
  #f
  247
  171
  54
  22
  59
  21
  80
  1
  10/21
  142
  #f
  86/57
  (141 145 2))
'(clean-cache
  kcfa-3
  4
  700
  45
  app
  "'(eval (app f2 (-> (app #t) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f2)) (□? (x1)))))"
  (constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  ref-or-constructor
  "'(eval (app (-> f2 <-) (app #t)) (env ((□? (f2)) (□? (x1)))))"
  #f
  5
  2
  1
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  app
  "'(eval (let (_) (-> (app f2 (app #f)) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  247
  171
  54
  22
  59
  21
  80
  1
  10/21
  142
  #f
  86/57
  (149 154 2))
'(clean-cache
  kcfa-3
  4
  700
  45
  app
  "'(eval (app f2 (-> (app #f) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f2)) (□? (x1)))))"
  (constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  ref-or-constructor
  "'(eval (app (-> f2 <-) (app #f)) (env ((□? (f2)) (□? (x1)))))"
  #f
  5
  2
  1
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  lambda
  "'(eval (app (-> (λ (f1) ...) <-) (λ (x1) ...)) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  let
  "'(eval (λ (f1) (-> (let (_) ...) <-)) (env ((□? (f1)))))"
  #f
  106
  78
  22
  6
  25
  9
  34
  1
  127/312
  78
  #t
  47/39
  (34 35 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  app
  "'(eval\n  (let (... () (_ (-> (app f1 (app #t)) <-)) () ...) ...)\n  (env ((□? (f1)))))"
  #f
  104
  76
  22
  6
  24
  9
  33
  1
  121/300
  76
  #t
  23/19
  (33 34 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  app
  "'(eval (app f1 (-> (app #t) <-)) (env ((□? (f1)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f1)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  ref-or-constructor
  "'(eval (app (-> f1 <-) (app #t)) (env ((□? (f1)))))"
  #f
  4
  2
  1
  1
  1
  1
  2
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  app
  "'(eval (let (_) (-> (app f1 (app #f)) <-)) (env ((□? (f1)))))"
  #f
  104
  76
  22
  6
  24
  9
  33
  1
  121/300
  76
  #t
  23/19
  (32 32 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  app
  "'(eval (app f1 (-> (app #f) <-)) (env ((□? (f1)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f1)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-3
  4
  700
  45
  ref-or-constructor
  "'(eval (app (-> f1 <-) (app #f)) (env ((□? (f1)))))"
  #f
  4
  2
  1
  1
  1
  1
  2
  1
  1/2
  2
  #t
  1
  (0 0 0))
