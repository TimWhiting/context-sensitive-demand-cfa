'(clean-cache
  blur
  4
  700
  43
  letrec
  "'(eval ((top) letrec (id ... lp) ...) (env ()))"
  #f
  283
  213
  57
  13
  156
  31
  187
  1
  39493/47880
  167
  #f
  259/213
  (78 82 0))
'(clean-cache
  blur
  4
  700
  43
  lambda
  "'(eval (letrec (... blur (lp (-> (λ (a n) ...) <-)) () ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  match
  "'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))"
  #f
  200
  161
  38
  1
  154
  31
  185
  1
  178/185
  147
  #f
  25/23
  (17 17 0))
'(clean-cache
  blur
  4
  700
  43
  app
  "'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))"
  #f
  126
  79
  43
  4
  71
  31
  102
  1
  143/162
  79
  #t
  1
  (16 16 0))
'(clean-cache
  blur
  4
  700
  43
  ref-or-constructor
  "'(eval (app id (-> a <-)) (env ((□? (a n)))))"
  #f
  97
  58
  38
  1
  57
  31
  88
  1
  15/16
  58
  #t
  1
  (7 7 0))
'(clean-cache
  blur
  4
  700
  43
  ref-or-constructor
  "'(eval (app (-> id <-) a) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  let*
  "'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))"
  #f
  316
  246
  55
  15
  147
  31
  178
  1
  1665361/2522520
  183
  #f
  103/82
  (86 89 1))
'(clean-cache
  blur
  4
  700
  43
  app
  "'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))"
  #f
  27
  11
  12
  4
  2
  2
  4
  1
  2/11
  11
  #t
  1
  (1 1 0))
'(clean-cache
  blur
  4
  700
  43
  app
  "'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (a n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  app
  "'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))"
  #f
  12
  6
  4
  2
  2
  1
  3
  1
  1/3
  6
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  ref-or-constructor
  "'(eval (app blur (-> id <-)) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  ref-or-constructor
  "'(eval (app (-> blur <-) id) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  app
  "'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))"
  #f
  27
  11
  12
  4
  2
  2
  4
  1
  2/11
  11
  #t
  1
  (1 1 0))
'(clean-cache
  blur
  4
  700
  43
  app
  "'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (a n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  app
  "'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))"
  #f
  12
  6
  4
  2
  2
  1
  3
  1
  1/3
  6
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  ref-or-constructor
  "'(eval (app blur (-> id <-)) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  ref-or-constructor
  "'(eval (app (-> blur <-) id) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  app
  "'(eval\n  (let* (r ... s) (-> (app not (app (app blur ...) s (app - ...))) <-))\n  (env ((□? (a n)))))"
  #f
  314
  244
  55
  15
  146
  31
  177
  1
  333301/504504
  183
  #f
  5/4
  (82 83 1))
'(clean-cache
  blur
  4
  700
  43
  app
  "'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))"
  #f
  310
  240
  55
  15
  144
  31
  175
  1
  34057/51480
  181
  #f
  299/240
  (83 85 1))
'(clean-cache
  blur
  4
  700
  43
  app
  "'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))"
  #f
  48
  31
  16
  1
  27
  12
  39
  1
  19/21
  27
  #f
  35/31
  (4 4 0))
'(clean-cache
  blur
  4
  700
  43
  number
  "'(eval (app - n (-> 1 <-)) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  ref-or-constructor
  "'(eval (app - (-> n <-) 1) (env ((□? (a n)))))"
  #f
  45
  28
  16
  1
  27
  12
  39
  1
  41/42
  25
  #f
  31/28
  (3 3 0))
'(clean-cache
  blur
  4
  700
  43
  ref-or-constructor
  "'(eval (app (-> - <-) n 1) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  ref-or-constructor
  "'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))"
  #f
  28
  12
  12
  4
  2
  2
  4
  1
  1/6
  12
  #t
  1
  (2 2 0))
'(clean-cache
  blur
  4
  700
  43
  app
  "'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))"
  #f
  12
  6
  4
  2
  2
  1
  3
  1
  1/3
  6
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  ref-or-constructor
  "'(eval (app blur (-> lp <-)) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  ref-or-constructor
  "'(eval (app (-> blur <-) lp) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  ref-or-constructor
  "'(eval (app (-> not <-) (app (app blur lp) s (app - n 1))) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  app
  "'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))"
  #f
  63
  46
  16
  1
  42
  12
  54
  1
  19/22
  41
  #f
  51/46
  (6 6 0))
'(clean-cache
  blur
  4
  700
  43
  number
  "'(eval (app <= n (-> 1 <-)) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  ref-or-constructor
  "'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))"
  #f
  45
  28
  16
  1
  27
  12
  39
  1
  7/8
  25
  #f
  31/28
  (3 3 0))
'(clean-cache
  blur
  4
  700
  43
  ref-or-constructor
  "'(eval (app (-> <= <-) n 1) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  lambda
  "'(eval (letrec (... id (blur (-> (λ (y) ...) <-)) lp ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  ref-or-constructor
  "'(eval (λ (y) (-> y <-)) (env ((□? (y)))))"
  #f
  12
  6
  4
  2
  2
  1
  3
  1
  1/3
  5
  #f
  7/6
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  lambda
  "'(eval (letrec (... () (id (-> (λ (x) ...) <-)) blur ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  ref-or-constructor
  "'(eval (λ (x) (-> x <-)) (env ((□? (x)))))"
  #f
  131
  81
  43
  7
  72
  31
  103
  1
  247/270
  80
  #f
  82/81
  (18 18 0))
'(clean-cache
  blur
  4
  700
  43
  app
  "'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))"
  #f
  282
  212
  57
  13
  155
  31
  186
  1
  38233/46620
  167
  #f
  257/212
  (68 70 0))
'(clean-cache
  blur
  4
  700
  43
  number
  "'(eval (app lp (app #f) (-> 2 <-)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  app
  "'(eval (app lp (-> (app #f) <-) 2) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  constructor
  "'(eval (app (-> #f <-)) (env ()))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  blur
  4
  700
  43
  ref-or-constructor
  "'(eval (app (-> lp <-) (app #f) 2) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
