'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval ((top) app (λ (f1) ...) (λ (x1) ...)) (env ()))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  lambda
  "'(eval (app (λ (f1) ...) (-> (λ (x1) ...) <-)) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval (λ (x1) (-> (app (λ (f2) ...) (λ (x2) ...)) <-)) (env ((□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  lambda
  "'(eval (app (λ (f2) ...) (-> (λ (x2) ...) <-)) (env ((□? (x1)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (λ (x2) (-> (app (λ (f3) ...) (λ (x3) ...)) <-))\n  (env ((□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  lambda
  "'(eval (app (λ (f3) ...) (-> (λ (x3) ...) <-)) (env ((□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (λ (x3) (-> (app (λ (f4) ...) (λ (x4) ...)) <-))\n  (env ((□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  lambda
  "'(eval\n  (app (λ (f4) ...) (-> (λ (x4) ...) <-))\n  (env ((□? (x3)) (□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (λ (x4) (-> (app (λ (f5) ...) (λ (x5) ...)) <-))\n  (env ((□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  lambda
  "'(eval\n  (app (λ (f5) ...) (-> (λ (x5) ...) <-))\n  (env ((□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  5
  1
  0
  4
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (λ (x5) (-> (app (λ (f6) ...) (λ (x6) ...)) <-))\n  (env ((□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  lambda
  "'(eval\n  (app (λ (f6) ...) (-> (λ (x6) ...) <-))\n  (env ((□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  6
  1
  0
  5
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (λ (x6) (-> (app (λ (f7) ...) (λ (x7) ...)) <-))\n  (env ((□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  lambda
  "'(eval\n  (app (λ (f7) ...) (-> (λ (x7) ...) <-))\n  (env ((□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  7
  1
  0
  6
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (λ (x7) (-> (app (λ (f8) ...) (λ (x8) ...)) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  lambda
  "'(eval\n  (app (λ (f8) ...) (-> (λ (x8) ...) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (λ (x8) (-> (app (λ (f9) ...) (λ (x9) ...)) <-))\n  (env\n   ((□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  lambda
  "'(eval\n  (app (λ (f9) ...) (-> (λ (x9) ...) <-))\n  (env\n   ((□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  (lambda number char string quoted constructor)
  9
  1
  0
  8
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (λ (x9) (-> (app (λ (f10) ...) (λ (x10) ...)) <-))\n  (env\n   ((□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  lambda
  "'(eval\n  (app (λ (f10) ...) (-> (λ (x10) ...) <-))\n  (env\n   ((□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  (lambda number char string quoted constructor)
  10
  1
  0
  9
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (λ (x10) (-> (app (λ (z) ...) (λ (y1 y2 y3 y4 y5 y6 y7 y8 y9 y10) ...)) <-))\n  (env\n   ((□? (x10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  lambda
  "'(eval\n  (app (λ (z) ...) (-> (λ (y1 y2 y3 y4 y5 y6 y7 y8 y9 y10) ...) <-))\n  (env\n   ((□? (x10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  (lambda number char string quoted constructor)
  11
  1
  0
  10
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (λ (y1 y2 y3 y4 y5 y6 y7 y8 y9 y10) (-> y1 <-))\n  (env\n   ((□? (y1 y2 y3 y4 y5 y6 y7 y8 y9 y10))\n    (□? (x10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  59
  12
  9
  38
  5
  3
  8
  1
  5/8
  10
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  lambda
  "'(eval\n  (app (-> (λ (z) ...) <-) (λ (y1 y2 y3 y4 y5 y6 y7 y8 y9 y10) ...))\n  (env\n   ((□? (x10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  (lambda number char string quoted constructor)
  11
  1
  0
  10
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (λ (z) (-> (app z x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) <-))\n  (env\n   ((□? (z))\n    (□? (x10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app z x1 x2 x3 x4 x5 x6 x7 x8 x9 (-> x10 <-))\n  (env\n   ((□? (z))\n    (□? (x10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  22
  6
  3
  13
  0
  0
  0
  1
  0
  5
  #f
  7/6
  ((1 1 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app z x1 x2 x3 x4 x5 x6 x7 x8 (-> x9 <-) x10)\n  (env\n   ((□? (z))\n    (□? (x10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  22
  6
  3
  13
  0
  0
  0
  1
  0
  5
  #f
  7/6
  ((1 1 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app z x1 x2 x3 x4 x5 x6 x7 (-> x8 <-) x9 x10)\n  (env\n   ((□? (z))\n    (□? (x10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  22
  6
  3
  13
  0
  0
  0
  1
  0
  5
  #f
  7/6
  ((1 1 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app z x1 x2 x3 x4 x5 x6 (-> x7 <-) x8 x9 x10)\n  (env\n   ((□? (z))\n    (□? (x10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  22
  6
  3
  13
  0
  0
  0
  1
  0
  5
  #f
  7/6
  ((1 1 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app z x1 x2 x3 x4 x5 (-> x6 <-) x7 x8 x9 x10)\n  (env\n   ((□? (z))\n    (□? (x10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  22
  6
  3
  13
  0
  0
  0
  1
  0
  5
  #f
  7/6
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app z x1 x2 x3 x4 (-> x5 <-) x6 x7 x8 x9 x10)\n  (env\n   ((□? (z))\n    (□? (x10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  22
  6
  3
  13
  0
  0
  0
  1
  0
  5
  #f
  7/6
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app z x1 x2 x3 (-> x4 <-) x5 x6 x7 x8 x9 x10)\n  (env\n   ((□? (z))\n    (□? (x10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  22
  6
  3
  13
  0
  0
  0
  1
  0
  5
  #f
  7/6
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app z x1 x2 (-> x3 <-) x4 x5 x6 x7 x8 x9 x10)\n  (env\n   ((□? (z))\n    (□? (x10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  22
  6
  3
  13
  0
  0
  0
  1
  0
  5
  #f
  7/6
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app z x1 (-> x2 <-) x3 x4 x5 x6 x7 x8 x9 x10)\n  (env\n   ((□? (z))\n    (□? (x10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  22
  6
  3
  13
  0
  0
  0
  1
  0
  5
  #f
  7/6
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app z (-> x1 <-) x2 x3 x4 x5 x6 x7 x8 x9 x10)\n  (env\n   ((□? (z))\n    (□? (x10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  21
  6
  3
  12
  5
  3
  8
  1
  5/6
  5
  #f
  7/6
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app (-> z <-) x1 x2 x3 x4 x5 x6 x7 x8 x9 x10)\n  (env\n   ((□? (z))\n    (□? (x10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  14
  2
  1
  11
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  lambda
  "'(eval\n  (app (-> (λ (f10) ...) <-) (λ (x10) ...))\n  (env\n   ((□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  (lambda number char string quoted constructor)
  10
  1
  0
  9
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  let
  "'(eval\n  (λ (f10) (-> (let (_) ...) <-))\n  (env\n   ((□? (f10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (let (... () (_ (-> (app f10 (app #t)) <-)) () ...) ...)\n  (env\n   ((□? (f10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (app f10 (-> (app #t) <-))\n  (env\n   ((□? (f10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  12
  2
  0
  10
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  constructor
  "'(eval\n  (app (-> #t <-))\n  (env\n   ((□? (f10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  (constructor)
  11
  1
  0
  10
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app (-> f10 <-) (app #t))\n  (env\n   ((□? (f10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  13
  2
  1
  10
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (let (_) (-> (app f10 (app #f)) <-))\n  (env\n   ((□? (f10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (app f10 (-> (app #f) <-))\n  (env\n   ((□? (f10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  12
  2
  0
  10
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  constructor
  "'(eval\n  (app (-> #f <-))\n  (env\n   ((□? (f10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  (constructor)
  11
  1
  0
  10
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app (-> f10 <-) (app #f))\n  (env\n   ((□? (f10))\n    (□? (x9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  13
  2
  1
  10
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  lambda
  "'(eval\n  (app (-> (λ (f9) ...) <-) (λ (x9) ...))\n  (env\n   ((□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  (lambda number char string quoted constructor)
  9
  1
  0
  8
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  let
  "'(eval\n  (λ (f9) (-> (let (_) ...) <-))\n  (env\n   ((□? (f9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (let (... () (_ (-> (app f9 (app #t)) <-)) () ...) ...)\n  (env\n   ((□? (f9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (app f9 (-> (app #t) <-))\n  (env\n   ((□? (f9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  11
  2
  0
  9
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  constructor
  "'(eval\n  (app (-> #t <-))\n  (env\n   ((□? (f9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  (constructor)
  10
  1
  0
  9
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app (-> f9 <-) (app #t))\n  (env\n   ((□? (f9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  12
  2
  1
  9
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (let (_) (-> (app f9 (app #f)) <-))\n  (env\n   ((□? (f9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (app f9 (-> (app #f) <-))\n  (env\n   ((□? (f9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  11
  2
  0
  9
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  constructor
  "'(eval\n  (app (-> #f <-))\n  (env\n   ((□? (f9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  (constructor)
  10
  1
  0
  9
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app (-> f9 <-) (app #f))\n  (env\n   ((□? (f9))\n    (□? (x8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  12
  2
  1
  9
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  lambda
  "'(eval\n  (app (-> (λ (f8) ...) <-) (λ (x8) ...))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  let
  "'(eval\n  (λ (f8) (-> (let (_) ...) <-))\n  (env\n   ((□? (f8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (let (... () (_ (-> (app f8 (app #t)) <-)) () ...) ...)\n  (env\n   ((□? (f8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (app f8 (-> (app #t) <-))\n  (env\n   ((□? (f8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  10
  2
  0
  8
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  constructor
  "'(eval\n  (app (-> #t <-))\n  (env\n   ((□? (f8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  (constructor)
  9
  1
  0
  8
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app (-> f8 <-) (app #t))\n  (env\n   ((□? (f8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  11
  2
  1
  8
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (let (_) (-> (app f8 (app #f)) <-))\n  (env\n   ((□? (f8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (app f8 (-> (app #f) <-))\n  (env\n   ((□? (f8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  10
  2
  0
  8
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  constructor
  "'(eval\n  (app (-> #f <-))\n  (env\n   ((□? (f8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  (constructor)
  9
  1
  0
  8
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app (-> f8 <-) (app #f))\n  (env\n   ((□? (f8))\n    (□? (x7))\n    (□? (x6))\n    (□? (x5))\n    (□? (x4))\n    (□? (x3))\n    (□? (x2))\n    (□? (x1)))))"
  #f
  11
  2
  1
  8
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  lambda
  "'(eval\n  (app (-> (λ (f7) ...) <-) (λ (x7) ...))\n  (env ((□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  7
  1
  0
  6
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  let
  "'(eval\n  (λ (f7) (-> (let (_) ...) <-))\n  (env\n   ((□? (f7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (let (... () (_ (-> (app f7 (app #t)) <-)) () ...) ...)\n  (env\n   ((□? (f7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (app f7 (-> (app #t) <-))\n  (env\n   ((□? (f7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  constructor
  "'(eval\n  (app (-> #t <-))\n  (env\n   ((□? (f7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app (-> f7 <-) (app #t))\n  (env\n   ((□? (f7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  10
  2
  1
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (let (_) (-> (app f7 (app #f)) <-))\n  (env\n   ((□? (f7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (app f7 (-> (app #f) <-))\n  (env\n   ((□? (f7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  0
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  constructor
  "'(eval\n  (app (-> #f <-))\n  (env\n   ((□? (f7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app (-> f7 <-) (app #f))\n  (env\n   ((□? (f7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  10
  2
  1
  7
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  lambda
  "'(eval\n  (app (-> (λ (f6) ...) <-) (λ (x6) ...))\n  (env ((□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  6
  1
  0
  5
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  let
  "'(eval\n  (λ (f6) (-> (let (_) ...) <-))\n  (env ((□? (f6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (let (... () (_ (-> (app f6 (app #t)) <-)) () ...) ...)\n  (env ((□? (f6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (app f6 (-> (app #t) <-))\n  (env ((□? (f6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  8
  2
  0
  6
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  constructor
  "'(eval\n  (app (-> #t <-))\n  (env ((□? (f6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  7
  1
  0
  6
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app (-> f6 <-) (app #t))\n  (env ((□? (f6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  1
  6
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (let (_) (-> (app f6 (app #f)) <-))\n  (env ((□? (f6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (app f6 (-> (app #f) <-))\n  (env ((□? (f6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  8
  2
  0
  6
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  constructor
  "'(eval\n  (app (-> #f <-))\n  (env ((□? (f6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  7
  1
  0
  6
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app (-> f6 <-) (app #f))\n  (env ((□? (f6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  9
  2
  1
  6
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  lambda
  "'(eval\n  (app (-> (λ (f5) ...) <-) (λ (x5) ...))\n  (env ((□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  5
  1
  0
  4
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  let
  "'(eval\n  (λ (f5) (-> (let (_) ...) <-))\n  (env ((□? (f5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (let (... () (_ (-> (app f5 (app #t)) <-)) () ...) ...)\n  (env ((□? (f5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (app f5 (-> (app #t) <-))\n  (env ((□? (f5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  7
  2
  0
  5
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  constructor
  "'(eval\n  (app (-> #t <-))\n  (env ((□? (f5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  6
  1
  0
  5
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app (-> f5 <-) (app #t))\n  (env ((□? (f5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  8
  2
  1
  5
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (let (_) (-> (app f5 (app #f)) <-))\n  (env ((□? (f5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (app f5 (-> (app #f) <-))\n  (env ((□? (f5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  7
  2
  0
  5
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  constructor
  "'(eval\n  (app (-> #f <-))\n  (env ((□? (f5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  6
  1
  0
  5
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app (-> f5 <-) (app #f))\n  (env ((□? (f5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  8
  2
  1
  5
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  lambda
  "'(eval\n  (app (-> (λ (f4) ...) <-) (λ (x4) ...))\n  (env ((□? (x3)) (□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  let
  "'(eval\n  (λ (f4) (-> (let (_) ...) <-))\n  (env ((□? (f4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (let (... () (_ (-> (app f4 (app #t)) <-)) () ...) ...)\n  (env ((□? (f4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (app f4 (-> (app #t) <-))\n  (env ((□? (f4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  6
  2
  0
  4
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  5
  1
  0
  4
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app (-> f4 <-) (app #t))\n  (env ((□? (f4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  7
  2
  1
  4
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (let (_) (-> (app f4 (app #f)) <-))\n  (env ((□? (f4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (app f4 (-> (app #f) <-))\n  (env ((□? (f4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  6
  2
  0
  4
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  5
  1
  0
  4
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval\n  (app (-> f4 <-) (app #f))\n  (env ((□? (f4)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  7
  2
  1
  4
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  lambda
  "'(eval (app (-> (λ (f3) ...) <-) (λ (x3) ...)) (env ((□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  let
  "'(eval (λ (f3) (-> (let (_) ...) <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (let (... () (_ (-> (app f3 (app #t)) <-)) () ...) ...)\n  (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval (app f3 (-> (app #t) <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  #f
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval (app (-> f3 <-) (app #t)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  #f
  6
  2
  1
  3
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (let (_) (-> (app f3 (app #f)) <-))\n  (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval (app f3 (-> (app #f) <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  #f
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  (constructor)
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval (app (-> f3 <-) (app #f)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  #f
  6
  2
  1
  3
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  lambda
  "'(eval (app (-> (λ (f2) ...) <-) (λ (x2) ...)) (env ((□? (x1)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  let
  "'(eval (λ (f2) (-> (let (_) ...) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (let (... () (_ (-> (app f2 (app #t)) <-)) () ...) ...)\n  (env ((□? (f2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval (app f2 (-> (app #t) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f2)) (□? (x1)))))"
  (constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval (app (-> f2 <-) (app #t)) (env ((□? (f2)) (□? (x1)))))"
  #f
  5
  2
  1
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval (let (_) (-> (app f2 (app #f)) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval (app f2 (-> (app #f) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f2)) (□? (x1)))))"
  (constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval (app (-> f2 <-) (app #f)) (env ((□? (f2)) (□? (x1)))))"
  #f
  5
  2
  1
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  lambda
  "'(eval (app (-> (λ (f1) ...) <-) (λ (x1) ...)) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  let
  "'(eval (λ (f1) (-> (let (_) ...) <-)) (env ((□? (f1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval\n  (let (... () (_ (-> (app f1 (app #t)) <-)) () ...) ...)\n  (env ((□? (f1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval (app f1 (-> (app #t) <-)) (env ((□? (f1)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f1)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval (app (-> f1 <-) (app #t)) (env ((□? (f1)))))"
  #f
  4
  2
  1
  1
  1
  1
  2
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval (let (_) (-> (app f1 (app #f)) <-)) (env ((□? (f1)))))"
  #f
  #f)
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  app
  "'(eval (app f1 (-> (app #f) <-)) (env ((□? (f1)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f1)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-worst-case-10
  4
  5
  136
  ref-or-constructor
  "'(eval (app (-> f1 <-) (app #f)) (env ((□? (f1)))))"
  #f
  4
  2
  1
  1
  1
  1
  2
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
