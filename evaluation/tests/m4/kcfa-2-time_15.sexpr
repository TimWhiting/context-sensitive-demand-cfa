'(clean-cache
  kcfa-2
  4
  15
  32
  app
  "'(eval ((top) app (λ (f1) ...) (λ (x1) ...)) (env ()))"
  #f
  37
  21
  8
  8
  21
  8
  29
  1
  1
  21
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  lambda
  "'(eval (app (λ (f1) ...) (-> (λ (x1) ...) <-)) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  app
  "'(eval (λ (x1) (-> (app (λ (f2) ...) (λ (x2) ...)) <-)) (env ((□? (x1)))))"
  #f
  173
  96
  33
  44
  45
  17
  62
  1
  3331/5670
  77
  #f
  139/96
  ((7 7 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  lambda
  "'(eval (app (λ (f2) ...) (-> (λ (x2) ...) <-)) (env ((□? (x1)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  app
  "'(eval\n  (λ (x2) (-> (app (λ (z) ...) (λ (y1 y2) ...)) <-))\n  (env ((□? (x2)) (□? (x1)))))"
  #f
  56
  24
  12
  20
  5
  3
  8
  1
  5/12
  20
  #f
  17/12
  ((1 1 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  lambda
  "'(eval (app (λ (z) ...) (-> (λ (y1 y2) ...) <-)) (env ((□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  ref-or-constructor
  "'(eval (λ (y1 y2) (-> y1 <-)) (env ((□? (y1 y2)) (□? (x2)) (□? (x1)))))"
  #f
  35
  12
  9
  14
  5
  3
  8
  1
  5/8
  10
  #f
  4/3
  ((0 0 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  lambda
  "'(eval (app (-> (λ (z) ...) <-) (λ (y1 y2) ...)) (env ((□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  app
  "'(eval (λ (z) (-> (app z x1 x2) <-)) (env ((□? (z)) (□? (x2)) (□? (x1)))))"
  #f
  57
  25
  12
  20
  5
  3
  8
  1
  5/11
  21
  #f
  37/25
  ((1 1 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  ref-or-constructor
  "'(eval (app z x1 (-> x2 <-)) (env ((□? (z)) (□? (x2)) (□? (x1)))))"
  #f
  14
  6
  3
  5
  0
  0
  0
  1
  0
  5
  #f
  7/6
  ((0 0 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  ref-or-constructor
  "'(eval (app z (-> x1 <-) x2) (env ((□? (z)) (□? (x2)) (□? (x1)))))"
  #f
  13
  6
  3
  4
  5
  3
  8
  1
  5/6
  5
  #f
  7/6
  ((0 0 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  ref-or-constructor
  "'(eval (app (-> z <-) x1 x2) (env ((□? (z)) (□? (x2)) (□? (x1)))))"
  #f
  6
  2
  1
  3
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  lambda
  "'(eval (app (-> (λ (f2) ...) <-) (λ (x2) ...)) (env ((□? (x1)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  let
  "'(eval (λ (f2) (-> (let (_) ...) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  215
  111
  42
  62
  39
  17
  56
  1
  25/48
  88
  #f
  164/111
  ((10 10 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  app
  "'(eval\n  (let (... () (_ (-> (app f2 (app #t)) <-)) () ...) ...)\n  (env ((□? (f2)) (□? (x1)))))"
  #f
  203
  99
  42
  62
  35
  17
  52
  1
  8/15
  82
  #f
  50/33
  ((9 9 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  app
  "'(eval (app f2 (-> (app #t) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f2)) (□? (x1)))))"
  (constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  ref-or-constructor
  "'(eval (app (-> f2 <-) (app #t)) (env ((□? (f2)) (□? (x1)))))"
  #f
  5
  2
  1
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  app
  "'(eval (let (_) (-> (app f2 (app #f)) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  203
  99
  42
  62
  35
  17
  52
  1
  8/15
  82
  #f
  50/33
  ((9 9 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  app
  "'(eval (app f2 (-> (app #f) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f2)) (□? (x1)))))"
  (constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  ref-or-constructor
  "'(eval (app (-> f2 <-) (app #f)) (env ((□? (f2)) (□? (x1)))))"
  #f
  5
  2
  1
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  lambda
  "'(eval (app (-> (λ (f1) ...) <-) (λ (x1) ...)) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  let
  "'(eval (λ (f1) (-> (let (_) ...) <-)) (env ((□? (f1)))))"
  #f
  95
  54
  18
  23
  19
  8
  27
  1
  109/240
  54
  #t
  32/27
  ((3 3 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  app
  "'(eval\n  (let (... () (_ (-> (app f1 (app #t)) <-)) () ...) ...)\n  (env ((□? (f1)))))"
  #f
  93
  52
  18
  23
  18
  8
  26
  1
  103/228
  52
  #t
  31/26
  ((3 3 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  app
  "'(eval (app f1 (-> (app #t) <-)) (env ((□? (f1)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f1)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  ref-or-constructor
  "'(eval (app (-> f1 <-) (app #t)) (env ((□? (f1)))))"
  #f
  4
  2
  1
  1
  1
  1
  2
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  app
  "'(eval (let (_) (-> (app f1 (app #f)) <-)) (env ((□? (f1)))))"
  #f
  93
  52
  18
  23
  18
  8
  26
  1
  103/228
  52
  #t
  31/26
  ((3 3 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  app
  "'(eval (app f1 (-> (app #f) <-)) (env ((□? (f1)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f1)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  kcfa-2
  4
  15
  32
  ref-or-constructor
  "'(eval (app (-> f1 <-) (app #f)) (env ((□? (f1)))))"
  #f
  4
  2
  1
  1
  1
  1
  2
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
