'(clean-cache
  mj09
  4
  5
  33
  let
  "'(eval ((top) let (h) ...) (env ()))"
  #f
  41
  26
  10
  5
  26
  10
  36
  1
  1
  26
  #t
  1
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  lambda
  "'(eval (let (... () (h (-> (λ (b) ...) <-)) () ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  let
  "'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))"
  #f
  131
  90
  20
  21
  48
  17
  65
  1
  5018/7875
  75
  #f
  53/45
  ((3 3 0)))
'(clean-cache
  mj09
  4
  5
  33
  lambda
  "'(eval (let (... () (g (-> (λ (z) ...) <-)) () ...) ...) (env ((□? (b)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  ref-or-constructor
  "'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))"
  #f
  109
  70
  20
  19
  36
  17
  53
  1
  3842/5985
  59
  #f
  39/35
  ((3 3 0)))
'(clean-cache
  mj09
  4
  5
  33
  let
  "'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))"
  #f
  128
  87
  20
  21
  46
  17
  63
  1
  601/945
  73
  #f
  34/29
  ((3 3 0)))
'(clean-cache
  mj09
  4
  5
  33
  lambda
  "'(eval (let (... () (f (-> (λ (k) ...) <-)) () ...) ...) (env ((□? (b)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  match
  "'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))"
  #f
  77
  53
  14
  10
  26
  13
  39
  1
  47/72
  45
  #f
  54/53
  ((2 2 0)))
'(clean-cache
  mj09
  4
  5
  33
  app
  "'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))"
  #f
  20
  9
  5
  6
  0
  0
  0
  1
  0
  9
  #t
  1
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  number
  "'(eval (app k (-> 1 <-)) (env ((□? (k)) (□? (b)))))"
  (number char string quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  ref-or-constructor
  "'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))"
  #f
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  app
  "'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))"
  #f
  20
  9
  5
  6
  0
  0
  0
  1
  0
  9
  #t
  1
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  number
  "'(eval (app k (-> 2 <-)) (env ((□? (k)) (□? (b)))))"
  (number char string quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  ref-or-constructor
  "'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))"
  #f
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  ref-or-constructor
  "'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))"
  #f
  10
  5
  3
  2
  4
  3
  7
  1
  4/5
  4
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  let
  "'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))"
  #f
  125
  84
  20
  21
  44
  17
  61
  1
  4598/7245
  71
  #f
  7/6
  ((3 3 0)))
'(clean-cache
  mj09
  4
  5
  33
  app
  "'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))"
  #f
  93
  64
  14
  15
  32
  13
  45
  1
  3422/5355
  55
  #f
  35/32
  ((2 2 0)))
'(clean-cache
  mj09
  4
  5
  33
  lambda
  "'(eval (app f (-> (λ (x) ...) <-)) (env ((□? (b)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  ref-or-constructor
  "'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))"
  #f
  12
  5
  3
  4
  0
  0
  0
  1
  0
  4
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  ref-or-constructor
  "'(eval (app (-> f <-) (λ (x) ...)) (env ((□? (b)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  app
  "'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))"
  #f
  122
  81
  20
  21
  42
  17
  59
  1
  2194/3465
  69
  #f
  94/81
  ((3 3 0)))
'(clean-cache
  mj09
  4
  5
  33
  ref-or-constructor
  "'(eval (app g (-> y <-)) (env ((□? (b)))))"
  #f
  96
  67
  14
  15
  34
  13
  47
  1
  1816/2835
  57
  #f
  74/67
  ((2 2 0)))
'(clean-cache
  mj09
  4
  5
  33
  ref-or-constructor
  "'(eval (app (-> g <-) y) (env ((□? (b)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  let
  "'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))"
  #f
  40
  25
  10
  5
  25
  10
  35
  1
  1
  25
  #t
  1
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  app
  "'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))"
  #f
  38
  23
  10
  5
  23
  10
  33
  1
  1
  23
  #t
  1
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  app
  "'(eval (app h (-> (app #f) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  constructor
  "'(eval (app (-> #f <-)) (env ()))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  ref-or-constructor
  "'(eval (app (-> h <-) (app #f)) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  app
  "'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))"
  #f
  38
  23
  10
  5
  23
  10
  33
  1
  1
  23
  #t
  1
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  app
  "'(eval (app h (-> (app #t) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  constructor
  "'(eval (app (-> #t <-)) (env ()))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  ref-or-constructor
  "'(eval (app (-> h <-) (app #t)) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  mj09
  4
  5
  33
  ref-or-constructor
  "'(eval (let (x ... y) (-> y <-)) (env ()))"
  #f
  39
  24
  10
  5
  24
  10
  34
  1
  1
  24
  #t
  1
  ((0 0 0)))
