'(clean-cache
  primtest
  4
  1000
  219
  letrec*
  "'(eval ((top) letrec* (square ... byte-size) ...) (env ()))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (letrec* (... iterations (byte-size (-> 15 <-)) () ...) ...) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval\n  (letrec*\n   (... generate-fermat-prime (iterations (-> 10 <-)) byte-size ...)\n   ...)\n  (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  lambda
  "'(eval\n  (letrec*\n   (...\n    is-fermat-prime?\n    (generate-fermat-prime (-> (λ (byte-size iterations) ...) <-))\n    iterations\n    ...)\n   ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  let
  "'(eval\n  (λ (byte-size iterations) (-> (let (n) ...) <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (let (... () (n (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (byte-size iterations)))))"
  #f
  24
  20
  3
  1
  17
  2
  19
  1
  7/9
  19
  #f
  21/20
  (2 2 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app random (-> byte-size <-)) (env ((□? (byte-size iterations)))))"
  #f
  12
  8
  3
  1
  7
  2
  9
  1
  3/4
  8
  #t
  1
  (1 1 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> random <-) byte-size) (env ((□? (byte-size iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  match
  "'(eval\n  (let (n) (-> (match (match (app not ...) ...) ...) <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (match\n   (match (app not (app is-trivial-composite? ...)) ...)\n   (#f)\n   (_ (-> n <-)))\n  (env ((□? (byte-size iterations)))))"
  #f
  30
  26
  3
  1
  22
  2
  24
  1
  11/14
  19
  #f
  33/26
  (2 2 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match\n   (match (app not (app is-trivial-composite? ...)) ...)\n   ((#f) (-> (app generate-fermat-prime byte-size iterations) <-))\n   _)\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app generate-fermat-prime byte-size (-> iterations <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  12
  8
  3
  1
  7
  2
  9
  1
  17/18
  8
  #t
  1
  (1 1 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app generate-fermat-prime (-> byte-size <-) iterations)\n  (env ((□? (byte-size iterations)))))"
  #f
  12
  8
  3
  1
  7
  2
  9
  1
  17/18
  8
  #t
  1
  (1 1 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app (-> generate-fermat-prime <-) byte-size iterations)\n  (env ((□? (byte-size iterations)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  match
  "'(eval\n  (match (-> (match (app not (app is-trivial-composite? ...)) ...) <-) (#f) _)\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  match
  "'(eval\n  (match\n   (app not (app is-trivial-composite? n))\n   (#f)\n   (_ (-> (match (app is-fermat-prime? n iterations) ...) <-)))\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match (app is-fermat-prime? n iterations) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (byte-size iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (byte-size iterations)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match (app is-fermat-prime? n iterations) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (byte-size iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (byte-size iterations)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match (-> (app is-fermat-prime? n iterations) <-) (#f) _)\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app is-fermat-prime? n (-> iterations <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  12
  8
  3
  1
  7
  2
  9
  1
  3/4
  8
  #t
  1
  (1 1 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app is-fermat-prime? (-> n <-) iterations)\n  (env ((□? (byte-size iterations)))))"
  #f
  30
  26
  3
  1
  22
  2
  24
  1
  11/14
  19
  #f
  33/26
  (2 2 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app (-> is-fermat-prime? <-) n iterations)\n  (env ((□? (byte-size iterations)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match (app not (app is-trivial-composite? n)) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (byte-size iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (byte-size iterations)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match (-> (app not (app is-trivial-composite? n)) <-) (#f) _)\n  (env ((□? (byte-size iterations)))))"
  #f
  520
  513
  5
  2
  413
  3
  416
  1
  2563/3180
  314
  #f
  712/513
  (59 60 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (app not (-> (app is-trivial-composite? n) <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  506
  499
  5
  2
  401
  3
  404
  1
  2453/3060
  306
  #f
  692/499
  (56 58 1))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app is-trivial-composite? (-> n <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  30
  26
  3
  1
  22
  2
  24
  1
  11/14
  19
  #f
  33/26
  (2 2 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app (-> is-trivial-composite? <-) n)\n  (env ((□? (byte-size iterations)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app (-> not <-) (app is-trivial-composite? n))\n  (env ((□? (byte-size iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  lambda
  "'(eval\n  (letrec*\n   (...\n    is-trivial-composite?\n    (is-fermat-prime? (-> (λ (n iterations) ...) <-))\n    generate-fermat-prime\n    ...)\n   ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  match
  "'(eval\n  (λ (n iterations) (-> (match (app <= iterations 0) ...) <-))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match (app <= iterations 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n iterations)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  match
  "'(eval\n  (match\n   (app <= iterations 0)\n   ((#f) (-> (match (let* (byte-size ... a) ...) ...) <-))\n   _)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match (let* (byte-size ... a) ...) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n iterations)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match (let* (byte-size ... a) ...) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (n iterations)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  let*
  "'(eval\n  (match (-> (let* (byte-size ... a) ...) <-) (#f) _)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (let* (... byte-size (a (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (n iterations)))))"
  #f
  278
  264
  6
  8
  170
  3
  173
  1
  4391/6426
  143
  #f
  35/24
  (58 59 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app random (-> byte-size <-)) (env ((□? (n iterations)))))"
  #f
  242
  228
  6
  8
  148
  3
  151
  1
  1339/1938
  125
  #f
  331/228
  (55 56 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> random <-) byte-size) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log ...) (app log ...))) <-))\n         a\n         ...)\n    ...)\n  (env ((□? (n iterations)))))"
  #f
  224
  210
  6
  8
  137
  3
  140
  1
  1915/2754
  125
  #f
  59/42
  (50 51 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (app ceiling (-> (app / (app log n) (app log 2)) <-))\n  (env ((□? (n iterations)))))"
  #f
  188
  174
  6
  8
  115
  3
  118
  1
  12/17
  107
  #f
  241/174
  (42 43 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (app / (app log n) (-> (app log 2) <-)) (env ((□? (n iterations)))))"
  #f
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app log (-> 2 <-)) (env ((□? (n iterations)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> log <-) 2) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (app / (-> (app log n) <-) (app log 2)) (env ((□? (n iterations)))))"
  #f
  100
  86
  6
  8
  60
  3
  63
  1
  49/66
  37
  #f
  135/86
  (30 30 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app log (-> n <-)) (env ((□? (n iterations)))))"
  #f
  64
  50
  6
  8
  38
  3
  41
  1
  125/162
  19
  #f
  81/50
  (19 19 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> log <-) n) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> / <-) (app log n) (app log 2)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app (-> ceiling <-) (app / (app log n) (app log 2)))\n  (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  match
  "'(eval\n  (let* (byte-size ... a) (-> (match (app = (app modulo-power ...) 1) ...) <-))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match\n   (app = (app modulo-power a (app - ...) n) 1)\n   (#f)\n   (_ (-> (app is-fermat-prime? n (app - iterations 1)) <-)))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (app is-fermat-prime? n (-> (app - iterations 1) <-))\n  (env ((□? (n iterations)))))"
  #f
  99
  85
  6
  8
  56
  3
  59
  1
  113/144
  59
  #f
  111/85
  (28 28 0))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app - iterations (-> 1 <-)) (env ((□? (n iterations)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app - (-> iterations <-) 1) (env ((□? (n iterations)))))"
  #f
  97
  83
  6
  8
  56
  3
  59
  1
  1943/2448
  57
  #f
  109/83
  (28 28 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> - <-) iterations 1) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app is-fermat-prime? (-> n <-) (app - iterations 1))\n  (env ((□? (n iterations)))))"
  #f
  63
  49
  6
  8
  38
  3
  41
  1
  125/144
  19
  #f
  79/49
  (17 17 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app (-> is-fermat-prime? <-) n (app - iterations 1))\n  (env ((□? (n iterations)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match\n   (app = (app modulo-power a (app - ...) n) 1)\n   ((#f) (-> (app #f) <-))\n   _)\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (n iterations)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match (-> (app = (app modulo-power a (app - ...) n) 1) <-) (#f) _)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval\n  (app = (app modulo-power a (app - n 1) n) (-> 1 <-))\n  (env ((□? (n iterations)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (app = (-> (app modulo-power a (app - n 1) n) <-) 1)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app modulo-power a (app - n 1) (-> n <-)) (env ((□? (n iterations)))))"
  #f
  64
  50
  6
  8
  38
  3
  41
  1
  125/162
  19
  #f
  81/50
  (20 21 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (app modulo-power a (-> (app - n 1) <-) n) (env ((□? (n iterations)))))"
  #f
  118
  104
  6
  8
  71
  3
  74
  1
  79/108
  55
  #f
  153/104
  (32 32 0))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app - n (-> 1 <-)) (env ((□? (n iterations)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app - (-> n <-) 1) (env ((□? (n iterations)))))"
  #f
  64
  50
  6
  8
  38
  3
  41
  1
  125/162
  19
  #f
  81/50
  (20 20 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> - <-) n 1) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app modulo-power (-> a <-) (app - n 1) n) (env ((□? (n iterations)))))"
  #f
  296
  282
  6
  8
  181
  3
  184
  1
  763/1122
  143
  #f
  421/282
  (71 76 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> modulo-power <-) a (app - n 1) n) (env ((□? (n iterations)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app (-> = <-) (app modulo-power a (app - n 1) n) 1)\n  (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match (-> (app <= iterations 0) <-) (#f) _)\n  (env ((□? (n iterations)))))"
  #f
  151
  137
  6
  8
  89
  3
  92
  1
  2515/3672
  98
  #f
  176/137
  (36 37 0))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app <= iterations (-> 0 <-)) (env ((□? (n iterations)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app <= (-> iterations <-) 0) (env ((□? (n iterations)))))"
  #f
  97
  83
  6
  8
  56
  3
  59
  1
  977/1377
  57
  #f
  109/83
  (25 25 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> <= <-) iterations 0) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  lambda
  "'(eval\n  (letrec*\n   (...\n    modulo-power\n    (is-trivial-composite? (-> (λ (n) ...) <-))\n    is-fermat-prime?\n    ...)\n   ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  match
  "'(eval (λ (n) (-> (match (app = (app modulo ...) 0) ...) <-)) (env ((□? (n)))))"
  #f
  426
  418
  5
  3
  391
  3
  394
  1
  1403/1485
  255
  #f
  581/418
  (27 27 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match (app = (app modulo n 2) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 2) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  386
  378
  5
  3
  351
  3
  354
  1
  1253/1335
  231
  #f
  25/18
  (24 24 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match (app = (app modulo n 3) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 3) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  346
  338
  5
  3
  311
  3
  314
  1
  1103/1185
  207
  #f
  469/338
  (21 21 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match (app = (app modulo n 5) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 5) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  306
  298
  5
  3
  271
  3
  274
  1
  953/1035
  183
  #f
  413/298
  (19 19 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match (app = (app modulo n 7) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 7) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  266
  258
  5
  3
  231
  3
  234
  1
  803/885
  159
  #f
  119/86
  (18 18 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match (app = (app modulo n 11) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 11) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  226
  218
  5
  3
  191
  3
  194
  1
  653/735
  135
  #f
  301/218
  (15 15 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match (app = (app modulo n 13) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 13) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  186
  178
  5
  3
  151
  3
  154
  1
  503/585
  111
  #f
  245/178
  (13 14 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match (app = (app modulo n 17) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 17) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  146
  138
  5
  3
  111
  3
  114
  1
  353/435
  88
  #f
  94/69
  (11 12 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match (app = (app modulo n 19) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  match
  "'(eval\n  (match\n   (app = (app modulo n 19) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  104
  96
  5
  3
  71
  3
  74
  1
  11/15
  65
  #f
  127/96
  (9 9 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match (app = (app modulo n 23) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match (app = (app modulo n 23) 0) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (match (-> (app = (app modulo n 23) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  76
  68
  5
  3
  51
  3
  54
  1
  31/42
  43
  #f
  93/68
  (6 7 0))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app = (app modulo n 23) (-> 0 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (app = (-> (app modulo n 23) <-) 0) (env ((□? (n)))))"
  #f
  58
  50
  5
  3
  39
  3
  42
  1
  25/33
  31
  #f
  69/50
  (5 5 0))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app modulo n (-> 23 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 23) (env ((□? (n)))))"
  #f
  40
  32
  5
  3
  27
  3
  30
  1
  19/24
  19
  #f
  45/32
  (3 4 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 23) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 23) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (match (-> (app = (app modulo n 19) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  76
  68
  5
  3
  51
  3
  54
  1
  31/42
  43
  #f
  93/68
  (7 7 0))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app = (app modulo n 19) (-> 0 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (app = (-> (app modulo n 19) <-) 0) (env ((□? (n)))))"
  #f
  58
  50
  5
  3
  39
  3
  42
  1
  25/33
  31
  #f
  69/50
  (5 5 0))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app modulo n (-> 19 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 19) (env ((□? (n)))))"
  #f
  40
  32
  5
  3
  27
  3
  30
  1
  19/24
  19
  #f
  45/32
  (3 4 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 19) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 19) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (match (-> (app = (app modulo n 17) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  76
  68
  5
  3
  51
  3
  54
  1
  31/42
  43
  #f
  93/68
  (6 7 0))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app = (app modulo n 17) (-> 0 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (app = (-> (app modulo n 17) <-) 0) (env ((□? (n)))))"
  #f
  58
  50
  5
  3
  39
  3
  42
  1
  25/33
  31
  #f
  69/50
  (5 5 0))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app modulo n (-> 17 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 17) (env ((□? (n)))))"
  #f
  40
  32
  5
  3
  27
  3
  30
  1
  19/24
  19
  #f
  45/32
  (4 4 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 17) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 17) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (match (-> (app = (app modulo n 13) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  76
  68
  5
  3
  51
  3
  54
  1
  31/42
  43
  #f
  93/68
  (6 6 0))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app = (app modulo n 13) (-> 0 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (app = (-> (app modulo n 13) <-) 0) (env ((□? (n)))))"
  #f
  58
  50
  5
  3
  39
  3
  42
  1
  25/33
  31
  #f
  69/50
  (5 5 0))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app modulo n (-> 13 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 13) (env ((□? (n)))))"
  #f
  40
  32
  5
  3
  27
  3
  30
  1
  19/24
  19
  #f
  45/32
  (3 3 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 13) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 13) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (match (-> (app = (app modulo n 11) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  76
  68
  5
  3
  51
  3
  54
  1
  31/42
  43
  #f
  93/68
  (6 6 0))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app = (app modulo n 11) (-> 0 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (app = (-> (app modulo n 11) <-) 0) (env ((□? (n)))))"
  #f
  58
  50
  5
  3
  39
  3
  42
  1
  25/33
  31
  #f
  69/50
  (5 5 0))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app modulo n (-> 11 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 11) (env ((□? (n)))))"
  #f
  40
  32
  5
  3
  27
  3
  30
  1
  19/24
  19
  #f
  45/32
  (3 3 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 11) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 11) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (match (-> (app = (app modulo n 7) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  76
  68
  5
  3
  51
  3
  54
  1
  31/42
  43
  #f
  93/68
  (6 6 0))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app = (app modulo n 7) (-> 0 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (app = (-> (app modulo n 7) <-) 0) (env ((□? (n)))))"
  #f
  58
  50
  5
  3
  39
  3
  42
  1
  25/33
  31
  #f
  69/50
  (5 5 0))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app modulo n (-> 7 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 7) (env ((□? (n)))))"
  #f
  40
  32
  5
  3
  27
  3
  30
  1
  19/24
  19
  #f
  45/32
  (3 3 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 7) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 7) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (match (-> (app = (app modulo n 5) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  76
  68
  5
  3
  51
  3
  54
  1
  31/42
  43
  #f
  93/68
  (6 6 0))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app = (app modulo n 5) (-> 0 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (app = (-> (app modulo n 5) <-) 0) (env ((□? (n)))))"
  #f
  58
  50
  5
  3
  39
  3
  42
  1
  25/33
  31
  #f
  69/50
  (5 5 0))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app modulo n (-> 5 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 5) (env ((□? (n)))))"
  #f
  40
  32
  5
  3
  27
  3
  30
  1
  19/24
  19
  #f
  45/32
  (3 3 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 5) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 5) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (match (-> (app = (app modulo n 3) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  76
  68
  5
  3
  51
  3
  54
  1
  31/42
  43
  #f
  93/68
  (6 6 0))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app = (app modulo n 3) (-> 0 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (app = (-> (app modulo n 3) <-) 0) (env ((□? (n)))))"
  #f
  58
  50
  5
  3
  39
  3
  42
  1
  25/33
  31
  #f
  69/50
  (5 5 0))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app modulo n (-> 3 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 3) (env ((□? (n)))))"
  #f
  40
  32
  5
  3
  27
  3
  30
  1
  19/24
  19
  #f
  45/32
  (3 4 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 3) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 3) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (match (-> (app = (app modulo n 2) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  76
  68
  5
  3
  51
  3
  54
  1
  31/42
  43
  #f
  93/68
  (6 6 0))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app = (app modulo n 2) (-> 0 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (app = (-> (app modulo n 2) <-) 0) (env ((□? (n)))))"
  #f
  58
  50
  5
  3
  39
  3
  42
  1
  25/33
  31
  #f
  69/50
  (5 5 0))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app modulo n (-> 2 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 2) (env ((□? (n)))))"
  #f
  40
  32
  5
  3
  27
  3
  30
  1
  19/24
  19
  #f
  45/32
  (3 3 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 2) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 2) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  lambda
  "'(eval\n  (letrec*\n   (...\n    square\n    (modulo-power (-> (λ (base exp n) ...) <-))\n    is-trivial-composite?\n    ...)\n   ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  match
  "'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (match (app = exp 0) (#f) (_ (-> 1 <-))) (env ((□? (base exp n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  match
  "'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_ (-> (app modulo (app * base (app modulo-power ...)) n) <-)))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app modulo (app * base (app modulo-power base (app - ...) n)) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  248
  207
  10
  31
  143
  4
  147
  1
  129079/173880
  19
  #f
  395/207
  (287 293 1))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - ...) n)) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  248
  207
  10
  31
  143
  4
  147
  1
  2803/3465
  19
  #f
  395/207
  (301 308 2))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  719
  678
  10
  31
  458
  4
  462
  1
  2143/2898
  333
  #f
  341/226
  (505 516 6))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app - exp (-> 1 <-)) (env ((□? (base exp n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))"
  #f
  701
  660
  10
  31
  458
  4
  462
  1
  45138823/60278400
  321
  #f
  333/220
  (393 401 5))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> - <-) exp 1) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))"
  #f
  480
  439
  10
  31
  286
  4
  290
  1
  181157/257040
  143
  #f
  735/439
  (355 362 3))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app (-> modulo-power <-) base (app - exp 1) n)\n  (env ((□? (base exp n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))"
  #f
  480
  439
  10
  31
  286
  4
  290
  1
  2084504/3079125
  143
  #f
  735/439
  (362 370 3))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app (-> * <-) base (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app (-> modulo <-) (app * base (app modulo-power base (app - ...) n)) n)\n  (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (match\n   (app odd? exp)\n   ((#f) (-> (app modulo (app square (app modulo-power ...)) n) <-))\n   _)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app modulo (app square (app modulo-power base (app / ...) n)) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  248
  207
  10
  31
  143
  4
  147
  1
  129079/173880
  19
  #f
  395/207
  (305 381 2))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (app modulo (-> (app square (app modulo-power base (app / ...) n)) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  247
  206
  10
  31
  143
  4
  147
  1
  129079/159390
  19
  #f
  393/206
  (261 267 1))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  706
  665
  10
  31
  458
  4
  462
  1
  2811421/3767400
  325
  #f
  201/133
  (448 458 5))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app / exp (-> 2 <-)) (env ((□? (base exp n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))"
  #f
  701
  660
  10
  31
  458
  4
  462
  1
  6945161/9273600
  321
  #f
  333/220
  (387 395 3))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> / <-) exp 2) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))"
  #f
  479
  438
  10
  31
  286
  4
  290
  1
  260563/369495
  143
  #f
  733/438
  (317 324 3))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app (-> modulo-power <-) base (app / exp 2) n)\n  (env ((□? (base exp n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app (-> square <-) (app modulo-power base (app / exp 2) n))\n  (env ((□? (base exp n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval\n  (app (-> modulo <-) (app square (app modulo-power base (app / ...) n)) n)\n  (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))"
  #f
  841
  800
  10
  31
  552
  4
  556
  1
  7572329/10664640
  391
  #f
  1209/800
  (522 535 5))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))"
  #f
  701
  660
  10
  31
  458
  4
  462
  1
  6949673/9737280
  321
  #f
  333/220
  (382 389 5))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> odd? <-) exp) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))"
  #f
  911
  870
  10
  31
  599
  4
  603
  1
  7883657/11128320
  461
  #f
  1279/870
  (507 517 6))
'(clean-cache
  primtest
  4
  1000
  219
  number
  "'(eval (app = exp (-> 0 <-)) (env ((□? (base exp n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))"
  #f
  701
  660
  10
  31
  458
  4
  462
  1
  6949673/9737280
  321
  #f
  333/220
  (373 379 4))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> = <-) exp 0) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  lambda
  "'(eval\n  (letrec* (... () (square (-> (λ (x) ...) <-)) modulo-power ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app * x (-> x <-)) (env ((□? (x)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app * (-> x <-) x) (env ((□? (x)))))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> * <-) x x) (env ((□? (x)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  app
  "'(eval\n  (letrec*\n   (square ... byte-size)\n   (-> (app generate-fermat-prime byte-size iterations) <-))\n  (env ()))"
  #f
  #f)
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app generate-fermat-prime byte-size (-> iterations <-)) (env ()))"
  (number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app generate-fermat-prime (-> byte-size <-) iterations) (env ()))"
  (number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  primtest
  4
  1000
  219
  ref-or-constructor
  "'(eval (app (-> generate-fermat-prime <-) byte-size iterations) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
