'(clean-cache
  flatten
  4
  700
  103
  lettypes
  "'(eval ((top) lettypes (cons ... nil) ...) (env ()))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  letrec*
  "'(eval (lettypes cons ... nil (letrec* (car ... flatten) ...)) (env ()))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  lambda
  "'(eval\n  (letrec* (... append (flatten (-> (λ (x) ...) <-)) () ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  match
  "'(eval (λ (x) (-> (match (app pair? x) ...) <-)) (env ((□? (x)))))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval\n  (match\n   (app pair? x)\n   (#f)\n   (_\n    (->\n     (app append (app flatten (app car ...)) (app flatten (app cdr ...)))\n     <-)))\n  (env ((□? (x)))))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval\n  (app append (app flatten (app car x)) (-> (app flatten (app cdr x)) <-))\n  (env ((□? (x)))))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval (app flatten (-> (app cdr x) <-)) (env ((□? (x)))))"
  #f
  329
  316
  10
  3
  310
  4
  314
  1
  1495/1504
  147
  #f
  249/79
  (253 261 2))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app cdr (-> x <-)) (env ((□? (x)))))"
  #f
  312
  300
  10
  2
  299
  4
  303
  1
  1503/1504
  227
  #f
  17/20
  (75 77 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app (-> cdr <-) x) (env ((□? (x)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app (-> flatten <-) (app cdr x)) (env ((□? (x)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval\n  (app append (-> (app flatten (app car x)) <-) (app flatten (app cdr x)))\n  (env ((□? (x)))))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval (app flatten (-> (app car x) <-)) (env ((□? (x)))))"
  #f
  328
  315
  10
  3
  309
  4
  313
  1
  1495/1504
  121
  #f
  1109/315
  (269 280 2))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app car (-> x <-)) (env ((□? (x)))))"
  #f
  312
  300
  10
  2
  299
  4
  303
  1
  1503/1504
  227
  #f
  17/20
  (77 79 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app (-> car <-) x) (env ((□? (x)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app (-> flatten <-) (app car x)) (env ((□? (x)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval\n  (app (-> append <-) (app flatten (app car x)) (app flatten (app cdr x)))\n  (env ((□? (x)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  match
  "'(eval\n  (match (app pair? x) ((#f) (-> (match (app null? x) ...) <-)) _)\n  (env ((□? (x)))))"
  #f
  604
  588
  13
  3
  576
  5
  581
  1
  1903/1952
  425
  #f
  59/42
  (198 205 2))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (match (app null? x) (#f) (_ (-> x <-))) (env ((□? (x)))))"
  #f
  312
  300
  10
  2
  299
  4
  303
  1
  47/48
  227
  #f
  17/20
  (96 100 2))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval\n  (match (app null? x) ((#f) (-> (app cons x (app nil)) <-)) _)\n  (env ((□? (x)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval (app cons x (-> (app nil) <-)) (env ((□? (x)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (x)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app cons (-> x <-) (app nil)) (env ((□? (x)))))"
  #f
  312
  300
  10
  2
  299
  4
  303
  1
  47/48
  227
  #f
  17/20
  (72 74 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app (-> cons <-) x (app nil)) (env ((□? (x)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval (match (-> (app null? x) <-) (#f) _) (env ((□? (x)))))"
  #f
  477
  461
  13
  3
  452
  5
  457
  1
  889/912
  343
  #f
  597/461
  (153 158 2))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app null? (-> x <-)) (env ((□? (x)))))"
  #f
  312
  300
  10
  2
  299
  4
  303
  1
  47/48
  227
  #f
  17/20
  (82 85 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app (-> null? <-) x) (env ((□? (x)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval (match (-> (app pair? x) <-) (#f) _) (env ((□? (x)))))"
  #f
  476
  461
  12
  3
  452
  5
  457
  1
  889/912
  343
  #f
  597/461
  (173 180 2))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app pair? (-> x <-)) (env ((□? (x)))))"
  #f
  312
  300
  10
  2
  299
  4
  303
  1
  47/48
  227
  #f
  17/20
  (75 77 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app (-> pair? <-) x) (env ((□? (x)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  lambda
  "'(eval\n  (letrec* (... null? (append (-> (λ (x y) ...) <-)) flatten ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  match
  "'(eval (λ (x y) (-> (match (app null? x) ...) <-)) (env ((□? (x y)))))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (match (app null? x) (#f) (_ (-> y <-))) (env ((□? (x y)))))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval\n  (match\n   (app null? x)\n   ((#f) (-> (app cons (app car x) (app append (app cdr ...) y)) <-))\n   _)\n  (env ((□? (x y)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval\n  (app cons (app car x) (-> (app append (app cdr x) y) <-))\n  (env ((□? (x y)))))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app append (app cdr x) (-> y <-)) (env ((□? (x y)))))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval (app append (-> (app cdr x) <-) y) (env ((□? (x y)))))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app cdr (-> x <-)) (env ((□? (x y)))))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app (-> cdr <-) x) (env ((□? (x y)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app (-> append <-) (app cdr x) y) (env ((□? (x y)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval\n  (app cons (-> (app car x) <-) (app append (app cdr x) y))\n  (env ((□? (x y)))))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app car (-> x <-)) (env ((□? (x y)))))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app (-> car <-) x) (env ((□? (x y)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) (app car x) (app append (app cdr x) y))\n  (env ((□? (x y)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval (match (-> (app null? x) <-) (#f) _) (env ((□? (x y)))))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app null? (-> x <-)) (env ((□? (x y)))))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app (-> null? <-) x) (env ((□? (x y)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  lambda
  "'(eval\n  (letrec* (... pair? (null? (-> (λ (null?-v) ...) <-)) append ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  match
  "'(eval (λ (null?-v) (-> (match null?-v ...) <-)) (env ((□? (null?-v)))))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval (match null?-v (nil) (_ (-> (app #f) <-))) (env ((□? (null?-v)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (null?-v)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval (match null?-v ((nil) (-> (app #t) <-)) _) (env ((□? (null?-v)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (null?-v)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (match (-> null?-v <-) (nil) _) (env ((□? (null?-v)))))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  lambda
  "'(eval\n  (letrec* (... cdr (pair? (-> (λ (pair?-v) ...) <-)) null? ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  match
  "'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))"
  #f
  431
  415
  12
  4
  405
  5
  410
  1
  28555/29376
  312
  #f
  546/415
  (144 148 2))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (pair?-v)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (pair?-v)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))"
  #f
  348
  332
  12
  4
  330
  5
  335
  1
  1535/1568
  246
  #f
  143/166
  (95 98 0))
'(clean-cache
  flatten
  4
  700
  103
  lambda
  "'(eval\n  (letrec* (... car (cdr (-> (λ (cdr-v) ...) <-)) pair? ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  match
  "'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  lambda
  "'(eval (letrec* (... () (car (-> (λ (car-v) ...) <-)) cdr ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  match
  "'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval\n  (letrec*\n   (car ... flatten)\n   (-> (app flatten (app cons (app cons ...) (app cons ...))) <-))\n  (env ()))"
  #f
  #f)
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval\n  (app\n   flatten\n   (->\n    (app\n     cons\n     (app cons 1 (app cons ...))\n     (app cons (app cons ...) (app nil ...)))\n    <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval\n  (app\n   cons\n   (app cons 1 (app cons 2 (app nil ...)))\n   (-> (app cons (app cons (app cons ...) (app nil ...)) (app nil)) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval\n  (app\n   cons\n   (app cons (app cons (app cons ...) (app nil ...)) (app nil))\n   (-> (app nil) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval\n  (app\n   cons\n   (-> (app cons (app cons (app cons ...) (app nil ...)) (app nil)) <-)\n   (app nil))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval\n  (app cons (app cons (app cons 3 (app cons ...)) (app nil)) (-> (app nil) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval\n  (app cons (-> (app cons (app cons 3 (app cons ...)) (app nil)) <-) (app nil))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval\n  (app cons (app cons 3 (app cons 4 (app cons ...))) (-> (app nil) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval\n  (app cons (-> (app cons 3 (app cons 4 (app cons ...))) <-) (app nil))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval (app cons 3 (-> (app cons 4 (app cons 5 (app nil ...))) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval (app cons 4 (-> (app cons 5 (app nil)) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval (app cons 5 (-> (app nil) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  number
  "'(eval (app cons (-> 5 <-) (app nil)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app (-> cons <-) 5 (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  number
  "'(eval (app cons (-> 4 <-) (app cons 5 (app nil))) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app (-> cons <-) 4 (app cons 5 (app nil))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  number
  "'(eval (app cons (-> 3 <-) (app cons 4 (app cons 5 (app nil ...)))) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app (-> cons <-) 3 (app cons 4 (app cons 5 (app nil ...)))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) (app cons 3 (app cons 4 (app cons ...))) (app nil))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) (app cons (app cons 3 (app cons ...)) (app nil)) (app nil))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cons (app cons (app cons ...) (app nil ...)) (app nil))\n   (app nil))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval\n  (app\n   cons\n   (-> (app cons 1 (app cons 2 (app nil ...))) <-)\n   (app cons (app cons (app cons ...) (app nil ...)) (app nil)))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval (app cons 1 (-> (app cons 2 (app nil)) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  app
  "'(eval (app cons 2 (-> (app nil) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  number
  "'(eval (app cons (-> 2 <-) (app nil)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app (-> cons <-) 2 (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  number
  "'(eval (app cons (-> 1 <-) (app cons 2 (app nil))) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval (app (-> cons <-) 1 (app cons 2 (app nil))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cons 1 (app cons 2 (app nil ...)))\n   (app cons (app cons (app cons ...) (app nil ...)) (app nil)))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  flatten
  4
  700
  103
  ref-or-constructor
  "'(eval\n  (app\n   (-> flatten <-)\n   (app\n    cons\n    (app cons 1 (app cons ...))\n    (app cons (app cons ...) (app nil ...))))\n  (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
