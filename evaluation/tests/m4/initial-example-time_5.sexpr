'(clean-cache
  initial-example
  4
  5
  48
  let
  "'(eval ((top) let (id) ...) (env ()))"
  #f
  #f)
'(clean-cache
  initial-example
  4
  5
  48
  lambda
  "'(eval (let (... () (id (-> (λ (x) ...) <-)) () ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  ref-or-constructor
  "'(eval (λ (x) (-> x <-)) (env ((□? (x)))))"
  #f
  9
  5
  3
  1
  4
  3
  7
  1
  4/5
  4
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  letrec
  "'(eval (let (id) (-> (letrec (f ... g) ...) <-)) (env ()))"
  #f
  #f)
'(clean-cache
  initial-example
  4
  5
  48
  lambda
  "'(eval (letrec (... f (g (-> (λ (n) ...) <-)) () ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  match
  "'(eval (λ (n) (-> (match (app <= n 1) ...) <-)) (env ((□? (n)))))"
  #f
  92
  81
  8
  3
  74
  7
  81
  1
  88/95
  68
  #f
  94/81
  ((2 2 0)))
'(clean-cache
  initial-example
  4
  5
  48
  number
  "'(eval (match (app <= n 1) (#f) (_ (-> 1 <-))) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  app
  "'(eval\n  (match (app <= n 1) ((#f) (-> (app * n (app g (app - ...))) <-)) _)\n  (env ((□? (n)))))"
  #f
  84
  73
  8
  3
  69
  7
  76
  1
  73/76
  61
  #f
  85/73
  ((1 1 0)))
'(clean-cache
  initial-example
  4
  5
  48
  app
  "'(eval (app * n (-> (app g (app - n 1)) <-)) (env ((□? (n)))))"
  #f
  #f)
'(clean-cache
  initial-example
  4
  5
  48
  app
  "'(eval (app g (-> (app - n 1) <-)) (env ((□? (n)))))"
  #f
  37
  27
  8
  2
  23
  7
  30
  1
  19/21
  23
  #f
  31/27
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  number
  "'(eval (app - n (-> 1 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  ref-or-constructor
  "'(eval (app - (-> n <-) 1) (env ((□? (n)))))"
  #f
  34
  24
  8
  2
  23
  7
  30
  1
  41/42
  21
  #f
  9/8
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  ref-or-constructor
  "'(eval (app (-> - <-) n 1) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  ref-or-constructor
  "'(eval (app (-> g <-) (app - n 1)) (env ((□? (n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  ref-or-constructor
  "'(eval (app * (-> n <-) (app g (app - n 1))) (env ((□? (n)))))"
  #f
  34
  24
  8
  2
  23
  7
  30
  1
  7/8
  21
  #f
  9/8
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  ref-or-constructor
  "'(eval (app (-> * <-) n (app g (app - n 1))) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  app
  "'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (n)))))"
  #f
  52
  42
  8
  2
  38
  7
  45
  1
  19/22
  37
  #f
  47/42
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  number
  "'(eval (app <= n (-> 1 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  ref-or-constructor
  "'(eval (app <= (-> n <-) 1) (env ((□? (n)))))"
  #f
  34
  24
  8
  2
  23
  7
  30
  1
  7/8
  21
  #f
  9/8
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  ref-or-constructor
  "'(eval (app (-> <= <-) n 1) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  lambda
  "'(eval (letrec (... () (f (-> (λ (n) ...) <-)) g ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  match
  "'(eval (λ (n) (-> (match (app <= n 0) ...) <-)) (env ((□? (n)))))"
  #f
  92
  81
  8
  3
  74
  7
  81
  1
  88/95
  68
  #f
  94/81
  ((2 2 0)))
'(clean-cache
  initial-example
  4
  5
  48
  number
  "'(eval (match (app <= n 0) (#f) (_ (-> 1 <-))) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  app
  "'(eval\n  (match (app <= n 0) ((#f) (-> (app * n (app f (app - ...))) <-)) _)\n  (env ((□? (n)))))"
  #f
  84
  73
  8
  3
  69
  7
  76
  1
  73/76
  61
  #f
  85/73
  ((1 1 0)))
'(clean-cache
  initial-example
  4
  5
  48
  app
  "'(eval (app * n (-> (app f (app - n 1)) <-)) (env ((□? (n)))))"
  #f
  #f)
'(clean-cache
  initial-example
  4
  5
  48
  app
  "'(eval (app f (-> (app - n 1) <-)) (env ((□? (n)))))"
  #f
  37
  27
  8
  2
  23
  7
  30
  1
  19/21
  23
  #f
  31/27
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  number
  "'(eval (app - n (-> 1 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  ref-or-constructor
  "'(eval (app - (-> n <-) 1) (env ((□? (n)))))"
  #f
  34
  24
  8
  2
  23
  7
  30
  1
  41/42
  21
  #f
  9/8
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  ref-or-constructor
  "'(eval (app (-> - <-) n 1) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  ref-or-constructor
  "'(eval (app (-> f <-) (app - n 1)) (env ((□? (n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  ref-or-constructor
  "'(eval (app * (-> n <-) (app f (app - n 1))) (env ((□? (n)))))"
  #f
  34
  24
  8
  2
  23
  7
  30
  1
  7/8
  21
  #f
  9/8
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  ref-or-constructor
  "'(eval (app (-> * <-) n (app f (app - n 1))) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  app
  "'(eval (match (-> (app <= n 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  52
  42
  8
  2
  38
  7
  45
  1
  19/22
  37
  #f
  47/42
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  number
  "'(eval (app <= n (-> 0 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  ref-or-constructor
  "'(eval (app <= (-> n <-) 0) (env ((□? (n)))))"
  #f
  34
  24
  8
  2
  23
  7
  30
  1
  7/8
  21
  #f
  9/8
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  ref-or-constructor
  "'(eval (app (-> <= <-) n 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  app
  "'(eval\n  (letrec (f ... g) (-> (app + (app (app id ...) 3) (app (app id ...) 4)) <-))\n  (env ()))"
  #f
  #f)
'(clean-cache
  initial-example
  4
  5
  48
  app
  "'(eval (app + (app (app id f) 3) (-> (app (app id g) 4) <-)) (env ()))"
  #f
  113
  98
  8
  7
  82
  7
  89
  1
  191/207
  54
  #f
  71/49
  ((3 3 0)))
'(clean-cache
  initial-example
  4
  5
  48
  number
  "'(eval (app (app id g) (-> 4 <-)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  app
  "'(eval (app (-> (app id g) <-) 4) (env ()))"
  #f
  10
  6
  3
  1
  6
  3
  9
  1
  1
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  ref-or-constructor
  "'(eval (app id (-> g <-)) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  ref-or-constructor
  "'(eval (app (-> id <-) g) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  app
  "'(eval (app + (-> (app (app id f) 3) <-) (app (app id g) 4)) (env ()))"
  #f
  113
  98
  8
  7
  82
  7
  89
  1
  191/207
  54
  #f
  71/49
  ((4 4 0)))
'(clean-cache
  initial-example
  4
  5
  48
  number
  "'(eval (app (app id f) (-> 3 <-)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  app
  "'(eval (app (-> (app id f) <-) 3) (env ()))"
  #f
  10
  6
  3
  1
  6
  3
  9
  1
  1
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  ref-or-constructor
  "'(eval (app id (-> f <-)) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  ref-or-constructor
  "'(eval (app (-> id <-) f) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  initial-example
  4
  5
  48
  ref-or-constructor
  "'(eval (app (-> + <-) (app (app id f) 3) (app (app id g) 4)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
