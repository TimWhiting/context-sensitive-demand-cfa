'(clean-cache
  map
  1
  25
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  109
  85
  16
  8
  65
  9
  74
  1
  509/540
  51
  #f
  189/85
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  map
  1
  25
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  108
  84
  16
  8
  64
  9
  73
  1
  500/531
  51
  #f
  187/84
  ((10 10 0) (19/2 19/2 0) (10 10 0)))
'(clean-cache
  map
  1
  25
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  130
  105
  16
  9
  71
  9
  80
  1
  407/486
  65
  #f
  229/105
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  127
  102
  16
  9
  69
  9
  78
  1
  401/477
  65
  #f
  13/6
  ((11 11 0) (11 11 0) (11 11 0)))
'(clean-cache
  map
  1
  25
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  146
  124
  16
  6
  65
  9
  74
  1
  50/63
  85
  #f
  251/124
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  126
  101
  16
  9
  65
  9
  74
  1
  389/468
  67
  #f
  219/101
  ((11 11 0) (11 11 0) (11 11 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  71
  52
  14
  5
  36
  8
  44
  1
  124/135
  34
  #f
  31/13
  ((6 6 0) (11/2 11/2 0) (6 6 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  71
  52
  14
  5
  36
  8
  44
  1
  124/135
  34
  #f
  31/13
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  160
  115
  35
  10
  76
  22
  98
  1
  161/183
  70
  #f
  221/115
  ((23/2 23/2 0) (23/2 23/2 0) (23/2 23/2 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  88
  66
  16
  6
  40
  9
  49
  1
  284/333
  40
  #f
  27/11
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  71
  52
  14
  5
  36
  8
  44
  1
  8/9
  34
  #f
  31/13
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  32
  20
  7
  5
  13
  6
  19
  1
  3/4
  16
  #f
  6/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  22
  12
  7
  3
  11
  6
  17
  1
  9/10
  11
  #f
  13/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  107
  85
  16
  6
  49
  9
  58
  1
  37/44
  55
  #f
  37/17
  ((10 10 0) (21/2 21/2 0) (21/2 21/2 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  91
  69
  16
  6
  43
  9
  52
  1
  311/360
  44
  #f
  164/69
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  71
  52
  14
  5
  36
  8
  44
  1
  8/9
  34
  #f
  31/13
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  124
  99
  16
  9
  67
  9
  76
  1
  395/468
  65
  #f
  71/33
  ((10 10 0) (10 10 0) (21/2 21/2 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  9
  5
  3
  1
  4
  3
  7
  1
  4/5
  4
  #f
  6/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  30
  17
  7
  6
  12
  6
  18
  1
  101/120
  13
  #f
  21/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  28
  15
  7
  6
  11
  6
  17
  1
  13/15
  13
  #f
  17/15
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  85
  63
  16
  6
  41
  9
  50
  1
  187/222
  39
  #f
  53/21
  ((8 8 0) (8 8 0) (8 8 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  77
  55
  16
  6
  36
  9
  45
  1
  83/96
  33
  #f
  144/55
  ((7 7 0) (15/2 15/2 0) (7 7 0)))
'(clean-cache
  map
  1
  25
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  73
  53
  14
  6
  36
  8
  44
  1
  157/180
  33
  #f
  135/53
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  72
  52
  14
  6
  36
  8
  44
  1
  8/9
  33
  #f
  5/2
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  71
  51
  14
  6
  36
  8
  44
  1
  163/180
  33
  #f
  125/51
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  map
  1
  25
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  81
  59
  16
  6
  38
  9
  47
  1
  43/51
  33
  #f
  157/59
  ((8 8 0) (8 8 0) (8 8 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  79
  57
  16
  6
  37
  9
  46
  1
  169/198
  33
  #f
  51/19
  ((15/2 15/2 0) (15/2 15/2 0) (8 8 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  77
  55
  16
  6
  36
  9
  45
  1
  83/96
  33
  #f
  144/55
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  map
  1
  25
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  107
  83
  16
  8
  63
  9
  72
  1
  491/522
  51
  #f
  185/83
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  106
  82
  16
  8
  62
  9
  71
  1
  482/513
  51
  #f
  183/82
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  92
  59
  26
  7
  37
  16
  53
  1
  169/210
  36
  #f
  99/59
  ((9/2 9/2 0) (9/2 9/2 0) (4 4 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  86
  53
  26
  7
  34
  16
  50
  1
  5/6
  32
  #f
  91/53
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  106
  82
  16
  8
  62
  9
  71
  1
  482/513
  51
  #f
  183/82
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  92
  59
  26
  7
  37
  16
  53
  1
  169/210
  36
  #f
  99/59
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  86
  53
  26
  7
  34
  16
  50
  1
  5/6
  32
  #f
  91/53
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  83
  58
  18
  7
  42
  11
  53
  1
  49/54
  39
  #f
  68/29
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  88
  63
  18
  7
  42
  11
  53
  1
  49/57
  44
  #t
  47/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  104
  76
  20
  8
  46
  12
  58
  1
  22/27
  49
  #f
  89/38
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  116
  87
  20
  9
  51
  12
  63
  1
  118/147
  56
  #f
  193/87
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  173
  125
  37
  11
  76
  22
  98
  1
  1867/2268
  75
  #f
  2
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  176
  127
  37
  12
  76
  22
  98
  1
  1867/2340
  77
  #t
  252/127
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  183
  133
  37
  13
  81
  22
  103
  1
  1975/2448
  83
  #t
  258/133
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  183
  133
  37
  13
  81
  22
  103
  1
  1975/2448
  83
  #t
  258/133
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  199
  146
  39
  14
  86
  23
  109
  1
  2101/2700
  89
  #f
  299/146
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  199
  146
  39
  14
  86
  23
  109
  1
  2101/2700
  89
  #f
  299/146
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  200
  147
  39
  14
  86
  23
  109
  1
  523/675
  89
  #f
  43/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  254
  200
  39
  15
  110
  23
  133
  1
  577/765
  128
  #f
  383/200
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  254
  200
  39
  15
  110
  23
  133
  1
  577/765
  128
  #f
  383/200
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  254
  200
  39
  15
  110
  23
  133
  1
  577/765
  128
  #f
  383/200
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  269
  213
  39
  17
  123
  23
  146
  1
  1669/2115
  132
  #f
  135/71
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  269
  213
  39
  17
  123
  23
  146
  1
  1669/2115
  132
  #t
  135/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  274
  217
  39
  18
  123
  23
  146
  1
  1624/2115
  134
  #f
  411/217
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  285
  227
  39
  19
  133
  23
  156
  1
  929/1197
  138
  #f
  427/227
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  286
  228
  39
  19
  133
  23
  156
  1
  4642/5985
  138
  #f
  143/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  286
  228
  39
  19
  133
  23
  156
  1
  4642/5985
  138
  #t
  143/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  286
  228
  39
  19
  133
  23
  156
  1
  4642/5985
  138
  #t
  143/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  286
  228
  39
  19
  133
  23
  156
  1
  4642/5985
  138
  #f
  143/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  286
  228
  39
  19
  133
  23
  156
  1
  4642/5985
  138
  #f
  143/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  286
  228
  39
  19
  133
  23
  156
  1
  4642/5985
  138
  #t
  143/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  287
  229
  39
  19
  133
  23
  156
  1
  9277/11970
  138
  #f
  434/229
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  293
  235
  39
  19
  138
  23
  161
  1
  9445/12222
  144
  #t
  88/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  298
  239
  39
  20
  138
  23
  161
  1
  9193/12222
  146
  #f
  446/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  299
  240
  39
  20
  138
  23
  161
  1
  1531/2037
  146
  #f
  28/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  299
  240
  39
  20
  138
  23
  161
  1
  1531/2037
  146
  #f
  28/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  300
  241
  39
  20
  138
  23
  161
  1
  508/679
  146
  #f
  451/241
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  314
  255
  39
  20
  146
  23
  169
  1
  6557/8910
  155
  #f
  158/85
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  314
  255
  39
  20
  146
  23
  169
  1
  6557/8910
  155
  #t
  158/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  318
  258
  39
  21
  146
  23
  169
  1
  3211/4455
  155
  #f
  485/258
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  318
  258
  39
  21
  146
  23
  169
  1
  3211/4455
  155
  #f
  485/258
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  319
  259
  39
  21
  146
  23
  169
  1
  6377/8910
  155
  #f
  70/37
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  320
  260
  39
  21
  146
  23
  169
  1
  577/810
  155
  #f
  493/260
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  320
  260
  39
  21
  146
  23
  169
  1
  577/810
  155
  #t
  493/260
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  320
  260
  39
  21
  146
  23
  169
  1
  577/810
  155
  #t
  493/260
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  320
  260
  39
  21
  146
  23
  169
  1
  577/810
  155
  #f
  493/260
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  320
  260
  39
  21
  146
  23
  169
  1
  577/810
  155
  #t
  493/260
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  320
  260
  39
  21
  146
  23
  169
  1
  577/810
  155
  #t
  493/260
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  320
  260
  39
  21
  146
  23
  169
  1
  577/810
  155
  #t
  493/260
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  321
  261
  39
  21
  146
  23
  169
  1
  577/810
  155
  #f
  55/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  321
  261
  39
  21
  146
  23
  169
  1
  577/810
  155
  #f
  55/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  322
  262
  39
  21
  146
  23
  169
  1
  6317/8910
  155
  #f
  249/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  322
  262
  39
  21
  146
  23
  169
  1
  6317/8910
  155
  #f
  249/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  322
  262
  39
  21
  146
  23
  169
  1
  6317/8910
  155
  #f
  249/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  322
  262
  39
  21
  146
  23
  169
  1
  6317/8910
  155
  #f
  249/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  323
  263
  39
  21
  146
  23
  169
  1
  6317/8910
  155
  #f
  505/263
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  324
  264
  39
  21
  146
  23
  169
  1
  6317/8910
  155
  #f
  64/33
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  325
  265
  39
  21
  146
  23
  169
  1
  1052/1485
  156
  #t
  516/265
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  126
  101
  16
  9
  65
  9
  74
  1
  389/468
  67
  #f
  219/101
  ((11 11 0) (11 11 0) (11 11 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  126
  101
  16
  9
  65
  9
  74
  1
  389/468
  67
  #f
  219/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  127
  102
  16
  9
  65
  9
  74
  1
  389/468
  67
  #f
  113/51
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  145
  119
  16
  10
  82
  9
  91
  1
  1871/2160
  76
  #f
  251/119
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  147
  121
  16
  10
  84
  9
  93
  1
  1943/2232
  76
  #f
  255/121
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  197
  151
  33
  13
  100
  19
  119
  1
  2219/2628
  90
  #f
  317/151
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  208
  162
  33
  13
  101
  19
  120
  1
  76351/91980
  97
  #f
  166/81
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  211
  164
  33
  14
  101
  19
  120
  1
  75091/91980
  97
  #f
  341/164
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  231
  184
  33
  14
  105
  19
  124
  1
  146717/183960
  112
  #f
  379/184
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  243
  190
  38
  15
  109
  23
  132
  1
  151757/191520
  117
  #f
  193/95
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  253
  199
  38
  16
  117
  23
  140
  1
  166877/209160
  125
  #f
  396/199
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  255
  200
  38
  17
  117
  23
  140
  1
  165617/209160
  125
  #f
  403/200
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  255
  200
  38
  17
  117
  23
  140
  1
  165617/209160
  125
  #t
  403/200
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  260
  204
  38
  18
  117
  23
  140
  1
  160577/209160
  127
  #f
  69/34
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  267
  211
  38
  18
  123
  23
  146
  1
  127/166
  130
  #f
  426/211
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  275
  218
  38
  19
  129
  23
  152
  1
  135/176
  137
  #t
  433/218
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  278
  221
  38
  19
  132
  23
  155
  1
  206/267
  137
  #f
  439/221
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  278
  221
  38
  19
  132
  23
  155
  1
  206/267
  137
  #t
  439/221
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  279
  222
  38
  19
  132
  23
  155
  1
  1235/1602
  137
  #f
  147/74
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  283
  226
  38
  19
  135
  23
  158
  1
  160/207
  139
  #f
  447/226
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  284
  227
  38
  19
  135
  23
  158
  1
  1271/1656
  139
  #f
  452/227
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  284
  227
  38
  19
  135
  23
  158
  1
  1271/1656
  139
  #t
  452/227
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  285
  228
  38
  19
  135
  23
  158
  1
  635/828
  140
  #t
  2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  285
  228
  38
  19
  135
  23
  158
  1
  635/828
  140
  #t
  2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  285
  228
  38
  19
  135
  23
  158
  1
  635/828
  140
  #t
  2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  286
  229
  38
  19
  135
  23
  158
  1
  141/184
  140
  #f
  2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  286
  229
  38
  19
  135
  23
  158
  1
  141/184
  140
  #f
  2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  291
  234
  38
  19
  135
  23
  158
  1
  421/552
  142
  #f
  233/117
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  291
  234
  38
  19
  135
  23
  158
  1
  421/552
  142
  #t
  233/117
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  292
  235
  38
  19
  135
  23
  158
  1
  631/828
  143
  #t
  467/235
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  308
  249
  38
  21
  142
  23
  165
  1
  2665/3492
  147
  #f
  491/249
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  309
  250
  38
  21
  142
  23
  165
  1
  2665/3492
  147
  #f
  493/250
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  310
  251
  38
  21
  142
  23
  165
  1
  2647/3492
  147
  #f
  495/251
  ((1/2 1/2 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  310
  251
  38
  21
  142
  23
  165
  1
  2647/3492
  147
  #t
  495/251
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  311
  252
  38
  21
  142
  23
  165
  1
  2629/3492
  147
  #f
  125/63
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  311
  252
  38
  21
  142
  23
  165
  1
  2629/3492
  147
  #f
  125/63
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  314
  254
  38
  22
  142
  23
  165
  1
  2593/3492
  149
  #t
  251/127
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  314
  254
  38
  22
  142
  23
  165
  1
  2593/3492
  149
  #t
  251/127
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  315
  255
  38
  22
  142
  23
  165
  1
  2581/3492
  149
  #f
  101/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  315
  255
  38
  22
  142
  23
  165
  1
  2581/3492
  149
  #t
  101/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  315
  255
  38
  22
  142
  23
  165
  1
  2581/3492
  149
  #f
  101/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  315
  255
  38
  22
  142
  23
  165
  1
  2581/3492
  149
  #f
  101/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  315
  255
  38
  22
  142
  23
  165
  1
  2581/3492
  149
  #t
  101/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  316
  256
  38
  22
  142
  23
  165
  1
  2563/3492
  149
  #f
  507/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  316
  256
  38
  22
  142
  23
  165
  1
  2563/3492
  149
  #f
  507/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  316
  256
  38
  22
  142
  23
  165
  1
  2563/3492
  149
  #t
  507/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  317
  257
  38
  22
  142
  23
  165
  1
  1277/1746
  149
  #f
  509/257
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  322
  262
  38
  22
  146
  23
  169
  1
  1301/1782
  154
  #t
  257/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  323
  263
  38
  22
  146
  23
  169
  1
  1295/1782
  154
  #f
  517/263
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  323
  263
  38
  22
  146
  23
  169
  1
  1295/1782
  154
  #f
  517/263
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  323
  263
  38
  22
  146
  23
  169
  1
  1295/1782
  154
  #t
  517/263
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  324
  264
  38
  22
  146
  23
  169
  1
  1295/1782
  154
  #f
  131/66
  ((1 1 0) (1 1 0) (1 1 0)))
