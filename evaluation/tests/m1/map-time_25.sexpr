'(clean-cache
  map
  1
  25
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  109
  85
  16
  8
  65
  9
  74
  1
  509/540
  45
  #f
  523/85
  ((24 49/2 0) (22 45/2 0) (22 45/2 0)))
'(clean-cache
  map
  1
  25
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  108
  84
  16
  8
  64
  9
  73
  1
  500/531
  45
  #f
  517/84
  ((22 22 0) (22 45/2 0) (45/2 45/2 0)))
'(clean-cache
  map
  1
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  #f)
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  #f)
'(clean-cache
  map
  1
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  71
  52
  14
  5
  36
  8
  44
  1
  124/135
  28
  #f
  163/26
  ((15 31/2 0) (16 33/2 0) (16 33/2 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  71
  52
  14
  5
  36
  8
  44
  1
  124/135
  28
  #f
  163/26
  ((35/2 18 0) (35/2 18 0) (35/2 18 0)))
'(clean-cache
  map
  1
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  88
  66
  16
  6
  40
  9
  49
  1
  284/333
  34
  #f
  69/11
  ((47/2 24 0) (47/2 24 0) (45/2 23 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  71
  52
  14
  5
  36
  8
  44
  1
  8/9
  28
  #f
  163/26
  ((17 35/2 0) (35/2 35/2 0) (17 35/2 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  32
  20
  7
  5
  13
  6
  19
  1
  3/4
  16
  #f
  26/5
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  22
  12
  7
  3
  11
  6
  17
  1
  9/10
  11
  #f
  61/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  map
  1
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  91
  69
  16
  6
  43
  9
  52
  1
  311/360
  38
  #f
  434/69
  ((22 45/2 0) (23 47/2 0) (22 45/2 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  71
  52
  14
  5
  36
  8
  44
  1
  8/9
  28
  #f
  163/26
  ((17 35/2 0) (35/2 18 0) (37/2 19 0)))
'(clean-cache
  map
  1
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  #f)
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  9
  5
  3
  1
  4
  3
  7
  1
  4/5
  4
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  30
  17
  7
  6
  12
  6
  18
  1
  101/120
  13
  #f
  89/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  28
  15
  7
  6
  11
  6
  17
  1
  13/15
  13
  #f
  77/15
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  85
  63
  16
  6
  41
  9
  50
  1
  187/222
  33
  #f
  45/7
  ((41/2 21 0) (45/2 45/2 0) (47/2 24 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  77
  55
  16
  6
  36
  9
  45
  1
  83/96
  27
  #f
  358/55
  ((20 41/2 0) (35/2 18 0) (19 19 0)))
'(clean-cache
  map
  1
  25
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  73
  53
  14
  6
  36
  8
  44
  1
  157/180
  27
  #f
  341/53
  ((33/2 17 0) (33/2 17 0) (39/2 20 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  72
  52
  14
  6
  36
  8
  44
  1
  8/9
  27
  #f
  83/13
  ((31/2 16 0) (15 15 0) (14 14 0)))
'(clean-cache
  map
  1
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  map
  1
  25
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  81
  59
  16
  6
  38
  9
  47
  1
  43/51
  27
  #f
  381/59
  ((47/2 24 0) (41/2 41/2 0) (41/2 21 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  79
  57
  16
  6
  37
  9
  46
  1
  169/198
  27
  #f
  373/57
  ((43/2 22 0) (41/2 21 0) (20 41/2 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  77
  55
  16
  6
  36
  9
  45
  1
  83/96
  27
  #f
  358/55
  ((35/2 35/2 0) (35/2 18 0) (18 37/2 0)))
'(clean-cache
  map
  1
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  #f)
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  106
  82
  16
  8
  62
  9
  71
  1
  482/513
  45
  #f
  505/82
  ((45/2 45/2 0) (22 45/2 0) (24 49/2 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (1/2 1/2 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  92
  59
  26
  7
  37
  16
  53
  1
  169/210
  31
  #f
  308/59
  ((23/2 12 0) (12 12 0) (23/2 23/2 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  86
  53
  26
  7
  34
  16
  50
  1
  5/6
  29
  #f
  282/53
  ((11 23/2 0) (23/2 12 0) (12 25/2 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  106
  82
  16
  8
  62
  9
  71
  1
  482/513
  45
  #f
  505/82
  ((23 47/2 0) (45/2 23 0) (24 49/2 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  1
  25
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  92
  59
  26
  7
  37
  16
  53
  1
  169/210
  31
  #f
  308/59
  ((25/2 13 0) (23/2 12 0) (13 13 0)))
'(clean-cache
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  86
  53
  26
  7
  34
  16
  50
  1
  5/6
  29
  #f
  282/53
  ((25/2 25/2 0) (23/2 23/2 0) (12 12 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  106
  82
  16
  8
  62
  9
  71
  1
  482/513
  45
  #f
  505/82
  ((24 49/2 0) (24 24 0) (22 45/2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  124
  99
  16
  9
  79
  9
  88
  1
  509/540
  54
  #f
  598/99
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  124
  99
  16
  9
  79
  9
  88
  1
  509/540
  54
  #t
  598/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  124
  99
  16
  9
  79
  9
  88
  1
  509/540
  54
  #t
  598/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  124
  99
  16
  9
  79
  9
  88
  1
  509/540
  54
  #f
  598/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  124
  99
  16
  9
  79
  9
  88
  1
  509/540
  54
  #t
  598/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  129
  104
  16
  9
  79
  9
  88
  1
  25/27
  59
  #t
  313/52
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  132
  106
  16
  10
  79
  9
  88
  1
  491/540
  61
  #t
  6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  136
  109
  16
  11
  79
  9
  88
  1
  191/216
  61
  #f
  665/109
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  136
  109
  16
  11
  79
  9
  88
  1
  191/216
  61
  #f
  665/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  136
  109
  16
  11
  79
  9
  88
  1
  191/216
  61
  #f
  665/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  147
  115
  20
  12
  85
  12
  97
  1
  1063/1188
  67
  #t
  139/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  150
  118
  20
  12
  85
  12
  97
  1
  259/297
  68
  #f
  717/118
  ((3 3 0) (3 3 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  200
  152
  33
  15
  102
  19
  121
  1
  1165/1404
  82
  #f
  47/8
  ((11 11 0) (23/2 23/2 0) (25/2 25/2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  207
  158
  33
  16
  107
  19
  126
  1
  1237/1494
  88
  #t
  923/158
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  231
  182
  33
  16
  125
  19
  144
  1
  3091/3825
  105
  #f
  527/91
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  232
  183
  33
  16
  125
  19
  144
  1
  2059/2550
  105
  #f
  1058/183
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  232
  183
  33
  16
  125
  19
  144
  1
  2059/2550
  105
  #f
  1058/183
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  242
  193
  33
  16
  130
  19
  149
  1
  713/890
  112
  #f
  1111/193
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  244
  194
  33
  17
  130
  19
  149
  1
  354/445
  112
  #f
  561/97
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  249
  199
  33
  17
  130
  19
  149
  1
  701/890
  117
  #t
  1147/199
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  251
  201
  33
  17
  132
  19
  151
  1
  103/130
  117
  #f
  1159/201
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  262
  206
  38
  18
  135
  23
  158
  1
  721/920
  121
  #f
  1183/206
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  263
  207
  38
  18
  135
  23
  158
  1
  721/920
  121
  #f
  398/69
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  263
  207
  38
  18
  135
  23
  158
  1
  721/920
  121
  #f
  398/69
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  267
  211
  38
  18
  138
  23
  161
  1
  373/475
  122
  #f
  1211/211
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  267
  211
  38
  18
  138
  23
  161
  1
  373/475
  122
  #f
  1211/211
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  267
  211
  38
  18
  138
  23
  161
  1
  373/475
  122
  #t
  1211/211
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  272
  216
  38
  18
  142
  23
  165
  1
  378/485
  127
  #t
  103/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  285
  227
  38
  20
  146
  23
  169
  1
  4591/5940
  129
  #f
  1294/227
  ((5/2 3 0) (5/2 5/2 0) (5/2 3 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  286
  228
  38
  20
  146
  23
  169
  1
  4591/5940
  129
  #f
  325/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  289
  230
  38
  21
  146
  23
  169
  1
  1517/1980
  131
  #t
  131/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  314
  255
  38
  21
  146
  23
  169
  1
  13129/17820
  147
  #f
  1459/255
  ((15/2 8 0) (15/2 8 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  314
  255
  38
  21
  146
  23
  169
  1
  13129/17820
  147
  #f
  1459/255
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  315
  256
  38
  21
  146
  23
  169
  1
  13039/17820
  147
  #f
  1463/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  315
  256
  38
  21
  146
  23
  169
  1
  13039/17820
  147
  #t
  1463/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  315
  256
  38
  21
  146
  23
  169
  1
  13039/17820
  147
  #f
  1463/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  315
  256
  38
  21
  146
  23
  169
  1
  13039/17820
  147
  #f
  1463/256
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  316
  257
  38
  21
  146
  23
  169
  1
  13039/17820
  147
  #f
  1469/257
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  317
  258
  38
  21
  146
  23
  169
  1
  4343/5940
  147
  #f
  1475/258
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  318
  259
  38
  21
  146
  23
  169
  1
  4343/5940
  147
  #f
  1486/259
  ((2 5/2 0) (5/2 5/2 0) (2 5/2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  319
  260
  38
  21
  146
  23
  169
  1
  131/180
  147
  #f
  1493/260
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  320
  261
  38
  21
  146
  23
  169
  1
  359/495
  147
  #f
  1499/261
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  321
  262
  38
  21
  146
  23
  169
  1
  1072/1485
  147
  #f
  753/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  321
  262
  38
  21
  146
  23
  169
  1
  1072/1485
  147
  #t
  753/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  321
  262
  38
  21
  146
  23
  169
  1
  1072/1485
  147
  #t
  753/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  321
  262
  38
  21
  146
  23
  169
  1
  1072/1485
  147
  #t
  753/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  322
  263
  38
  21
  146
  23
  169
  1
  2129/2970
  147
  #f
  1510/263
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  323
  264
  38
  21
  146
  23
  169
  1
  2119/2970
  147
  #f
  1517/264
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  324
  265
  38
  21
  146
  23
  169
  1
  3176/4455
  147
  #f
  1523/265
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  324
  265
  38
  21
  146
  23
  169
  1
  3176/4455
  147
  #t
  1523/265
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  324
  265
  38
  21
  146
  23
  169
  1
  3176/4455
  147
  #t
  1523/265
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  72
  52
  14
  6
  36
  8
  44
  1
  8/9
  27
  #f
  83/13
  ((27/2 27/2 0) (29/2 29/2 0) (14 29/2 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  80
  57
  16
  7
  36
  9
  45
  1
  5/6
  27
  #f
  126/19
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  115
  87
  18
  10
  62
  10
  72
  1
  158/177
  44
  #f
  557/87
  ((5 5 0) (5 5 0) (5 11/2 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  118
  90
  18
  10
  65
  10
  75
  1
  167/186
  44
  #f
  115/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  140
  106
  22
  12
  76
  13
  89
  1
  193/216
  57
  #f
  329/53
  ((3/2 3/2 0) (3/2 2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  140
  106
  22
  12
  76
  13
  89
  1
  193/216
  57
  #t
  329/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  142
  108
  22
  12
  77
  13
  90
  1
  389/438
  57
  #f
  673/108
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  147
  113
  22
  12
  77
  13
  90
  1
  953/1095
  62
  #t
  701/113
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  189
  142
  33
  14
  93
  19
  112
  1
  173/205
  76
  #f
  831/142
  ((7 7 0) (7 15/2 0) (7 7 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  189
  142
  33
  14
  93
  19
  112
  1
  173/205
  76
  #t
  831/142
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  206
  153
  38
  15
  99
  23
  122
  1
  239/290
  82
  #f
  881/153
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  213
  159
  38
  16
  104
  23
  127
  1
  757/920
  88
  #t
  911/159
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  214
  160
  38
  16
  104
  23
  127
  1
  37/45
  88
  #f
  23/4
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  214
  160
  38
  16
  104
  23
  127
  1
  37/45
  88
  #f
  23/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  214
  160
  38
  16
  104
  23
  127
  1
  37/45
  88
  #t
  23/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  217
  162
  38
  17
  104
  23
  127
  1
  3359/4140
  90
  #t
  155/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  231
  175
  38
  18
  116
  23
  139
  1
  335/414
  98
  #f
  143/25
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  231
  175
  38
  18
  116
  23
  139
  1
  335/414
  98
  #t
  143/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  232
  176
  38
  18
  116
  23
  139
  1
  1331/1656
  98
  #f
  505/88
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  238
  182
  38
  18
  121
  23
  144
  1
  1349/1692
  104
  #t
  40/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  238
  182
  38
  18
  121
  23
  144
  1
  1349/1692
  104
  #f
  40/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  239
  183
  38
  18
  121
  23
  144
  1
  1349/1692
  104
  #f
  1051/183
  ((3/2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  252
  194
  38
  20
  125
  23
  148
  1
  2731/3456
  106
  #f
  1109/194
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  253
  195
  38
  20
  125
  23
  148
  1
  2729/3456
  106
  #f
  371/65
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  255
  197
  38
  20
  126
  23
  149
  1
  2717/3456
  106
  #f
  1126/197
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  255
  197
  38
  20
  126
  23
  149
  1
  2717/3456
  106
  #t
  1126/197
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  256
  198
  38
  20
  126
  23
  149
  1
  2705/3456
  106
  #f
  103/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  257
  199
  38
  20
  126
  23
  149
  1
  2705/3456
  106
  #f
  1139/199
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  257
  199
  38
  20
  126
  23
  149
  1
  2705/3456
  106
  #f
  1139/199
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  258
  200
  38
  20
  126
  23
  149
  1
  2687/3456
  106
  #f
  23/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  260
  202
  38
  20
  128
  23
  151
  1
  2729/3492
  106
  #f
  581/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  275
  217
  38
  20
  130
  23
  153
  1
  2651/3492
  116
  #f
  1242/217
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  276
  218
  38
  20
  130
  23
  153
  1
  2651/3492
  116
  #f
  624/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  281
  223
  38
  20
  130
  23
  153
  1
  2615/3492
  121
  #t
  1273/223
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  282
  224
  38
  20
  130
  23
  153
  1
  1303/1746
  121
  #f
  1279/224
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  282
  224
  38
  20
  130
  23
  153
  1
  1303/1746
  121
  #f
  1279/224
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  282
  224
  38
  20
  130
  23
  153
  1
  1303/1746
  121
  #t
  1279/224
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  282
  224
  38
  20
  130
  23
  153
  1
  1303/1746
  121
  #f
  1279/224
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  282
  224
  38
  20
  130
  23
  153
  1
  1303/1746
  121
  #t
  1279/224
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  282
  224
  38
  20
  130
  23
  153
  1
  1303/1746
  121
  #f
  1279/224
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  283
  225
  38
  20
  130
  23
  153
  1
  647/873
  121
  #f
  257/45
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  305
  247
  38
  20
  146
  23
  169
  1
  3268/4455
  136
  #f
  74/13
  ((4 4 0) (4 4 0) (5 5 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  308
  249
  38
  21
  146
  23
  169
  1
  3238/4455
  138
  #t
  472/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  308
  249
  38
  21
  146
  23
  169
  1
  3238/4455
  138
  #t
  472/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  321
  262
  38
  21
  146
  23
  169
  1
  3181/4455
  146
  #f
  1501/262
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  322
  263
  38
  21
  146
  23
  169
  1
  2119/2970
  146
  #f
  1507/263
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  323
  264
  38
  21
  146
  23
  169
  1
  1052/1485
  146
  #f
  1511/264
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  323
  264
  38
  21
  146
  23
  169
  1
  1052/1485
  146
  #t
  1511/264
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  323
  264
  38
  21
  146
  23
  169
  1
  1052/1485
  146
  #f
  1511/264
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  323
  264
  38
  21
  146
  23
  169
  1
  1052/1485
  146
  #t
  1511/264
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  324
  265
  38
  21
  146
  23
  169
  1
  1052/1485
  146
  #f
  1522/265
  ((2 2 0) (2 2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  map
  1
  25
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  325
  266
  38
  21
  146
  23
  169
  1
  2089/2970
  147
  #t
  1527/266
  ((0 0 0) (0 0 0) (0 0 0)))
