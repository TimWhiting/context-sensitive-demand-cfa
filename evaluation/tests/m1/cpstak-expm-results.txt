'(expression:
  (letrec ((cpstak
            (λ (x y z)
              (letrec ((tak
                        (λ (x y z k)
                          (match
                           (app not (app < y x))
                           (#t (app k z))
                           (#f
                            (app
                             tak
                             (app - x 1)
                             y
                             z
                             (λ (v1)
                               (app
                                tak
                                (app - y 1)
                                z
                                x
                                (λ (v2)
                                  (app
                                   tak
                                   (app - z 1)
                                   x
                                   y
                                   (λ (v3) (app tak v1 v2 v3 k))))))))))))
                (app tak x y z (λ (a) a))))))
    (app cpstak 32 15 8)))
(list
 'query:
 '(app - y (-> 1 <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - y (-> 1 <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - y (-> 1 <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - y (-> 1 <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - y (-> 1 <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x y z k)
    (->
     (match
      (app not (app < y x))
      (#t (app k z))
      (#f
       (app
        tak
        (app - x 1)
        y
        z
        (λ (v1)
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2)
             (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
     <-))
 (expenv
  '((((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app < (-> y <-) x)
 (expenv
  '((((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x y z k)
    (->
     (match
      (app not (app < y x))
      (#t (app k z))
      (#f
       (app
        tak
        (app - x 1)
        y
        z
        (λ (v1)
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2)
             (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
     <-))
 (expenv
  '((((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   y
   (-> z <-)
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (expenv
  '((((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (v3) (-> (app tak v1 v2 v3 k) <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (v3) (-> (app tak v1 v2 v3 k) <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (v3) (-> (app tak v1 v2 v3 k) <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (v3) (-> (app tak v1 v2 v3 k) <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (v3) (-> (app tak v1 v2 v3 k) <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> (app < y x) <-))
 (expenv
  '((((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   #t
   (expenv
    '(((λ (v3) (-> (app tak v1 v2 v3 k) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   #f
   (expenv
    '(((λ (v3) (-> (app tak v1 v2 v3 k) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (-> (app - z 1) <-) x y (λ (v3) (app tak v1 v2 v3 k)))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (-> (app - z 1) <-) x y (λ (v3) (app tak v1 v2 v3 k)))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (-> (app - z 1) <-) x y (λ (v3) (app tak v1 v2 v3 k)))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (-> (app - z 1) <-) x y (λ (v3) (app tak v1 v2 v3 k)))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (-> (app - z 1) <-) x y (λ (v3) (app tak v1 v2 v3 k)))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - y 1)
   z
   (-> x <-)
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - y 1)
   z
   (-> x <-)
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - y 1)
   z
   (-> x <-)
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - y 1)
   z
   (-> x <-)
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - y 1)
   z
   (-> x <-)
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (32 ⊥ ⊥ ⊥))
(list 'query: '(letrec (cpstak) (-> (app cpstak 32 15 8) <-)) (expenv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec ((->
            cpstak
            =
            (λ (x y z)
              (letrec ((tak
                        (λ (x y z k)
                          (match
                           (app not (app < y x))
                           (#t (app k z))
                           (#f
                            (app
                             tak
                             (app - x 1)
                             y
                             z
                             (λ (v1)
                               (app
                                tak
                                (app - y 1)
                                z
                                x
                                (λ (v2)
                                  (app
                                   tak
                                   (app - z 1)
                                   x
                                   y
                                   (λ (v3) (app tak v1 v2 v3 k))))))))))))
                (app tak x y z (λ (a) a))))
            <-))
    bod)
 (expenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z)
      (letrec ((tak
                (λ (x y z k)
                  (match
                   (app not (app < y x))
                   (#t (app k z))
                   (#f
                    (app
                     tak
                     (app - x 1)
                     y
                     z
                     (λ (v1)
                       (app
                        tak
                        (app - y 1)
                        z
                        x
                        (λ (v2)
                          (app
                           tak
                           (app - z 1)
                           x
                           y
                           (λ (v3) (app tak v1 v2 v3 k))))))))))))
        (app tak x y z (λ (a) a))))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app < (-> y <-) x)
 (expenv
  '((((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (15 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> tak <-) (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> tak <-) (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> tak <-) (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> tak <-) (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> tak <-) (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app < (-> y <-) x)
 (expenv
  '((((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) (app < y x))
 (expenv
  '((((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app not (app < y x)) <-)
   (#t (app k z))
   (#f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
 (expenv
  '((((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   #t
   (expenv
    '(((match
        (app not (app < y x))
        (#t (app k z))
        (->
         #f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
         <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   #f
   (expenv
    '(((match
        (app not (app < y x))
        (#t (app k z))
        (->
         #f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
         <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> < <-) y x)
 (expenv
  '((((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-lt>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   y
   (-> z <-)
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (expenv
  '((((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x y z k)
    (->
     (match
      (app not (app < y x))
      (#t (app k z))
      (#f
       (app
        tak
        (app - x 1)
        y
        z
        (λ (v1)
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2)
             (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
     <-))
 (expenv
  '((((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x y z k)
    (->
     (match
      (app not (app < y x))
      (#t (app k z))
      (#f
       (app
        tak
        (app - x 1)
        y
        z
        (λ (v1)
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2)
             (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
     <-))
 (expenv
  '((((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (-> (app - x 1) <-)
   y
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (expenv
  '((((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - x (-> 1 <-))
 (expenv
  '((((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - y 1)
   z
   x
   (-> (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))) <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (#t (app k z))
        (->
         #f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
         <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - y 1)
   z
   x
   (-> (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))) <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v1)
         (->
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
          <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - y 1)
   z
   x
   (-> (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))) <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v2)
         (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - y 1)
   z
   x
   (-> (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))) <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v3) (-> (app tak v1 v2 v3 k) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - y 1)
   z
   x
   (-> (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))) <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak v1 v2 (-> v3 <-) k)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak v1 v2 (-> v3 <-) k)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak v1 v2 (-> v3 <-) k)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak v1 v2 (-> v3 <-) k)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak v1 v2 (-> v3 <-) k)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app cpstak 32 15 (-> 8 <-)) (expenv '()))
'(clos/con: ⊥)
'(literals: (8 ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - y 1)
   (-> z <-)
   x
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - y 1)
   (-> z <-)
   x
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - y 1)
   (-> z <-)
   x
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - y 1)
   (-> z <-)
   x
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - y 1)
   (-> z <-)
   x
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (8 ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (a) (-> a <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> (app < y x) <-))
 (expenv
  '((((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   #f
   (expenv
    '(((λ (v1)
         (->
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
          <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   #t
   (expenv
    '(((λ (v1)
         (->
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
          <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) x 1)
 (expenv
  '((((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> y <-) 1)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> y <-) 1)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> y <-) 1)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> y <-) 1)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> y <-) 1)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (15 ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x y z)
    (->
     (letrec ((tak
               (λ (x y z k)
                 (match
                  (app not (app < y x))
                  (#t (app k z))
                  (#f
                   (app
                    tak
                    (app - x 1)
                    y
                    z
                    (λ (v1)
                      (app
                       tak
                       (app - y 1)
                       z
                       x
                       (λ (v2)
                         (app
                          tak
                          (app - z 1)
                          x
                          y
                          (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (app tak x y z (λ (a) a)))
     <-))
 (expenv
  '((((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app < y (-> x <-))
 (expenv
  '((((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) x 1)
 (expenv
  '((((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (-> (app - x 1) <-)
   y
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (expenv
  '((((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> x <-) 1)
 (expenv
  '((((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> tak <-)
   (app - x 1)
   y
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (expenv
  '((((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app k (-> z <-))
 (expenv
  '((((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app not (app < y x))
   (-> #t (app k z) <-)
   (#f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
 (expenv
  '((((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (-> v1 <-) v2 v3 k)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (-> v1 <-) v2 v3 k)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (-> v1 <-) v2 v3 k)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (-> v1 <-) v2 v3 k)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (-> v1 <-) v2 v3 k)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> x <-) 1)
 (expenv
  '((((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak x y z (-> (λ (a) a) <-))
 (expenv
  '((((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (a) a)
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - x (-> 1 <-))
 (expenv
  '((((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - x (-> 1 <-))
 (expenv
  '((((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> tak <-)
   (app - x 1)
   y
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (expenv
  '((((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app not (app < y x))
   (-> #t (app k z) <-)
   (#f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
 (expenv
  '((((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   y
   z
   (->
    (λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    <-))
 (expenv
  '((((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((match
        (app not (app < y x))
        (#t (app k z))
        (->
         #f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
         <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> tak <-) x y z (λ (a) a))
 (expenv
  '((((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> x <-) 1)
 (expenv
  '((((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (v2) (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (v2) (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (v2) (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (v2) (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (v2) (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> k <-) z)
 (expenv
  '((((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v1)
         (->
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
          <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v3) (-> (app tak v1 v2 v3 k) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v2)
         (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (#t (app k z))
        (->
         #f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
         <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (a) a)
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((match
        (app not (app < y x))
        (#t (app k z))
        (->
         #f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
         <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v3) (-> (app tak v1 v2 v3 k) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v2)
         (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v1)
         (->
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
          <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (#t (app k z))
        (->
         #f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
         <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((λ (v1)
         (->
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
          <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((λ (v2)
         (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((λ (v3) (-> (app tak v1 v2 v3 k) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app < y (-> x <-))
 (expenv
  '((((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> (app < y x) <-))
 (expenv
  '((((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   #t
   (expenv
    '(((λ (v2)
         (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   #f
   (expenv
    '(((λ (v2)
         (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   y
   z
   (->
    (λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    <-))
 (expenv
  '((((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((λ (v3) (-> (app tak v1 v2 v3 k) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app not (app < y x))
   (#t (app k z))
   (->
    #f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
    <-))
 (expenv
  '((((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app < y (-> x <-))
 (expenv
  '((((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   (-> y <-)
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (expenv
  '((((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) (app < y x))
 (expenv
  '((((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) (app < y x))
 (expenv
  '((((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> cpstak <-) 32 15 8) (expenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z)
      (letrec ((tak
                (λ (x y z k)
                  (match
                   (app not (app < y x))
                   (#t (app k z))
                   (#f
                    (app
                     tak
                     (app - x 1)
                     y
                     z
                     (λ (v1)
                       (app
                        tak
                        (app - y 1)
                        z
                        x
                        (λ (v2)
                          (app
                           tak
                           (app - z 1)
                           x
                           y
                           (λ (v3) (app tak v1 v2 v3 k))))))))))))
        (app tak x y z (λ (a) a))))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app < y (-> x <-))
 (expenv
  '((((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (32 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) x 1)
 (expenv
  '((((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app < y (-> x <-))
 (expenv
  '((((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - x (-> 1 <-))
 (expenv
  '((((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   (-> y <-)
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (expenv
  '((((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app not (app < y x))
   (#t (app k z))
   (->
    #f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
    <-))
 (expenv
  '((((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   (-> y <-)
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (expenv
  '((((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (15 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) (app < y x))
 (expenv
  '((((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app k (-> z <-))
 (expenv
  '((((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app cpstak (-> 32 <-) 15 8) (expenv '()))
'(clos/con: ⊥)
'(literals: (32 ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> tak <-)
   (app - y 1)
   z
   x
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> tak <-)
   (app - y 1)
   z
   x
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> tak <-)
   (app - y 1)
   z
   x
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> tak <-)
   (app - y 1)
   z
   x
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> tak <-)
   (app - y 1)
   z
   x
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (-> (app - y 1) <-)
   z
   x
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (-> (app - y 1) <-)
   z
   x
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (-> (app - y 1) <-)
   z
   x
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (-> (app - y 1) <-)
   z
   x
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (-> (app - y 1) <-)
   z
   x
   (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) z 1)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) z 1)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) z 1)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) z 1)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) z 1)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app cpstak 32 (-> 15 <-) 8) (expenv '()))
'(clos/con: ⊥)
'(literals: (15 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - x (-> 1 <-))
 (expenv
  '((((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) x 1)
 (expenv
  '((((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> (app < y x) <-))
 (expenv
  '((((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   #f
   (expenv
    '(((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   #t
   (expenv
    '(((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app not (app < y x)) <-)
   (#t (app k z))
   (#f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
 (expenv
  '((((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   #t
   (expenv
    '(((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   #f
   (expenv
    '(((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   y
   z
   (->
    (λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    <-))
 (expenv
  '((((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((λ (v2)
         (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> x <-) 1)
 (expenv
  '((((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> x <-) 1)
 (expenv
  '((((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (32 ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (app - z 1) x (-> y <-) (λ (v3) (app tak v1 v2 v3 k)))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (app - z 1) x (-> y <-) (λ (v3) (app tak v1 v2 v3 k)))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (app - z 1) x (-> y <-) (λ (v3) (app tak v1 v2 v3 k)))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (app - z 1) x (-> y <-) (λ (v3) (app tak v1 v2 v3 k)))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (15 ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (app - z 1) x (-> y <-) (λ (v3) (app tak v1 v2 v3 k)))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) x 1)
 (expenv
  '((((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   y
   z
   (->
    (λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    <-))
 (expenv
  '((((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((λ (v1)
         (->
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
          <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app not (app < y x))
   (-> #t (app k z) <-)
   (#f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
 (expenv
  '((((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app k (-> z <-))
 (expenv
  '((((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x y z k)
    (->
     (match
      (app not (app < y x))
      (#t (app k z))
      (#f
       (app
        tak
        (app - x 1)
        y
        z
        (λ (v1)
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2)
             (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
     <-))
 (expenv
  '((((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec ((->
            tak
            =
            (λ (x y z k)
              (match
               (app not (app < y x))
               (#t (app k z))
               (#f
                (app
                 tak
                 (app - x 1)
                 y
                 z
                 (λ (v1)
                   (app
                    tak
                    (app - y 1)
                    z
                    x
                    (λ (v2)
                      (app
                       tak
                       (app - z 1)
                       x
                       y
                       (λ (v3) (app tak v1 v2 v3 k))))))))))
            <-))
    bod)
 (expenv
  '((((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app k (-> z <-))
 (expenv
  '((((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) (app < y x))
 (expenv
  '((((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app not (app < y x))
   (#t (app k z))
   (->
    #f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
    <-))
 (expenv
  '((((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) y 1)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) y 1)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) y 1)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) y 1)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) y 1)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   (-> y <-)
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (expenv
  '((((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> tak <-)
   (app - x 1)
   y
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (expenv
  '((((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> < <-) y x)
 (expenv
  '((((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-lt>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app not (app < y x)) <-)
   (#t (app k z))
   (#f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
 (expenv
  '((((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   #f
   (expenv
    '(((λ (v2)
         (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   #t
   (expenv
    '(((λ (v2)
         (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> tak <-)
   (app - x 1)
   y
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (expenv
  '((((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak v1 v2 v3 (-> k <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((λ (v1)
         (->
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
          <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((λ (v2)
         (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((λ (v3) (-> (app tak v1 v2 v3 k) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((match
        (app not (app < y x))
        (#t (app k z))
        (->
         #f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
         <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak v1 v2 v3 (-> k <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v1)
         (->
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
          <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v3) (-> (app tak v1 v2 v3 k) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v2)
         (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (#t (app k z))
        (->
         #f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
         <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (a) a)
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((match
        (app not (app < y x))
        (#t (app k z))
        (->
         #f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
         <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v3) (-> (app tak v1 v2 v3 k) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v2)
         (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v1)
         (->
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
          <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (#t (app k z))
        (->
         #f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
         <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((λ (v1)
         (->
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
          <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((λ (v2)
         (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((λ (v3) (-> (app tak v1 v2 v3 k) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak v1 v2 v3 (-> k <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (a) a)
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak v1 v2 v3 (-> k <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v1)
         (->
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
          <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v3) (-> (app tak v1 v2 v3 k) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v2)
         (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (#t (app k z))
        (->
         #f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
         <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak v1 v2 v3 (-> k <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v3) (-> (app tak v1 v2 v3 k) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v2)
         (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v1)
         (->
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
          <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (#t (app k z))
        (->
         #f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
         <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   y
   (-> z <-)
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (expenv
  '((((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (app - z 1) (-> x <-) y (λ (v3) (app tak v1 v2 v3 k)))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (app - z 1) (-> x <-) y (λ (v3) (app tak v1 v2 v3 k)))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (app - z 1) (-> x <-) y (λ (v3) (app tak v1 v2 v3 k)))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (app - z 1) (-> x <-) y (λ (v3) (app tak v1 v2 v3 k)))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (32 ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (app - z 1) (-> x <-) y (λ (v3) (app tak v1 v2 v3 k)))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (app - z 1) x y (-> (λ (v3) (app tak v1 v2 v3 k)) <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (#t (app k z))
        (->
         #f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
         <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (app - z 1) x y (-> (λ (v3) (app tak v1 v2 v3 k)) <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v2)
         (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (app - z 1) x y (-> (λ (v3) (app tak v1 v2 v3 k)) <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v3) (-> (app tak v1 v2 v3 k) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (app - z 1) x y (-> (λ (v3) (app tak v1 v2 v3 k)) <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (app - z 1) x y (-> (λ (v3) (app tak v1 v2 v3 k)) <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v1)
         (->
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
          <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak x y (-> z <-) (λ (a) a))
 (expenv
  '((((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (8 ⊥ ⊥ ⊥))
(list
 'query:
 '(app < (-> y <-) x)
 (expenv
  '((((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> < <-) y x)
 (expenv
  '((((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-lt>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (tak) (-> (app tak x y z (λ (a) a)) <-))
 (expenv
  '((((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> k <-) z)
 (expenv
  '((((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((λ (v1)
         (->
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
          <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((λ (v2)
         (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((λ (v3) (-> (app tak v1 v2 v3 k) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((match
        (app not (app < y x))
        (#t (app k z))
        (->
         #f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
         <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   (-> y <-)
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (expenv
  '((((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> < <-) y x)
 (expenv
  '((((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-lt>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak x (-> y <-) z (λ (a) a))
 (expenv
  '((((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (15 ⊥ ⊥ ⊥))
(list
 'query:
 '(app k (-> z <-))
 (expenv
  '((((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (8 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> z <-) 1)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> z <-) 1)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> z <-) 1)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> z <-) 1)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (8 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> z <-) 1)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> (app < y x) <-))
 (expenv
  '((((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   #t
   (expenv
    '(((match
        (app not (app < y x))
        (#t (app k z))
        (->
         #f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
         <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   #f
   (expenv
    '(((match
        (app not (app < y x))
        (#t (app k z))
        (->
         #f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
         <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (-> (app - x 1) <-)
   y
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (expenv
  '((((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (v1)
    (->
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
     <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (v1)
    (->
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
     <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (v1)
    (->
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
     <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (v1)
    (->
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
     <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (v1)
    (->
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
     <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> < <-) y x)
 (expenv
  '((((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: (#<procedure:do-lt>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app < (-> y <-) x)
 (expenv
  '((((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app not (app < y x))
   (-> #t (app k z) <-)
   (#f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
 (expenv
  '((((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   y
   (-> z <-)
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (expenv
  '((((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app not (app < y x)) <-)
   (#t (app k z))
   (#f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
 (expenv
  '((((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   #t
   (expenv
    '(((λ (v1)
         (->
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
          <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   #f
   (expenv
    '(((λ (v1)
         (->
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
          <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> tak <-)
   (app - x 1)
   y
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (expenv
  '((((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak (-> x <-) y z (λ (a) a))
 (expenv
  '((((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (32 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app not (app < y x))
   (-> #t (app k z) <-)
   (#f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
 (expenv
  '((((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   y
   z
   (->
    (λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    <-))
 (expenv
  '((((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v1)
      (app
       tak
       (app - y 1)
       z
       x
       (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
   (expenv
    '(((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak v1 (-> v2 <-) v3 k)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak v1 (-> v2 <-) v3 k)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak v1 (-> v2 <-) v3 k)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak v1 (-> v2 <-) v3 k)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app tak v1 (-> v2 <-) v3 k)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> k <-) z)
 (expenv
  '((((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v1)
         (->
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
          <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v3) (-> (app tak v1 v2 v3 k) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v2)
         (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (#t (app k z))
        (->
         #f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
         <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (app - x 1)
   y
   (-> z <-)
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (expenv
  '((((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (8 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app not (app < y x)) <-)
   (#t (app k z))
   (#f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
 (expenv
  '((((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   #f
   (expenv
    '(((λ (v3) (-> (app tak v1 v2 v3 k) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   #t
   (expenv
    '(((λ (v3) (-> (app tak v1 v2 v3 k) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app not (app < y x))
   (#t (app k z))
   (->
    #f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
    <-))
 (expenv
  '((((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> k <-) z)
 (expenv
  '((((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (a) a)
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (-> (app - x 1) <-)
   y
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (expenv
  '((((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   tak
   (-> (app - x 1) <-)
   y
   z
   (λ (v1)
     (app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
 (expenv
  '((((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(top) (expenv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> tak <-) v1 v2 v3 k)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> tak <-) v1 v2 v3 k)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> tak <-) v1 v2 v3 k)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> tak <-) v1 v2 v3 k)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> tak <-) v1 v2 v3 k)
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x y z k)
      (match
       (app not (app < y x))
       (#t (app k z))
       (#f
        (app
         tak
         (app - x 1)
         y
         z
         (λ (v1)
           (app
            tak
            (app - y 1)
            z
            x
            (λ (v2)
              (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
   (expenv '(((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - z (-> 1 <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #f
       (app not (app < y x))
       ((#t (app k z)))
       ()
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      tak
      (app - x 1)
      y
      z
      (λ (v1)
        (app
         tak
         (app - y 1)
         z
         x
         (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - z (-> 1 <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - z (-> 1 <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v3)
       (ran
        tak
        ((app - z 1) x y)
        ()
        (bod
         (v2)
         (ran
          tak
          ((app - y 1) z x)
          ()
          (bod
           (v1)
           (ran
            tak
            ((app - x 1) y z)
            ()
            (match-clause
             #f
             (app not (app < y x))
             ((#t (app k z)))
             ()
             (bod
              (x y z k)
              (bin
               letrec
               tak
               (app tak x y z (λ (a) a))
               ()
               ()
               (bod
                (x y z)
                (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))))
      app
      tak
      v1
      v2
      v3
      k))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - z (-> 1 <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((let-bod
       letrec
       ((tak
         (λ (x y z k)
           (match
            (app not (app < y x))
            (#t (app k z))
            (#f
             (app
              tak
              (app - x 1)
              y
              z
              (λ (v1)
                (app
                 tak
                 (app - y 1)
                 z
                 x
                 (λ (v2)
                   (app
                    tak
                    (app - z 1)
                    x
                    y
                    (λ (v3) (app tak v1 v2 v3 k))))))))))))
       (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))
      app
      tak
      x
      y
      z
      (λ (a) a)))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - z (-> 1 <-))
 (expenv
  '((((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((match-clause
       #t
       (app not (app < y x))
       ()
       ((#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))))
       (bod
        (x y z k)
        (bin
         letrec
         tak
         (app tak x y z (λ (a) a))
         ()
         ()
         (bod (x y z) (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))
      app
      k
      z))
    (((bod
       (v1)
       (ran
        tak
        ((app - x 1) y z)
        ()
        (match-clause
         #f
         (app not (app < y x))
         ((#t (app k z)))
         ()
         (bod
          (x y z k)
          (bin
           letrec
           tak
           (app tak x y z (λ (a) a))
           ()
           ()
           (bod
            (x y z)
            (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))
      app
      tak
      (app - y 1)
      z
      x
      (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app not (app < y x))
   (#t (app k z))
   (->
    #f
    (app
     tak
     (app - x 1)
     y
     z
     (λ (v1)
       (app
        tak
        (app - y 1)
        z
        x
        (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
    <-))
 (expenv
  '((((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> k <-) z)
 (expenv
  '((((bod
       (v2)
       (ran
        tak
        ((app - y 1) z x)
        ()
        (bod
         (v1)
         (ran
          tak
          ((app - x 1) y z)
          ()
          (match-clause
           #f
           (app not (app < y x))
           ((#t (app k z)))
           ()
           (bod
            (x y z k)
            (bin
             letrec
             tak
             (app tak x y z (λ (a) a))
             ()
             ()
             (bod
              (x y z)
              (bin letrec cpstak (app cpstak 32 15 8) () () (top))))))))))
      app
      tak
      (app - z 1)
      x
      y
      (λ (v3) (app tak v1 v2 v3 k))))
    (((let-bod
       letrec
       ((cpstak
         (λ (x y z)
           (letrec ((tak
                     (λ (x y z k)
                       (match
                        (app not (app < y x))
                        (#t (app k z))
                        (#f
                         (app
                          tak
                          (app - x 1)
                          y
                          z
                          (λ (v1)
                            (app
                             tak
                             (app - y 1)
                             z
                             x
                             (λ (v2)
                               (app
                                tak
                                (app - z 1)
                                x
                                y
                                (λ (v3) (app tak v1 v2 v3 k))))))))))))
             (app tak x y z (λ (a) a))))))
       (top))
      app
      cpstak
      32
      15
      8)))))
(list
 'clos/con:
 (list
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v1)
         (->
          (app
           tak
           (app - y 1)
           z
           x
           (λ (v2) (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))
          <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v2)
         (-> (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((letrec (tak) (-> (app tak x y z (λ (a) a)) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((λ (v3) (-> (app tak v1 v2 v3 k) <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))
  (list
   '(λ (v3) (app tak v1 v2 v3 k))
   (expenv
    '(((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (-> #t (app k z) <-)
        (#f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k))))))))))
      ((match
        (app not (app < y x))
        (#t (app k z))
        (->
         #f
         (app
          tak
          (app - x 1)
          y
          z
          (λ (v1)
            (app
             tak
             (app - y 1)
             z
             x
             (λ (v2)
               (app tak (app - z 1) x y (λ (v3) (app tak v1 v2 v3 k)))))))
         <-)))
      ((letrec (cpstak) (-> (app cpstak 32 15 8) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
