'(clean-cache
  kcfa3
  1
  400
  45
  app
  "'(eval ((top) app (λ (f1) ...) (λ (x1) ...)) (env ()))"
  #f
  36
  27
  9
  0
  27
  9
  36
  1
  1
  27
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  lambda
  "'(eval (app (λ (f1) ...) (-> (λ (x1) ...) <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  app
  "'(eval (λ (x1) (-> (app (λ (f2) ...) (λ (x2) ...)) <-)) (env ((□? (x1)))))"
  #f
  79
  60
  18
  1
  41
  13
  54
  1
  17/24
  50
  #f
  22/15
  (3 3 0))
'(clean-cache
  kcfa3
  1
  400
  45
  lambda
  "'(eval (app (λ (f2) ...) (-> (λ (x2) ...) <-)) (env ((□? (x1)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  app
  "'(eval\n  (λ (x2) (-> (app (λ (f3) ...) (λ (x3) ...)) <-))\n  (env ((□? (x2)) (□? (x1)))))"
  #f
  61
  42
  15
  4
  5
  3
  8
  1
  5/18
  35
  #f
  61/42
  (3 3 0))
'(clean-cache
  kcfa3
  1
  400
  45
  lambda
  "'(eval (app (λ (f3) ...) (-> (λ (x3) ...) <-)) (env ((□? (x2)) (□? (x1)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  app
  "'(eval\n  (λ (x3) (-> (app (λ (z) ...) (λ (y1 y2 y3) ...)) <-))\n  (env ((□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  43
  24
  12
  7
  5
  3
  8
  1
  5/12
  20
  #f
  17/12
  (2 2 0))
'(clean-cache
  kcfa3
  1
  400
  45
  lambda
  "'(eval\n  (app (λ (z) ...) (-> (λ (y1 y2 y3) ...) <-))\n  (env ((□? (x3)) (□? (x2)) (□? (x1)))))"
  #t
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  ref-or-constructor
  "'(eval\n  (λ (y1 y2 y3) (-> y1 <-))\n  (env ((□? (y1 y2 y3)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  31
  12
  9
  10
  5
  3
  8
  1
  5/8
  10
  #f
  4/3
  (1 1 0))
'(clean-cache
  kcfa3
  1
  400
  45
  lambda
  "'(eval\n  (app (-> (λ (z) ...) <-) (λ (y1 y2 y3) ...))\n  (env ((□? (x3)) (□? (x2)) (□? (x1)))))"
  #t
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  app
  "'(eval\n  (λ (z) (-> (app z x1 x2 x3) <-))\n  (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  44
  22
  12
  10
  5
  3
  8
  1
  5/11
  19
  #f
  3/2
  (2 2 0))
'(clean-cache
  kcfa3
  1
  400
  45
  ref-or-constructor
  "'(eval (app z x1 x2 (-> x3 <-)) (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  13
  6
  3
  4
  0
  0
  0
  1
  0
  5
  #f
  7/6
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  ref-or-constructor
  "'(eval (app z x1 (-> x2 <-) x3) (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  13
  6
  3
  4
  0
  0
  0
  1
  0
  5
  #f
  7/6
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  ref-or-constructor
  "'(eval (app z (-> x1 <-) x2 x3) (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  13
  6
  3
  4
  5
  3
  8
  1
  5/6
  5
  #f
  7/6
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  ref-or-constructor
  "'(eval (app (-> z <-) x1 x2 x3) (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))"
  #f
  7
  2
  1
  4
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  lambda
  "'(eval (app (-> (λ (f3) ...) <-) (λ (x3) ...)) (env ((□? (x2)) (□? (x1)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  let
  "'(eval (λ (f3) (-> (let (c) ...) <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  #f
  62
  40
  15
  7
  5
  3
  8
  1
  5/16
  33
  #f
  59/40
  (3 3 0))
'(clean-cache
  kcfa3
  1
  400
  45
  app
  "'(eval\n  (let (... () (c (-> (app f3 (app #t)) <-)) () ...) ...)\n  (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  #f
  56
  34
  15
  7
  5
  3
  8
  1
  1/3
  29
  #f
  3/2
  (3 3 0))
'(clean-cache
  kcfa3
  1
  400
  45
  app
  "'(eval (app f3 (-> (app #t) <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  #f
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  #t
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  ref-or-constructor
  "'(eval (app (-> f3 <-) (app #t)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  #f
  6
  2
  1
  3
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  app
  "'(eval\n  (let (c) (-> (app f3 (app #f)) <-))\n  (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  #f
  56
  34
  15
  7
  5
  3
  8
  1
  1/3
  29
  #f
  3/2
  (3 3 0))
'(clean-cache
  kcfa3
  1
  400
  45
  app
  "'(eval (app f3 (-> (app #f) <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  #f
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  #t
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  ref-or-constructor
  "'(eval (app (-> f3 <-) (app #f)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))"
  #f
  6
  2
  1
  3
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  lambda
  "'(eval (app (-> (λ (f2) ...) <-) (λ (x2) ...)) (env ((□? (x1)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  let
  "'(eval (λ (f2) (-> (let (b) ...) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  80
  58
  18
  4
  35
  13
  48
  1
  2/3
  48
  #f
  43/29
  (4 4 0))
'(clean-cache
  kcfa3
  1
  400
  45
  app
  "'(eval\n  (let (... () (b (-> (app f2 (app #t)) <-)) () ...) ...)\n  (env ((□? (f2)) (□? (x1)))))"
  #f
  74
  52
  18
  4
  33
  13
  46
  1
  43/63
  44
  #f
  3/2
  (4 4 0))
'(clean-cache
  kcfa3
  1
  400
  45
  app
  "'(eval (app f2 (-> (app #t) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f2)) (□? (x1)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  ref-or-constructor
  "'(eval (app (-> f2 <-) (app #t)) (env ((□? (f2)) (□? (x1)))))"
  #f
  5
  2
  1
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  app
  "'(eval (let (b) (-> (app f2 (app #f)) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  74
  52
  18
  4
  33
  13
  46
  1
  43/63
  44
  #f
  3/2
  (4 4 0))
'(clean-cache
  kcfa3
  1
  400
  45
  app
  "'(eval (app f2 (-> (app #f) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f2)) (□? (x1)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  ref-or-constructor
  "'(eval (app (-> f2 <-) (app #f)) (env ((□? (f2)) (□? (x1)))))"
  #f
  5
  2
  1
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  lambda
  "'(eval (app (-> (λ (f1) ...) <-) (λ (x1) ...)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  let
  "'(eval (λ (f1) (-> (let (a) ...) <-)) (env ((□? (f1)))))"
  #f
  38
  28
  9
  1
  25
  9
  34
  1
  12/13
  28
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  app
  "'(eval\n  (let (... () (a (-> (app f1 (app #t)) <-)) () ...) ...)\n  (env ((□? (f1)))))"
  #f
  36
  26
  9
  1
  24
  9
  33
  1
  47/50
  26
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  app
  "'(eval (app f1 (-> (app #t) <-)) (env ((□? (f1)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f1)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  ref-or-constructor
  "'(eval (app (-> f1 <-) (app #t)) (env ((□? (f1)))))"
  #f
  4
  2
  1
  1
  1
  1
  2
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  app
  "'(eval (let (a) (-> (app f1 (app #f)) <-)) (env ((□? (f1)))))"
  #f
  36
  26
  9
  1
  24
  9
  33
  1
  47/50
  26
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  app
  "'(eval (app f1 (-> (app #f) <-)) (env ((□? (f1)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f1)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  1
  400
  45
  ref-or-constructor
  "'(eval (app (-> f1 <-) (app #f)) (env ((□? (f1)))))"
  #f
  4
  2
  1
  1
  1
  1
  2
  1
  1/2
  2
  #t
  1
  (0 0 0))
