'(expression:
  (letrec ((phi
            (λ (x1)
              (λ (x2)
                (λ (x3)
                  (λ (x4)
                    (λ (x5)
                      (λ (x6)
                        (λ (x7)
                          (app
                           and
                           (app or x1 x2)
                           (app or x1 (app not x2) (app not x3))
                           (app or x3 x4)
                           (app or (app not x4) x1)
                           (app or (app not x2) (app not x3))
                           (app or x4 x2))))))))))
           (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
           (sat-solve-7
            (λ (p)
              (app
               try
               (λ (n1)
                 (app
                  try
                  (λ (n2)
                    (app
                     try
                     (λ (n3)
                       (app
                        try
                        (λ (n4)
                          (app
                           try
                           (λ (n5)
                             (app
                              try
                              (λ (n6)
                                (app
                                 try
                                 (λ (n7)
                                   (app
                                    (app
                                     (app
                                      (app (app (app (app p n1) n2) n3) n4)
                                      n5)
                                     n6)
                                    n7))))))))))))))))))
    (app sat-solve-7 phi)))
(list
 'query:
 '(app not (-> x3 <-))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #t)
   (menv
    '(((λ (n2)
         (->
          (app
           try
           (λ (n3)
             (app
              try
              (λ (n4)
                (app
                 try
                 (λ (n5)
                   (app
                    try
                    (λ (n6)
                      (app
                       try
                       (λ (n7)
                         (app
                          (app
                           (app (app (app (app (app p n1) n2) n3) n4) n5)
                           n6)
                          n7)))))))))))
          <-))))))
  (list
   '(app #f)
   (menv
    '(((λ (n2)
         (->
          (app
           try
           (λ (n3)
             (app
              try
              (λ (n4)
                (app
                 try
                 (λ (n5)
                   (app
                    try
                    (λ (n6)
                      (app
                       try
                       (λ (n7)
                         (app
                          (app
                           (app (app (app (app (app p n1) n2) n3) n4) n5)
                           n6)
                          n7)))))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)
 (menv
  '((□? (n7))
    (□? (n6))
    (□? (n5))
    (□? (n4))
    (□? (n3))
    (□? (n2))
    (□? (n1))
    (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x6)
      (λ (x7)
        (app
         and
         (app or x1 x2)
         (app or x1 (app not x2) (app not x3))
         (app or x3 x4)
         (app or (app not x4) x1)
         (app or (app not x2) (app not x3))
         (app or x4 x2))))
   (menv
    '(((app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) x2)
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
'(clos/con: (#<procedure:do-demand-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (->
    (λ (n5)
      (app
       try
       (λ (n6)
         (app
          try
          (λ (n7)
            (app
             (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
             n7))))))
    <-))
 (menv '((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n5)
      (app
       try
       (λ (n6)
         (app
          try
          (λ (n7)
            (app
             (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
             n7))))))
   (menv '((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app sat-solve-7 (-> phi <-)) (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (x1)
      (λ (x2)
        (λ (x3)
          (λ (x4)
            (λ (x5)
              (λ (x6)
                (λ (x7)
                  (app
                   and
                   (app or x1 x2)
                   (app or x1 (app not x2) (app not x3))
                   (app or x3 x4)
                   (app or (app not x4) x1)
                   (app or (app not x2) (app not x3))
                   (app or x4 x2)))))))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x7)
    (->
     (app
      and
      (app or x1 x2)
      (app or x1 (app not x2) (app not x3))
      (app or x3 x4)
      (app or (app not x4) x1)
      (app or (app not x2) (app not x3))
      (app or x4 x2))
     <-))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'query:
 '(app or (-> (app f (app #t)) <-) (app f (app #f)))
 (menv '((□? (f)))))
(list
 'query:
 '(app (-> or <-) (app f (app #t)) (app f (app #f)))
 (menv '((□? (f)))))
'(clos/con: (#<procedure:do-demand-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n5)
     (app
      try
      (λ (n6)
        (app
         try
         (λ (n7)
           (app
            (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
            n7)))))))
 (menv '((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
(list
 'clos/con:
 (list (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec ((->
            phi
            =
            (λ (x1)
              (λ (x2)
                (λ (x3)
                  (λ (x4)
                    (λ (x5)
                      (λ (x6)
                        (λ (x7)
                          (app
                           and
                           (app or x1 x2)
                           (app or x1 (app not x2) (app not x3))
                           (app or x3 x4)
                           (app or (app not x4) x1)
                           (app or (app not x2) (app not x3))
                           (app or x4 x2)))))))))
            <-)
           try
           sat-solve-7)
    bod)
 (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (x1)
      (λ (x2)
        (λ (x3)
          (λ (x4)
            (λ (x5)
              (λ (x6)
                (λ (x7)
                  (app
                   and
                   (app or x1 x2)
                   (app or x1 (app not x2) (app not x3))
                   (app or x3 x4)
                   (app or (app not x4) x1)
                   (app or (app not x2) (app not x3))
                   (app or x4 x2)))))))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (app or x1 x2)
   (app or x1 (app not x2) (app not x3))
   (-> (app or x3 x4) <-)
   (app or (app not x4) x1)
   (app or (app not x2) (app not x3))
   (app or x4 x2))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #t)
   (menv
    '(((λ (n3)
         (->
          (app
           try
           (λ (n4)
             (app
              try
              (λ (n5)
                (app
                 try
                 (λ (n6)
                   (app
                    try
                    (λ (n7)
                      (app
                       (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                       n7)))))))))
          <-))))))
  (list
   '(app #t)
   (menv
    '(((λ (n2)
         (->
          (app
           try
           (λ (n3)
             (app
              try
              (λ (n4)
                (app
                 try
                 (λ (n5)
                   (app
                    try
                    (λ (n6)
                      (app
                       try
                       (λ (n7)
                         (app
                          (app
                           (app (app (app (app (app p n1) n2) n3) n4) n5)
                           n6)
                          n7)))))))))))
          <-))))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      (□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x4)
    (->
     (λ (x5)
       (λ (x6)
         (λ (x7)
           (app
            and
            (app or x1 x2)
            (app or x1 (app not x2) (app not x3))
            (app or x3 x4)
            (app or (app not x4) x1)
            (app or (app not x2) (app not x3))
            (app or x4 x2)))))
     <-))
 (menv '((□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x5)
      (λ (x6)
        (λ (x7)
          (app
           and
           (app or x1 x2)
           (app or x1 (app not x2) (app not x3))
           (app or x3 x4)
           (app or (app not x4) x1)
           (app or (app not x2) (app not x3))
           (app or x4 x2)))))
   (menv '((□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (app or x1 x2)
   (app or x1 (app not x2) (app not x3))
   (app or x3 x4)
   (-> (app or (app not x4) x1) <-)
   (app or (app not x2) (app not x3))
   (app or x4 x2))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
  (list
   '(app #t)
   (menv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app
                 try
                 (λ (n3)
                   (app
                    try
                    (λ (n4)
                      (app
                       try
                       (λ (n5)
                         (app
                          try
                          (λ (n6)
                            (app
                             try
                             (λ (n7)
                               (app
                                (app
                                 (app (app (app (app (app p n1) n2) n3) n4) n5)
                                 n6)
                                n7)))))))))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> x3 <-))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #t)
   (menv
    '(((λ (n2)
         (->
          (app
           try
           (λ (n3)
             (app
              try
              (λ (n4)
                (app
                 try
                 (λ (n5)
                   (app
                    try
                    (λ (n6)
                      (app
                       try
                       (λ (n7)
                         (app
                          (app
                           (app (app (app (app (app p n1) n2) n3) n4) n5)
                           n6)
                          n7)))))))))))
          <-))))))
  (list
   '(app #f)
   (menv
    '(((λ (n2)
         (->
          (app
           try
           (λ (n3)
             (app
              try
              (λ (n4)
                (app
                 try
                 (λ (n5)
                   (app
                    try
                    (λ (n6)
                      (app
                       try
                       (λ (n7)
                         (app
                          (app
                           (app (app (app (app (app p n1) n2) n3) n4) n5)
                           n6)
                          n7)))))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (phi try sat-solve-7) (-> (app sat-solve-7 phi) <-))
 (menv '()))
(list
 'query:
 '(app or (-> (app not x4) <-) x1)
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      (□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> x1 <-) (app not x2) (app not x3))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #t)
   (menv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app
                 try
                 (λ (n3)
                   (app
                    try
                    (λ (n4)
                      (app
                       try
                       (λ (n5)
                         (app
                          try
                          (λ (n6)
                            (app
                             try
                             (λ (n7)
                               (app
                                (app
                                 (app (app (app (app (app p n1) n2) n3) n4) n5)
                                 n6)
                                n7)))))))))))))))
          <-))))))
  (list
   '(app #f)
   (menv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app
                 try
                 (λ (n3)
                   (app
                    try
                    (λ (n4)
                      (app
                       try
                       (λ (n5)
                         (app
                          try
                          (λ (n6)
                            (app
                             try
                             (λ (n7)
                               (app
                                (app
                                 (app (app (app (app (app p n1) n2) n3) n4) n5)
                                 n6)
                                n7)))))))))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app f (app #t)) (-> (app f (app #f)) <-))
 (menv '((□? (f)))))
(list
 'query:
 '(app
   try
   (->
    (λ (n2)
      (app
       try
       (λ (n3)
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7))))))))))))
    <-))
 (menv '((□? (n1)) (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n2)
      (app
       try
       (λ (n3)
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7))))))))))))
   (menv '((□? (n1)) (□? (p)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (phi
           try
           (->
            sat-solve-7
            =
            (λ (p)
              (app
               try
               (λ (n1)
                 (app
                  try
                  (λ (n2)
                    (app
                     try
                     (λ (n3)
                       (app
                        try
                        (λ (n4)
                          (app
                           try
                           (λ (n5)
                             (app
                              try
                              (λ (n6)
                                (app
                                 try
                                 (λ (n7)
                                   (app
                                    (app
                                     (app
                                      (app (app (app (app p n1) n2) n3) n4)
                                      n5)
                                     n6)
                                    n7))))))))))))))))
            <-))
    bod)
 (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (p)
      (app
       try
       (λ (n1)
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7))))))))))))))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)
 (menv
  '((□? (n7))
    (□? (n6))
    (□? (n5))
    (□? (n4))
    (□? (n3))
    (□? (n2))
    (□? (n1))
    (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x5)
      (λ (x6)
        (λ (x7)
          (app
           and
           (app or x1 x2)
           (app or x1 (app not x2) (app not x3))
           (app or x3 x4)
           (app or (app not x4) x1)
           (app or (app not x2) (app not x3))
           (app or x4 x2)))))
   (menv
    '(((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> x4 <-))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #t)
   (menv
    '(((λ (n3)
         (->
          (app
           try
           (λ (n4)
             (app
              try
              (λ (n5)
                (app
                 try
                 (λ (n6)
                   (app
                    try
                    (λ (n7)
                      (app
                       (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                       n7)))))))))
          <-))))))
  (list
   '(app #f)
   (menv
    '(((λ (n3)
         (->
          (app
           try
           (λ (n4)
             (app
              try
              (λ (n5)
                (app
                 try
                 (λ (n6)
                   (app
                    try
                    (λ (n7)
                      (app
                       (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                       n7)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n4)
    (->
     (app
      try
      (λ (n5)
        (app
         try
         (λ (n6)
           (app
            try
            (λ (n7)
              (app
               (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
               n7)))))))
     <-))
 (menv '((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
(list
 'query:
 '(λ (x3)
    (->
     (λ (x4)
       (λ (x5)
         (λ (x6)
           (λ (x7)
             (app
              and
              (app or x1 x2)
              (app or x1 (app not x2) (app not x3))
              (app or x3 x4)
              (app or (app not x4) x1)
              (app or (app not x2) (app not x3))
              (app or x4 x2))))))
     <-))
 (menv '((□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x4)
      (λ (x5)
        (λ (x6)
          (λ (x7)
            (app
             and
             (app or x1 x2)
             (app or x1 (app not x2) (app not x3))
             (app or x3 x4)
             (app or (app not x4) x1)
             (app or (app not x2) (app not x3))
             (app or x4 x2))))))
   (menv '((□? (x3)) (□? (x2)) (□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n6)
     (app
      try
      (λ (n7)
        (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))))
 (menv '((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
(list
 'clos/con:
 (list (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or x3 (-> x4 <-))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #t)
   (menv
    '(((λ (n3)
         (->
          (app
           try
           (λ (n4)
             (app
              try
              (λ (n5)
                (app
                 try
                 (λ (n6)
                   (app
                    try
                    (λ (n7)
                      (app
                       (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                       n7)))))))))
          <-))))))
  (list
   '(app #f)
   (menv
    '(((λ (n3)
         (->
          (app
           try
           (λ (n4)
             (app
              try
              (λ (n5)
                (app
                 try
                 (λ (n6)
                   (app
                    try
                    (λ (n7)
                      (app
                       (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                       n7)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) (app not x4) x1)
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
'(clos/con: (#<procedure:do-demand-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) (app not x2) (app not x3))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
'(clos/con: (#<procedure:do-demand-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app not x2) (-> (app not x3) <-))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      (□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (app or x1 x2)
   (app or x1 (app not x2) (app not x3))
   (app or x3 x4)
   (app or (app not x4) x1)
   (-> (app or (app not x2) (app not x3)) <-)
   (app or x4 x2))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      (□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (->
    (λ (n3)
      (app
       try
       (λ (n4)
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7))))))))))
    <-))
 (menv '((□? (n2)) (□? (n1)) (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n3)
      (app
       try
       (λ (n4)
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7))))))))))
   (menv '((□? (n2)) (□? (n1)) (□? (p)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> sat-solve-7 <-) phi) (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (p)
      (app
       try
       (λ (n1)
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7))))))))))))))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) x3)
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
'(clos/con: (#<procedure:do-demand-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) x1 (app not x2) (app not x3))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
'(clos/con: (#<procedure:do-demand-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> x4 <-) x2)
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #t)
   (menv
    '(((λ (n3)
         (->
          (app
           try
           (λ (n4)
             (app
              try
              (λ (n5)
                (app
                 try
                 (λ (n6)
                   (app
                    try
                    (λ (n7)
                      (app
                       (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                       n7)))))))))
          <-))))))
  (list
   '(app #f)
   (menv
    '(((λ (n3)
         (->
          (app
           try
           (λ (n4)
             (app
              try
              (λ (n5)
                (app
                 try
                 (λ (n6)
                   (app
                    try
                    (λ (n7)
                      (app
                       (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                       n7)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> x2 <-))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #t)
   (menv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2)
             (app
              try
              (λ (n3)
                (app
                 try
                 (λ (n4)
                   (app
                    try
                    (λ (n5)
                      (app
                       try
                       (λ (n6)
                         (app
                          try
                          (λ (n7)
                            (app
                             (app
                              (app (app (app (app (app p n1) n2) n3) n4) n5)
                              n6)
                             n7)))))))))))))
          <-))))))
  (list
   '(app #f)
   (menv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2)
             (app
              try
              (λ (n3)
                (app
                 try
                 (λ (n4)
                   (app
                    try
                    (λ (n5)
                      (app
                       try
                       (λ (n6)
                         (app
                          try
                          (λ (n7)
                            (app
                             (app
                              (app (app (app (app (app p n1) n2) n3) n4) n5)
                              n6)
                             n7)))))))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (app or x1 x2)
   (app or x1 (app not x2) (app not x3))
   (app or x3 x4)
   (app or (app not x4) x1)
   (app or (app not x2) (app not x3))
   (-> (app or x4 x2) <-))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      (□? (x3))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
  (list
   '(app #t)
   (menv
    '(((λ (n3)
         (->
          (app
           try
           (λ (n4)
             (app
              try
              (λ (n5)
                (app
                 try
                 (λ (n6)
                   (app
                    try
                    (λ (n7)
                      (app
                       (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                       n7)))))))))
          <-))))))
  (list
   '(app #t)
   (menv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2)
             (app
              try
              (λ (n3)
                (app
                 try
                 (λ (n4)
                   (app
                    try
                    (λ (n5)
                      (app
                       try
                       (λ (n6)
                         (app
                          try
                          (λ (n7)
                            (app
                             (app
                              (app (app (app (app (app p n1) n2) n3) n4) n5)
                              n6)
                             n7)))))))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app f (-> (app #t) <-)) (menv '((□? (f)))))
(list 'clos/con: (list (list '(app #t) (menv '((□? (f)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n1)
     (app
      try
      (λ (n2)
        (app
         try
         (λ (n3)
           (app
            try
            (λ (n4)
              (app
               try
               (λ (n5)
                 (app
                  try
                  (λ (n6)
                    (app
                     try
                     (λ (n7)
                       (app
                        (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                        n7)))))))))))))))
 (menv '((□? (p)))))
(list
 'clos/con:
 (list (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app (app (app p n1) n2) n3) (-> n4 <-))
 (menv
  '((□? (n7))
    (□? (n6))
    (□? (n5))
    (□? (n4))
    (□? (n3))
    (□? (n2))
    (□? (n1))
    (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(app #t)
   (menv
    '(((λ (n3)
         (->
          (app
           try
           (λ (n4)
             (app
              try
              (λ (n5)
                (app
                 try
                 (λ (n6)
                   (app
                    try
                    (λ (n7)
                      (app
                       (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                       n7)))))))))
          <-))))))
  (list
   '(app #f)
   (menv
    '(((λ (n3)
         (->
          (app
           try
           (λ (n4)
             (app
              try
              (λ (n5)
                (app
                 try
                 (λ (n6)
                   (app
                    try
                    (λ (n7)
                      (app
                       (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                       n7)))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n3)
     (app
      try
      (λ (n4)
        (app
         try
         (λ (n5)
           (app
            try
            (λ (n6)
              (app
               try
               (λ (n7)
                 (app
                  (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                  n7)))))))))))
 (menv '((□? (n2)) (□? (n1)) (□? (p)))))
(list
 'clos/con:
 (list (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (->
    (λ (n6)
      (app
       try
       (λ (n7)
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))))
    <-))
 (menv '((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n6)
      (app
       try
       (λ (n7)
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))))
   (menv '((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) x4 x2)
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
'(clos/con: (#<procedure:do-demand-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) x1 x2)
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
'(clos/con: (#<procedure:do-demand-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app (app p n1) n2) <-) n3)
 (menv
  '((□? (n7))
    (□? (n6))
    (□? (n5))
    (□? (n4))
    (□? (n3))
    (□? (n2))
    (□? (n1))
    (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x3)
      (λ (x4)
        (λ (x5)
          (λ (x6)
            (λ (x7)
              (app
               and
               (app or x1 x2)
               (app or x1 (app not x2) (app not x3))
               (app or x3 x4)
               (app or (app not x4) x1)
               (app or (app not x2) (app not x3))
               (app or x4 x2)))))))
   (menv
    '(((app (-> (app (app p n1) n2) <-) n3)) ((app (-> (app p n1) <-) n2)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> x3 <-) x4)
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #t)
   (menv
    '(((λ (n2)
         (->
          (app
           try
           (λ (n3)
             (app
              try
              (λ (n4)
                (app
                 try
                 (λ (n5)
                   (app
                    try
                    (λ (n6)
                      (app
                       try
                       (λ (n7)
                         (app
                          (app
                           (app (app (app (app (app p n1) n2) n3) n4) n5)
                           n6)
                          n7)))))))))))
          <-))))))
  (list
   '(app #f)
   (menv
    '(((λ (n2)
         (->
          (app
           try
           (λ (n3)
             (app
              try
              (λ (n4)
                (app
                 try
                 (λ (n5)
                   (app
                    try
                    (λ (n6)
                      (app
                       try
                       (λ (n7)
                         (app
                          (app
                           (app (app (app (app (app p n1) n2) n3) n4) n5)
                           n6)
                          n7)))))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n7)
    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))
 (menv
  '((□? (n7))
    (□? (n6))
    (□? (n5))
    (□? (n4))
    (□? (n3))
    (□? (n2))
    (□? (n1))
    (□? (p)))))
(list
 'query:
 '(app (-> p <-) n1)
 (menv
  '((□? (n7))
    (□? (n6))
    (□? (n5))
    (□? (n4))
    (□? (n3))
    (□? (n2))
    (□? (n1))
    (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1)
      (λ (x2)
        (λ (x3)
          (λ (x4)
            (λ (x5)
              (λ (x6)
                (λ (x7)
                  (app
                   and
                   (app or x1 x2)
                   (app or x1 (app not x2) (app not x3))
                   (app or x3 x4)
                   (app or (app not x4) x1)
                   (app or (app not x2) (app not x3))
                   (app or x4 x2)))))))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> x2 <-))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #t)
   (menv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2)
             (app
              try
              (λ (n3)
                (app
                 try
                 (λ (n4)
                   (app
                    try
                    (λ (n5)
                      (app
                       try
                       (λ (n6)
                         (app
                          try
                          (λ (n7)
                            (app
                             (app
                              (app (app (app (app (app p n1) n2) n3) n4) n5)
                              n6)
                             n7)))))))))))))
          <-))))))
  (list
   '(app #f)
   (menv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2)
             (app
              try
              (λ (n3)
                (app
                 try
                 (λ (n4)
                   (app
                    try
                    (λ (n5)
                      (app
                       try
                       (λ (n6)
                         (app
                          try
                          (λ (n7)
                            (app
                             (app
                              (app (app (app (app (app p n1) n2) n3) n4) n5)
                              n6)
                             n7)))))))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) x4)
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
'(clos/con: (#<procedure:do-demand-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> #f <-)) (menv '((□? (f)))))
(list 'clos/con: (list (list #f (menv '((□? (f)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n2)
    (->
     (app
      try
      (λ (n3)
        (app
         try
         (λ (n4)
           (app
            try
            (λ (n5)
              (app
               try
               (λ (n6)
                 (app
                  try
                  (λ (n7)
                    (app
                     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                     n7)))))))))))
     <-))
 (menv '((□? (n2)) (□? (n1)) (□? (p)))))
(list
 'query:
 '(app (-> or <-) x3 x4)
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
'(clos/con: (#<procedure:do-demand-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app not x4) (-> x1 <-))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #t)
   (menv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app
                 try
                 (λ (n3)
                   (app
                    try
                    (λ (n4)
                      (app
                       try
                       (λ (n5)
                         (app
                          try
                          (λ (n6)
                            (app
                             try
                             (λ (n7)
                               (app
                                (app
                                 (app (app (app (app (app p n1) n2) n3) n4) n5)
                                 n6)
                                n7)))))))))))))))
          <-))))))
  (list
   '(app #f)
   (menv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app
                 try
                 (λ (n3)
                   (app
                    try
                    (λ (n4)
                      (app
                       try
                       (λ (n5)
                         (app
                          try
                          (λ (n6)
                            (app
                             try
                             (λ (n7)
                               (app
                                (app
                                 (app (app (app (app (app p n1) n2) n3) n4) n5)
                                 n6)
                                n7)))))))))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> f <-) (app #f)) (menv '((□? (f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n7) (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))
   (menv
    '((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
  (list
   '(λ (n5)
      (app
       try
       (λ (n6)
         (app
          try
          (λ (n7)
            (app
             (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
             n7))))))
   (menv '((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
  (list
   '(λ (n4)
      (app
       try
       (λ (n5)
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7))))))))
   (menv '((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
  (list
   '(λ (n6)
      (app
       try
       (λ (n7)
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))))
   (menv '((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
  (list
   '(λ (n3)
      (app
       try
       (λ (n4)
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7))))))))))
   (menv '((□? (n2)) (□? (n1)) (□? (p)))))
  (list
   '(λ (n2)
      (app
       try
       (λ (n3)
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7))))))))))))
   (menv '((□? (n1)) (□? (p)))))
  (list
   '(λ (n1)
      (app
       try
       (λ (n2)
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7))))))))))))))
   (menv '((□? (p)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p (-> n1 <-))
 (menv
  '((□? (n7))
    (□? (n6))
    (□? (n5))
    (□? (n4))
    (□? (n3))
    (□? (n2))
    (□? (n1))
    (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(app #t)
   (menv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app
                 try
                 (λ (n3)
                   (app
                    try
                    (λ (n4)
                      (app
                       try
                       (λ (n5)
                         (app
                          try
                          (λ (n6)
                            (app
                             try
                             (λ (n7)
                               (app
                                (app
                                 (app (app (app (app (app p n1) n2) n3) n4) n5)
                                 n6)
                                n7)))))))))))))))
          <-))))))
  (list
   '(app #f)
   (menv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app
                 try
                 (λ (n3)
                   (app
                    try
                    (λ (n4)
                      (app
                       try
                       (λ (n5)
                         (app
                          try
                          (λ (n6)
                            (app
                             try
                             (λ (n7)
                               (app
                                (app
                                 (app (app (app (app (app p n1) n2) n3) n4) n5)
                                 n6)
                                n7)))))))))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n2)
     (app
      try
      (λ (n3)
        (app
         try
         (λ (n4)
           (app
            try
            (λ (n5)
              (app
               try
               (λ (n6)
                 (app
                  try
                  (λ (n7)
                    (app
                     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                     n7)))))))))))))
 (menv '((□? (n1)) (□? (p)))))
(list
 'clos/con:
 (list (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (-> (app or x1 x2) <-)
   (app or x1 (app not x2) (app not x3))
   (app or x3 x4)
   (app or (app not x4) x1)
   (app or (app not x2) (app not x3))
   (app or x4 x2))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #t)
   (menv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2)
             (app
              try
              (λ (n3)
                (app
                 try
                 (λ (n4)
                   (app
                    try
                    (λ (n5)
                      (app
                       try
                       (λ (n6)
                         (app
                          try
                          (λ (n7)
                            (app
                             (app
                              (app (app (app (app (app p n1) n2) n3) n4) n5)
                              n6)
                             n7)))))))))))))
          <-))))))
  (list
   '(app #t)
   (menv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app
                 try
                 (λ (n3)
                   (app
                    try
                    (λ (n4)
                      (app
                       try
                       (λ (n5)
                         (app
                          try
                          (λ (n6)
                            (app
                             try
                             (λ (n7)
                               (app
                                (app
                                 (app (app (app (app (app p n1) n2) n3) n4) n5)
                                 n6)
                                n7)))))))))))))))
          <-))))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      (□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app f (-> (app #f) <-)) (menv '((□? (f)))))
(list 'clos/con: (list (list '(app #f) (menv '((□? (f)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(top) (menv '()))
(list 'query: '(app (-> #t <-)) (menv '((□? (f)))))
(list 'clos/con: (list (list #t (menv '((□? (f)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n1)
    (->
     (app
      try
      (λ (n2)
        (app
         try
         (λ (n3)
           (app
            try
            (λ (n4)
              (app
               try
               (λ (n5)
                 (app
                  try
                  (λ (n6)
                    (app
                     try
                     (λ (n7)
                       (app
                        (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                        n7)))))))))))))
     <-))
 (menv '((□? (n1)) (□? (p)))))
(list
 'query:
 '(λ (x5)
    (->
     (λ (x6)
       (λ (x7)
         (app
          and
          (app or x1 x2)
          (app or x1 (app not x2) (app not x3))
          (app or x3 x4)
          (app or (app not x4) x1)
          (app or (app not x2) (app not x3))
          (app or x4 x2))))
     <-))
 (menv '((□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x6)
      (λ (x7)
        (app
         and
         (app or x1 x2)
         (app or x1 (app not x2) (app not x3))
         (app or x3 x4)
         (app or (app not x4) x1)
         (app or (app not x2) (app not x3))
         (app or x4 x2))))
   (menv '((□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n4)
     (app
      try
      (λ (n5)
        (app
         try
         (λ (n6)
           (app
            try
            (λ (n7)
              (app
               (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
               n7)))))))))
 (menv '((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
(list
 'clos/con:
 (list (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> f <-) (app #t)) (menv '((□? (f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n7) (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))
   (menv
    '((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
  (list
   '(λ (n5)
      (app
       try
       (λ (n6)
         (app
          try
          (λ (n7)
            (app
             (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
             n7))))))
   (menv '((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
  (list
   '(λ (n4)
      (app
       try
       (λ (n5)
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7))))))))
   (menv '((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
  (list
   '(λ (n6)
      (app
       try
       (λ (n7)
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))))
   (menv '((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
  (list
   '(λ (n3)
      (app
       try
       (λ (n4)
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7))))))))))
   (menv '((□? (n2)) (□? (n1)) (□? (p)))))
  (list
   '(λ (n2)
      (app
       try
       (λ (n3)
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7))))))))))))
   (menv '((□? (n1)) (□? (p)))))
  (list
   '(λ (n1)
      (app
       try
       (λ (n2)
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7))))))))))))))
   (menv '((□? (p)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or x1 (app not x2) (-> (app not x3) <-))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      (□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (app or x1 x2)
   (-> (app or x1 (app not x2) (app not x3)) <-)
   (app or x3 x4)
   (app or (app not x4) x1)
   (app or (app not x2) (app not x3))
   (app or x4 x2))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      (□? (x2))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
  (list
   '(app #t)
   (menv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app
                 try
                 (λ (n3)
                   (app
                    try
                    (λ (n4)
                      (app
                       try
                       (λ (n5)
                         (app
                          try
                          (λ (n6)
                            (app
                             try
                             (λ (n7)
                               (app
                                (app
                                 (app (app (app (app (app p n1) n2) n3) n4) n5)
                                 n6)
                                n7)))))))))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app p n1) (-> n2 <-))
 (menv
  '((□? (n7))
    (□? (n6))
    (□? (n5))
    (□? (n4))
    (□? (n3))
    (□? (n2))
    (□? (n1))
    (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(app #t)
   (menv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2)
             (app
              try
              (λ (n3)
                (app
                 try
                 (λ (n4)
                   (app
                    try
                    (λ (n5)
                      (app
                       try
                       (λ (n6)
                         (app
                          try
                          (λ (n7)
                            (app
                             (app
                              (app (app (app (app (app p n1) n2) n3) n4) n5)
                              n6)
                             n7)))))))))))))
          <-))))))
  (list
   '(app #f)
   (menv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2)
             (app
              try
              (λ (n3)
                (app
                 try
                 (λ (n4)
                   (app
                    try
                    (λ (n5)
                      (app
                       try
                       (λ (n6)
                         (app
                          try
                          (λ (n7)
                            (app
                             (app
                              (app (app (app (app (app p n1) n2) n3) n4) n5)
                              n6)
                             n7)))))))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n3)
    (->
     (app
      try
      (λ (n4)
        (app
         try
         (λ (n5)
           (app
            try
            (λ (n6)
              (app
               try
               (λ (n7)
                 (app
                  (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                  n7)))))))))
     <-))
 (menv '((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
(list
 'query:
 '(app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))
 (menv
  '((□? (n7))
    (□? (n6))
    (□? (n5))
    (□? (n4))
    (□? (n3))
    (□? (n2))
    (□? (n1))
    (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(app #t)
   (menv
    '(((λ (n5)
         (->
          (app
           try
           (λ (n6)
             (app
              try
              (λ (n7)
                (app
                 (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                 n7)))))
          <-))))))
  (list
   '(app #f)
   (menv
    '(((λ (n5)
         (->
          (app
           try
           (λ (n6)
             (app
              try
              (λ (n7)
                (app
                 (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                 n7)))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (->
    (λ (n4)
      (app
       try
       (λ (n5)
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7))))))))
    <-))
 (menv '((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n4)
      (app
       try
       (λ (n5)
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7))))))))
   (menv '((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) x3)
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
'(clos/con: (#<procedure:do-demand-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) x2)
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
'(clos/con: (#<procedure:do-demand-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x1)
    (->
     (λ (x2)
       (λ (x3)
         (λ (x4)
           (λ (x5)
             (λ (x6)
               (λ (x7)
                 (app
                  and
                  (app or x1 x2)
                  (app or x1 (app not x2) (app not x3))
                  (app or x3 x4)
                  (app or (app not x4) x1)
                  (app or (app not x2) (app not x3))
                  (app or x4 x2))))))))
     <-))
 (menv '((□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2)
      (λ (x3)
        (λ (x4)
          (λ (x5)
            (λ (x6)
              (λ (x7)
                (app
                 and
                 (app or x1 x2)
                 (app or x1 (app not x2) (app not x3))
                 (app or x3 x4)
                 (app or (app not x4) x1)
                 (app or (app not x2) (app not x3))
                 (app or x4 x2))))))))
   (menv '((□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app (app p n1) n2) (-> n3 <-))
 (menv
  '((□? (n7))
    (□? (n6))
    (□? (n5))
    (□? (n4))
    (□? (n3))
    (□? (n2))
    (□? (n1))
    (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(app #t)
   (menv
    '(((λ (n2)
         (->
          (app
           try
           (λ (n3)
             (app
              try
              (λ (n4)
                (app
                 try
                 (λ (n5)
                   (app
                    try
                    (λ (n6)
                      (app
                       try
                       (λ (n7)
                         (app
                          (app
                           (app (app (app (app (app p n1) n2) n3) n4) n5)
                           n6)
                          n7)))))))))))
          <-))))))
  (list
   '(app #f)
   (menv
    '(((λ (n2)
         (->
          (app
           try
           (λ (n3)
             (app
              try
              (λ (n4)
                (app
                 try
                 (λ (n5)
                   (app
                    try
                    (λ (n6)
                      (app
                       try
                       (λ (n7)
                         (app
                          (app
                           (app (app (app (app (app p n1) n2) n3) n4) n5)
                           n6)
                          n7)))))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)
 (menv
  '((□? (n7))
    (□? (n6))
    (□? (n5))
    (□? (n4))
    (□? (n3))
    (□? (n2))
    (□? (n1))
    (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x7)
      (app
       and
       (app or x1 x2)
       (app or x1 (app not x2) (app not x3))
       (app or x3 x4)
       (app or (app not x4) x1)
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (menv
    '(((app
        (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-)
        n7))
      ((app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6))
      ((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))
      ((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))
 (menv '((□? (f)))))
(list
 'query:
 '(app or (-> (app not x2) <-) (app not x3))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      (□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or x4 (-> x2 <-))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #t)
   (menv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2)
             (app
              try
              (λ (n3)
                (app
                 try
                 (λ (n4)
                   (app
                    try
                    (λ (n5)
                      (app
                       try
                       (λ (n6)
                         (app
                          try
                          (λ (n7)
                            (app
                             (app
                              (app (app (app (app (app p n1) n2) n3) n4) n5)
                              n6)
                             n7)))))))))))))
          <-))))))
  (list
   '(app #f)
   (menv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2)
             (app
              try
              (λ (n3)
                (app
                 try
                 (λ (n4)
                   (app
                    try
                    (λ (n5)
                      (app
                       try
                       (λ (n6)
                         (app
                          try
                          (λ (n7)
                            (app
                             (app
                              (app (app (app (app (app p n1) n2) n3) n4) n5)
                              n6)
                             n7)))))))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or x1 (-> (app not x2) <-) (app not x3))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      ((app (-> (app (app p n1) n2) <-) n3))
      (□? (x1)))))
  (list
   '(app #t)
   (menv
    '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
  (list
   '(app #f)
   (menv
    '((□? (x7))
      (□? (x6))
      (□? (x5))
      (□? (x4))
      (□? (x3))
      (□? (x2))
      (□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or x1 (-> x2 <-))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #t)
   (menv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2)
             (app
              try
              (λ (n3)
                (app
                 try
                 (λ (n4)
                   (app
                    try
                    (λ (n5)
                      (app
                       try
                       (λ (n6)
                         (app
                          try
                          (λ (n7)
                            (app
                             (app
                              (app (app (app (app (app p n1) n2) n3) n4) n5)
                              n6)
                             n7)))))))))))))
          <-))))))
  (list
   '(app #f)
   (menv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2)
             (app
              try
              (λ (n3)
                (app
                 try
                 (λ (n4)
                   (app
                    try
                    (λ (n5)
                      (app
                       try
                       (λ (n6)
                         (app
                          try
                          (λ (n7)
                            (app
                             (app
                              (app (app (app (app (app p n1) n2) n3) n4) n5)
                              n6)
                             n7)))))))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> x1 <-) x2)
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(app #t)
   (menv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app
                 try
                 (λ (n3)
                   (app
                    try
                    (λ (n4)
                      (app
                       try
                       (λ (n5)
                         (app
                          try
                          (λ (n6)
                            (app
                             try
                             (λ (n7)
                               (app
                                (app
                                 (app (app (app (app (app p n1) n2) n3) n4) n5)
                                 n6)
                                n7)))))))))))))))
          <-))))))
  (list
   '(app #f)
   (menv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app
                 try
                 (λ (n3)
                   (app
                    try
                    (λ (n4)
                      (app
                       try
                       (λ (n5)
                         (app
                          try
                          (λ (n6)
                            (app
                             try
                             (λ (n7)
                               (app
                                (app
                                 (app (app (app (app (app p n1) n2) n3) n4) n5)
                                 n6)
                                n7)))))))))))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (phi
           (-> try = (λ (f) (app or (app f (app #t)) (app f (app #f)))) <-)
           sat-solve-7)
    bod)
 (menv '()))
(list
 'clos/con:
 (list (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x6)
    (->
     (λ (x7)
       (app
        and
        (app or x1 x2)
        (app or x1 (app not x2) (app not x3))
        (app or x3 x4)
        (app or (app not x4) x1)
        (app or (app not x2) (app not x3))
        (app or x4 x2)))
     <-))
 (menv '((□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x7)
      (app
       and
       (app or x1 x2)
       (app or x1 (app not x2) (app not x3))
       (app or x3 x4)
       (app or (app not x4) x1)
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (menv '((□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app p n1) <-) n2)
 (menv
  '((□? (n7))
    (□? (n6))
    (□? (n5))
    (□? (n4))
    (□? (n3))
    (□? (n2))
    (□? (n1))
    (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2)
      (λ (x3)
        (λ (x4)
          (λ (x5)
            (λ (x6)
              (λ (x7)
                (app
                 and
                 (app or x1 x2)
                 (app or x1 (app not x2) (app not x3))
                 (app or x3 x4)
                 (app or (app not x4) x1)
                 (app or (app not x2) (app not x3))
                 (app or x4 x2))))))))
   (menv '(((app (-> (app p n1) <-) n2)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n7) (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))
 (menv
  '((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
(list
 'clos/con:
 (list (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (->
    (λ (n7) (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))
    <-))
 (menv
  '((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n7) (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))
   (menv
    '((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app (app (app p n1) n2) n3) <-) n4)
 (menv
  '((□? (n7))
    (□? (n6))
    (□? (n5))
    (□? (n4))
    (□? (n3))
    (□? (n2))
    (□? (n1))
    (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x4)
      (λ (x5)
        (λ (x6)
          (λ (x7)
            (app
             and
             (app or x1 x2)
             (app or x1 (app not x2) (app not x3))
             (app or x3 x4)
             (app or (app not x4) x1)
             (app or (app not x2) (app not x3))
             (app or x4 x2))))))
   (menv
    '(((app (-> (app (app (app p n1) n2) n3) <-) n4))
      ((app (-> (app (app p n1) n2) <-) n3))
      ((app (-> (app p n1) <-) n2)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n6)
    (->
     (app
      try
      (λ (n7)
        (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))
     <-))
 (menv
  '((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
(list
 'query:
 '(λ (n5)
    (->
     (app
      try
      (λ (n6)
        (app
         try
         (λ (n7)
           (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))))
     <-))
 (menv '((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
(list
 'query:
 '(λ (x2)
    (->
     (λ (x3)
       (λ (x4)
         (λ (x5)
           (λ (x6)
             (λ (x7)
               (app
                and
                (app or x1 x2)
                (app or x1 (app not x2) (app not x3))
                (app or x3 x4)
                (app or (app not x4) x1)
                (app or (app not x2) (app not x3))
                (app or x4 x2)))))))
     <-))
 (menv '((□? (x2)) (□? (x1)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x3)
      (λ (x4)
        (λ (x5)
          (λ (x6)
            (λ (x7)
              (app
               and
               (app or x1 x2)
               (app or x1 (app not x2) (app not x3))
               (app or x3 x4)
               (app or (app not x4) x1)
               (app or (app not x2) (app not x3))
               (app or x4 x2)))))))
   (menv '((□? (x2)) (□? (x1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (p)
    (->
     (app
      try
      (λ (n1)
        (app
         try
         (λ (n2)
           (app
            try
            (λ (n3)
              (app
               try
               (λ (n4)
                 (app
                  try
                  (λ (n5)
                    (app
                     try
                     (λ (n6)
                       (app
                        try
                        (λ (n7)
                          (app
                           (app
                            (app (app (app (app (app p n1) n2) n3) n4) n5)
                            n6)
                           n7)))))))))))))))
     <-))
 (menv '((□? (p)))))
(list
 'query:
 '(app
   try
   (->
    (λ (n1)
      (app
       try
       (λ (n2)
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7))))))))))))))
    <-))
 (menv '((□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n1)
      (app
       try
       (λ (n2)
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7))))))))))))))
   (menv '((□? (p)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> and <-)
   (app or x1 x2)
   (app or x1 (app not x2) (app not x3))
   (app or x3 x4)
   (app or (app not x4) x1)
   (app or (app not x2) (app not x3))
   (app or x4 x2))
 (menv
  '((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))
'(clos/con: (#<procedure:do-demand-and>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))
 (menv
  '((□? (n7))
    (□? (n6))
    (□? (n5))
    (□? (n4))
    (□? (n3))
    (□? (n2))
    (□? (n1))
    (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(app #t)
   (menv
    '(((λ (n6)
         (->
          (app
           try
           (λ (n7)
             (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))
          <-))))))
  (list
   '(app #f)
   (menv
    '(((λ (n6)
         (->
          (app
           try
           (λ (n7)
             (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))
 (menv
  '((□? (n7))
    (□? (n6))
    (□? (n5))
    (□? (n4))
    (□? (n3))
    (□? (n2))
    (□? (n1))
    (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(app #t)
   (menv
    '(((λ (n4)
         (->
          (app
           try
           (λ (n5)
             (app
              try
              (λ (n6)
                (app
                 try
                 (λ (n7)
                   (app
                    (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                    n7)))))))
          <-))))))
  (list
   '(app #f)
   (menv
    '(((λ (n4)
         (->
          (app
           try
           (λ (n5)
             (app
              try
              (λ (n6)
                (app
                 try
                 (λ (n7)
                   (app
                    (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                    n7)))))))
          <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
