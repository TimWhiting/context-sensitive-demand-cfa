'(expression:
  (let ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#t (app + n 1))
            (#f
             (match
              (app = n 0)
              (#t (app ack (app - m 1) 1))
              (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
    (app ack 3 12)))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(top) (flatenv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (12 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app (-> ack <-) 3 12) (flatenv '()))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (12 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(let (ack) (-> (app ack 3 12) <-)) (flatenv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(let ((->
         ack
         =
         (λ (m n)
           (match
            (app = m 0)
            (#t (app + n 1))
            (#f
             (match
              (app = n 0)
              (#t (app ack (app - m 1) 1))
              (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
         <-))
    bod)
 (flatenv '()))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app ack (-> 3 <-) 12) (flatenv '()))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (12 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app ack 3 (-> 12 <-)) (flatenv '()))
'(clos/con: ⊥)
'(literals: (12 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       #f
       (app = n 0)
       ((#t (app ack (app - m 1) 1)))
       ()
       (match-clause
        #f
        (app = m 0)
        ((#t (app + n 1)))
        ()
        (bod (m n) (let-bin ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #t
      (app = n 0)
      ()
      ((#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (flatenv
  '(((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      #f
      (app = n 0)
      ((#t (app ack (app - m 1) 1)))
      ()
      (match-clause
       #f
       (app = m 0)
       ((#t (app + n 1)))
       ()
       (bod (m n) (let-bin ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((let-bod
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           (#t (app + n 1))
           (#f
            (match
             (app = n 0)
             (#t (app ack (app - m 1) 1))
             (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
