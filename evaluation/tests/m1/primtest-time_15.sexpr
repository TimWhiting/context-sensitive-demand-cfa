'(clean-cache
  primtest
  1
  94
  letrec*
  "\"'(eval ((top) letrec* (square ... byte-size) ...) (env ()))\""
  #f)
'(clean-cache
  primtest
  1
  94
  let
  "\"'(eval\n  (λ (byte-size iterations) (-> (let (n) ...) <-))\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (let (... () (n (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (byte-size iterations)))))\""
  15
  11
  3
  1
  8
  2
  10
  1
  13/18
  10
  #f
  12/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (byte-size iterations)))))\""
  9
  5
  3
  1
  4
  2
  6
  1
  3/4
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  1
  94
  match
  "\"'(eval\n  (let (n)\n    (->\n     (match\n      (app\n       and\n       (app not (app is-trivial-composite? n))\n       (app is-fermat-prime? n iterations))\n      ...)\n     <-))\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   (#f)\n   (_ (-> n <-)))\n  (env ((□? (byte-size iterations)))))\""
  18
  14
  3
  1
  10
  2
  12
  1
  5/7
  10
  #f
  9/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   ((#f) (-> (app generate-fermat-prime byte-size iterations) <-))\n   _)\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime byte-size (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  9
  5
  3
  1
  4
  2
  6
  1
  8/9
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime (-> byte-size <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  9
  5
  3
  1
  4
  2
  6
  1
  8/9
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (match\n   (->\n    (app\n     and\n     (app not (app is-trivial-composite? n))\n     (app is-fermat-prime? n iterations))\n    <-)\n   (#f)\n   _)\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   and\n   (app not (app is-trivial-composite? n))\n   (-> (app is-fermat-prime? n iterations) <-))\n  (env ((□? (byte-size iterations)))))\""
  261
  243
  12
  6
  222
  5
  227
  1
  1117/1200
  112
  #f
  410/243
  ((17/2 17/2 0) (17/2 17/2 0) (9 9 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? n (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  9
  5
  3
  1
  4
  2
  6
  1
  3/4
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  18
  14
  3
  1
  10
  2
  12
  1
  5/7
  10
  #f
  9/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   and\n   (-> (app not (app is-trivial-composite? n)) <-)\n   (app is-fermat-prime? n iterations))\n  (env ((□? (byte-size iterations)))))\""
  101
  94
  5
  2
  86
  3
  89
  1
  227/237
  56
  #f
  66/47
  ((8 8 0) (8 8 0) (8 8 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app not (-> (app is-trivial-composite? n) <-))\n  (env ((□? (byte-size iterations)))))\""
  95
  88
  5
  2
  82
  3
  85
  1
  223/231
  53
  #f
  123/88
  ((8 8 0) (8 8 0) (8 8 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app is-trivial-composite? (-> n <-))\n  (env ((□? (byte-size iterations)))))\""
  18
  14
  3
  1
  10
  2
  12
  1
  5/7
  10
  #f
  9/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (λ (n iterations)\n    (-> (app or (app <= iterations 0) (let* (byte-size ... a) ...)) <-))\n  (env ((□? (n iterations)))))\""
  257
  239
  12
  6
  219
  5
  224
  1
  1103/1176
  110
  #f
  404/239
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  let*
  "\"'(eval\n  (app or (app <= iterations 0) (-> (let* (byte-size ... a) ...) <-))\n  (env ((□? (n iterations)))))\""
  262
  244
  12
  6
  213
  5
  218
  1
  353/392
  110
  #f
  207/122
  ((9 9 0) (9 9 0) (19/2 19/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (let* (... byte-size (a (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (n iterations)))))\""
  62
  54
  6
  2
  38
  3
  41
  1
  5/7
  26
  #f
  44/27
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (n iterations)))))\""
  56
  48
  6
  2
  34
  3
  37
  1
  41/57
  23
  #f
  79/48
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log n) (app log 2))) <-))\n         a\n         ...)\n    ...)\n  (env ((□? (n iterations)))))\""
  53
  45
  6
  2
  32
  3
  35
  1
  13/18
  23
  #f
  73/45
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app ceiling (-> (app / (app log n) (app log 2)) <-))\n  (env ((□? (n iterations)))))\""
  47
  39
  6
  2
  28
  3
  31
  1
  35/48
  20
  #f
  20/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval (app / (app log n) (-> (app log 2) <-)) (env ((□? (n iterations)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  2
  #f
  4/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval (app / (-> (app log n) <-) (app log 2)) (env ((□? (n iterations)))))\""
  34
  26
  6
  2
  18
  3
  21
  1
  23/33
  13
  #f
  3/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app log (-> n <-)) (env ((□? (n iterations)))))\""
  28
  20
  6
  2
  14
  3
  17
  1
  19/27
  10
  #f
  3/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  15
  94
  match
  "\"'(eval\n  (let* (byte-size ... a)\n    (-> (match (app = (app modulo-power a (app - n 1) n) 1) ...) <-))\n  (env ((□? (n iterations)))))\""
  260
  242
  12
  6
  212
  5
  217
  1
  1063/1176
  110
  #f
  205/121
  ((9 9 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   (#f)\n   (_ (-> (app is-fermat-prime? n (app - iterations 1)) <-)))\n  (env ((□? (n iterations)))))\""
  240
  222
  12
  6
  204
  5
  209
  1
  1111/1176
  100
  #f
  190/111
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app is-fermat-prime? n (-> (app - iterations 1) <-))\n  (env ((□? (n iterations)))))\""
  27
  19
  6
  2
  14
  3
  17
  1
  19/24
  15
  #f
  23/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app - (-> iterations <-) 1) (env ((□? (n iterations)))))\""
  25
  17
  6
  2
  14
  3
  17
  1
  7/8
  13
  #f
  21/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) (app - iterations 1))\n  (env ((□? (n iterations)))))\""
  27
  19
  6
  2
  14
  3
  17
  1
  19/24
  10
  #f
  28/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   ((#f) (-> (app #f) <-))\n   _)\n  (env ((□? (n iterations)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (match (-> (app = (app modulo-power a (app - n 1) n) 1) <-) (#f) _)\n  (env ((□? (n iterations)))))\""
  219
  202
  12
  5
  177
  5
  182
  1
  89/100
  84
  #f
  178/101
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app = (-> (app modulo-power a (app - n 1) n) <-) 1)\n  (env ((□? (n iterations)))))\""
  210
  193
  12
  5
  171
  5
  176
  1
  259/288
  78
  #f
  344/193
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power a (app - n 1) (-> n <-)) (env ((□? (n iterations)))))\""
  28
  20
  6
  2
  14
  3
  17
  1
  19/27
  10
  #f
  3/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval (app modulo-power a (-> (app - n 1) <-) n) (env ((□? (n iterations)))))\""
  37
  29
  6
  2
  20
  3
  23
  1
  25/36
  16
  #f
  42/29
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (n iterations)))))\""
  28
  20
  6
  2
  14
  3
  17
  1
  19/27
  10
  #f
  3/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> a <-) (app - n 1) n) (env ((□? (n iterations)))))\""
  65
  57
  6
  2
  40
  3
  43
  1
  47/66
  26
  #f
  94/57
  ((2 2 0) (3/2 3/2 0) (2 2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app or (-> (app <= iterations 0) <-) (let* (byte-size ... a) ...))\n  (env ((□? (n iterations)))))\""
  34
  26
  6
  2
  20
  3
  23
  1
  7/9
  20
  #f
  16/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app <= (-> iterations <-) 0) (env ((□? (n iterations)))))\""
  25
  17
  6
  2
  14
  3
  17
  1
  22/27
  13
  #f
  21/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (λ (n)\n    (->\n     (app\n      or\n      (app = (app modulo n 2) 0)\n      (app = (app modulo n 3) 0)\n      (app = (app modulo n 5) 0)\n      (app = (app modulo n 7) 0)\n      (app = (app modulo n 11) 0)\n      (app = (app modulo n 13) 0)\n      (app = (app modulo n 17) 0)\n      (app = (app modulo n 19) 0)\n      (app = (app modulo n 23) 0))\n     <-))\n  (env ((□? (n)))))\""
  #f)
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (-> (app = (app modulo n 23) 0) <-))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  ((1/2 1/2 0) (1/2 1/2 0) (1 1 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 23) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 23) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (-> (app = (app modulo n 19) 0) <-)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 19) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 19) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (-> (app = (app modulo n 17) 0) <-)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 17) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 17) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (-> (app = (app modulo n 13) 0) <-)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  ((1/2 1/2 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 13) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 13) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (-> (app = (app modulo n 11) 0) <-)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  ((1/2 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 11) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 11) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (-> (app = (app modulo n 7) 0) <-)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 7) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 7) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (-> (app = (app modulo n 5) 0) <-)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  ((1 1 0) (1/2 1/2 0) (1 1 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 5) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 5) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (-> (app = (app modulo n 3) 0) <-)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  ((1/2 1/2 0) (1/2 1/2 0) (1 1 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 3) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 3) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (-> (app = (app modulo n 2) 0) <-)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  36
  29
  5
  2
  18
  3
  21
  1
  13/21
  18
  #f
  40/29
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 2) <-) 0) (env ((□? (n)))))\""
  30
  23
  5
  2
  15
  3
  18
  1
  43/66
  14
  #f
  32/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 2) (env ((□? (n)))))\""
  24
  17
  5
  2
  12
  3
  15
  1
  17/24
  10
  #f
  24/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  match
  "\"'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))\""
  206
  189
  12
  5
  168
  5
  173
  1
  51/56
  76
  #f
  16/9
  ((7 7 0) (7 7 0) (15/2 15/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))\""
  199
  182
  12
  5
  162
  5
  167
  1
  32/35
  71
  #f
  327/182
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env ((□? (base exp n)))))\""
  199
  182
  12
  5
  153
  5
  158
  1
  733/840
  71
  #f
  327/182
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  43
  30
  10
  3
  22
  4
  26
  1
  35/48
  10
  #f
  5/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  193
  176
  12
  5
  150
  5
  155
  1
  53/60
  69
  #f
  317/176
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))\""
  186
  169
  12
  5
  147
  5
  152
  1
  127/140
  68
  #f
  306/169
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))\""
  43
  30
  10
  3
  22
  4
  26
  1
  17/22
  10
  #f
  5/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))\""
  73
  60
  10
  3
  46
  4
  50
  1
  63/80
  30
  #f
  19/10
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))\""
  70
  57
  10
  3
  46
  4
  50
  1
  33/40
  28
  #f
  36/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))\""
  80
  67
  10
  3
  48
  4
  52
  1
  107/144
  26
  #f
  114/67
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))\""
  80
  67
  10
  3
  48
  4
  52
  1
  217/300
  26
  #f
  114/67
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env ((□? (base exp n)))))\""
  127
  110
  12
  5
  88
  5
  93
  1
  467/552
  61
  #f
  181/110
  ((9/2 9/2 0) (9/2 9/2 0) (5 5 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  43
  30
  10
  3
  22
  4
  26
  1
  35/48
  10
  #f
  5/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  105
  88
  12
  5
  71
  5
  76
  1
  137/160
  54
  #t
  18/11
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))\""
  89
  75
  10
  4
  60
  4
  64
  1
  37/44
  41
  #t
  131/75
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))\""
  42
  29
  10
  3
  22
  4
  26
  1
  35/44
  10
  #f
  48/29
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))\""
  72
  59
  10
  3
  46
  4
  50
  1
  4/5
  30
  #f
  110/59
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))\""
  70
  57
  10
  3
  46
  4
  50
  1
  33/40
  28
  #f
  36/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))\""
  79
  66
  10
  3
  48
  4
  52
  1
  217/288
  26
  #f
  56/33
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))\""
  78
  65
  10
  3
  52
  4
  56
  1
  73/92
  32
  #f
  124/65
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))\""
  70
  57
  10
  3
  46
  4
  50
  1
  67/84
  28
  #f
  36/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))\""
  82
  69
  10
  3
  55
  4
  59
  1
  19/24
  36
  #f
  128/69
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))\""
  70
  57
  10
  3
  46
  4
  50
  1
  67/84
  28
  #f
  36/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))\""
  102
  85
  12
  5
  66
  5
  71
  1
  30/37
  51
  #t
  141/85
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env ((□? (x)))))\""
  96
  79
  12
  5
  63
  5
  68
  1
  57/68
  45
  #t
  135/79
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env ((□? (x)))))\""
  96
  79
  12
  5
  63
  5
  68
  1
  57/68
  45
  #t
  135/79
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  primtest
  1
  94
  app
  "\"'(eval\n  (letrec*\n   (square ... byte-size)\n   (-> (app generate-fermat-prime byte-size iterations) <-))\n  (env ()))\""
  #f)
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))\""
  78
  65
  10
  3
  52
  4
  56
  1
  73/92
  32
  #f
  124/65
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (n iterations)))))\""
  99
  86
  10
  3
  72
  4
  76
  1
  113/136
  42
  #f
  80/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval (app / (app log n) (-> (app log 2) <-)) (env ((□? (n iterations)))))\""
  100
  87
  10
  3
  72
  4
  76
  1
  335/408
  42
  #f
  54/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (-> (app = (app modulo n 17) 0) <-)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  118
  102
  12
  4
  80
  5
  85
  1
  383/504
  50
  #f
  92/51
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  let
  "\"'(eval\n  (λ (byte-size iterations) (-> (let (n) ...) <-))\n  (env ((□? (byte-size iterations)))))\""
  326
  303
  14
  9
  276
  6
  282
  1
  33/35
  163
  #f
  469/303
  ((12 12 0) (23/2 23/2 0) (23/2 23/2 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))\""
  331
  307
  14
  10
  276
  6
  282
  1
  163/175
  167
  #t
  473/307
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app not (-> (app is-trivial-composite? n) <-))\n  (env ((□? (byte-size iterations)))))\""
  332
  308
  14
  10
  276
  6
  282
  1
  488/525
  167
  #f
  475/308
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (λ (n iterations)\n    (-> (app or (app <= iterations 0) (let* (byte-size ... a) ...)) <-))\n  (env ((□? (n iterations)))))\""
  333
  309
  14
  10
  276
  6
  282
  1
  487/525
  167
  #f
  159/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? n (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  333
  309
  14
  10
  276
  6
  282
  1
  487/525
  167
  #t
  159/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))\""
  334
  310
  14
  10
  276
  6
  282
  1
  389/420
  167
  #f
  479/310
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 7) (env ((□? (n)))))\""
  335
  311
  14
  10
  276
  6
  282
  1
  277/300
  167
  #f
  481/311
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (letrec*\n   (square ... byte-size)\n   (-> (app generate-fermat-prime byte-size iterations) <-))\n  (env ()))\""
  338
  314
  14
  10
  279
  6
  285
  1
  655/708
  168
  #f
  243/157
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 17) <-) 0) (env ((□? (n)))))\""
  338
  314
  14
  10
  279
  6
  285
  1
  655/708
  168
  #f
  243/157
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 11) (env ((□? (n)))))\""
  339
  315
  14
  10
  279
  6
  285
  1
  653/708
  168
  #f
  488/315
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 17) (env ((□? (n)))))\""
  339
  315
  14
  10
  279
  6
  285
  1
  653/708
  168
  #f
  488/315
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (-> (app = (app modulo n 23) 0) <-))\n  (env ((□? (n)))))\""
  340
  316
  14
  10
  279
  6
  285
  1
  217/236
  168
  #f
  245/158
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 2) <-) 0) (env ((□? (n)))))\""
  341
  317
  14
  10
  279
  6
  285
  1
  11/12
  168
  #f
  492/317
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))\""
  349
  325
  14
  10
  285
  6
  291
  1
  655/716
  168
  #f
  508/325
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (let (... () (n (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (byte-size iterations)))))\""
  349
  325
  14
  10
  285
  6
  291
  1
  655/716
  168
  #f
  508/325
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))\""
  350
  326
  14
  10
  285
  6
  291
  1
  327/358
  168
  #f
  255/163
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log n) (app log 2))) <-))\n         a\n         ...)\n    ...)\n  (env ((□? (n iterations)))))\""
  351
  327
  14
  10
  285
  6
  291
  1
  979/1074
  168
  #f
  512/327
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (byte-size iterations)))))\""
  351
  327
  14
  10
  285
  6
  291
  1
  979/1074
  168
  #t
  512/327
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 13) (env ((□? (n)))))\""
  352
  328
  14
  10
  285
  6
  291
  1
  488/537
  168
  #f
  257/164
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app or (-> (app <= iterations 0) <-) (let* (byte-size ... a) ...))\n  (env ((□? (n iterations)))))\""
  353
  329
  14
  10
  285
  6
  291
  1
  487/537
  168
  #f
  516/329
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  353
  329
  14
  10
  285
  6
  291
  1
  487/537
  168
  #f
  516/329
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> a <-) (app - n 1) n) (env ((□? (n iterations)))))\""
  353
  329
  14
  10
  285
  6
  291
  1
  487/537
  168
  #f
  516/329
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (-> (app = (app modulo n 11) 0) <-)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  354
  330
  14
  10
  285
  6
  291
  1
  971/1074
  168
  #f
  259/165
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   ((#f) (-> (app #f) <-))\n   _)\n  (env ((□? (n iterations)))))\""
  355
  331
  14
  10
  285
  6
  291
  1
  323/358
  169
  #t
  519/331
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env ((□? (base exp n)))))\""
  371
  347
  14
  10
  299
  6
  305
  1
  651/724
  175
  #f
  545/347
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   and\n   (-> (app not (app is-trivial-composite? n)) <-)\n   (app is-fermat-prime? n iterations))\n  (env ((□? (byte-size iterations)))))\""
  372
  348
  14
  10
  299
  6
  305
  1
  1949/2172
  175
  #f
  547/348
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))\""
  373
  349
  14
  10
  299
  6
  305
  1
  973/1086
  175
  #f
  551/349
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))\""
  374
  350
  14
  10
  299
  6
  305
  1
  485/543
  175
  #f
  79/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  match
  "\"'(eval\n  (let* (byte-size ... a)\n    (-> (match (app = (app modulo-power a (app - n 1) n) 1) ...) <-))\n  (env ((□? (n iterations)))))\""
  375
  351
  14
  10
  299
  6
  305
  1
  484/543
  175
  #f
  185/117
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 3) (env ((□? (n)))))\""
  376
  352
  14
  10
  299
  6
  305
  1
  965/1086
  175
  #f
  557/352
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 11) <-) 0) (env ((□? (n)))))\""
  377
  353
  14
  10
  299
  6
  305
  1
  481/543
  175
  #f
  559/353
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 5) (env ((□? (n)))))\""
  378
  354
  14
  10
  299
  6
  305
  1
  959/1086
  175
  #f
  187/118
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  match
  "\"'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))\""
  379
  355
  14
  10
  299
  6
  305
  1
  1915/2172
  175
  #f
  563/355
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  380
  356
  14
  10
  299
  6
  305
  1
  1909/2172
  175
  #f
  565/356
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime byte-size (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  381
  357
  14
  10
  299
  6
  305
  1
  635/724
  176
  #t
  566/357
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 2) (env ((□? (n)))))\""
  382
  358
  14
  10
  299
  6
  305
  1
  633/724
  176
  #f
  284/179
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 7) <-) 0) (env ((□? (n)))))\""
  383
  359
  14
  10
  299
  6
  305
  1
  631/724
  176
  #f
  570/359
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app ceiling (-> (app / (app log n) (app log 2)) <-))\n  (env ((□? (n iterations)))))\""
  384
  360
  14
  10
  299
  6
  305
  1
  1889/2172
  176
  #f
  287/180
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (let* (... byte-size (a (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (n iterations)))))\""
  385
  361
  14
  10
  299
  6
  305
  1
  1885/2172
  176
  #f
  576/361
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  394
  370
  14
  10
  307
  6
  313
  1
  941/1086
  182
  #f
  294/185
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))\""
  395
  371
  14
  10
  307
  6
  313
  1
  1879/2172
  183
  #t
  589/371
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env ((□? (base exp n)))))\""
  402
  378
  14
  10
  313
  6
  319
  1
  1879/2172
  185
  #f
  601/378
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   (#f)\n   (_ (-> (app is-fermat-prime? n (app - iterations 1)) <-)))\n  (env ((□? (n iterations)))))\""
  403
  379
  14
  10
  313
  6
  319
  1
  625/724
  185
  #f
  603/379
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power a (app - n 1) (-> n <-)) (env ((□? (n iterations)))))\""
  403
  379
  14
  10
  313
  6
  319
  1
  625/724
  185
  #f
  603/379
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app is-fermat-prime? n (-> (app - iterations 1) <-))\n  (env ((□? (n iterations)))))\""
  403
  379
  14
  10
  313
  6
  319
  1
  625/724
  185
  #f
  603/379
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 19) <-) 0) (env ((□? (n)))))\""
  404
  380
  14
  10
  313
  6
  319
  1
  623/724
  185
  #f
  121/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (match (-> (app = (app modulo-power a (app - n 1) n) 1) <-) (#f) _)\n  (env ((□? (n iterations)))))\""
  405
  381
  14
  10
  313
  6
  319
  1
  1865/2172
  185
  #f
  607/381
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval (app / (-> (app log n) <-) (app log 2)) (env ((□? (n iterations)))))\""
  406
  382
  14
  10
  313
  6
  319
  1
  1861/2172
  185
  #f
  609/382
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app - (-> iterations <-) 1) (env ((□? (n iterations)))))\""
  407
  383
  14
  10
  313
  6
  319
  1
  619/724
  185
  #f
  611/383
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime (-> byte-size <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  408
  384
  14
  10
  313
  6
  319
  1
  1853/2172
  186
  #t
  51/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (match\n   (->\n    (app\n     and\n     (app not (app is-trivial-composite? n))\n     (app is-fermat-prime? n iterations))\n    <-)\n   (#f)\n   _)\n  (env ((□? (byte-size iterations)))))\""
  409
  385
  14
  10
  313
  6
  319
  1
  1849/2172
  186
  #f
  614/385
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app = (-> (app modulo-power a (app - n 1) n) <-) 1)\n  (env ((□? (n iterations)))))\""
  410
  386
  14
  10
  313
  6
  319
  1
  615/724
  186
  #f
  308/193
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (-> (app = (app modulo n 2) 0) <-)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  411
  387
  14
  10
  313
  6
  319
  1
  613/724
  186
  #f
  206/129
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 23) (env ((□? (n)))))\""
  412
  388
  14
  10
  313
  6
  319
  1
  611/724
  186
  #f
  155/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (-> (app = (app modulo n 19) 0) <-)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  413
  389
  14
  10
  313
  6
  319
  1
  609/724
  186
  #f
  622/389
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))\""
  414
  390
  14
  10
  313
  6
  319
  1
  152/181
  186
  #f
  313/195
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (-> (app = (app modulo n 13) 0) <-)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  415
  391
  14
  10
  313
  6
  319
  1
  303/362
  186
  #f
  628/391
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (-> (app = (app modulo n 7) 0) <-)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  416
  392
  14
  10
  313
  6
  319
  1
  151/181
  186
  #f
  45/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  let*
  "\"'(eval\n  (app or (app <= iterations 0) (-> (let* (byte-size ... a) ...) <-))\n  (env ((□? (n iterations)))))\""
  417
  393
  14
  10
  313
  6
  319
  1
  452/543
  186
  #f
  632/393
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (n iterations)))))\""
  417
  393
  14
  10
  313
  6
  319
  1
  452/543
  186
  #f
  632/393
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) (app - iterations 1))\n  (env ((□? (n iterations)))))\""
  417
  393
  14
  10
  313
  6
  319
  1
  452/543
  186
  #f
  632/393
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval (app modulo-power a (-> (app - n 1) <-) n) (env ((□? (n iterations)))))\""
  417
  393
  14
  10
  313
  6
  319
  1
  452/543
  186
  #f
  632/393
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app <= (-> iterations <-) 0) (env ((□? (n iterations)))))\""
  418
  394
  14
  10
  313
  6
  319
  1
  451/543
  186
  #f
  317/197
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   ((#f) (-> (app generate-fermat-prime byte-size iterations) <-))\n   _)\n  (env ((□? (byte-size iterations)))))\""
  419
  395
  14
  10
  313
  6
  319
  1
  150/181
  186
  #f
  636/395
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))\""
  419
  395
  14
  10
  313
  6
  319
  1
  150/181
  186
  #f
  636/395
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))\""
  420
  396
  14
  10
  313
  6
  319
  1
  599/724
  186
  #f
  160/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   and\n   (app not (app is-trivial-composite? n))\n   (-> (app is-fermat-prime? n iterations) <-))\n  (env ((□? (byte-size iterations)))))\""
  421
  397
  14
  10
  313
  6
  319
  1
  1793/2172
  186
  #f
  642/397
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app is-trivial-composite? (-> n <-))\n  (env ((□? (byte-size iterations)))))\""
  422
  398
  14
  10
  313
  6
  319
  1
  1789/2172
  186
  #f
  322/199
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  423
  399
  14
  10
  313
  6
  319
  1
  893/1086
  186
  #f
  34/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))\""
  424
  400
  14
  10
  313
  6
  319
  1
  1783/2172
  187
  #t
  647/400
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 5) <-) 0) (env ((□? (n)))))\""
  425
  401
  14
  10
  313
  6
  319
  1
  1777/2172
  187
  #f
  649/401
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env ((□? (x)))))\""
  425
  401
  14
  10
  313
  6
  319
  1
  1777/2172
  187
  #t
  649/401
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (-> (app = (app modulo n 3) 0) <-)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  426
  402
  14
  10
  313
  6
  319
  1
  1771/2172
  187
  #f
  217/134
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 19) (env ((□? (n)))))\""
  427
  403
  14
  10
  313
  6
  319
  1
  1765/2172
  187
  #f
  653/403
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app log (-> n <-)) (env ((□? (n iterations)))))\""
  428
  404
  14
  10
  313
  6
  319
  1
  587/724
  187
  #f
  655/404
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  letrec*
  "\"'(eval ((top) letrec* (square ... byte-size) ...) (env ()))\""
  429
  405
  14
  10
  314
  6
  320
  1
  591/728
  187
  #f
  73/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))\""
  430
  406
  14
  10
  314
  6
  320
  1
  295/364
  187
  #f
  661/406
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))\""
  430
  406
  14
  10
  314
  6
  320
  1
  295/364
  187
  #f
  661/406
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 23) <-) 0) (env ((□? (n)))))\""
  431
  407
  14
  10
  314
  6
  320
  1
  21/26
  187
  #f
  663/407
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 13) <-) 0) (env ((□? (n)))))\""
  432
  408
  14
  10
  314
  6
  320
  1
  293/364
  187
  #f
  665/408
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))\""
  433
  409
  14
  10
  314
  6
  320
  1
  45/56
  187
  #f
  667/409
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  434
  410
  14
  10
  314
  6
  320
  1
  73/91
  188
  #t
  334/205
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  match
  "\"'(eval\n  (let (n)\n    (->\n     (match\n      (app\n       and\n       (app not (app is-trivial-composite? n))\n       (app is-fermat-prime? n iterations))\n      ...)\n     <-))\n  (env ((□? (byte-size iterations)))))\""
  435
  411
  14
  10
  314
  6
  320
  1
  437/546
  188
  #f
  670/411
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   (#f)\n   (_ (-> n <-)))\n  (env ((□? (byte-size iterations)))))\""
  436
  412
  14
  10
  314
  6
  320
  1
  218/273
  188
  #f
  168/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (-> (app = (app modulo n 5) 0) <-)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  437
  413
  14
  10
  314
  6
  320
  1
  869/1092
  188
  #f
  674/413
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))\""
  437
  413
  14
  10
  314
  6
  320
  1
  869/1092
  188
  #f
  674/413
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 3) <-) 0) (env ((□? (n)))))\""
  438
  414
  14
  10
  314
  6
  320
  1
  433/546
  188
  #f
  338/207
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))\""
  438
  414
  14
  10
  314
  6
  320
  1
  433/546
  188
  #f
  338/207
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (λ (n)\n    (->\n     (app\n      or\n      (app = (app modulo n 2) 0)\n      (app = (app modulo n 3) 0)\n      (app = (app modulo n 5) 0)\n      (app = (app modulo n 7) 0)\n      (app = (app modulo n 11) 0)\n      (app = (app modulo n 13) 0)\n      (app = (app modulo n 17) 0)\n      (app = (app modulo n 19) 0)\n      (app = (app modulo n 23) 0))\n     <-))\n  (env ((□? (n)))))\""
  439
  415
  14
  10
  314
  6
  320
  1
  863/1092
  188
  #f
  678/415
  ((13/2 13/2 0) (7 7 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env ((□? (x)))))\""
  439
  415
  14
  10
  314
  6
  320
  1
  863/1092
  188
  #t
  678/415
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))\""
  102
  85
  12
  5
  66
  5
  71
  1
  30/37
  51
  #t
  141/85
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime byte-size (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  107
  90
  12
  5
  70
  5
  75
  1
  49/60
  56
  #t
  73/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app ceiling (-> (app / (app log n) (app log 2)) <-))\n  (env ((□? (n iterations)))))\""
  122
  105
  12
  5
  84
  5
  89
  1
  119/144
  64
  #f
  34/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))\""
  123
  106
  12
  5
  84
  5
  89
  1
  235/288
  64
  #f
  87/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  let
  "\"'(eval\n  (λ (byte-size iterations) (-> (let (n) ...) <-))\n  (env ((□? (byte-size iterations)))))\""
  326
  303
  14
  9
  276
  6
  282
  1
  663/700
  167
  #f
  469/303
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (match\n   (->\n    (app\n     and\n     (app not (app is-trivial-composite? n))\n     (app is-fermat-prime? n iterations))\n    <-)\n   (#f)\n   _)\n  (env ((□? (byte-size iterations)))))\""
  327
  304
  14
  9
  276
  6
  282
  1
  397/420
  167
  #f
  471/304
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  330
  307
  14
  9
  278
  6
  284
  1
  1979/2100
  170
  #t
  474/307
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) (app - iterations 1))\n  (env ((□? (n iterations)))))\""
  330
  307
  14
  9
  278
  6
  284
  1
  1979/2100
  170
  #f
  474/307
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  letrec*
  "\"'(eval ((top) letrec* (square ... byte-size) ...) (env ()))\""
  334
  311
  14
  9
  282
  6
  288
  1
  2017/2136
  171
  #f
  481/311
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))\""
  337
  314
  14
  9
  284
  6
  290
  1
  2011/2136
  174
  #t
  242/157
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))\""
  344
  321
  14
  9
  290
  6
  296
  1
  127/135
  174
  #f
  166/107
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 13) (env ((□? (n)))))\""
  346
  322
  14
  10
  290
  6
  296
  1
  1013/1080
  174
  #f
  250/161
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))\""
  347
  323
  14
  10
  290
  6
  296
  1
  2023/2160
  174
  #f
  502/323
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 3) (env ((□? (n)))))\""
  348
  324
  14
  10
  290
  6
  296
  1
  2017/2160
  174
  #f
  14/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 13) <-) 0) (env ((□? (n)))))\""
  349
  325
  14
  10
  290
  6
  296
  1
  2011/2160
  174
  #f
  506/325
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env ((□? (x)))))\""
  349
  325
  14
  10
  290
  6
  296
  1
  2011/2160
  174
  #t
  506/325
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 17) <-) 0) (env ((□? (n)))))\""
  350
  326
  14
  10
  290
  6
  296
  1
  401/432
  174
  #f
  254/163
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 23) <-) 0) (env ((□? (n)))))\""
  351
  327
  14
  10
  290
  6
  296
  1
  1999/2160
  174
  #f
  170/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (-> (app = (app modulo n 23) 0) <-))\n  (env ((□? (n)))))\""
  352
  328
  14
  10
  290
  6
  296
  1
  1993/2160
  174
  #f
  64/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app not (-> (app is-trivial-composite? n) <-))\n  (env ((□? (byte-size iterations)))))\""
  353
  329
  14
  10
  290
  6
  296
  1
  221/240
  174
  #f
  514/329
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  353
  329
  14
  10
  290
  6
  296
  1
  221/240
  174
  #f
  514/329
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  let*
  "\"'(eval\n  (app or (app <= iterations 0) (-> (let* (byte-size ... a) ...) <-))\n  (env ((□? (n iterations)))))\""
  354
  330
  14
  10
  290
  6
  296
  1
  397/432
  174
  #f
  86/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (λ (n)\n    (->\n     (app\n      or\n      (app = (app modulo n 2) 0)\n      (app = (app modulo n 3) 0)\n      (app = (app modulo n 5) 0)\n      (app = (app modulo n 7) 0)\n      (app = (app modulo n 11) 0)\n      (app = (app modulo n 13) 0)\n      (app = (app modulo n 17) 0)\n      (app = (app modulo n 19) 0)\n      (app = (app modulo n 23) 0))\n     <-))\n  (env ((□? (n)))))\""
  355
  331
  14
  10
  290
  6
  296
  1
  1979/2160
  174
  #f
  518/331
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))\""
  355
  331
  14
  10
  290
  6
  296
  1
  1979/2160
  174
  #f
  518/331
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app <= (-> iterations <-) 0) (env ((□? (n iterations)))))\""
  356
  332
  14
  10
  290
  6
  296
  1
  395/432
  174
  #f
  130/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env ((□? (x)))))\""
  356
  332
  14
  10
  290
  6
  296
  1
  395/432
  174
  #t
  130/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))\""
  357
  333
  14
  10
  290
  6
  296
  1
  493/540
  174
  #f
  58/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (letrec*\n   (square ... byte-size)\n   (-> (app generate-fermat-prime byte-size iterations) <-))\n  (env ()))\""
  357
  333
  14
  10
  290
  6
  296
  1
  493/540
  174
  #f
  58/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))\""
  358
  334
  14
  10
  290
  6
  296
  1
  1969/2160
  174
  #f
  263/167
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? n (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  358
  334
  14
  10
  290
  6
  296
  1
  1969/2160
  174
  #t
  263/167
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))\""
  359
  335
  14
  10
  290
  6
  296
  1
  983/1080
  174
  #f
  106/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 2) (env ((□? (n)))))\""
  360
  336
  14
  10
  290
  6
  296
  1
  49/54
  174
  #f
  19/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (n iterations)))))\""
  360
  336
  14
  10
  290
  6
  296
  1
  49/54
  174
  #f
  19/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (byte-size iterations)))))\""
  360
  336
  14
  10
  290
  6
  296
  1
  49/54
  174
  #t
  19/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  match
  "\"'(eval\n  (let (n)\n    (->\n     (match\n      (app\n       and\n       (app not (app is-trivial-composite? n))\n       (app is-fermat-prime? n iterations))\n      ...)\n     <-))\n  (env ((□? (byte-size iterations)))))\""
  361
  337
  14
  10
  290
  6
  296
  1
  163/180
  174
  #f
  534/337
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app or (-> (app <= iterations 0) <-) (let* (byte-size ... a) ...))\n  (env ((□? (n iterations)))))\""
  362
  338
  14
  10
  290
  6
  296
  1
  122/135
  174
  #f
  268/169
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  370
  346
  14
  10
  296
  6
  302
  1
  281/312
  174
  #f
  276/173
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (-> (app = (app modulo n 2) 0) <-)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  371
  347
  14
  10
  296
  6
  302
  1
  1961/2184
  174
  #f
  554/347
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app log (-> n <-)) (env ((□? (n iterations)))))\""
  372
  348
  14
  10
  296
  6
  302
  1
  1957/2184
  174
  #f
  139/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (let* (... byte-size (a (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (n iterations)))))\""
  373
  349
  14
  10
  296
  6
  302
  1
  93/104
  174
  #f
  558/349
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   and\n   (-> (app not (app is-trivial-composite? n)) <-)\n   (app is-fermat-prime? n iterations))\n  (env ((□? (byte-size iterations)))))\""
  374
  350
  14
  10
  296
  6
  302
  1
  1949/2184
  174
  #f
  8/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   and\n   (app not (app is-trivial-composite? n))\n   (-> (app is-fermat-prime? n iterations) <-))\n  (env ((□? (byte-size iterations)))))\""
  375
  351
  14
  10
  296
  6
  302
  1
  1945/2184
  174
  #f
  562/351
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 3) <-) 0) (env ((□? (n)))))\""
  376
  352
  14
  10
  296
  6
  302
  1
  277/312
  174
  #f
  141/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 2) <-) 0) (env ((□? (n)))))\""
  377
  353
  14
  10
  296
  6
  302
  1
  1933/2184
  174
  #f
  566/353
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 19) <-) 0) (env ((□? (n)))))\""
  378
  354
  14
  10
  296
  6
  302
  1
  1927/2184
  174
  #f
  284/177
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   (#f)\n   (_ (-> n <-)))\n  (env ((□? (byte-size iterations)))))\""
  379
  355
  14
  10
  296
  6
  302
  1
  641/728
  174
  #f
  114/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))\""
  380
  356
  14
  10
  296
  6
  302
  1
  80/91
  174
  #f
  287/178
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power a (app - n 1) (-> n <-)) (env ((□? (n iterations)))))\""
  380
  356
  14
  10
  296
  6
  302
  1
  80/91
  174
  #f
  287/178
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (let (... () (n (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (byte-size iterations)))))\""
  380
  356
  14
  10
  296
  6
  302
  1
  80/91
  174
  #f
  287/178
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (-> (app = (app modulo n 5) 0) <-)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  381
  357
  14
  10
  296
  6
  302
  1
  319/364
  174
  #f
  192/119
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env ((□? (base exp n)))))\""
  388
  364
  14
  10
  302
  6
  308
  1
  7/8
  178
  #f
  293/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app - (-> iterations <-) 1) (env ((□? (n iterations)))))\""
  389
  365
  14
  10
  302
  6
  308
  1
  1907/2184
  178
  #f
  588/365
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (-> (app = (app modulo n 19) 0) <-)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  390
  366
  14
  10
  302
  6
  308
  1
  1901/2184
  178
  #f
  295/183
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval (app / (app log n) (-> (app log 2) <-)) (env ((□? (n iterations)))))\""
  391
  367
  14
  10
  302
  6
  308
  1
  271/312
  178
  #f
  592/367
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 5) (env ((□? (n)))))\""
  392
  368
  14
  10
  302
  6
  308
  1
  1891/2184
  178
  #f
  297/184
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 7) (env ((□? (n)))))\""
  393
  369
  14
  10
  302
  6
  308
  1
  145/168
  178
  #f
  596/369
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 23) (env ((□? (n)))))\""
  394
  370
  14
  10
  302
  6
  308
  1
  1879/2184
  178
  #f
  299/185
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))\""
  395
  371
  14
  10
  302
  6
  308
  1
  67/78
  178
  #f
  600/371
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   ((#f) (-> (app #f) <-))\n   _)\n  (env ((□? (n iterations)))))\""
  396
  372
  14
  10
  302
  6
  308
  1
  6/7
  179
  #t
  601/372
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))\""
  397
  373
  14
  10
  302
  6
  308
  1
  89/104
  179
  #f
  603/373
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))\""
  397
  373
  14
  10
  302
  6
  308
  1
  89/104
  179
  #t
  603/373
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 7) <-) 0) (env ((□? (n)))))\""
  398
  374
  14
  10
  302
  6
  308
  1
  621/728
  179
  #f
  55/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  match
  "\"'(eval\n  (let* (byte-size ... a)\n    (-> (match (app = (app modulo-power a (app - n 1) n) 1) ...) <-))\n  (env ((□? (n iterations)))))\""
  399
  375
  14
  10
  302
  6
  308
  1
  143/168
  179
  #f
  607/375
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 11) (env ((□? (n)))))\""
  400
  376
  14
  10
  302
  6
  308
  1
  1853/2184
  179
  #f
  609/376
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))\""
  401
  377
  14
  10
  302
  6
  308
  1
  1847/2184
  179
  #f
  47/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   (#f)\n   (_ (-> (app is-fermat-prime? n (app - iterations 1)) <-)))\n  (env ((□? (n iterations)))))\""
  402
  378
  14
  10
  302
  6
  308
  1
  1843/2184
  179
  #f
  613/378
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 19) (env ((□? (n)))))\""
  403
  379
  14
  10
  302
  6
  308
  1
  1837/2184
  179
  #f
  615/379
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval (app modulo-power a (-> (app - n 1) <-) n) (env ((□? (n iterations)))))\""
  403
  379
  14
  10
  302
  6
  308
  1
  1837/2184
  179
  #f
  615/379
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 17) (env ((□? (n)))))\""
  404
  380
  14
  10
  302
  6
  308
  1
  1831/2184
  179
  #f
  617/380
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app is-trivial-composite? (-> n <-))\n  (env ((□? (byte-size iterations)))))\""
  405
  381
  14
  10
  302
  6
  308
  1
  87/104
  179
  #f
  619/381
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (λ (n iterations)\n    (-> (app or (app <= iterations 0) (let* (byte-size ... a) ...)) <-))\n  (env ((□? (n iterations)))))\""
  406
  382
  14
  10
  302
  6
  308
  1
  1823/2184
  179
  #f
  621/382
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 11) <-) 0) (env ((□? (n)))))\""
  407
  383
  14
  10
  302
  6
  308
  1
  1817/2184
  179
  #f
  623/383
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> a <-) (app - n 1) n) (env ((□? (n iterations)))))\""
  407
  383
  14
  10
  302
  6
  308
  1
  1817/2184
  179
  #f
  623/383
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))\""
  408
  384
  14
  10
  302
  6
  308
  1
  907/1092
  179
  #f
  625/384
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))\""
  408
  384
  14
  10
  302
  6
  308
  1
  907/1092
  179
  #f
  625/384
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (n iterations)))))\""
  409
  385
  14
  10
  302
  6
  308
  1
  905/1092
  179
  #f
  57/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (-> (app = (app modulo n 11) 0) <-)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  410
  386
  14
  10
  302
  6
  308
  1
  451/546
  179
  #f
  629/386
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 5) <-) 0) (env ((□? (n)))))\""
  411
  387
  14
  10
  302
  6
  308
  1
  899/1092
  179
  #f
  631/387
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   ((#f) (-> (app generate-fermat-prime byte-size iterations) <-))\n   _)\n  (env ((□? (byte-size iterations)))))\""
  412
  388
  14
  10
  302
  6
  308
  1
  23/28
  179
  #f
  633/388
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (-> (app = (app modulo n 3) 0) <-)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  413
  389
  14
  10
  302
  6
  308
  1
  149/182
  179
  #f
  635/389
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (-> (app = (app modulo n 13) 0) <-)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  414
  390
  14
  10
  302
  6
  308
  1
  297/364
  179
  #f
  49/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval (app / (-> (app log n) <-) (app log 2)) (env ((□? (n iterations)))))\""
  415
  391
  14
  10
  302
  6
  308
  1
  127/156
  179
  #f
  639/391
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime (-> byte-size <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  416
  392
  14
  10
  302
  6
  308
  1
  887/1092
  180
  #t
  80/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  423
  399
  14
  10
  308
  6
  314
  1
  887/1092
  184
  #f
  650/399
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  match
  "\"'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))\""
  424
  400
  14
  10
  308
  6
  314
  1
  253/312
  184
  #f
  163/100
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (-> (app = (app modulo n 7) 0) <-)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  425
  401
  14
  10
  308
  6
  314
  1
  1765/2184
  184
  #f
  654/401
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app = (-> (app modulo-power a (app - n 1) n) <-) 1)\n  (env ((□? (n iterations)))))\""
  426
  402
  14
  10
  308
  6
  314
  1
  587/728
  184
  #f
  328/201
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app is-fermat-prime? n (-> (app - iterations 1) <-))\n  (env ((□? (n iterations)))))\""
  426
  402
  14
  10
  308
  6
  314
  1
  587/728
  184
  #f
  328/201
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))\""
  426
  402
  14
  10
  308
  6
  314
  1
  587/728
  184
  #f
  328/201
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (-> (app = (app modulo n 17) 0) <-)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  427
  403
  14
  10
  308
  6
  314
  1
  45/56
  184
  #f
  658/403
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env ((□? (base exp n)))))\""
  434
  410
  14
  10
  314
  6
  320
  1
  45/56
  186
  #f
  67/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log n) (app log 2))) <-))\n         a\n         ...)\n    ...)\n  (env ((□? (n iterations)))))\""
  435
  411
  14
  10
  314
  6
  320
  1
  1751/2184
  186
  #f
  224/137
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  app
  "\"'(eval\n  (match (-> (app = (app modulo-power a (app - n 1) n) 1) <-) (#f) _)\n  (env ((□? (n iterations)))))\""
  436
  412
  14
  10
  314
  6
  320
  1
  1747/2184
  186
  #f
  337/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  1
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  437
  413
  14
  10
  314
  6
  320
  1
  218/273
  186
  #f
  676/413
  ((0 0 0) (0 0 0) (0 0 0)))
