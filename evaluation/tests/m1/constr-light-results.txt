'(expression: (let ((x (app cons 1 nil))) (match x ((cons 1 n) n) (_ x))))
(list 'query: '(top) (lenv '()))
'(clos/con: (nil))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(let ((-> x = (app cons 1 nil) <-)) bod) (lenv '()))
'(clos/con: (cons))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app cons 1 (-> nil <-)) (lenv '()))
'(clos/con: (nil))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app cons (-> 1 <-) nil) (lenv '()))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list 'query: '(app (-> cons <-) 1 nil) (lenv '()))
'(clos/con: (cons))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(let (x) (-> (match x ((cons 1 n) n) (_ x)) <-)) (lenv '()))
'(clos/con: (nil))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(match x ((cons 1 n) n) (-> _ x <-)) (lenv '()))
'(clos/con: (cons))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(match x (-> (cons 1 n) n <-) (_ x)) (lenv '()))
'(clos/con: (nil))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(match (-> x <-) ((cons 1 n) n) (_ x)) (lenv '()))
'(clos/con: (cons))
'(literals: (⊥ ⊥ ⊥ ⊥))
