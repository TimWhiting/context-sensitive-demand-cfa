'(clean-cache
  tic-tac-toe
  1
  353
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  37/7
  ((1/2 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  37/7
  ((1 1 0) (1 1 0) (1/2 1 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  18
  12
  3
  3
  9
  1
  10
  1
  17/24
  11
  #f
  61/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  19
  12
  3
  4
  9
  1
  10
  1
  17/24
  11
  #f
  61/12
  ((1 1 0) (1 1 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  58
  44
  7
  7
  17
  2
  19
  1
  13/60
  32
  #f
  263/44
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  19
  12
  3
  4
  9
  1
  10
  1
  17/24
  11
  #f
  61/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  18
  12
  3
  3
  9
  1
  10
  1
  17/24
  11
  #f
  61/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  54
  42
  7
  5
  12
  2
  14
  1
  7/60
  30
  #f
  251/42
  ((8 17/2 0) (7 7 0) (7 7 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  5
  4
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  38
  26
  7
  5
  10
  2
  12
  1
  17/96
  18
  #f
  79/13
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  38
  26
  7
  5
  10
  2
  12
  1
  17/96
  18
  #f
  79/13
  ((9/2 9/2 0) (9/2 9/2 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  54
  42
  7
  5
  12
  2
  14
  1
  7/60
  30
  #f
  251/42
  ((7 7 0) (7 7 0) (7 15/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  39
  27
  7
  5
  10
  2
  12
  1
  1/6
  18
  #f
  56/9
  ((5 5 0) (5 11/2 0) (6 6 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  36
  22
  6
  8
  7
  2
  9
  1
  7/16
  18
  #f
  57/11
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  65
  25
  28
  12
  17
  14
  31
  1
  11/18
  24
  #f
  126/25
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  81
  34
  31
  16
  18
  15
  33
  1
  1/2
  30
  #f
  175/34
  ((15/2 15/2 0) (7 15/2 0) (7 15/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  39
  16
  9
  14
  0
  3
  3
  1
  0
  9
  #f
  87/16
  ((9/2 9/2 0) (4 4 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  5
  2
  5
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  38
  15
  9
  14
  0
  3
  3
  1
  0
  9
  #f
  27/5
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  56
  30
  11
  15
  7
  4
  11
  1
  7/18
  18
  #f
  27/5
  ((6 13/2 0) (13/2 13/2 0) (6 13/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((1/2 1/2 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  39
  16
  9
  14
  0
  3
  3
  1
  0
  9
  #f
  87/16
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  5
  2
  5
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  81
  34
  31
  16
  18
  15
  33
  1
  1/2
  30
  #f
  175/34
  ((7 15/2 0) (8 8 0) (15/2 15/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  5
  2
  5
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  2
  1
  3
  1
  1/3
  6
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  57
  31
  11
  15
  7
  4
  11
  1
  7/19
  18
  #f
  168/31
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 7 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  5
  2
  5
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  56
  30
  11
  15
  7
  4
  11
  1
  7/18
  18
  #f
  27/5
  ((13/2 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  38
  15
  9
  14
  0
  3
  3
  1
  0
  9
  #f
  27/5
  ((4 4 0) (9/2 9/2 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (1/2 1/2 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  57
  31
  11
  15
  7
  4
  11
  1
  7/19
  18
  #f
  168/31
  ((13/2 13/2 0) (7 15/2 0) (17/2 19/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  5
  2
  5
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  2
  1
  3
  1
  1/3
  6
  #t
  5
  ((1/2 1/2 0) (1 3/2 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  5
  2
  5
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  11
  5
  3
  3
  0
  1
  1
  1
  0
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  88
  63
  14
  11
  48
  8
  56
  1
  29/37
  50
  #t
  317/63
  ((23/2 23/2 0) (11 23/2 0) (11 23/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  39
  26
  9
  4
  23
  5
  28
  1
  19/22
  22
  #f
  68/13
  ((3 3 0) (5/2 5/2 0) (5/2 3 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  39
  26
  9
  4
  23
  5
  28
  1
  19/22
  22
  #f
  68/13
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  11
  3
  3
  5
  0
  1
  1
  1
  0
  2
  #f
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  25
  18
  4
  3
  14
  1
  15
  1
  19/24
  14
  #f
  49/9
  ((5/2 3 0) (5/2 3 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  32
  25
  4
  3
  20
  1
  21
  1
  31/38
  20
  #f
  27/5
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  14
  7
  4
  3
  3
  1
  4
  1
  3/16
  4
  #f
  38/7
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  13
  6
  4
  3
  3
  1
  4
  1
  1/4
  4
  #f
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  25
  18
  4
  3
  14
  1
  15
  1
  19/24
  14
  #f
  49/9
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  46
  26
  13
  7
  23
  5
  28
  1
  19/22
  22
  #f
  68/13
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  46
  26
  13
  7
  23
  5
  28
  1
  19/22
  22
  #f
  68/13
  ((5/2 5/2 0) (5/2 5/2 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  27
  14
  4
  9
  4
  1
  5
  1
  1/6
  14
  #t
  36/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  131
  89
  22
  20
  21
  7
  28
  1
  67/324
  52
  #f
  511/89
  ((19 39/2 0) (37/2 19 0) (19 39/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  62
  39
  15
  8
  32
  6
  38
  1
  28/33
  31
  #f
  209/39
  ((9/2 9/2 0) (4 4 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  46
  26
  13
  7
  23
  5
  28
  1
  19/22
  22
  #f
  68/13
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  46
  26
  13
  7
  23
  5
  28
  1
  19/22
  22
  #f
  68/13
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  26
  14
  4
  8
  4
  1
  5
  1
  1/6
  14
  #t
  36/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  131
  89
  22
  20
  21
  7
  28
  1
  67/324
  52
  #f
  511/89
  ((20 41/2 0) (39/2 39/2 0) (43/2 22 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  46
  26
  13
  7
  23
  5
  28
  1
  19/22
  22
  #f
  68/13
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  46
  26
  13
  7
  23
  5
  28
  1
  19/22
  22
  #f
  68/13
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  26
  14
  4
  8
  4
  1
  5
  1
  1/6
  14
  #t
  36/7
  ((2 2 0) (3/2 2 0) (3/2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  132
  89
  22
  21
  21
  7
  28
  1
  67/324
  52
  #f
  511/89
  ((20 21 0) (20 41/2 0) (21 43/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  39
  26
  9
  4
  23
  5
  28
  1
  19/22
  22
  #f
  68/13
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  46
  26
  13
  7
  23
  5
  28
  1
  19/22
  22
  #f
  68/13
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  27
  14
  4
  9
  4
  1
  5
  1
  1/6
  14
  #t
  36/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  132
  89
  22
  21
  21
  7
  28
  1
  67/324
  52
  #f
  511/89
  ((39/2 20 0) (21 43/2 0) (45/2 47/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  46
  26
  13
  7
  23
  5
  28
  1
  19/22
  22
  #f
  68/13
  ((3 3 0) (3 3 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  39
  26
  9
  4
  23
  5
  28
  1
  19/22
  22
  #f
  68/13
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  27
  14
  4
  9
  4
  1
  5
  1
  1/6
  14
  #t
  36/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   xs\n   (nil)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  44
  30
  8
  6
  22
  1
  23
  1
  39/64
  26
  #f
  79/15
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  28
  14
  8
  6
  7
  1
  8
  1
  1/8
  12
  #f
  40/7
  ((6 15/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  51
  37
  8
  6
  28
  1
  29
  1
  63/92
  32
  #f
  195/37
  ((6 6 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  29
  15
  8
  6
  7
  1
  8
  1
  7/64
  12
  #f
  6
  ((4 4 0) (4 4 0) (11/2 11/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match xs ((nil) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (nil) (cons x rest-xs)) (env ((□? (f xs)))))\""
  44
  30
  8
  6
  22
  1
  23
  1
  39/64
  26
  #f
  79/15
  ((5 5 0) (11/2 11/2 0) (5 11/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   xs\n   (nil)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  24
  18
  4
  2
  14
  1
  15
  1
  19/24
  14
  #f
  49/9
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  12
  6
  4
  2
  3
  1
  4
  1
  1/4
  4
  #f
  16/3
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  31
  25
  4
  2
  20
  1
  21
  1
  31/38
  20
  #f
  27/5
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  13
  7
  4
  2
  3
  1
  4
  1
  3/16
  4
  #f
  38/7
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match xs ((nil) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (nil) (cons x rest-xs)) (env ((□? (f xs)))))\""
  24
  18
  4
  2
  14
  1
  15
  1
  19/24
  14
  #f
  49/9
  ((2 2 0) (5/2 5/2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  62
  39
  15
  8
  30
  6
  36
  1
  4/5
  31
  #f
  209/39
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  51
  28
  15
  8
  23
  6
  29
  1
  19/23
  22
  #f
  75/14
  ((3 3 0) (7/2 7/2 0) (3 7/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  22
  9
  5
  8
  0
  1
  1
  1
  0
  8
  #f
  16/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  71
  30
  9
  32
  4
  2
  6
  1
  1/8
  30
  #t
  16/3
  ((8 8 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  136
  68
  42
  26
  21
  18
  39
  1
  17/48
  56
  #f
  359/68
  ((39/2 20 0) (21 43/2 0) (41/2 21 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  131
  89
  22
  20
  21
  7
  28
  1
  67/324
  52
  #f
  511/89
  ((20 41/2 0) (21 43/2 0) (43/2 45/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  113
  55
  37
  21
  21
  17
  38
  1
  5/12
  48
  #f
  57/11
  ((13 27/2 0) (13 13 0) (13 27/2 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  33
  19
  6
  8
  5
  2
  7
  1
  7/26
  15
  #f
  99/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  25
  11
  6
  8
  0
  2
  2
  1
  0
  9
  #f
  57/11
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match xs ((nil) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  12
  8
  0
  4
  4
  0
  4
  1
  1/2
  8
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  32
  18
  4
  10
  6
  1
  7
  1
  1/4
  18
  #t
  46/9
  ((3/2 3/2 0) (3/2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  10
  7
  0
  3
  2
  0
  2
  1
  2/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  22
  12
  2
  8
  3
  0
  3
  1
  1/4
  12
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  19
  9
  4
  6
  0
  1
  1
  1
  0
  8
  #f
  46/9
  ((1 1 0) (1/2 1/2 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  24
  11
  4
  9
  0
  1
  1
  1
  0
  10
  #t
  56/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  14
  7
  4
  3
  3
  1
  4
  1
  3/16
  4
  #f
  38/7
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  10
  7
  0
  3
  4
  0
  4
  1
  4/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (nil) (cons x rest-xs)) (env ((□? (f xs)))))\""
  24
  18
  4
  2
  14
  1
  15
  1
  19/24
  14
  #f
  49/9
  ((2 2 0) (2 2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  27
  20
  4
  3
  14
  1
  15
  1
  19/28
  16
  #t
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  29
  21
  4
  4
  14
  1
  15
  1
  19/30
  17
  #t
  113/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  32
  23
  4
  5
  14
  1
  15
  1
  19/34
  19
  #t
  123/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  51
  35
  7
  9
  23
  2
  25
  1
  91/150
  30
  #f
  184/35
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  39
  26
  9
  4
  23
  5
  28
  1
  19/22
  22
  #f
  68/13
  ((5/2 5/2 0) (2 5/2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  120
  60
  40
  20
  41
  20
  61
  1
  15/22
  52
  #f
  311/60
  ((8 17/2 0) (15/2 8 0) (7 15/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  57
  31
  11
  15
  7
  4
  11
  1
  7/19
  18
  #f
  168/31
  ((7 7 0) (13/2 13/2 0) (7 7 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  89
  56
  15
  18
  27
  5
  32
  1
  45/76
  38
  #f
  303/56
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  5
  2
  5
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  15
  7
  2
  6
  1
  0
  1
  1
  1/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  28
  14
  8
  6
  7
  1
  8
  1
  1/8
  12
  #f
  40/7
  ((7/2 4 0) (7/2 7/2 0) (3 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  32
  16
  8
  8
  7
  1
  8
  1
  7/72
  14
  #t
  45/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  32
  22
  4
  6
  16
  1
  17
  1
  23/32
  18
  #f
  59/11
  ((5/2 3 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  56
  44
  7
  5
  14
  2
  16
  1
  11/64
  32
  #f
  261/44
  ((15/2 15/2 0) (7 15/2 0) (7 7 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  68
  49
  9
  10
  15
  2
  17
  1
  13/74
  37
  #t
  286/49
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  112
  73
  22
  17
  36
  7
  43
  1
  47/114
  57
  #f
  412/73
  ((3 3 0) (3 3 0) (5/2 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  56
  30
  11
  15
  7
  4
  11
  1
  7/18
  18
  #f
  27/5
  ((6 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  59
  33
  11
  15
  7
  4
  11
  1
  7/20
  21
  #t
  59/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  95
  59
  18
  18
  17
  6
  23
  1
  59/216
  39
  #f
  335/59
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  99
  63
  18
  18
  17
  6
  23
  1
  59/228
  43
  #t
  355/63
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  106
  69
  18
  19
  22
  6
  28
  1
  83/258
  49
  #t
  385/69
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  111
  72
  18
  21
  24
  6
  30
  1
  95/276
  52
  #t
  50/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  114
  74
  18
  22
  24
  6
  30
  1
  89/276
  54
  #t
  205/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  132
  89
  22
  21
  21
  7
  28
  1
  67/324
  52
  #f
  511/89
  ((19 39/2 0) (39/2 20 0) (39/2 39/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  188
  121
  43
  24
  42
  19
  61
  1
  527/1656
  80
  #f
  675/121
  ((17/2 9 0) (17/2 9 0) (8 17/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  18
  12
  3
  3
  9
  1
  10
  1
  17/24
  11
  #f
  61/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  17
  9
  4
  4
  0
  1
  1
  1
  0
  8
  #f
  46/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  38
  26
  7
  5
  10
  2
  12
  1
  17/96
  18
  #f
  79/13
  ((5 5 0) (9/2 9/2 0) (5 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  46
  26
  13
  7
  23
  5
  28
  1
  19/22
  22
  #f
  68/13
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  50
  29
  13
  8
  23
  5
  28
  1
  19/25
  25
  #t
  151/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  56
  34
  13
  9
  25
  5
  30
  1
  7/10
  30
  #t
  88/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  76
  45
  18
  13
  25
  6
  31
  1
  7/13
  40
  #f
  236/45
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  82
  49
  18
  15
  26
  6
  32
  1
  1/2
  44
  #t
  256/49
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  149
  89
  25
  35
  27
  7
  34
  1
  7/16
  84
  #t
  491/89
  ((12 25/2 0) (12 12 0) (12 12 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  149
  89
  25
  35
  27
  7
  34
  1
  7/16
  84
  #t
  491/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  193
  114
  34
  45
  27
  10
  37
  1
  21/58
  102
  #f
  623/114
  ((8 8 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   xs\n   (nil)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  37
  22
  6
  9
  7
  2
  9
  1
  11/32
  18
  #f
  57/11
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  39
  16
  9
  14
  0
  3
  3
  1
  0
  9
  #f
  87/16
  ((9/2 5 0) (9/2 9/2 0) (9/2 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  10
  7
  0
  3
  2
  0
  2
  1
  2/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  35
  25
  4
  6
  16
  1
  17
  1
  23/38
  21
  #f
  133/25
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  56
  35
  8
  13
  18
  2
  20
  1
  23/54
  31
  #t
  37/7
  ((3/2 3/2 0) (3/2 2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  7
  5
  0
  2
  0
  0
  0
  1
  0
  4
  #t
  24/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  20
  12
  4
  4
  3
  1
  4
  1
  1/12
  8
  #f
  31/6
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  23
  14
  4
  5
  3
  1
  4
  1
  3/44
  10
  #t
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  26
  16
  4
  6
  3
  1
  4
  1
  3/52
  12
  #t
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  9
  6
  0
  3
  2
  0
  2
  1
  1/3
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  71
  45
  15
  11
  34
  6
  40
  1
  10/13
  37
  #f
  239/45
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   xs\n   (nil)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  136
  68
  42
  26
  21
  18
  39
  1
  17/48
  56
  #f
  359/68
  ((39/2 20 0) (20 41/2 0) (21 43/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  175
  101
  46
  28
  36
  19
  55
  1
  1/3
  77
  #f
  550/101
  ((11/2 6 0) (6 6 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  12
  8
  0
  4
  2
  0
  2
  1
  1/4
  7
  #t
  39/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  52
  30
  13
  9
  23
  5
  28
  1
  19/26
  26
  #f
  26/5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  60
  33
  15
  12
  23
  6
  29
  1
  19/29
  29
  #t
  57/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  113
  55
  37
  21
  21
  17
  38
  1
  5/12
  48
  #f
  57/11
  ((27/2 27/2 0) (29/2 15 0) (27/2 27/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  114
  56
  37
  21
  21
  17
  38
  1
  35/87
  49
  #t
  145/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  116
  58
  37
  21
  21
  17
  38
  1
  35/93
  51
  #t
  150/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  39
  27
  7
  5
  10
  2
  12
  1
  1/6
  18
  #f
  56/9
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  59
  33
  11
  15
  7
  4
  11
  1
  1/3
  20
  #f
  178/33
  ((13/2 7 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  62
  35
  11
  16
  7
  4
  11
  1
  7/23
  22
  #t
  188/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  132
  90
  22
  20
  21
  7
  28
  1
  67/330
  52
  #f
  517/90
  ((27/2 27/2 0) (15 31/2 0) (27/2 27/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  81
  34
  31
  16
  18
  15
  33
  1
  1/2
  30
  #f
  175/34
  ((15/2 15/2 0) (15/2 15/2 0) (7 15/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  84
  36
  31
  17
  18
  15
  33
  1
  11/24
  32
  #t
  185/36
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  85
  37
  31
  17
  18
  15
  33
  1
  11/25
  32
  #f
  191/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  2
  1
  3
  1
  1/3
  6
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  37/7
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  47
  27
  13
  7
  23
  5
  28
  1
  19/23
  23
  #f
  47/9
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  54
  39
  8
  7
  28
  1
  29
  1
  63/100
  34
  #f
  205/39
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  58
  41
  8
  9
  28
  1
  29
  1
  7/12
  36
  #t
  215/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  31
  25
  4
  2
  20
  1
  21
  1
  31/38
  20
  #f
  27/5
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match xs ((nil) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  8
  4
  0
  4
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  10
  6
  0
  4
  2
  0
  2
  1
  1/3
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  38
  15
  9
  14
  0
  3
  3
  1
  0
  9
  #f
  27/5
  ((9/2 9/2 0) (4 4 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  41
  17
  9
  15
  0
  3
  3
  1
  0
  11
  #t
  91/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  48
  22
  9
  17
  3
  3
  6
  1
  3/16
  16
  #t
  58/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  46
  26
  13
  7
  23
  5
  28
  1
  19/22
  22
  #f
  68/13
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  58
  31
  15
  12
  24
  5
  29
  1
  20/27
  27
  #t
  161/31
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  7
  4
  0
  3
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  73
  32
  9
  32
  4
  2
  6
  1
  1/9
  32
  #t
  85/16
  ((8 8 0) (15/2 15/2 0) (15/2 8 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  116
  58
  22
  36
  27
  7
  34
  1
  21/40
  54
  #f
  153/29
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  131
  89
  22
  20
  21
  7
  28
  1
  67/324
  52
  #f
  511/89
  ((39/2 20 0) (20 41/2 0) (20 41/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  7
  2
  6
  1
  0
  1
  1
  1/7
  7
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  17
  9
  2
  6
  1
  0
  1
  1
  1/9
  9
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  22
  12
  2
  8
  3
  0
  3
  1
  1/4
  12
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  2
  1
  3
  1
  1/3
  6
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  15
  8
  2
  5
  2
  1
  3
  1
  1/4
  8
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  131
  89
  22
  20
  21
  7
  28
  1
  67/324
  52
  #f
  511/89
  ((43/2 22 0) (21 43/2 0) (19 39/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  27
  14
  4
  9
  4
  1
  5
  1
  1/6
  14
  #t
  36/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  30
  16
  4
  10
  4
  1
  5
  1
  1/7
  16
  #t
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  34
  19
  4
  11
  6
  1
  7
  1
  4/17
  19
  #t
  97/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  19
  12
  3
  4
  9
  1
  10
  1
  17/24
  11
  #f
  61/12
  ((1 3/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  22
  14
  3
  5
  9
  1
  10
  1
  17/30
  13
  #t
  71/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  27
  16
  3
  8
  9
  1
  10
  1
  17/36
  15
  #t
  81/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  64
  43
  12
  9
  32
  6
  38
  1
  37/51
  38
  #f
  223/43
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  100
  65
  18
  17
  39
  8
  47
  1
  19/30
  56
  #f
  337/65
  ((3 3 0) (7/2 7/2 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  88
  63
  14
  11
  48
  8
  56
  1
  29/37
  50
  #t
  317/63
  ((11 23/2 0) (13 14 0) (14 29/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  13
  6
  4
  3
  3
  1
  4
  1
  1/4
  4
  #f
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  25
  11
  6
  8
  0
  2
  2
  1
  0
  9
  #f
  57/11
  ((5/2 5/2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  8
  4
  0
  4
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  27
  14
  4
  9
  4
  1
  5
  1
  1/6
  14
  #t
  36/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  73
  44
  16
  13
  33
  9
  42
  1
  23/34
  40
  #f
  57/11
  ((7/2 4 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  15
  8
  4
  3
  3
  1
  4
  1
  3/20
  6
  #f
  21/4
  ((1 1 0) (3/2 3/2 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  10
  5
  2
  3
  1
  1
  2
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  20
  10
  5
  5
  1
  2
  3
  1
  1/10
  10
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  10
  7
  0
  3
  2
  0
  2
  1
  2/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  24
  18
  4
  2
  14
  1
  15
  1
  19/24
  14
  #f
  49/9
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  62
  33
  13
  16
  14
  4
  18
  1
  19/42
  23
  #f
  179/33
  ((4 9/2 0) (9/2 9/2 0) (4 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  23
  12
  4
  7
  2
  1
  3
  1
  1/6
  11
  #f
  31/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  39
  26
  9
  4
  23
  5
  28
  1
  19/22
  22
  #f
  68/13
  ((2 2 0) (2 2 0) (2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  69
  38
  22
  9
  32
  10
  42
  1
  4/5
  30
  #f
  101/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  83
  47
  26
  10
  36
  12
  48
  1
  8/11
  38
  #f
  249/47
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  8
  6
  0
  2
  2
  0
  2
  1
  1/3
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  54
  42
  7
  5
  12
  2
  14
  1
  7/60
  30
  #f
  251/42
  ((7 15/2 0) (7 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  11
  3
  3
  5
  0
  1
  1
  1
  0
  2
  #f
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  18
  8
  3
  7
  2
  1
  3
  1
  1/4
  7
  #t
  41/8
  ((0 0 0) (0 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  22
  11
  3
  8
  4
  1
  5
  1
  4/11
  10
  #t
  56/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  80
  46
  14
  20
  14
  5
  19
  1
  73/174
  33
  #f
  249/46
  ((17/2 9 0) (15/2 8 0) (8 8 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  47
  32
  8
  7
  22
  1
  23
  1
  13/24
  28
  #f
  21/4
  ((11/2 11/2 0) (11/2 11/2 0) (5 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  5
  2
  5
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  145
  96
  25
  24
  23
  8
  31
  1
  38/177
  58
  #f
  547/96
  ((20 20 0) (45/2 23 0) (43/2 22 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  148
  99
  25
  24
  23
  8
  31
  1
  38/183
  61
  #t
  563/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  221
  145
  43
  33
  59
  17
  76
  1
  116/273
  96
  #f
  813/145
  ((7 7 0) (13/2 7 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  221
  145
  43
  33
  59
  17
  76
  1
  116/273
  96
  #t
  813/145
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  225
  149
  43
  33
  59
  17
  76
  1
  116/279
  100
  #t
  835/149
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  231
  155
  43
  33
  64
  17
  81
  1
  61/144
  106
  #t
  871/155
  ((1/2 1/2 0) (5/2 5/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  231
  155
  43
  33
  64
  17
  81
  1
  61/144
  106
  #f
  871/155
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (nil) (cons x rest-xs)) (env ((□? (f xs)))))\""
  44
  30
  8
  6
  22
  1
  23
  1
  39/64
  26
  #f
  79/15
  ((5 11/2 0) (11/2 11/2 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  84
  36
  31
  17
  18
  15
  33
  1
  11/24
  32
  #f
  185/36
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  97
  44
  33
  20
  19
  15
  34
  1
  12/29
  40
  #t
  225/44
  ((1 1 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  98
  45
  33
  20
  19
  15
  34
  1
  2/5
  41
  #t
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  18
  12
  3
  3
  9
  1
  10
  1
  17/24
  11
  #f
  61/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  46
  26
  13
  7
  23
  5
  28
  1
  19/22
  22
  #f
  68/13
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  3
  0
  3
  1
  3/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  57
  32
  15
  10
  25
  6
  31
  1
  7/9
  26
  #f
  85/16
  ((3 7/2 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  58
  33
  15
  10
  25
  6
  31
  1
  3/4
  27
  #t
  175/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  70
  38
  17
  15
  26
  6
  32
  1
  2/3
  32
  #t
  100/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  27
  14
  4
  9
  4
  1
  5
  1
  1/6
  14
  #t
  36/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  31
  25
  4
  2
  20
  1
  21
  1
  31/38
  20
  #f
  27/5
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  132
  89
  22
  21
  21
  7
  28
  1
  67/324
  52
  #f
  511/89
  ((39/2 20 0) (45/2 47/2 0) (39/2 20 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  46
  26
  13
  7
  23
  5
  28
  1
  19/22
  22
  #f
  68/13
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  50
  28
  13
  9
  23
  5
  28
  1
  19/24
  24
  #t
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  52
  30
  13
  9
  23
  5
  28
  1
  19/26
  26
  #t
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  12
  6
  4
  2
  3
  1
  4
  1
  1/4
  4
  #f
  16/3
  ((3/2 3/2 0) (1 3/2 0) (1 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  14
  8
  4
  2
  5
  1
  6
  1
  11/20
  6
  #t
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  29
  15
  8
  6
  7
  1
  8
  1
  7/64
  12
  #f
  6
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  32
  17
  8
  7
  7
  1
  8
  1
  7/80
  14
  #t
  100/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  38
  15
  9
  14
  0
  3
  3
  1
  0
  9
  #f
  27/5
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  100
  54
  24
  22
  30
  9
  39
  1
  8/13
  40
  #f
  145/27
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  44
  30
  8
  6
  22
  1
  23
  1
  39/64
  26
  #f
  79/15
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  28
  14
  8
  6
  7
  1
  8
  1
  1/8
  12
  #f
  40/7
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  10
  7
  0
  3
  4
  0
  4
  1
  4/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  13
  9
  0
  4
  4
  0
  4
  1
  4/9
  9
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  16
  10
  0
  6
  4
  0
  4
  1
  2/5
  10
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  21
  11
  2
  8
  4
  1
  5
  1
  4/11
  11
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  81
  34
  31
  16
  18
  15
  33
  1
  1/2
  30
  #f
  175/34
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  127
  60
  44
  23
  41
  20
  61
  1
  15/22
  52
  #f
  311/60
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  130
  62
  44
  24
  41
  20
  61
  1
  15/23
  54
  #t
  321/62
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  131
  63
  44
  24
  41
  20
  61
  1
  89/138
  55
  #t
  326/63
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  136
  65
  44
  27
  41
  20
  61
  1
  89/144
  57
  #t
  336/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   xs\n   (nil)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (nil) (cons x rest-xs)) (env ((□? (f xs)))))\""
  24
  18
  4
  2
  14
  1
  15
  1
  19/24
  14
  #f
  49/9
  ((5/2 5/2 0) (2 2 0) (2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (nil) (cons x rest-xs)) (env ((□? (f xs)))))\""
  59
  40
  12
  7
  28
  2
  30
  1
  9/16
  32
  #f
  27/5
  ((5 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  27
  14
  4
  9
  4
  1
  5
  1
  1/6
  14
  #t
  36/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  6
  2
  5
  2
  1
  3
  1
  1/3
  6
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  18
  9
  2
  7
  4
  1
  5
  1
  4/9
  9
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  20
  11
  2
  7
  4
  1
  5
  1
  4/11
  11
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  23
  13
  2
  8
  4
  1
  5
  1
  4/13
  13
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  5
  2
  5
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  43
  20
  9
  14
  0
  3
  3
  1
  0
  14
  #f
  107/20
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  48
  22
  9
  17
  0
  3
  3
  1
  0
  16
  #t
  117/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  19
  12
  3
  4
  9
  1
  10
  1
  17/24
  11
  #f
  61/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  58
  44
  7
  7
  17
  2
  19
  1
  13/60
  32
  #f
  263/44
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  136
  68
  42
  26
  21
  18
  39
  1
  17/48
  56
  #f
  359/68
  ((19 39/2 0) (39/2 39/2 0) (19 39/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  25
  18
  4
  3
  14
  1
  15
  1
  19/24
  14
  #f
  49/9
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  28
  20
  4
  4
  14
  1
  15
  1
  19/28
  16
  #t
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  73
  32
  9
  32
  6
  2
  8
  1
  2/9
  32
  #t
  85/16
  ((15/2 15/2 0) (7 7 0) (7 15/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  117
  57
  18
  42
  6
  5
  11
  1
  1/7
  50
  #f
  302/57
  ((9 9 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  71
  29
  28
  14
  17
  14
  31
  1
  1/2
  28
  #f
  146/29
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  57
  31
  11
  15
  7
  4
  11
  1
  7/19
  18
  #f
  168/31
  ((7 7 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  39
  16
  9
  14
  0
  3
  3
  1
  0
  9
  #f
  87/16
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  7
  0
  5
  2
  0
  2
  1
  2/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  15
  9
  0
  6
  2
  0
  2
  1
  2/9
  9
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  39
  26
  9
  4
  23
  5
  28
  1
  19/22
  22
  #f
  68/13
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  26
  14
  4
  8
  4
  1
  5
  1
  1/6
  14
  #t
  36/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  28
  16
  4
  8
  4
  1
  5
  1
  1/7
  16
  #t
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  30
  18
  4
  8
  6
  1
  7
  1
  1/4
  18
  #t
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  28
  20
  4
  4
  14
  1
  15
  1
  19/28
  16
  #f
  27/5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  35
  25
  4
  6
  17
  1
  18
  1
  25/38
  21
  #t
  133/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  12
  8
  0
  4
  3
  0
  3
  1
  2/7
  8
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match xs ((nil) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  7
  4
  0
  3
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  13
  7
  2
  4
  0
  1
  1
  1
  0
  7
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  38
  26
  7
  5
  10
  2
  12
  1
  17/96
  18
  #f
  79/13
  ((5 5 0) (9/2 5 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  10
  6
  0
  4
  0
  0
  0
  1
  0
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  18
  12
  3
  3
  9
  1
  10
  1
  17/24
  11
  #f
  61/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  21
  14
  3
  4
  9
  1
  10
  1
  17/30
  13
  #t
  71/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  24
  16
  3
  5
  9
  1
  10
  1
  17/36
  15
  #t
  81/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  11
  8
  0
  3
  4
  0
  4
  1
  1/2
  8
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  14
  7
  4
  3
  3
  1
  4
  1
  3/16
  4
  #f
  38/7
  ((2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  24
  18
  4
  2
  14
  1
  15
  1
  19/24
  14
  #f
  49/9
  ((5/2 5/2 0) (5/2 5/2 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  61
  33
  11
  17
  9
  4
  13
  1
  3/7
  21
  #f
  59/11
  ((7 15/2 0) (13/2 13/2 0) (13/2 7 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  61
  33
  11
  17
  9
  4
  13
  1
  3/7
  21
  #f
  59/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  19
  9
  4
  6
  0
  1
  1
  1
  0
  8
  #f
  47/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  31
  14
  6
  11
  1
  1
  2
  1
  1/14
  13
  #t
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  38
  19
  6
  13
  4
  1
  5
  1
  4/19
  18
  #t
  97/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  40
  21
  6
  13
  6
  1
  7
  1
  2/7
  20
  #t
  107/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  51
  37
  8
  6
  28
  1
  29
  1
  63/92
  32
  #f
  195/37
  ((13/2 13/2 0) (13/2 13/2 0) (6 6 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  108
  68
  19
  21
  35
  5
  40
  1
  13/24
  50
  #f
  363/68
  ((7 7 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  182
  119
  33
  30
  75
  13
  88
  1
  167/260
  88
  #t
  620/119
  ((12 25/2 0) (11 11 0) (23/2 12 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  56
  30
  11
  15
  7
  4
  11
  1
  7/18
  18
  #f
  27/5
  ((13/2 7 0) (13/2 7 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  58
  31
  11
  16
  7
  4
  11
  1
  13/36
  18
  #f
  168/31
  ((1/2 1/2 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((1/2 1/2 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  11
  7
  0
  4
  2
  0
  2
  1
  2/7
  7
  #t
  5
  ((0 1/2 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  139
  96
  22
  21
  23
  7
  30
  1
  79/354
  59
  #f
  91/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  149
  103
  24
  22
  23
  8
  31
  1
  79/372
  66
  #t
  585/103
  ((3/2 3/2 0) (2 5/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  149
  103
  24
  22
  23
  8
  31
  1
  79/372
  66
  #f
  585/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  137
  93
  22
  22
  21
  7
  28
  1
  61/336
  56
  #f
  177/31
  ((41/2 21 0) (39/2 39/2 0) (39/2 20 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  30
  16
  4
  10
  4
  1
  5
  1
  1/7
  16
  #t
  41/8
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  5
  4
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  64
  52
  7
  5
  18
  2
  20
  1
  11/68
  37
  #f
  151/26
  ((8 8 0) (17/2 9 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  39
  26
  9
  4
  23
  5
  28
  1
  19/22
  22
  #f
  68/13
  ((2 2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  44
  28
  9
  7
  23
  5
  28
  1
  19/24
  24
  #t
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  18
  9
  2
  7
  3
  0
  3
  1
  1/3
  9
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  26
  12
  4
  10
  3
  1
  4
  1
  1/4
  12
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  32
  25
  4
  3
  20
  1
  21
  1
  31/38
  20
  #f
  27/5
  ((3 7/2 0) (3 3 0) (3 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  36
  27
  4
  5
  20
  1
  21
  1
  31/42
  22
  #t
  145/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  167
  118
  26
  23
  41
  8
  49
  1
  16/45
  76
  #f
  334/59
  ((41/2 21 0) (20 41/2 0) (45/2 23 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  253
  180
  47
  26
  66
  20
  86
  1
  61/160
  128
  #f
  991/180
  ((29/2 15 0) (29/2 15 0) (29/2 15 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  285
  192
  60
  33
  75
  25
  100
  1
  115/288
  136
  #f
  1057/192
  ((2 2 0) (2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  7
  4
  0
  3
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  61
  46
  7
  8
  12
  2
  14
  1
  7/68
  34
  #f
  271/46
  ((7 7 0) (15/2 15/2 0) (7 7 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  8
  6
  0
  2
  2
  0
  2
  1
  1/3
  5
  #t
  29/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  19
  12
  3
  4
  9
  1
  10
  1
  17/24
  11
  #f
  61/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  39
  26
  9
  4
  23
  5
  28
  1
  19/22
  22
  #f
  68/13
  ((5/2 5/2 0) (2 2 0) (2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  47
  29
  11
  7
  23
  6
  29
  1
  19/25
  25
  #t
  151/29
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match xs ((nil) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  50
  31
  11
  8
  23
  6
  29
  1
  19/27
  27
  #t
  161/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  83
  50
  17
  16
  28
  8
  36
  1
  9/16
  42
  #f
  26/5
  ((3 7/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  88
  54
  17
  17
  30
  8
  38
  1
  49/88
  46
  #t
  140/27
  ((0 0 0) (0 0 0) (0 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  100
  61
  19
  20
  31
  8
  39
  1
  51/98
  53
  #t
  317/61
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  14
  9
  0
  5
  2
  0
  2
  1
  2/9
  9
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  19
  11
  0
  8
  2
  0
  2
  1
  2/11
  11
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  22
  13
  0
  9
  2
  0
  2
  1
  2/13
  13
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  29
  16
  2
  11
  2
  1
  3
  1
  1/8
  16
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  32
  18
  2
  12
  2
  1
  3
  1
  1/9
  18
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  46
  26
  13
  7
  23
  5
  28
  1
  19/22
  22
  #f
  68/13
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  57
  31
  16
  10
  23
  6
  29
  1
  19/27
  27
  #t
  161/31
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  80
  45
  20
  15
  27
  7
  34
  1
  7/13
  41
  #t
  233/45
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  94
  54
  24
  16
  31
  9
  40
  1
  1/2
  49
  #f
  140/27
  ((2 2 0) (3/2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  137
  85
  32
  20
  50
  15
  65
  1
  127/224
  72
  #f
  451/85
  ((11/2 11/2 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  13
  6
  4
  3
  3
  1
  4
  1
  1/4
  4
  #f
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  28
  13
  8
  7
  3
  2
  5
  1
  3/40
  10
  #f
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  18
  9
  4
  5
  0
  1
  1
  1
  0
  8
  #f
  47/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  57
  35
  13
  9
  23
  6
  29
  1
  19/31
  30
  #f
  183/35
  ((3 3 0) (5/2 5/2 0) (5/2 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  60
  37
  13
  10
  23
  6
  29
  1
  19/33
  32
  #t
  193/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  46
  26
  13
  7
  23
  5
  28
  1
  19/22
  22
  #f
  68/13
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  49
  28
  13
  8
  23
  5
  28
  1
  19/24
  24
  #t
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  57
  33
  13
  11
  25
  5
  30
  1
  21/29
  29
  #t
  57/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  77
  44
  18
  15
  25
  6
  31
  1
  21/38
  39
  #f
  21/4
  ((2 2 0) (2 5/2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  9
  6
  0
  3
  0
  0
  0
  1
  0
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  16
  9
  4
  3
  3
  1
  4
  1
  1/8
  6
  #f
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  19
  11
  4
  4
  3
  1
  4
  1
  3/32
  8
  #t
  58/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  30
  14
  7
  9
  3
  2
  5
  1
  3/44
  10
  #f
  37/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  33
  16
  7
  10
  3
  2
  5
  1
  3/52
  12
  #t
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  36
  18
  7
  11
  3
  2
  5
  1
  1/20
  14
  #t
  47/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  38
  26
  7
  5
  10
  2
  12
  1
  17/96
  18
  #f
  79/13
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  84
  52
  20
  12
  33
  7
  40
  1
  131/228
  40
  #f
  147/26
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  90
  57
  20
  13
  37
  7
  44
  1
  149/252
  45
  #t
  319/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  91
  58
  20
  13
  37
  7
  44
  1
  149/258
  46
  #t
  162/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  132
  89
  22
  21
  21
  7
  28
  1
  67/324
  52
  #f
  511/89
  ((41/2 21 0) (39/2 20 0) (19 19 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match\n   xs\n   (nil)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  25
  353
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  11
  6
  0
  5
  2
  0
  2
  1
  1/3
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  1
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
