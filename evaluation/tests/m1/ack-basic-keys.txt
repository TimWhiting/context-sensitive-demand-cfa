'(expression:
  (let ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#t (app + n 1))
            (#f
             (match
              (app = n 0)
              (#t (app ack (app - m 1) 1))
              (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
    (app ack 3 12)))

(list 'query: '(top) (menv '()))

(list
 '()
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - n (-> 1 <-)) (menv '((□? (m n)))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - (-> n <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack 3 (-> 12 <-)) (menv '()))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack m (-> (app - n 1) <-)) (menv '((□? (m n)))))
 (list 'eval '(app ack (-> 3 <-) 12) (menv '()))
 (list 'eval '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list 'eval '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app ack (app - m 1) (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) n 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app (-> ack <-) 3 12) (menv '()))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(let (ack) (-> (app ack 3 12) <-)) (menv '()))
 (list
  'eval
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '()))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(top) (menv '()))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'expr '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'expr '(app (-> ack <-) 3 12) (menv '()))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'expr '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '())))
176


(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (menv '((□? (m n)))))

(list
 '()
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app + n (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app + (-> n <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - n (-> 1 <-)) (menv '((□? (m n)))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - (-> n <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app = m (-> 0 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app = n (-> 0 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app = (-> m <-) 0) (menv '((□? (m n)))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app = (-> n <-) 0) (menv '((□? (m n)))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack 3 (-> 12 <-)) (menv '()))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack m (-> (app - n 1) <-)) (menv '((□? (m n)))))
 (list 'eval '(app ack (-> 3 <-) 12) (menv '()))
 (list 'eval '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list 'eval '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app ack (app - m 1) (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app (-> + <-) n 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) n 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app (-> = <-) m 0) (menv '((□? (m n)))))
 (list 'eval '(app (-> = <-) n 0) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '()))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '((□? (m n)))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '((□? (m n)))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '((□? (m n)))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv '((□? (m n)))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '((□? (m n)))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv '((□? (m n)))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv '((□? (m n)))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'expr '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'expr '(app (-> ack <-) 3 12) (menv '()))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'expr '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '())))
191


(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (menv '((□? (m n)))))

(list
 '()
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - n (-> 1 <-)) (menv '((□? (m n)))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - (-> n <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app = n (-> 0 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app = (-> n <-) 0) (menv '((□? (m n)))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack 3 (-> 12 <-)) (menv '()))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack m (-> (app - n 1) <-)) (menv '((□? (m n)))))
 (list 'eval '(app ack (-> 3 <-) 12) (menv '()))
 (list 'eval '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list 'eval '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app ack (app - m 1) (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) n 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app (-> = <-) n 0) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '()))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '((□? (m n)))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv '((□? (m n)))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '((□? (m n)))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv '((□? (m n)))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'expr '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'expr '(app (-> ack <-) 3 12) (menv '()))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'expr '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '())))
173


(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (menv '((□? (m n)))))

(list
 '()
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - n (-> 1 <-)) (menv '((□? (m n)))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - (-> n <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack 3 (-> 12 <-)) (menv '()))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack m (-> (app - n 1) <-)) (menv '((□? (m n)))))
 (list 'eval '(app ack (-> 3 <-) 12) (menv '()))
 (list 'eval '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list 'eval '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app ack (app - m 1) (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) n 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '()))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv '((□? (m n)))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'expr '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'expr '(app (-> ack <-) 3 12) (menv '()))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'expr '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '())))
159


(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (menv '((□? (m n)))))

(list
 '()
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - n (-> 1 <-)) (menv '((□? (m n)))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - (-> n <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack 3 (-> 12 <-)) (menv '()))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack m (-> (app - n 1) <-)) (menv '((□? (m n)))))
 (list 'eval '(app ack (-> 3 <-) 12) (menv '()))
 (list 'eval '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list 'eval '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app ack (app - m 1) (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) n 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '()))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'expr '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'expr '(app (-> ack <-) 3 12) (menv '()))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'expr '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '())))
155


(list 'query: '(app ack m (-> (app - n 1) <-)) (menv '((□? (m n)))))

(list
 '()
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - n (-> 1 <-)) (menv '((□? (m n)))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - (-> n <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack 3 (-> 12 <-)) (menv '()))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack m (-> (app - n 1) <-)) (menv '((□? (m n)))))
 (list 'eval '(app ack (-> 3 <-) 12) (menv '()))
 (list 'eval '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list 'eval '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app ack (app - m 1) (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) n 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '()))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'expr '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'expr '(app (-> ack <-) 3 12) (menv '()))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'expr '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '())))
155


(list 'query: '(app - (-> n <-) 1) (menv '((□? (m n)))))

(list
 '()
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - n (-> 1 <-)) (menv '((□? (m n)))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - (-> n <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack 3 (-> 12 <-)) (menv '()))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack m (-> (app - n 1) <-)) (menv '((□? (m n)))))
 (list 'eval '(app ack (-> 3 <-) 12) (menv '()))
 (list 'eval '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list 'eval '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app ack (app - m 1) (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) n 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '()))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'expr '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'expr '(app (-> ack <-) 3 12) (menv '()))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'expr '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '())))
155


(list 'query: '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))

(list
 '()
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list 'eval '(app ack (-> 3 <-) 12) (menv '()))
 (list 'eval '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list 'eval '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list 'expr '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'expr '(app (-> ack <-) 3 12) (menv '()))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'expr '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '())))
64


(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (menv '((□? (m n)))))

(list
 '()
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list 'eval '(app ack (-> 3 <-) 12) (menv '()))
 (list 'eval '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list 'eval '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list 'expr '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'expr '(app (-> ack <-) 3 12) (menv '()))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'expr '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '())))
64


(list 'query: '(app - (-> m <-) 1) (menv '((□? (m n)))))

(list
 '()
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list 'eval '(app ack (-> 3 <-) 12) (menv '()))
 (list 'eval '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list 'eval '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list 'expr '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'expr '(app (-> ack <-) 3 12) (menv '()))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'expr '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '())))
64


(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (menv '((□? (m n)))))

(list
 '()
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - n (-> 1 <-)) (menv '((□? (m n)))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - (-> n <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack 3 (-> 12 <-)) (menv '()))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack m (-> (app - n 1) <-)) (menv '((□? (m n)))))
 (list 'eval '(app ack (-> 3 <-) 12) (menv '()))
 (list 'eval '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list 'eval '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app ack (app - m 1) (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) n 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '()))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '((□? (m n)))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'expr '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'expr '(app (-> ack <-) 3 12) (menv '()))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'expr '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '())))
159


(list 'query: '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))

(list
 '()
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list 'eval '(app ack (-> 3 <-) 12) (menv '()))
 (list 'eval '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list 'eval '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list 'expr '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'expr '(app (-> ack <-) 3 12) (menv '()))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'expr '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '())))
64


(list 'query: '(app - (-> m <-) 1) (menv '((□? (m n)))))

(list
 '()
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list 'eval '(app ack (-> 3 <-) 12) (menv '()))
 (list 'eval '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list 'eval '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list 'expr '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'expr '(app (-> ack <-) 3 12) (menv '()))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'expr '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '())))
64


(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (menv '((□? (m n)))))

(list
 '()
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - n (-> 1 <-)) (menv '((□? (m n)))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - (-> n <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app = n (-> 0 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app = (-> n <-) 0) (menv '((□? (m n)))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack 3 (-> 12 <-)) (menv '()))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack m (-> (app - n 1) <-)) (menv '((□? (m n)))))
 (list 'eval '(app ack (-> 3 <-) 12) (menv '()))
 (list 'eval '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list 'eval '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app ack (app - m 1) (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) n 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app (-> = <-) n 0) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '()))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '((□? (m n)))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'expr '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'expr '(app (-> ack <-) 3 12) (menv '()))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'expr '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '())))
163


(list 'query: '(app = (-> n <-) 0) (menv '((□? (m n)))))

(list
 '()
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - n (-> 1 <-)) (menv '((□? (m n)))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - (-> n <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app = (-> n <-) 0) (menv '((□? (m n)))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack 3 (-> 12 <-)) (menv '()))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack m (-> (app - n 1) <-)) (menv '((□? (m n)))))
 (list 'eval '(app ack (-> 3 <-) 12) (menv '()))
 (list 'eval '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list 'eval '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app ack (app - m 1) (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) n 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '()))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'expr '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'expr '(app (-> ack <-) 3 12) (menv '()))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'expr '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '())))
157


(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (menv '((□? (m n)))))

(list
 '()
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app + n (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app + (-> n <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - n (-> 1 <-)) (menv '((□? (m n)))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - (-> n <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack 3 (-> 12 <-)) (menv '()))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack m (-> (app - n 1) <-)) (menv '((□? (m n)))))
 (list 'eval '(app ack (-> 3 <-) 12) (menv '()))
 (list 'eval '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list 'eval '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app ack (app - m 1) (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app (-> + <-) n 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) n 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '()))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '((□? (m n)))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'expr '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'expr '(app (-> ack <-) 3 12) (menv '()))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'expr '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '())))
163


(list 'query: '(app + (-> n <-) 1) (menv '((□? (m n)))))

(list
 '()
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app + (-> n <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - n (-> 1 <-)) (menv '((□? (m n)))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - (-> n <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack 3 (-> 12 <-)) (menv '()))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack m (-> (app - n 1) <-)) (menv '((□? (m n)))))
 (list 'eval '(app ack (-> 3 <-) 12) (menv '()))
 (list 'eval '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list 'eval '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app ack (app - m 1) (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) n 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '()))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'expr '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'expr '(app (-> ack <-) 3 12) (menv '()))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'expr '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '())))
157


(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (menv '((□? (m n)))))

(list
 '()
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app = m (-> 0 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app = (-> m <-) 0) (menv '((□? (m n)))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack (-> 3 <-) 12) (menv '()))
 (list 'eval '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list 'eval '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app (-> = <-) m 0) (menv '((□? (m n)))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '((□? (m n)))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'expr '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'expr '(app (-> ack <-) 3 12) (menv '()))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'expr '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '())))
84


(list 'query: '(app = (-> m <-) 0) (menv '((□? (m n)))))

(list
 '()
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app = (-> m <-) 0) (menv '((□? (m n)))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack (-> 3 <-) 12) (menv '()))
 (list 'eval '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list 'eval '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list 'expr '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'expr '(app (-> ack <-) 3 12) (menv '()))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'expr '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '())))
69


(list 'query: '(let (ack) (-> (app ack 3 12) <-)) (menv '()))

(list
 '()
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - m (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app - m (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - n (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - n (-> 1 <-)) (menv '((□? (m n)))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app - (-> m <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> m <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app - (-> n <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app - (-> n <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack 3 (-> 12 <-)) (menv '()))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack m (-> (app - n 1) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app ack m (-> (app - n 1) <-)) (menv '((□? (m n)))))
 (list 'eval '(app ack (-> 3 <-) 12) (menv '()))
 (list 'eval '(app ack (-> m <-) (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> m <-) (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list 'eval '(app ack (-> (app - m 1) <-) 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (-> (app - m 1) <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app ack (app - m 1) (-> 1 <-)) (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv '((□? (m n)))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app ack (app - m 1) (-> 1 <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) n 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> - <-) n 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> - <-) m 1) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> - <-) m 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(app (-> ack <-) 3 12) (menv '()))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'eval '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'eval '(let (ack) (-> (app ack 3 12) <-)) (menv '()))
 (list
  'eval
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '()))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list 'expr '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list 'expr '(app (-> ack <-) 3 12) (menv '()))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list 'expr '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) m (app - n 1))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) 1)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))))))
 (list
  'expr
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '())))
175

