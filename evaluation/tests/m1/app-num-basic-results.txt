'(expression: (let ((x (λ (y) y))) (let ((_ (app x 1))) (app x 2))))
(list 'query: '(let (_) (-> (app x 2) <-)) (menv '()))
'(clos/con: ⊥)
'(literals: (2 ⊥ ⊥ ⊥))
(list 'query: '(app x (-> 1 <-)) (menv '()))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list 'query: '(let ((-> x = (λ (y) y) <-)) bod) (menv '()))
(list 'clos/con: (list (list '(λ (y) y) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(let (x) (-> (let ((_ (app x 1))) (app x 2)) <-)) (menv '()))
'(clos/con: ⊥)
'(literals: (2 ⊥ ⊥ ⊥))
(list 'query: '(app (-> x <-) 1) (menv '()))
(list 'clos/con: (list (list '(λ (y) y) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(top) (menv '()))
'(clos/con: ⊥)
'(literals: (2 ⊥ ⊥ ⊥))
(list 'query: '(λ (y) (-> y <-)) (menv '((□? (y)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app (-> x <-) 2) (menv '()))
(list 'clos/con: (list (list '(λ (y) y) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app x (-> 2 <-)) (menv '()))
'(clos/con: ⊥)
'(literals: (2 ⊥ ⊥ ⊥))
(list 'query: '(let ((-> _ = (app x 1) <-)) bod) (menv '()))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
