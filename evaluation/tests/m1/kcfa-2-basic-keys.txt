'(expression:
  (app
   (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
   (λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))

(list 'query: '(top) (menv '()))

(list
 (list 'eval '(app f1 (-> #f <-)) (menv '(((top)))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list 'eval '(app (-> f1 <-) #f) (menv '(((top)))))
 (list
  'eval
  '(app (-> f2 <-) #f)
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app
    (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
  (menv '()))
 (list
  'eval
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '(((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app
    (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
    (->
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
     <-))
  (menv '()))
 (list
  'eval
  '(app
    (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
    (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
  (menv '(((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list 'eval '(let (_) (-> (app f1 #f) <-)) (menv '(((top)))))
 (list
  'eval
  '(let (_) (-> (app f2 #f) <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list 'eval '(top) (menv '()))
 (list
  'eval
  '(λ (f1) (-> (let ((_ (app f1 #t))) (app f1 #f)) <-))
  (menv '(((top)))))
 (list
  'eval
  '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (x1)
     (->
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
      <-))
  (menv '(((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv
   '(((λ (z) (-> (app z x1 x2) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list 'expr '(app (-> f1 <-) #t) (menv '(((top)))))
 (list 'expr '(app (-> f1 <-) #f) (menv '(((top)))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app
    (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
  (menv '()))
 (list
  'expr
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '(((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app
    (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
    (->
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
     <-))
  (menv '()))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-)))))))
28


(list
 'query:
 '(λ (x1)
    (->
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     <-))
 (menv '((□? (x1)))))

(list
 (list 'eval '(app f1 (-> #f <-)) (menv '(((top)))))
 (list 'eval '(app f1 (-> #t <-)) (menv '(((top)))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     (□? (x1)))))
 (list
  'eval
  '(app (-> f2 <-) #f)
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> f2 <-) #f)
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (-> f2 <-) #f)
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     (□? (x1)))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     (□? (x1)))))
 (list
  'eval
  '(app
    (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
  (menv '()))
 (list
  'eval
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '(((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '((□? (x1)))))
 (list
  'eval
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '(((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv
   '(((let (_) (-> (app f2 #f) <-))) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '(((let (_) (-> (app f2 #f) <-))) (□? (x1)))))
 (list
  'eval
  '(app
    (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
    (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
  (menv '(((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app
    (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
    (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
  (menv '((□? (x1)))))
 (list
  'eval
  '(app
    (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
    (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
  (menv '(((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv
   '(((let (_) (-> (app f2 #f) <-))) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) (□? (x1)))))
 (list
  'eval
  '(let (_) (-> (app f2 #f) <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(let (_) (-> (app f2 #f) <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(let (_) (-> (app f2 #f) <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     (□? (x1)))))
 (list
  'eval
  '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     (□? (x1)))))
 (list
  'eval
  '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (x1)
     (->
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
      <-))
  (menv '(((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (x1)
     (->
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
      <-))
  (menv '(((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (x1)
     (->
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
      <-))
  (menv '((□? (x1)))))
 (list
  'eval
  '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
  (menv
   '(((let (_) (-> (app f2 #f) <-))) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) (□? (x1)))))
 (list
  'eval
  '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv
   '(((λ (z) (-> (app z x1 x2) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv
   '(((λ (z) (-> (app z x1 x2) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv
   '(((λ (z) (-> (app z x1 x2) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     (□? (x1)))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     (□? (x1)))))
 (list 'expr '(app (-> f1 <-) #t) (menv '(((top)))))
 (list 'expr '(app (-> f1 <-) #f) (menv '(((top)))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     (□? (x1)))))
 (list
  'expr
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '(((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '((□? (x1)))))
 (list
  'expr
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '(((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv
   '(((let (_) (-> (app f2 #f) <-))) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '(((let (_) (-> (app f2 #f) <-))) (□? (x1)))))
 (list
  'expr
  '(app
    (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
    (->
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
     <-))
  (menv '()))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv
   '(((let (_) (-> (app f2 #f) <-))) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) (□? (x1)))))
 (list 'refine (menv '((□? (x1))))))
58


(list
 'query:
 '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
 (menv '((□? (x2)) (□? (x1)))))

(list
 (list 'eval '(app f1 (-> #f <-)) (menv '(((top)))))
 (list 'eval '(app f1 (-> #t <-)) (menv '(((top)))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     (□? (x1)))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     (□? (x1)))))
 (list
  'eval
  '(app
    (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
  (menv '()))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '((□? (x2)) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '((□? (x2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '((□? (x2)) (□? (x1)))))
 (list
  'eval
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '((□? (x2)) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '((□? (x2)) (□? (x1)))))
 (list
  'eval
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '((□? (x2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
  (menv '((□? (x2)) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
  (menv '((□? (x2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
  (menv '((□? (x2)) (□? (x1)))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv
   '(((λ (z) (-> (app z x1 x2) <-)))
     (□? (x2))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv
   '(((λ (z) (-> (app z x1 x2) <-)))
     (□? (x2))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv '(((λ (z) (-> (app z x1 x2) <-))) (□? (x2)) (□? (x1)))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     (□? (x1)))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list 'expr '(app (-> f1 <-) #t) (menv '(((top)))))
 (list 'expr '(app (-> f1 <-) #f) (menv '(((top)))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     (□? (x1)))))
 (list
  'expr
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '((□? (x2)) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '((□? (x2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '((□? (x2)) (□? (x1)))))
 (list
  'expr
  '(app
    (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
    (->
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
     <-))
  (menv '()))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '((□? (x2)) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '((□? (x2)) (□? (x1)))))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '((□? (x2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list 'refine (menv '((□? (x1)))))
 (list 'refine (menv '((□? (x2)) (□? (x1)))))
 (list 'refine (menv '((□? (x2)) ((let (_) (-> (app f1 #f) <-))))))
 (list 'refine (menv '((□? (x2)) ((let ((-> _ = (app f1 #t) <-)) bod))))))
40


(list
 'query:
 '(λ (y1 y2) (-> y1 <-))
 (menv '((□? (y1 y2)) (□? (x2)) (□? (x1)))))

(list
 (list 'eval '(app f1 (-> #f <-)) (menv '(((top)))))
 (list 'eval '(app f1 (-> #t <-)) (menv '(((top)))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     (□? (x1)))))
 (list
  'eval
  '(app
    (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
  (menv '()))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '((□? (x2)) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '((□? (x2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '((□? (x2)) (□? (x1)))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv '((□? (y1 y2)) (□? (x2)) (□? (x1)))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv
   '(((λ (z) (-> (app z x1 x2) <-)))
     (□? (x2))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv
   '(((λ (z) (-> (app z x1 x2) <-)))
     (□? (x2))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv '(((λ (z) (-> (app z x1 x2) <-))) (□? (x2)) (□? (x1)))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv '((□? (y1 y2)) (□? (x2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv '((□? (y1 y2)) (□? (x2)) ((let (_) (-> (app f1 #f) <-))))))
 (list 'expr '(app (-> f1 <-) #t) (menv '(((top)))))
 (list 'expr '(app (-> f1 <-) #f) (menv '(((top)))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     (□? (x1)))))
 (list
  'expr
  '(app
    (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
    (->
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
     <-))
  (menv '()))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '((□? (x2)) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '((□? (x2)) (□? (x1)))))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '((□? (x2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list 'refine (menv '((□? (x1)))))
 (list 'refine (menv '((□? (x2)) (□? (x1)))))
 (list 'refine (menv '((□? (x2)) ((let (_) (-> (app f1 #f) <-))))))
 (list 'refine (menv '((□? (x2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list 'refine (menv '((□? (y1 y2)) (□? (x2)) (□? (x1)))))
 (list
  'refine
  (menv '((□? (y1 y2)) (□? (x2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'refine
  (menv '((□? (y1 y2)) (□? (x2)) ((let (_) (-> (app f1 #f) <-)))))))
31


(list
 'query:
 '(λ (z) (-> (app z x1 x2) <-))
 (menv '((□? (z)) (□? (x2)) (□? (x1)))))

(list
 (list 'eval '(app f1 (-> #f <-)) (menv '(((top)))))
 (list 'eval '(app f1 (-> #t <-)) (menv '(((top)))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     (□? (x1)))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv '((□? (z)) (□? (x2)) ((let (_) (-> (app f1 #f) <-))))))
 (list 'eval '(app (-> z <-) x1 x2) (menv '((□? (z)) (□? (x2)) (□? (x1)))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     (□? (x1)))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv '((□? (z)) (□? (x2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app
    (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
  (menv '()))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '((□? (x2)) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '((□? (x2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '((□? (x2)) (□? (x1)))))
 (list
  'eval
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '((□? (x2)) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '((□? (x2)) (□? (x1)))))
 (list
  'eval
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '((□? (x2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv
   '(((λ (z) (-> (app z x1 x2) <-)))
     (□? (x2))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv
   '(((λ (z) (-> (app z x1 x2) <-)))
     (□? (x2))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv '(((λ (z) (-> (app z x1 x2) <-))) (□? (x2)) (□? (x1)))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv '((□? (z)) (□? (x2)) (□? (x1)))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     (□? (x1)))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv '((□? (z)) (□? (x2)) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv '((□? (z)) (□? (x2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list 'expr '(app (-> f1 <-) #t) (menv '(((top)))))
 (list 'expr '(app (-> f1 <-) #f) (menv '(((top)))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     (□? (x1)))))
 (list
  'expr
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '((□? (x2)) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '((□? (x2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '((□? (x2)) (□? (x1)))))
 (list
  'expr
  '(app
    (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
    (->
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
     <-))
  (menv '()))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '((□? (x2)) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '((□? (x2)) (□? (x1)))))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '((□? (x2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list 'refine (menv '((□? (x1)))))
 (list 'refine (menv '((□? (x2)) (□? (x1)))))
 (list 'refine (menv '((□? (x2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list 'refine (menv '((□? (x2)) ((let (_) (-> (app f1 #f) <-))))))
 (list 'refine (menv '((□? (z)) (□? (x2)) (□? (x1)))))
 (list
  'refine
  (menv '((□? (z)) (□? (x2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list 'refine (menv '((□? (z)) (□? (x2)) ((let (_) (-> (app f1 #f) <-)))))))
46


(list 'query: '(app z x1 (-> x2 <-)) (menv '((□? (z)) (□? (x2)) (□? (x1)))))

(list
 (list
  'eval
  '(app f2 (-> #f <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     (□? (x1)))))
 (list
  'eval
  '(app f2 (-> #t <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     (□? (x1)))))
 (list
  'eval
  '(app z x1 (-> x2 <-))
  (menv '((□? (z)) ((let (_) (-> (app f2 #f) <-))) (□? (x1)))))
 (list
  'eval
  '(app z x1 (-> x2 <-))
  (menv '((□? (z)) ((let ((-> _ = (app f2 #t) <-)) bod)) (□? (x1)))))
 (list 'eval '(app z x1 (-> x2 <-)) (menv '((□? (z)) (□? (x2)) (□? (x1)))))
 (list
  'eval
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '((□? (x1)))))
 (list
  'expr
  '(app (-> f2 <-) #t)
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     (□? (x1)))))
 (list
  'expr
  '(app (-> f2 <-) #f)
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     (□? (x1)))))
 (list
  'expr
  '(app
    (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
    (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
  (menv '((□? (x1)))))
 (list 'refine (menv '((□? (x1)))))
 (list 'refine (menv '((□? (x2)) (□? (x1)))))
 (list 'refine (menv '((□? (z)) (□? (x2)) (□? (x1)))))
 (list
  'refine
  (menv '((□? (z)) ((let ((-> _ = (app f2 #t) <-)) bod)) (□? (x1)))))
 (list 'refine (menv '((□? (z)) ((let (_) (-> (app f2 #f) <-))) (□? (x1))))))
14


(list 'query: '(app z (-> x1 <-) x2) (menv '((□? (z)) (□? (x2)) (□? (x1)))))

(list
 (list 'eval '(app f1 (-> #f <-)) (menv '(((top)))))
 (list 'eval '(app f1 (-> #t <-)) (menv '(((top)))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv '((□? (z)) (□? (x2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list 'eval '(app z (-> x1 <-) x2) (menv '((□? (z)) (□? (x2)) (□? (x1)))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv '((□? (z)) (□? (x2)) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app
    (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
  (menv '()))
 (list 'expr '(app (-> f1 <-) #t) (menv '(((top)))))
 (list 'expr '(app (-> f1 <-) #f) (menv '(((top)))))
 (list
  'expr
  '(app
    (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
    (->
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
     <-))
  (menv '()))
 (list 'refine (menv '((□? (x1)))))
 (list 'refine (menv '((□? (x2)) (□? (x1)))))
 (list 'refine (menv '((□? (x2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list 'refine (menv '((□? (x2)) ((let (_) (-> (app f1 #f) <-))))))
 (list 'refine (menv '((□? (z)) (□? (x2)) (□? (x1)))))
 (list
  'refine
  (menv '((□? (z)) (□? (x2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list 'refine (menv '((□? (z)) (□? (x2)) ((let (_) (-> (app f1 #f) <-)))))))
16


(list 'query: '(app (-> z <-) x1 x2) (menv '((□? (z)) (□? (x2)) (□? (x1)))))

(list
 (list 'eval '(app (-> z <-) x1 x2) (menv '((□? (z)) (□? (x2)) (□? (x1)))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     (□? (x2))
     (□? (x1)))))
 (list
  'eval
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '((□? (x2)) (□? (x1)))))
 (list
  'expr
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '((□? (x2)) (□? (x1)))))
 (list 'refine (menv '((□? (x1)))))
 (list 'refine (menv '((□? (x2)) (□? (x1)))))
 (list 'refine (menv '((□? (z)) (□? (x2)) (□? (x1))))))
7


(list
 'query:
 '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
 (menv '((□? (f2)) (□? (x1)))))

(list
 (list 'eval '(app f1 (-> #f <-)) (menv '(((top)))))
 (list 'eval '(app f1 (-> #t <-)) (menv '(((top)))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     (□? (x1)))))
 (list
  'eval
  '(app (-> f2 <-) #f)
  (menv '((□? (f2)) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> f2 <-) #f)
  (menv '((□? (f2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list 'eval '(app (-> f2 <-) #f) (menv '((□? (f2)) (□? (x1)))))
 (list
  'eval
  '(app (-> f2 <-) #f)
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     (□? (x1)))))
 (list
  'eval
  '(app (-> f2 <-) #f)
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> f2 <-) #f)
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     (□? (x1)))))
 (list
  'eval
  '(app
    (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
  (menv '()))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv
   '(((let (_) (-> (app f2 #f) <-))) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '(((let (_) (-> (app f2 #f) <-))) (□? (x1)))))
 (list
  'eval
  '(app
    (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
    (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
  (menv '(((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app
    (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
    (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
  (menv '((□? (x1)))))
 (list
  'eval
  '(app
    (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
    (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
  (menv '(((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv
   '(((let (_) (-> (app f2 #f) <-))) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) (□? (x1)))))
 (list
  'eval
  '(let (_) (-> (app f2 #f) <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(let (_) (-> (app f2 #f) <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list 'eval '(let (_) (-> (app f2 #f) <-)) (menv '((□? (f2)) (□? (x1)))))
 (list
  'eval
  '(let (_) (-> (app f2 #f) <-))
  (menv '((□? (f2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(let (_) (-> (app f2 #f) <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     (□? (x1)))))
 (list
  'eval
  '(let (_) (-> (app f2 #f) <-))
  (menv '((□? (f2)) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
  (menv '((□? (f2)) (□? (x1)))))
 (list
  'eval
  '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     (□? (x1)))))
 (list
  'eval
  '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
  (menv '((□? (f2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
  (menv '((□? (f2)) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
  (menv
   '(((let (_) (-> (app f2 #f) <-))) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) (□? (x1)))))
 (list
  'eval
  '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv
   '(((λ (z) (-> (app z x1 x2) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv
   '(((λ (z) (-> (app z x1 x2) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv
   '(((λ (z) (-> (app z x1 x2) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     (□? (x1)))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     (□? (x1)))))
 (list 'expr '(app (-> f1 <-) #t) (menv '(((top)))))
 (list 'expr '(app (-> f1 <-) #f) (menv '(((top)))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     (□? (x1)))))
 (list
  'expr
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '(((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '((□? (x1)))))
 (list
  'expr
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '(((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv
   '(((let (_) (-> (app f2 #f) <-))) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '(((let (_) (-> (app f2 #f) <-))) (□? (x1)))))
 (list
  'expr
  '(app
    (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
    (->
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
     <-))
  (menv '()))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv
   '(((let (_) (-> (app f2 #f) <-))) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) (□? (x1)))))
 (list 'refine (menv '((□? (f2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list 'refine (menv '((□? (f2)) (□? (x1)))))
 (list 'refine (menv '((□? (f2)) ((let (_) (-> (app f1 #f) <-))))))
 (list 'refine (menv '((□? (x1))))))
64


(list
 'query:
 '(let ((-> _ = (app f2 #t) <-)) bod)
 (menv '((□? (f2)) (□? (x1)))))

(list
 (list 'eval '(app f1 (-> #f <-)) (menv '(((top)))))
 (list 'eval '(app f1 (-> #t <-)) (menv '(((top)))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let ((-> _ = (app f2 #t) <-)) bod))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let ((-> _ = (app f2 #t) <-)) bod))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let ((-> _ = (app f2 #t) <-)) bod))
     (□? (x1)))))
 (list
  'eval
  '(app (-> f2 <-) #t)
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     (□? (x1)))))
 (list
  'eval
  '(app (-> f2 <-) #t)
  (menv '((□? (f2)) ((let (_) (-> (app f1 #f) <-))))))
 (list 'eval '(app (-> f2 <-) #t) (menv '((□? (f2)) (□? (x1)))))
 (list
  'eval
  '(app (-> f2 <-) #t)
  (menv '((□? (f2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (-> f2 <-) #t)
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> f2 <-) #t)
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let ((-> _ = (app f2 #t) <-)) bod))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let ((-> _ = (app f2 #t) <-)) bod))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let ((-> _ = (app f2 #t) <-)) bod))
     (□? (x1)))))
 (list
  'eval
  '(app
    (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
  (menv '()))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '(((let ((-> _ = (app f2 #t) <-)) bod)) (□? (x1)))))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv
   '(((let ((-> _ = (app f2 #t) <-)) bod)) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv
   '(((let ((-> _ = (app f2 #t) <-)) bod))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app
    (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
    (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
  (menv '((□? (x1)))))
 (list
  'eval
  '(app
    (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
    (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
  (menv '(((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app
    (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
    (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
  (menv '(((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv
   '(((let ((-> _ = (app f2 #t) <-)) bod))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '(((let ((-> _ = (app f2 #t) <-)) bod)) (□? (x1)))))
 (list
  'eval
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv
   '(((let ((-> _ = (app f2 #t) <-)) bod)) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(let ((-> _ = (app f2 #t) <-)) bod)
  (menv '((□? (f2)) (□? (x1)))))
 (list
  'eval
  '(let ((-> _ = (app f2 #t) <-)) bod)
  (menv '((□? (f2)) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(let ((-> _ = (app f2 #t) <-)) bod)
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(let ((-> _ = (app f2 #t) <-)) bod)
  (menv '((□? (f2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(let ((-> _ = (app f2 #t) <-)) bod)
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(let ((-> _ = (app f2 #t) <-)) bod)
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     (□? (x1)))))
 (list
  'eval
  '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
  (menv '(((let ((-> _ = (app f2 #t) <-)) bod)) (□? (x1)))))
 (list
  'eval
  '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
  (menv
   '(((let ((-> _ = (app f2 #t) <-)) bod))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
  (menv
   '(((let ((-> _ = (app f2 #t) <-)) bod)) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv
   '(((λ (z) (-> (app z x1 x2) <-)))
     ((let ((-> _ = (app f2 #t) <-)) bod))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv
   '(((λ (z) (-> (app z x1 x2) <-)))
     ((let ((-> _ = (app f2 #t) <-)) bod))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv
   '(((λ (z) (-> (app z x1 x2) <-)))
     ((let ((-> _ = (app f2 #t) <-)) bod))
     (□? (x1)))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let ((-> _ = (app f2 #t) <-)) bod))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let ((-> _ = (app f2 #t) <-)) bod))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let ((-> _ = (app f2 #t) <-)) bod))
     (□? (x1)))))
 (list 'expr '(app (-> f1 <-) #t) (menv '(((top)))))
 (list 'expr '(app (-> f1 <-) #f) (menv '(((top)))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let ((-> _ = (app f2 #t) <-)) bod))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let ((-> _ = (app f2 #t) <-)) bod))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let ((-> _ = (app f2 #t) <-)) bod))
     (□? (x1)))))
 (list
  'expr
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '(((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '((□? (x1)))))
 (list
  'expr
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '(((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '(((let ((-> _ = (app f2 #t) <-)) bod)) (□? (x1)))))
 (list
  'expr
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv
   '(((let ((-> _ = (app f2 #t) <-)) bod)) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv
   '(((let ((-> _ = (app f2 #t) <-)) bod))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app
    (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
    (->
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
     <-))
  (menv '()))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv
   '(((let ((-> _ = (app f2 #t) <-)) bod))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '(((let ((-> _ = (app f2 #t) <-)) bod)) (□? (x1)))))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv
   '(((let ((-> _ = (app f2 #t) <-)) bod)) ((let (_) (-> (app f1 #f) <-))))))
 (list 'refine (menv '((□? (f2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list 'refine (menv '((□? (f2)) (□? (x1)))))
 (list 'refine (menv '((□? (f2)) ((let (_) (-> (app f1 #f) <-))))))
 (list 'refine (menv '((□? (x1))))))
58


(list 'query: '(app (-> f2 <-) #t) (menv '((□? (f2)) (□? (x1)))))

(list
 (list
  'eval
  '(app (-> f2 <-) #t)
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     (□? (x1)))))
 (list 'eval '(app (-> f2 <-) #t) (menv '((□? (f2)) (□? (x1)))))
 (list
  'eval
  '(app
    (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
    (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
  (menv '((□? (x1)))))
 (list
  'expr
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '((□? (x1)))))
 (list 'refine (menv '((□? (f2)) (□? (x1)))))
 (list 'refine (menv '((□? (x1))))))
6


(list 'query: '(let (_) (-> (app f2 #f) <-)) (menv '((□? (f2)) (□? (x1)))))

(list
 (list 'eval '(app f1 (-> #f <-)) (menv '(((top)))))
 (list 'eval '(app f1 (-> #t <-)) (menv '(((top)))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     (□? (x1)))))
 (list
  'eval
  '(app (-> f2 <-) #f)
  (menv '((□? (f2)) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> f2 <-) #f)
  (menv '((□? (f2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list 'eval '(app (-> f2 <-) #f) (menv '((□? (f2)) (□? (x1)))))
 (list
  'eval
  '(app (-> f2 <-) #f)
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> f2 <-) #f)
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (-> f2 <-) #f)
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     (□? (x1)))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     (□? (x1)))))
 (list
  'eval
  '(app
    (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
  (menv '()))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv
   '(((let (_) (-> (app f2 #f) <-))) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '(((let (_) (-> (app f2 #f) <-))) (□? (x1)))))
 (list
  'eval
  '(app
    (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
    (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
  (menv '(((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app
    (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
    (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
  (menv '((□? (x1)))))
 (list
  'eval
  '(app
    (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
    (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
  (menv '(((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv
   '(((let (_) (-> (app f2 #f) <-))) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) (□? (x1)))))
 (list
  'eval
  '(let (_) (-> (app f2 #f) <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(let (_) (-> (app f2 #f) <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list 'eval '(let (_) (-> (app f2 #f) <-)) (menv '((□? (f2)) (□? (x1)))))
 (list
  'eval
  '(let (_) (-> (app f2 #f) <-))
  (menv '((□? (f2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(let (_) (-> (app f2 #f) <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     (□? (x1)))))
 (list
  'eval
  '(let (_) (-> (app f2 #f) <-))
  (menv '((□? (f2)) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
  (menv
   '(((let (_) (-> (app f2 #f) <-))) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) (□? (x1)))))
 (list
  'eval
  '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv
   '(((λ (z) (-> (app z x1 x2) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv
   '(((λ (z) (-> (app z x1 x2) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv
   '(((λ (z) (-> (app z x1 x2) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     (□? (x1)))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     (□? (x1)))))
 (list 'expr '(app (-> f1 <-) #t) (menv '(((top)))))
 (list 'expr '(app (-> f1 <-) #f) (menv '(((top)))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     (□? (x1)))))
 (list
  'expr
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '(((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '(((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '((□? (x1)))))
 (list
  'expr
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv
   '(((let (_) (-> (app f2 #f) <-))) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '(((let (_) (-> (app f2 #f) <-))) (□? (x1)))))
 (list
  'expr
  '(app
    (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
    (->
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
     <-))
  (menv '()))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv
   '(((let (_) (-> (app f2 #f) <-))) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) (□? (x1)))))
 (list 'refine (menv '((□? (f2)) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list 'refine (menv '((□? (f2)) (□? (x1)))))
 (list 'refine (menv '((□? (f2)) ((let (_) (-> (app f1 #f) <-))))))
 (list 'refine (menv '((□? (x1))))))
58


(list 'query: '(app (-> f2 <-) #f) (menv '((□? (f2)) (□? (x1)))))

(list
 (list 'eval '(app (-> f2 <-) #f) (menv '((□? (f2)) (□? (x1)))))
 (list
  'eval
  '(app (-> f2 <-) #f)
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     (□? (x1)))))
 (list
  'eval
  '(app
    (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
    (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
  (menv '((□? (x1)))))
 (list
  'expr
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '((□? (x1)))))
 (list 'refine (menv '((□? (f2)) (□? (x1)))))
 (list 'refine (menv '((□? (x1))))))
6


(list
 'query:
 '(λ (f1) (-> (let ((_ (app f1 #t))) (app f1 #f)) <-))
 (menv '((□? (f1)))))

(list
 (list 'eval '(app f1 (-> #f <-)) (menv '(((top)))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list 'eval '(app (-> f1 <-) #f) (menv '((□? (f1)))))
 (list 'eval '(app (-> f1 <-) #f) (menv '(((top)))))
 (list
  'eval
  '(app (-> f2 <-) #f)
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app
    (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
  (menv '()))
 (list
  'eval
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '(((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app
    (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
    (->
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
     <-))
  (menv '()))
 (list
  'eval
  '(app
    (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
    (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
  (menv '(((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list 'eval '(let (_) (-> (app f1 #f) <-)) (menv '(((top)))))
 (list
  'eval
  '(let (_) (-> (app f2 #f) <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list 'eval '(let (_) (-> (app f1 #f) <-)) (menv '((□? (f1)))))
 (list
  'eval
  '(λ (f1) (-> (let ((_ (app f1 #t))) (app f1 #f)) <-))
  (menv '((□? (f1)))))
 (list
  'eval
  '(λ (f1) (-> (let ((_ (app f1 #t))) (app f1 #f)) <-))
  (menv '(((top)))))
 (list
  'eval
  '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (x1)
     (->
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
      <-))
  (menv '(((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv
   '(((λ (z) (-> (app z x1 x2) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list 'expr '(app (-> f1 <-) #t) (menv '(((top)))))
 (list 'expr '(app (-> f1 <-) #f) (menv '(((top)))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app
    (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
  (menv '()))
 (list
  'expr
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '(((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app
    (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
    (->
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
     <-))
  (menv '()))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list 'refine (menv '((□? (f1))))))
31


(list 'query: '(let ((-> _ = (app f1 #t) <-)) bod) (menv '((□? (f1)))))

(list
 (list 'eval '(app f1 (-> #t <-)) (menv '(((top)))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list 'eval '(app (-> f1 <-) #t) (menv '(((top)))))
 (list 'eval '(app (-> f1 <-) #t) (menv '((□? (f1)))))
 (list
  'eval
  '(app (-> f2 <-) #f)
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app
    (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
  (menv '()))
 (list
  'eval
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '(((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv
   '(((let (_) (-> (app f2 #f) <-))) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app
    (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
    (->
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
     <-))
  (menv '()))
 (list
  'eval
  '(app
    (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
    (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
  (menv '(((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv
   '(((let (_) (-> (app f2 #f) <-))) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(let (_) (-> (app f2 #f) <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list 'eval '(let ((-> _ = (app f1 #t) <-)) bod) (menv '(((top)))))
 (list 'eval '(let ((-> _ = (app f1 #t) <-)) bod) (menv '((□? (f1)))))
 (list
  'eval
  '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (x1)
     (->
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
      <-))
  (menv '(((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
  (menv
   '(((let (_) (-> (app f2 #f) <-))) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv
   '(((λ (z) (-> (app z x1 x2) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list 'expr '(app (-> f1 <-) #t) (menv '(((top)))))
 (list 'expr '(app (-> f1 <-) #f) (menv '(((top)))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app
    (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
  (menv '()))
 (list
  'expr
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '(((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv
   '(((let (_) (-> (app f2 #f) <-))) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list
  'expr
  '(app
    (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
    (->
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
     <-))
  (menv '()))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv
   '(((let (_) (-> (app f2 #f) <-))) ((let ((-> _ = (app f1 #t) <-)) bod)))))
 (list 'refine (menv '((□? (f1))))))
29


(list 'query: '(let (_) (-> (app f1 #f) <-)) (menv '((□? (f1)))))

(list
 (list 'eval '(app f1 (-> #f <-)) (menv '(((top)))))
 (list
  'eval
  '(app z (-> x1 <-) x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list 'eval '(app (-> f1 <-) #f) (menv '((□? (f1)))))
 (list 'eval '(app (-> f1 <-) #f) (menv '(((top)))))
 (list
  'eval
  '(app (-> f2 <-) #f)
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app
    (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
  (menv '()))
 (list
  'eval
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '(((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app
    (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
    (->
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
     <-))
  (menv '()))
 (list
  'eval
  '(app
    (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
    (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
  (menv '(((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list 'eval '(let (_) (-> (app f1 #f) <-)) (menv '(((top)))))
 (list
  'eval
  '(let (_) (-> (app f2 #f) <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list 'eval '(let (_) (-> (app f1 #f) <-)) (menv '((□? (f1)))))
 (list
  'eval
  '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
  (menv
   '(((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (x1)
     (->
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
      <-))
  (menv '(((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (y1 y2) (-> y1 <-))
  (menv
   '(((λ (z) (-> (app z x1 x2) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'eval
  '(λ (z) (-> (app z x1 x2) <-))
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list 'expr '(app (-> f1 <-) #t) (menv '(((top)))))
 (list 'expr '(app (-> f1 <-) #f) (menv '(((top)))))
 (list
  'expr
  '(app (-> z <-) x1 x2)
  (menv
   '(((λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-)))
     ((let (_) (-> (app f2 #f) <-)))
     ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app
    (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
  (menv '()))
 (list
  'expr
  '(app
    (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
    (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
  (menv '(((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list
  'expr
  '(app
    (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
    (->
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
     <-))
  (menv '()))
 (list
  'expr
  '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
  (menv '(((let (_) (-> (app f2 #f) <-))) ((let (_) (-> (app f1 #f) <-))))))
 (list 'refine (menv '((□? (f1))))))
29

