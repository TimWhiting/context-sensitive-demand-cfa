'(clean-cache
  blur
  1
  25
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  103
  75
  23
  5
  67
  13
  80
  1
  14/15
  50
  #f
  124/25
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  25
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))\""
  96
  71
  20
  5
  64
  13
  77
  1
  103/111
  47
  #f
  353/71
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  25
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))\""
  63
  36
  23
  4
  29
  13
  42
  1
  5/6
  36
  #t
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  blur
  1
  25
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env ((□? (a n)))))\""
  49
  25
  20
  4
  24
  13
  37
  1
  15/16
  25
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  1
  25
  23
  let*
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))\""
  96
  70
  21
  5
  58
  13
  71
  1
  197/222
  48
  #f
  174/35
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  25
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))\""
  27
  11
  12
  4
  4
  4
  8
  1
  4/11
  11
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  25
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  25
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))\""
  12
  6
  4
  2
  3
  1
  4
  1
  1/2
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  25
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))\""
  27
  11
  12
  4
  4
  4
  8
  1
  4/11
  11
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  25
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  25
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))\""
  12
  6
  4
  2
  3
  1
  4
  1
  1/2
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  25
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env ((□? (a n)))))\""
  94
  68
  21
  5
  57
  13
  70
  1
  199/222
  48
  #f
  84/17
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  25
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))\""
  90
  64
  21
  5
  55
  13
  68
  1
  203/222
  46
  #f
  157/32
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  25
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))\""
  28
  16
  10
  2
  12
  6
  18
  1
  17/21
  6
  #f
  35/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  1
  25
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (a n)))))\""
  25
  13
  10
  2
  12
  6
  18
  1
  20/21
  5
  #f
  57/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  25
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))\""
  28
  12
  12
  4
  4
  4
  8
  1
  1/3
  12
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  25
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))\""
  12
  6
  4
  2
  3
  1
  4
  1
  1/2
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  25
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))\""
  34
  22
  10
  2
  18
  6
  24
  1
  9/11
  8
  #f
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  1
  25
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))\""
  25
  13
  10
  2
  12
  6
  18
  1
  7/8
  5
  #f
  57/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  25
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env ((□? (y)))))\""
  12
  6
  4
  2
  2
  1
  3
  1
  1/3
  5
  #f
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  1
  25
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  65
  37
  23
  5
  30
  13
  43
  1
  31/36
  36
  #f
  186/37
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  blur
  1
  25
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  102
  74
  23
  5
  66
  13
  79
  1
  109/117
  50
  #f
  183/37
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  1
  25
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  25
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))\""
  34
  22
  10
  2
  18
  6
  24
  1
  9/11
  8
  #f
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  blur
  1
  25
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))\""
  42
  29
  10
  3
  24
  6
  30
  1
  13/16
  15
  #t
  133/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  25
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env ((□? (a n)))))\""
  72
  48
  20
  4
  42
  13
  55
  1
  23/27
  34
  #t
  19/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  blur
  1
  25
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))\""
  98
  73
  20
  5
  66
  13
  79
  1
  215/234
  50
  #f
  362/73
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  blur
  1
  25
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))\""
  99
  74
  20
  5
  66
  13
  79
  1
  71/78
  51
  #t
  367/74
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  25
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))\""
  107
  82
  20
  5
  73
  13
  86
  1
  229/252
  59
  #t
  407/82
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  25
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))\""
  108
  83
  20
  5
  73
  13
  86
  1
  227/252
  60
  #t
  412/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  25
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))\""
  109
  84
  20
  5
  73
  13
  86
  1
  25/28
  60
  #f
  209/42
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  25
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))\""
  109
  84
  20
  5
  73
  13
  86
  1
  25/28
  60
  #f
  209/42
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  25
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))\""
  110
  85
  20
  5
  73
  13
  86
  1
  223/252
  61
  #t
  423/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  25
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (a n)))))\""
  111
  86
  20
  5
  73
  13
  86
  1
  221/252
  61
  #f
  427/86
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  25
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  111
  86
  20
  5
  73
  13
  86
  1
  221/252
  61
  #t
  427/86
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  25
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))\""
  112
  87
  20
  5
  73
  13
  86
  1
  73/84
  62
  #t
  144/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  25
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  116
  91
  20
  5
  77
  13
  90
  1
  119/135
  63
  #f
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  25
  23
  let*
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))\""
  117
  92
  20
  5
  77
  13
  90
  1
  118/135
  63
  #f
  461/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  25
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  117
  92
  20
  5
  77
  13
  90
  1
  118/135
  63
  #f
  461/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  25
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))\""
  118
  93
  20
  5
  77
  13
  90
  1
  13/15
  63
  #f
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  25
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env ((□? (y)))))\""
  119
  94
  20
  5
  77
  13
  90
  1
  31/36
  63
  #f
  471/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  25
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))\""
  120
  95
  20
  5
  77
  13
  90
  1
  461/540
  64
  #t
  476/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  25
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env ((□? (a n)))))\""
  121
  96
  20
  5
  77
  13
  90
  1
  457/540
  64
  #f
  241/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  25
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))\""
  122
  97
  20
  5
  77
  13
  90
  1
  151/180
  65
  #t
  487/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  25
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))\""
  124
  99
  20
  5
  78
  13
  91
  1
  149/180
  67
  #t
  497/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  1
  25
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  126
  100
  20
  6
  78
  13
  91
  1
  37/45
  67
  #f
  503/100
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  25
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  65
  37
  23
  5
  30
  13
  43
  1
  31/36
  36
  #f
  186/37
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  blur
  1
  25
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))\""
  81
  53
  23
  5
  45
  13
  58
  1
  47/54
  40
  #f
  256/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  25
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))\""
  81
  53
  23
  5
  45
  13
  58
  1
  47/54
  40
  #t
  256/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  25
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))\""
  82
  54
  23
  5
  45
  13
  58
  1
  139/162
  41
  #t
  29/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  25
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))\""
  107
  78
  23
  6
  67
  13
  80
  1
  211/234
  56
  #f
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  blur
  1
  25
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  110
  81
  23
  6
  70
  13
  83
  1
  112/123
  57
  #f
  407/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  25
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  110
  81
  23
  6
  70
  13
  83
  1
  112/123
  57
  #t
  407/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  25
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (a n)))))\""
  111
  82
  23
  6
  70
  13
  83
  1
  37/41
  57
  #f
  411/82
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  25
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))\""
  116
  87
  23
  6
  73
  13
  86
  1
  113/129
  62
  #t
  436/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  25
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env ((□? (y)))))\""
  117
  88
  23
  6
  73
  13
  86
  1
  449/516
  62
  #f
  221/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  25
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))\""
  118
  89
  23
  6
  73
  13
  86
  1
  445/516
  62
  #f
  446/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  25
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env ((□? (a n)))))\""
  118
  89
  23
  6
  73
  13
  86
  1
  445/516
  62
  #t
  446/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  25
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))\""
  122
  93
  23
  6
  76
  13
  89
  1
  227/264
  66
  #t
  466/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  25
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))\""
  122
  93
  23
  6
  76
  13
  89
  1
  227/264
  66
  #t
  466/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  25
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))\""
  123
  94
  23
  6
  76
  13
  89
  1
  75/88
  66
  #f
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  25
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))\""
  125
  96
  23
  6
  77
  13
  90
  1
  37/44
  68
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  25
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  126
  97
  23
  6
  78
  13
  91
  1
  38/45
  68
  #f
  486/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  25
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))\""
  127
  98
  23
  6
  78
  13
  91
  1
  113/135
  69
  #t
  491/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  25
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env ((□? (a n)))))\""
  128
  99
  23
  6
  78
  13
  91
  1
  112/135
  69
  #f
  497/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  25
  23
  let*
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))\""
  129
  100
  23
  6
  78
  13
  91
  1
  37/45
  69
  #f
  503/100
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  25
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))\""
  130
  101
  23
  6
  78
  13
  91
  1
  22/27
  70
  #t
  508/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  25
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))\""
  131
  102
  23
  6
  78
  13
  91
  1
  109/135
  71
  #t
  171/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  1
  25
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))\""
  132
  103
  23
  6
  78
  13
  91
  1
  4/5
  71
  #f
  519/103
  ((0 0 0) (0 0 0) (0 0 0)))
