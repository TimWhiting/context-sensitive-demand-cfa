'(clean-cache
  loop2-1
  1
  15
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  183
  154
  20
  9
  115
  16
  131
  1
  13/15
  91
  #f
  31/22
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  183
  154
  20
  9
  111
  16
  127
  1
  67/84
  90
  #f
  109/77
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  105
  79
  20
  6
  50
  16
  66
  1
  31/42
  49
  #f
  109/79
  ((5 5 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  215
  183
  22
  10
  106
  16
  122
  1
  25/36
  110
  #f
  90/61
  ((23/2 23/2 0) (12 12 0) (23/2 23/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  230
  198
  22
  10
  104
  16
  120
  1
  1711/2520
  119
  #f
  289/198
  ((13 13 0) (13 13 0) (13 13 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  151
  123
  20
  8
  82
  16
  98
  1
  52/63
  75
  #f
  57/41
  ((8 8 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  115
  87
  22
  6
  50
  16
  66
  1
  32/45
  55
  #f
  125/87
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  20
  13
  3
  4
  1
  2
  3
  1
  1/5
  9
  #f
  17/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  20
  13
  3
  4
  1
  2
  3
  1
  1/5
  9
  #f
  17/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  203
  171
  22
  10
  99
  16
  115
  1
  5483/7560
  104
  #f
  28/19
  ((11 11 0) (23/2 23/2 0) (23/2 23/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  131
  97
  27
  7
  50
  16
  66
  1
  23/40
  61
  #f
  155/97
  ((10 10 0) (21/2 21/2 0) (21/2 21/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  115
  87
  22
  6
  50
  16
  66
  1
  631/900
  55
  #f
  125/87
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  10
  5
  3
  2
  0
  0
  0
  1
  0
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  9
  4
  3
  2
  0
  0
  0
  1
  0
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  18
  13
  3
  2
  0
  0
  0
  1
  0
  9
  #f
  17/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  18
  13
  3
  2
  0
  0
  0
  1
  0
  9
  #f
  17/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  28
  23
  3
  2
  0
  0
  0
  1
  0
  16
  #f
  30/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  19
  14
  3
  2
  0
  0
  0
  1
  0
  9
  #f
  19/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  213
  181
  22
  10
  105
  16
  121
  1
  59/84
  110
  #f
  266/181
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  105
  79
  20
  6
  50
  16
  66
  1
  91/120
  49
  #f
  109/79
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  139
  103
  27
  9
  50
  16
  66
  1
  8/15
  63
  #f
  156/103
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  22
  14
  3
  5
  1
  2
  3
  1
  1/6
  9
  #f
  19/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  127
  91
  27
  9
  50
  16
  66
  1
  19/30
  58
  #f
  137/91
  ((8 8 0) (8 8 0) (8 8 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  30
  23
  3
  4
  7
  2
  9
  1
  1/3
  16
  #f
  30/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  21
  14
  3
  4
  1
  2
  3
  1
  1/6
  9
  #f
  19/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  182
  153
  20
  9
  114
  16
  130
  1
  19/22
  91
  #f
  215/153
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  20
  13
  3
  4
  1
  2
  3
  1
  1/5
  9
  #f
  17/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  21
  14
  3
  4
  1
  2
  3
  1
  1/6
  9
  #f
  19/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  113
  83
  21
  9
  50
  16
  66
  1
  5/7
  51
  #f
  115/83
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  180
  147
  21
  12
  105
  16
  121
  1
  52/63
  86
  #f
  208/147
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  180
  147
  21
  12
  105
  16
  121
  1
  52/63
  86
  #f
  208/147
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  181
  148
  21
  12
  105
  16
  121
  1
  121/147
  87
  #t
  105/74
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  185
  152
  21
  12
  108
  16
  124
  1
  719/882
  90
  #f
  215/152
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  219
  186
  21
  12
  110
  16
  126
  1
  1558/2205
  110
  #f
  133/93
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  220
  187
  21
  12
  110
  16
  126
  1
  1027/1470
  110
  #f
  268/187
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  221
  188
  21
  12
  110
  16
  126
  1
  3071/4410
  111
  #t
  135/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  222
  189
  21
  12
  110
  16
  126
  1
  3061/4410
  111
  #f
  272/189
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  223
  190
  21
  12
  110
  16
  126
  1
  18331/26460
  111
  #f
  137/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  224
  191
  21
  12
  110
  16
  126
  1
  3641/5292
  111
  #f
  276/191
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  226
  193
  21
  12
  111
  16
  127
  1
  3599/5292
  111
  #f
  280/193
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  229
  196
  21
  12
  111
  16
  127
  1
  3571/5292
  113
  #f
  143/98
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  236
  203
  21
  12
  111
  16
  127
  1
  389/588
  118
  #f
  295/203
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  238
  205
  21
  12
  111
  16
  127
  1
  2903/4410
  119
  #f
  298/205
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  239
  206
  21
  12
  111
  16
  127
  1
  5701/8820
  119
  #f
  150/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  239
  206
  21
  12
  111
  16
  127
  1
  5701/8820
  119
  #f
  150/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  240
  207
  21
  12
  111
  16
  127
  1
  1877/2940
  119
  #f
  302/207
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  245
  212
  21
  12
  116
  16
  132
  1
  6121/9240
  121
  #f
  155/106
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  255
  222
  21
  12
  116
  16
  132
  1
  1157/1848
  125
  #f
  163/111
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  256
  223
  21
  12
  116
  16
  132
  1
  381/616
  125
  #f
  328/223
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  257
  224
  21
  12
  117
  16
  133
  1
  79/126
  125
  #f
  165/112
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  258
  225
  21
  12
  117
  16
  133
  1
  1774/2835
  125
  #f
  332/225
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  259
  226
  21
  12
  117
  16
  133
  1
  3541/5670
  125
  #f
  167/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  21
  14
  3
  4
  1
  2
  3
  1
  1/6
  9
  #f
  19/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  21
  14
  3
  4
  1
  2
  3
  1
  1/6
  9
  #f
  19/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  109
  83
  20
  6
  50
  16
  66
  1
  227/315
  51
  #f
  115/83
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  206
  177
  20
  9
  104
  16
  120
  1
  12829/17640
  105
  #f
  84/59
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  207
  178
  20
  9
  104
  16
  120
  1
  38417/52920
  105
  #f
  127/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  207
  178
  20
  9
  104
  16
  120
  1
  38417/52920
  105
  #f
  127/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  224
  191
  21
  12
  104
  16
  120
  1
  35477/52920
  110
  #f
  275/191
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  225
  192
  21
  12
  104
  16
  120
  1
  5051/7560
  111
  #t
  277/192
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  232
  199
  21
  12
  104
  16
  120
  1
  34607/52920
  116
  #f
  286/199
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  236
  203
  21
  12
  107
  16
  123
  1
  1711/2646
  117
  #f
  293/203
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  237
  204
  21
  12
  107
  16
  123
  1
  3359/5292
  117
  #f
  295/204
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  240
  207
  21
  12
  107
  16
  123
  1
  1663/2646
  119
  #f
  301/207
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  242
  209
  21
  12
  108
  16
  124
  1
  821/1323
  119
  #f
  305/209
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  242
  209
  21
  12
  108
  16
  124
  1
  821/1323
  119
  #f
  305/209
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  246
  213
  21
  12
  111
  16
  127
  1
  1621/2646
  122
  #f
  310/213
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  247
  214
  21
  12
  111
  16
  127
  1
  800/1323
  122
  #f
  156/107
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  248
  215
  21
  12
  111
  16
  127
  1
  3193/5292
  123
  #t
  314/215
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  249
  216
  21
  12
  111
  16
  127
  1
  59/98
  123
  #f
  79/54
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  255
  222
  21
  12
  117
  16
  133
  1
  601/945
  125
  #f
  163/111
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  255
  222
  21
  12
  117
  16
  133
  1
  601/945
  125
  #f
  163/111
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  255
  222
  21
  12
  117
  16
  133
  1
  601/945
  125
  #f
  163/111
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  256
  223
  21
  12
  117
  16
  133
  1
  3599/5670
  125
  #f
  328/223
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  257
  224
  21
  12
  117
  16
  133
  1
  3557/5670
  125
  #f
  165/112
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  257
  224
  21
  12
  117
  16
  133
  1
  3557/5670
  125
  #f
  165/112
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  259
  226
  21
  12
  117
  16
  133
  1
  8849/14175
  126
  #f
  333/226
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  260
  227
  21
  12
  117
  16
  133
  1
  17663/28350
  126
  #f
  335/227
  ((0 0 0) (0 0 0) (0 0 0)))
