'(clean-cache
  loop2-1
  1
  15
  45
  letrec
  "'(eval ((top) letrec (lp1) ...) (env ()))"
  #f
  183
  154
  20
  9
  115
  16
  131
  1
  13/15
  91
  #f
  31/22
  ((8 8 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  lambda
  "'(eval (letrec (... () (lp1 (-> (λ (i x) ...) <-)) () ...) ...) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  match
  "'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))"
  #f
  183
  154
  20
  9
  111
  16
  127
  1
  67/84
  90
  #f
  109/77
  ((9 9 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  ref-or-constructor
  "'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))"
  #f
  105
  79
  20
  6
  50
  16
  66
  1
  31/42
  49
  #f
  109/79
  ((5 5 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  letrec
  "'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))"
  #f
  215
  183
  22
  10
  106
  16
  122
  1
  25/36
  110
  #f
  90/61
  ((12 12 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  lambda
  "'(eval\n  (letrec (... () (lp2 (-> (λ (j f y) ...) <-)) () ...) ...)\n  (env ((□? (i x)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  match
  "'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))"
  #f
  230
  198
  22
  10
  104
  16
  120
  1
  1711/2520
  119
  #f
  289/198
  ((13 13 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  app
  "'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))"
  #f
  151
  123
  20
  8
  82
  16
  98
  1
  52/63
  75
  #f
  57/41
  ((7 7 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  ref-or-constructor
  "'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))"
  #f
  115
  87
  22
  6
  50
  16
  66
  1
  32/45
  55
  #f
  125/87
  ((7 7 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  app
  "'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))"
  #f
  20
  13
  3
  4
  1
  2
  3
  1
  1/5
  9
  #f
  17/13
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  number
  "'(eval (app - i (-> 1 <-)) (env ((□? (j f y)) (□? (i x)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  ref-or-constructor
  "'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))"
  #f
  20
  13
  3
  4
  1
  2
  3
  1
  1/5
  9
  #f
  17/13
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  ref-or-constructor
  "'(eval (app (-> - <-) i 1) (env ((□? (j f y)) (□? (i x)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  ref-or-constructor
  "'(eval (app (-> lp1 <-) (app - i 1) y) (env ((□? (j f y)) (□? (i x)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  app
  "'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))"
  #f
  203
  171
  22
  10
  99
  16
  115
  1
  5483/7560
  104
  #f
  28/19
  ((11 11 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  app
  "'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))"
  #f
  131
  97
  27
  7
  50
  16
  66
  1
  23/40
  61
  #f
  155/97
  ((10 10 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  ref-or-constructor
  "'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))"
  #f
  115
  87
  22
  6
  50
  16
  66
  1
  631/900
  55
  #f
  125/87
  ((7 7 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  ref-or-constructor
  "'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))"
  #f
  10
  5
  3
  2
  0
  0
  0
  1
  0
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  ref-or-constructor
  "'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))"
  #f
  9
  4
  3
  2
  0
  0
  0
  1
  0
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  app
  "'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))"
  #f
  18
  13
  3
  2
  0
  0
  0
  1
  0
  9
  #f
  17/13
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  number
  "'(eval (app - j (-> 1 <-)) (env ((□? (j f y)) (□? (i x)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  ref-or-constructor
  "'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))"
  #f
  18
  13
  3
  2
  0
  0
  0
  1
  0
  9
  #f
  17/13
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  ref-or-constructor
  "'(eval (app (-> - <-) j 1) (env ((□? (j f y)) (□? (i x)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  ref-or-constructor
  "'(eval\n  (app (-> lp2 <-) (app - j 1) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))"
  #t
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  app
  "'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))"
  #f
  28
  23
  3
  2
  0
  0
  0
  1
  0
  16
  #f
  30/23
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  ref-or-constructor
  "'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))"
  #f
  19
  14
  3
  2
  0
  0
  0
  1
  0
  9
  #f
  19/14
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  number
  "'(eval (app = (-> 0 <-) j) (env ((□? (j f y)) (□? (i x)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  ref-or-constructor
  "'(eval (app (-> = <-) 0 j) (env ((□? (j f y)) (□? (i x)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  app
  "'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))"
  #f
  213
  181
  22
  10
  105
  16
  121
  1
  59/84
  110
  #f
  266/181
  ((12 12 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  ref-or-constructor
  "'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))"
  #f
  105
  79
  20
  6
  50
  16
  66
  1
  91/120
  49
  #f
  109/79
  ((5 5 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  lambda
  "'(eval (app lp2 10 (-> (λ (n) ...) <-) x) (env ((□? (i x)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  app
  "'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))"
  #f
  139
  103
  27
  9
  50
  16
  66
  1
  8/15
  63
  #f
  156/103
  ((9 9 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  ref-or-constructor
  "'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))"
  #f
  22
  14
  3
  5
  1
  2
  3
  1
  1/6
  9
  #f
  19/14
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  ref-or-constructor
  "'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))"
  #f
  127
  91
  27
  9
  50
  16
  66
  1
  19/30
  58
  #f
  137/91
  ((8 8 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  ref-or-constructor
  "'(eval (app (-> + <-) n i) (env ((□? (n)) (□? (i x)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  number
  "'(eval (app lp2 (-> 10 <-) (λ (n) ...) x) (env ((□? (i x)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  ref-or-constructor
  "'(eval (app (-> lp2 <-) 10 (λ (n) ...) x) (env ((□? (i x)))))"
  #t
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  app
  "'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))"
  #f
  30
  23
  3
  4
  7
  2
  9
  1
  1/3
  16
  #f
  30/23
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  ref-or-constructor
  "'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))"
  #f
  21
  14
  3
  4
  1
  2
  3
  1
  1/6
  9
  #f
  19/14
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  number
  "'(eval (app = (-> 0 <-) i) (env ((□? (i x)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  ref-or-constructor
  "'(eval (app (-> = <-) 0 i) (env ((□? (i x)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  app
  "'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))"
  #f
  182
  153
  20
  9
  114
  16
  130
  1
  19/22
  91
  #f
  215/153
  ((8 8 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  number
  "'(eval (app lp1 10 (-> 0 <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  number
  "'(eval (app lp1 (-> 10 <-) 0) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  45
  ref-or-constructor
  "'(eval (app (-> lp1 <-) 10 0) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
