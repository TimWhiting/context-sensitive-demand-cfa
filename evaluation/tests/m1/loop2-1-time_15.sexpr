'(clean-cache
  loop2-1
  1
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  #f)
'(clean-cache
  loop2-1
  1
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  20
  13
  3
  4
  1
  2
  3
  1
  1/5
  3
  #f
  55/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  20
  13
  3
  4
  1
  2
  3
  1
  1/5
  3
  #f
  55/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  loop2-1
  1
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  10
  5
  3
  2
  0
  0
  0
  1
  0
  5
  #t
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  9
  4
  3
  2
  0
  0
  0
  1
  0
  4
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  18
  13
  3
  2
  0
  0
  0
  1
  0
  3
  #f
  55/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  18
  13
  3
  2
  0
  0
  0
  1
  0
  3
  #f
  55/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  28
  23
  3
  2
  0
  0
  0
  1
  0
  6
  #f
  100/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  19
  14
  3
  2
  0
  0
  0
  1
  0
  3
  #f
  59/14
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  loop2-1
  1
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  22
  14
  3
  5
  1
  2
  3
  1
  1/6
  3
  #f
  59/14
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  30
  23
  3
  4
  7
  2
  9
  1
  1/3
  6
  #f
  100/23
  ((2 5/2 0) (2 5/2 0) (2 2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  21
  14
  3
  4
  1
  2
  3
  1
  1/6
  3
  #f
  59/14
  ((3/2 3/2 0) (3/2 3/2 0) (2 2 0)))
'(clean-cache
  loop2-1
  1
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  22
  14
  3
  5
  1
  2
  3
  1
  1/6
  3
  #f
  59/14
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  30
  23
  3
  4
  7
  2
  9
  1
  1/3
  6
  #f
  100/23
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  18
  13
  3
  2
  0
  0
  0
  1
  0
  3
  #f
  55/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  19
  14
  3
  2
  0
  0
  0
  1
  0
  3
  #f
  59/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  20
  13
  3
  4
  1
  2
  3
  1
  1/5
  3
  #f
  55/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  116
  86
  21
  9
  50
  16
  66
  1
  185/252
  36
  #f
  383/86
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  117
  87
  21
  9
  50
  16
  66
  1
  925/1323
  36
  #f
  129/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  118
  88
  21
  9
  50
  16
  66
  1
  925/1386
  36
  #f
  391/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  118
  88
  21
  9
  50
  16
  66
  1
  925/1386
  36
  #t
  391/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  118
  88
  21
  9
  50
  16
  66
  1
  925/1386
  36
  #f
  391/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  118
  88
  21
  9
  50
  16
  66
  1
  925/1386
  36
  #f
  391/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  157
  127
  21
  9
  68
  16
  84
  1
  1156/1953
  46
  #f
  559/127
  ((9/2 5 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  158
  128
  21
  9
  68
  16
  84
  1
  1150/1953
  46
  #f
  563/128
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  203
  170
  21
  12
  109
  16
  125
  1
  10097/13230
  56
  #f
  751/170
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  204
  171
  21
  12
  109
  16
  125
  1
  10067/13230
  57
  #t
  757/171
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  206
  173
  21
  12
  110
  16
  126
  1
  4981/6615
  57
  #f
  765/173
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  9
  4
  3
  2
  0
  0
  0
  1
  0
  4
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  20
  13
  3
  4
  1
  2
  3
  1
  1/5
  3
  #f
  55/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  1
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  1
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  1
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  21
  14
  3
  4
  1
  2
  3
  1
  1/6
  3
  #f
  59/14
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  75
  61
  10
  4
  31
  6
  37
  1
  1/2
  15
  #f
  259/61
  ((15/2 8 0) (8 8 0) (8 17/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  75
  61
  10
  4
  31
  6
  37
  1
  1/2
  15
  #f
  259/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  136
  110
  20
  6
  68
  16
  84
  1
  56/81
  39
  #f
  479/110
  ((19/2 10 0) (19/2 19/2 0) (9 9 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  143
  117
  20
  6
  68
  16
  84
  1
  253/378
  41
  #f
  509/117
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  150
  124
  20
  6
  74
  16
  90
  1
  871/1260
  43
  #f
  541/124
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  151
  125
  20
  6
  74
  16
  90
  1
  871/1302
  43
  #f
  109/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  152
  126
  20
  6
  74
  16
  90
  1
  1303/1953
  43
  #f
  61/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  152
  126
  20
  6
  74
  16
  90
  1
  1303/1953
  43
  #f
  61/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  194
  165
  20
  9
  112
  16
  128
  1
  20779/26460
  52
  #f
  724/165
  ((9/2 5 0) (5 5 0) (9/2 5 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  195
  166
  20
  9
  112
  16
  128
  1
  20719/26460
  53
  #t
  365/83
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  229
  200
  20
  9
  112
  16
  128
  1
  8977/13230
  66
  #f
  89/20
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  230
  201
  20
  9
  112
  16
  128
  1
  1991/2940
  66
  #f
  896/201
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  238
  209
  20
  9
  120
  16
  136
  1
  1118/1575
  67
  #f
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  239
  210
  20
  9
  120
  16
  136
  1
  20089/28350
  67
  #f
  187/42
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  241
  211
  20
  10
  120
  16
  136
  1
  19879/28350
  67
  #f
  939/211
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  242
  212
  20
  10
  120
  16
  136
  1
  19753/28350
  67
  #f
  943/212
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  243
  213
  20
  10
  120
  16
  136
  1
  19543/28350
  67
  #f
  947/213
  ((0 0 0) (0 0 0) (0 0 0)))
