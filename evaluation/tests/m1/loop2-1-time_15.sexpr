'(clean-cache
  loop2-1
  1
  15
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  183
  154
  20
  9
  115
  16
  131
  1
  13/15
  52
  #f
  337/77
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  183
  154
  20
  9
  111
  16
  127
  1
  67/84
  51
  #f
  675/154
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  105
  79
  20
  6
  50
  16
  66
  1
  31/42
  32
  #f
  348/79
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  215
  183
  22
  10
  106
  16
  122
  1
  25/36
  65
  #f
  273/61
  ((13 13 0) (13 13 0) (13 13 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  230
  198
  22
  10
  104
  16
  120
  1
  1711/2520
  72
  #f
  445/99
  ((14 14 0) (14 14 0) (14 14 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  151
  123
  20
  8
  82
  16
  98
  1
  52/63
  47
  #f
  181/41
  ((8 8 0) (8 8 0) (17/2 17/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  115
  87
  22
  6
  50
  16
  66
  1
  32/45
  38
  #f
  392/87
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  20
  13
  3
  4
  1
  2
  3
  1
  1/5
  3
  #f
  55/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  20
  13
  3
  4
  1
  2
  3
  1
  1/5
  3
  #f
  55/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  203
  171
  22
  10
  99
  16
  115
  1
  5483/7560
  63
  #f
  769/171
  ((12 12 0) (12 12 0) (12 12 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  131
  97
  27
  7
  50
  16
  66
  1
  23/40
  44
  #f
  454/97
  ((11 11 0) (21/2 21/2 0) (21/2 21/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  115
  87
  22
  6
  50
  16
  66
  1
  631/900
  38
  #f
  392/87
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  10
  5
  3
  2
  0
  0
  0
  1
  0
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  9
  4
  3
  2
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  18
  13
  3
  2
  0
  0
  0
  1
  0
  3
  #f
  55/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  18
  13
  3
  2
  0
  0
  0
  1
  0
  3
  #f
  55/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  28
  23
  3
  2
  0
  0
  0
  1
  0
  6
  #f
  100/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  19
  14
  3
  2
  0
  0
  0
  1
  0
  3
  #f
  59/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  213
  181
  22
  10
  105
  16
  121
  1
  59/84
  65
  #f
  811/181
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  105
  79
  20
  6
  50
  16
  66
  1
  91/120
  32
  #f
  348/79
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  139
  103
  27
  9
  50
  16
  66
  1
  8/15
  45
  #f
  470/103
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  22
  14
  3
  5
  1
  2
  3
  1
  1/6
  3
  #f
  59/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  127
  91
  27
  9
  50
  16
  66
  1
  19/30
  41
  #f
  418/91
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  30
  23
  3
  4
  7
  2
  9
  1
  1/3
  6
  #f
  100/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  21
  14
  3
  4
  1
  2
  3
  1
  1/6
  3
  #f
  59/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  1
  15
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  182
  153
  20
  9
  114
  16
  130
  1
  19/22
  52
  #f
  670/153
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  203
  171
  22
  10
  99
  16
  115
  1
  5483/7560
  63
  #f
  769/171
  ((12 12 0) (12 12 0) (12 12 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  219
  187
  22
  10
  115
  16
  131
  1
  304/405
  68
  #f
  838/187
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  220
  188
  22
  10
  115
  16
  131
  1
  1514/2025
  68
  #f
  421/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  220
  188
  22
  10
  115
  16
  131
  1
  1514/2025
  68
  #f
  421/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  220
  188
  22
  10
  115
  16
  131
  1
  1514/2025
  68
  #t
  421/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  221
  189
  22
  10
  115
  16
  131
  1
  1499/2025
  68
  #f
  94/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  222
  190
  22
  10
  115
  16
  131
  1
  1484/2025
  68
  #f
  426/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  244
  212
  22
  10
  117
  16
  133
  1
  6539/9450
  76
  #f
  238/53
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  245
  213
  22
  10
  117
  16
  133
  1
  6469/9450
  76
  #f
  956/213
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  247
  214
  22
  11
  117
  16
  133
  1
  237/350
  76
  #f
  480/107
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  248
  215
  22
  11
  117
  16
  133
  1
  9581/14175
  76
  #f
  966/215
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  249
  216
  22
  11
  117
  16
  133
  1
  19127/28350
  76
  #f
  485/108
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  250
  217
  22
  11
  117
  16
  133
  1
  3182/4725
  77
  #t
  976/217
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  254
  218
  23
  13
  117
  16
  133
  1
  1049/1575
  77
  #f
  490/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  254
  218
  23
  13
  117
  16
  133
  1
  1049/1575
  77
  #f
  490/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  264
  228
  23
  13
  117
  16
  133
  1
  331/525
  80
  #f
  341/76
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  266
  230
  23
  13
  117
  16
  133
  1
  847/1350
  81
  #f
  516/115
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  267
  231
  23
  13
  117
  16
  133
  1
  847/1350
  81
  #f
  148/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  268
  232
  23
  13
  117
  16
  133
  1
  847/1350
  81
  #f
  130/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  269
  233
  23
  13
  117
  16
  133
  1
  416/675
  81
  #f
  1044/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  270
  234
  23
  13
  117
  16
  133
  1
  413/675
  81
  #f
  524/117
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  270
  234
  23
  13
  117
  16
  133
  1
  413/675
  81
  #f
  524/117
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  270
  234
  23
  13
  117
  16
  133
  1
  413/675
  81
  #f
  524/117
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  270
  234
  23
  13
  117
  16
  133
  1
  413/675
  81
  #f
  524/117
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  271
  235
  23
  13
  117
  16
  133
  1
  136/225
  81
  #f
  1052/235
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  1
  15
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  272
  236
  23
  13
  117
  16
  133
  1
  403/675
  81
  #f
  264/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  203
  171
  22
  10
  99
  16
  115
  1
  5483/7560
  63
  #f
  769/171
  ((23/2 23/2 0) (23/2 23/2 0) (23/2 23/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  218
  186
  22
  10
  114
  16
  130
  1
  295/396
  68
  #f
  139/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  219
  187
  22
  10
  114
  16
  130
  1
  581/792
  68
  #f
  838/187
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  219
  187
  22
  10
  114
  16
  130
  1
  581/792
  68
  #f
  838/187
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  220
  188
  22
  10
  114
  16
  130
  1
  2887/3960
  68
  #f
  421/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  220
  188
  22
  10
  114
  16
  130
  1
  2887/3960
  68
  #f
  421/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  221
  189
  22
  10
  114
  16
  130
  1
  131/180
  69
  #t
  848/189
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  222
  190
  22
  10
  114
  16
  130
  1
  713/990
  69
  #f
  426/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  232
  200
  22
  10
  114
  16
  130
  1
  2759/3960
  72
  #f
  897/200
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  233
  201
  22
  10
  114
  16
  130
  1
  153/220
  72
  #f
  901/201
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  246
  214
  22
  10
  116
  16
  132
  1
  9343/13860
  77
  #f
  481/107
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  251
  215
  23
  13
  116
  16
  132
  1
  4619/6930
  77
  #f
  966/215
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  252
  216
  23
  13
  117
  16
  133
  1
  9553/14175
  77
  #f
  485/108
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  253
  217
  23
  13
  117
  16
  133
  1
  9448/14175
  77
  #f
  974/217
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  263
  227
  23
  13
  117
  16
  133
  1
  1772/2835
  80
  #f
  1017/227
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  264
  228
  23
  13
  117
  16
  133
  1
  1772/2835
  80
  #f
  1021/228
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  266
  230
  23
  13
  117
  16
  133
  1
  2519/4050
  81
  #f
  103/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  266
  230
  23
  13
  117
  16
  133
  1
  2519/4050
  81
  #t
  103/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  267
  231
  23
  13
  117
  16
  133
  1
  2489/4050
  81
  #f
  94/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  267
  231
  23
  13
  117
  16
  133
  1
  2489/4050
  81
  #f
  94/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  268
  232
  23
  13
  117
  16
  133
  1
  46/75
  81
  #f
  519/116
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  269
  233
  23
  13
  117
  16
  133
  1
  46/75
  81
  #f
  1042/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  270
  234
  23
  13
  117
  16
  133
  1
  413/675
  81
  #f
  523/117
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  270
  234
  23
  13
  117
  16
  133
  1
  413/675
  81
  #f
  523/117
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  271
  235
  23
  13
  117
  16
  133
  1
  136/225
  81
  #f
  210/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  1
  15
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  272
  236
  23
  13
  117
  16
  133
  1
  403/675
  81
  #f
  264/59
  ((0 0 0) (0 0 0) (0 0 0)))
