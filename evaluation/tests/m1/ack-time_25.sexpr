'(clean-cache
  ack
  1
  25
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  154
  147
  5
  2
  142
  2
  144
  1
  39/40
  39
  #f
  643/147
  ((15/2 8 0) (15/2 15/2 0) (8 8 0)))
'(clean-cache
  ack
  1
  25
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  152
  145
  5
  2
  138
  2
  140
  1
  711/740
  38
  #f
  636/145
  ((17/2 17/2 0) (17/2 17/2 0) (9 9 0)))
'(clean-cache
  ack
  1
  25
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  135
  128
  5
  2
  124
  2
  126
  1
  723/740
  34
  #f
  279/64
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  ack
  1
  25
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  129
  122
  5
  2
  121
  2
  123
  1
  147/148
  32
  #f
  266/61
  ((9 37/2 0) (7 7 0) (13/2 13/2 0)))
'(clean-cache
  ack
  1
  25
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  143
  136
  5
  2
  129
  2
  131
  1
  711/740
  36
  #f
  149/34
  ((8 8 0) (17/2 9 0) (9 9 0)))
'(clean-cache
  ack
  1
  25
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  140
  133
  5
  2
  122
  2
  124
  1
  139/148
  35
  #f
  579/133
  ((17/2 17/2 0) (17/2 17/2 0) (9 9 0)))
'(clean-cache
  ack
  1
  25
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  47
  41
  5
  1
  37
  2
  39
  1
  23/25
  9
  #f
  173/41
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  ack
  1
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  44
  38
  5
  1
  37
  2
  39
  1
  49/50
  8
  #f
  80/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  ack
  1
  25
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  136
  129
  5
  2
  122
  2
  124
  1
  711/740
  35
  #f
  563/129
  ((15/2 15/2 0) (15/2 15/2 0) (7 7 0)))
'(clean-cache
  ack
  1
  25
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  133
  126
  5
  2
  121
  2
  123
  1
  36/37
  33
  #f
  61/14
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  ack
  1
  25
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  132
  125
  5
  2
  121
  2
  123
  1
  181/185
  33
  #f
  109/25
  ((8 8 0) (7 7 0) (7 7 0)))
'(clean-cache
  ack
  1
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  129
  122
  5
  2
  121
  2
  123
  1
  184/185
  32
  #f
  266/61
  ((6 6 0) (13/2 13/2 0) (15/2 15/2 0)))
'(clean-cache
  ack
  1
  25
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  44
  38
  5
  1
  37
  2
  39
  1
  49/50
  8
  #f
  80/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  ack
  1
  25
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  47
  41
  5
  1
  37
  2
  39
  1
  23/25
  9
  #f
  173/41
  ((5/2 5/2 0) (5/2 3 0) (5/2 3 0)))
'(clean-cache
  ack
  1
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  44
  38
  5
  1
  37
  2
  39
  1
  49/50
  8
  #f
  80/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  ack
  1
  25
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  135
  128
  5
  2
  124
  2
  126
  1
  723/740
  34
  #f
  35/8
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  ack
  1
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  129
  122
  5
  2
  121
  2
  123
  1
  147/148
  32
  #f
  266/61
  ((6 13/2 0) (6 6 0) (6 6 0)))
'(clean-cache
  ack
  1
  25
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  59
  53
  5
  1
  49
  2
  51
  1
  31/35
  13
  #f
  227/53
  ((4 4 0) (3 3 0) (3 3 0)))
'(clean-cache
  ack
  1
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  44
  38
  5
  1
  37
  2
  39
  1
  10/11
  8
  #f
  80/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  ack
  1
  25
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  153
  146
  5
  2
  141
  2
  143
  1
  38/39
  39
  #f
  639/146
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  ack
  1
  25
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  132
  125
  5
  2
  121
  2
  123
  1
  181/185
  33
  #f
  109/25
  ((7 7 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  ack
  1
  25
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  152
  145
  5
  2
  141
  2
  143
  1
  191/195
  39
  #f
  127/29
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  1
  25
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  153
  146
  5
  2
  141
  2
  143
  1
  38/39
  39
  #f
  641/146
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  154
  147
  5
  2
  141
  2
  143
  1
  63/65
  39
  #f
  215/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  25
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  155
  148
  5
  2
  141
  2
  143
  1
  188/195
  39
  #f
  651/148
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  25
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  156
  149
  5
  2
  142
  2
  144
  1
  193/200
  39
  #f
  655/149
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  156
  149
  5
  2
  142
  2
  144
  1
  193/200
  39
  #f
  655/149
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  25
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  157
  150
  5
  2
  142
  2
  144
  1
  24/25
  39
  #f
  659/150
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  25
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  158
  151
  5
  2
  142
  2
  144
  1
  191/200
  39
  #f
  663/151
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  159
  152
  5
  2
  142
  2
  144
  1
  19/20
  39
  #f
  667/152
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  160
  153
  5
  2
  142
  2
  144
  1
  189/200
  39
  #f
  671/153
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  25
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  161
  154
  5
  2
  142
  2
  144
  1
  47/50
  39
  #f
  675/154
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  25
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  162
  155
  5
  2
  142
  2
  144
  1
  187/200
  39
  #f
  679/155
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  25
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  163
  156
  5
  2
  142
  2
  144
  1
  93/100
  39
  #f
  683/156
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  25
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  164
  157
  5
  2
  142
  2
  144
  1
  37/40
  39
  #f
  687/157
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  165
  158
  5
  2
  142
  2
  144
  1
  23/25
  39
  #f
  691/158
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  25
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  166
  159
  5
  2
  142
  2
  144
  1
  183/200
  39
  #f
  695/159
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  25
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  167
  160
  5
  2
  142
  2
  144
  1
  91/100
  39
  #f
  699/160
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  25
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  168
  161
  5
  2
  142
  2
  144
  1
  181/200
  39
  #f
  703/161
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  1
  25
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  169
  162
  5
  2
  142
  2
  144
  1
  9/10
  39
  #f
  707/162
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  44
  38
  5
  1
  37
  2
  39
  1
  49/50
  8
  #f
  80/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  ack
  1
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  45
  39
  5
  1
  37
  2
  39
  1
  24/25
  8
  #f
  164/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  25
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  150
  143
  5
  2
  141
  2
  143
  1
  193/195
  38
  #f
  626/143
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  ack
  1
  25
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  151
  144
  5
  2
  141
  2
  143
  1
  64/65
  38
  #f
  35/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  25
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  152
  145
  5
  2
  141
  2
  143
  1
  191/195
  38
  #f
  634/145
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  153
  146
  5
  2
  141
  2
  143
  1
  38/39
  38
  #f
  319/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  25
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  154
  147
  5
  2
  141
  2
  143
  1
  63/65
  38
  #f
  214/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  25
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  155
  148
  5
  2
  141
  2
  143
  1
  188/195
  38
  #f
  162/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  25
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  156
  149
  5
  2
  141
  2
  143
  1
  187/195
  38
  #f
  652/149
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  25
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  157
  150
  5
  2
  141
  2
  143
  1
  62/65
  38
  #f
  328/75
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  25
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  158
  151
  5
  2
  141
  2
  143
  1
  37/39
  38
  #f
  662/151
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  25
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  159
  152
  5
  2
  141
  2
  143
  1
  184/195
  38
  #f
  333/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  25
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  160
  153
  5
  2
  141
  2
  143
  1
  61/65
  38
  #f
  670/153
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  25
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  161
  154
  5
  2
  141
  2
  143
  1
  14/15
  38
  #f
  337/77
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  162
  155
  5
  2
  141
  2
  143
  1
  181/195
  38
  #f
  678/155
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  25
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  163
  156
  5
  2
  141
  2
  143
  1
  12/13
  38
  #f
  341/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  164
  157
  5
  2
  141
  2
  143
  1
  179/195
  38
  #f
  686/157
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  25
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  165
  158
  5
  2
  142
  2
  144
  1
  23/25
  38
  #f
  345/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  25
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  166
  159
  5
  2
  142
  2
  144
  1
  183/200
  38
  #f
  694/159
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  1
  25
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  167
  160
  5
  2
  142
  2
  144
  1
  91/100
  38
  #f
  349/80
  ((0 0 0) (0 0 0) (0 0 0)))
