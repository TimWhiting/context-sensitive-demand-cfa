'(clean-cache
  eta
  1
  25
  13
  letrec*
  "\"'(eval ((top) letrec* (do-something ... id) ...) (env ()))\""
  22
  12
  7
  3
  12
  7
  19
  1
  1
  12
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  25
  13
  let
  "\"'(eval (λ (y) (-> (let (_) ...) <-)) (env ((□? (y)))))\""
  10
  6
  3
  1
  4
  3
  7
  1
  2/3
  4
  #f
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  25
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app do-something) <-)) () ...) ...)\n  (env ((□? (y)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  2
  #f
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  25
  13
  ref-or-constructor
  "\"'(eval (let (_) (-> y <-)) (env ((□? (y)))))\""
  7
  3
  3
  1
  2
  3
  5
  1
  2/3
  2
  #f
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  25
  13
  let
  "\"'(eval (letrec* (do-something ... id) (-> (let (_) ...) <-)) (env ()))\""
  21
  11
  7
  3
  11
  7
  18
  1
  1
  11
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  25
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app (app id (λ (a) ...)) (app #t)) <-)) () ...) ...)\n  (env ()))\""
  20
  10
  7
  3
  10
  7
  17
  1
  1
  10
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  25
  13
  app
  "\"'(eval (app (app id (λ (a) ...)) (-> (app #t) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  25
  13
  app
  "\"'(eval (app (-> (app id (λ (a) ...)) <-) (app #t)) (env ()))\""
  10
  6
  3
  1
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  25
  13
  ref-or-constructor
  "\"'(eval (λ (a) (-> a <-)) (env ((□? (a)))))\""
  14
  5
  7
  2
  4
  7
  11
  1
  4/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  25
  13
  app
  "\"'(eval (let (_) (-> (app (app id (λ (b) ...)) (app #f)) <-)) (env ()))\""
  20
  10
  7
  3
  10
  7
  17
  1
  1
  10
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  25
  13
  app
  "\"'(eval (app (app id (λ (b) ...)) (-> (app #f) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  25
  13
  app
  "\"'(eval (app (-> (app id (λ (b) ...)) <-) (app #f)) (env ()))\""
  10
  6
  3
  1
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  25
  13
  ref-or-constructor
  "\"'(eval (λ (b) (-> b <-)) (env ((□? (b)))))\""
  14
  5
  7
  2
  4
  7
  11
  1
  4/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  25
  13
  ref-or-constructor
  "\"'(eval (let (_) (-> y <-)) (env ((□? (y)))))\""
  7
  3
  3
  1
  2
  3
  5
  1
  2/3
  2
  #f
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  25
  13
  ref-or-constructor
  "\"'(eval (λ (b) (-> b <-)) (env ((□? (b)))))\""
  17
  8
  7
  2
  6
  7
  13
  1
  3/4
  7
  #t
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  25
  13
  app
  "\"'(eval (app (-> (app id (λ (b) ...)) <-) (app #f)) (env ()))\""
  21
  11
  7
  3
  9
  7
  16
  1
  17/20
  10
  #t
  56/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  25
  13
  let
  "\"'(eval (λ (y) (-> (let (_) ...) <-)) (env ((□? (y)))))\""
  23
  13
  7
  3
  10
  7
  17
  1
  49/60
  11
  #f
  67/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  25
  13
  app
  "\"'(eval (app (-> (app id (λ (a) ...)) <-) (app #t)) (env ()))\""
  26
  16
  7
  3
  13
  7
  20
  1
  31/36
  14
  #t
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  25
  13
  app
  "\"'(eval (let (_) (-> (app (app id (λ (b) ...)) (app #f)) <-)) (env ()))\""
  29
  18
  7
  4
  15
  7
  22
  1
  71/78
  16
  #t
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  25
  13
  letrec*
  "\"'(eval ((top) letrec* (do-something ... id) ...) (env ()))\""
  31
  20
  7
  4
  17
  7
  24
  1
  83/90
  18
  #t
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  25
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app (app id (λ (a) ...)) (app #t)) <-)) () ...) ...)\n  (env ()))\""
  40
  24
  11
  5
  21
  11
  32
  1
  107/114
  22
  #t
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  25
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app do-something) <-)) () ...) ...)\n  (env ((□? (y)))))\""
  46
  29
  11
  6
  25
  11
  36
  1
  125/138
  25
  #f
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  25
  13
  app
  "\"'(eval (app (app id (λ (a) ...)) (-> (app #t) <-)) (env ()))\""
  46
  29
  11
  6
  25
  11
  36
  1
  125/138
  25
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  25
  13
  app
  "\"'(eval (app (app id (λ (b) ...)) (-> (app #f) <-)) (env ()))\""
  46
  29
  11
  6
  25
  11
  36
  1
  125/138
  25
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  25
  13
  let
  "\"'(eval (letrec* (do-something ... id) (-> (let (_) ...) <-)) (env ()))\""
  46
  29
  11
  6
  25
  11
  36
  1
  125/138
  25
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  25
  13
  ref-or-constructor
  "\"'(eval (λ (a) (-> a <-)) (env ((□? (a)))))\""
  48
  30
  11
  7
  25
  11
  36
  1
  61/69
  26
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  25
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app do-something) <-)) () ...) ...)\n  (env ((□? (y)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  2
  #f
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  25
  13
  app
  "\"'(eval (app (-> (app id (λ (a) ...)) <-) (app #t)) (env ()))\""
  16
  10
  3
  3
  8
  3
  11
  1
  4/5
  8
  #t
  24/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  25
  13
  ref-or-constructor
  "\"'(eval (λ (a) (-> a <-)) (env ((□? (a)))))\""
  25
  14
  7
  4
  11
  7
  18
  1
  21/26
  12
  #t
  34/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  25
  13
  letrec*
  "\"'(eval ((top) letrec* (do-something ... id) ...) (env ()))\""
  42
  26
  11
  5
  23
  11
  34
  1
  59/66
  24
  #t
  64/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  25
  13
  let
  "\"'(eval (λ (y) (-> (let (_) ...) <-)) (env ((□? (y)))))\""
  43
  27
  11
  5
  23
  11
  34
  1
  29/33
  24
  #f
  134/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  25
  13
  ref-or-constructor
  "\"'(eval (let (_) (-> y <-)) (env ((□? (y)))))\""
  44
  28
  11
  5
  23
  11
  34
  1
  19/22
  24
  #f
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  25
  13
  app
  "\"'(eval (let (_) (-> (app (app id (λ (b) ...)) (app #f)) <-)) (env ()))\""
  44
  28
  11
  5
  23
  11
  34
  1
  19/22
  24
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  25
  13
  let
  "\"'(eval (letrec* (do-something ... id) (-> (let (_) ...) <-)) (env ()))\""
  44
  28
  11
  5
  23
  11
  34
  1
  19/22
  24
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  25
  13
  app
  "\"'(eval (app (app id (λ (a) ...)) (-> (app #t) <-)) (env ()))\""
  44
  28
  11
  5
  23
  11
  34
  1
  19/22
  24
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  25
  13
  ref-or-constructor
  "\"'(eval (λ (b) (-> b <-)) (env ((□? (b)))))\""
  46
  29
  11
  6
  23
  11
  34
  1
  37/44
  25
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  25
  13
  app
  "\"'(eval (app (app id (λ (b) ...)) (-> (app #f) <-)) (env ()))\""
  46
  29
  11
  6
  23
  11
  34
  1
  37/44
  25
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  25
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app (app id (λ (a) ...)) (app #t)) <-)) () ...) ...)\n  (env ()))\""
  49
  31
  11
  7
  25
  11
  36
  1
  20/23
  27
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  25
  13
  app
  "\"'(eval (app (-> (app id (λ (b) ...)) <-) (app #f)) (env ()))\""
  49
  31
  11
  7
  25
  11
  36
  1
  20/23
  27
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
