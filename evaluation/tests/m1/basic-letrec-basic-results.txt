'(expression:
  (letrec ((a
            (λ (y)
              (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)))))
    (app a 2)))
(list 'query: '(app (-> a <-) 2) (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (y) (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(top) (menv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app - y (-> 1 <-)) (menv '((□? (y)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec ((->
            a
            =
            (λ (y)
              (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)))
            <-))
    bod)
 (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (y) (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> equal? <-) y 0) (menv '((□? (y)))))
'(clos/con: (#<procedure:do-demand-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match (app equal? y 0) ((#t) (app a (app - y 1))) (-> (#f) y <-))
 (menv '((□? (y)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match (app equal? y 0) (-> (#t) (app a (app - y 1)) <-) ((#f) y))
 (menv '((□? (y)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app equal? (-> y <-) 0) (menv '((□? (y)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app equal? y (-> 0 <-)) (menv '((□? (y)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list 'query: '(app a (-> (app - y 1) <-)) (menv '((□? (y)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(letrec (a) (-> (app a 2) <-)) (menv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y) (-> (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)) <-))
 (menv '((□? (y)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app - (-> y <-) 1) (menv '((□? (y)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app (-> a <-) (app - y 1)) (menv '((□? (y)))))
(list
 'clos/con:
 (list
  (list
   '(λ (y) (match (app equal? y 0) ((#t) (app a (app - y 1))) ((#f) y)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> - <-) y 1) (menv '((□? (y)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match (-> (app equal? y 0) <-) ((#t) (app a (app - y 1))) ((#f) y))
 (menv '((□? (y)))))
(list
 'clos/con:
 (list
  (list '(app #f) (menv '(((letrec (a) (-> (app a 2) <-))))))
  (list '(app #t) (menv '(((letrec (a) (-> (app a 2) <-))))))
  (list '(app #t) (menv '((□? (y)))))
  (list
   '(app #t)
   (menv
    '(((match (app equal? y 0) (-> (#t) (app a (app - y 1)) <-) ((#f) y))))))
  (list '(app #f) (menv '((□? (y)))))
  (list
   '(app #f)
   (menv
    '(((match (app equal? y 0) (-> (#t) (app a (app - y 1)) <-) ((#f) y))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app a (-> 2 <-)) (menv '()))
'(clos/con: ⊥)
'(literals: (2 ⊥ ⊥ ⊥))
