'(clean-cache
  mj09
  1
  15
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  41
  26
  10
  5
  26
  10
  36
  1
  1
  11
  #f
  115/26
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  mj09
  1
  15
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  92
  61
  20
  11
  44
  17
  61
  1
  11/15
  26
  #f
  282/61
  ((5 11/2 0) (5 5 0) (11/2 11/2 0)))
'(clean-cache
  mj09
  1
  15
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  74
  43
  20
  11
  32
  17
  49
  1
  43/57
  20
  #f
  200/43
  ((9/2 5 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  mj09
  1
  15
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  89
  58
  20
  11
  42
  17
  59
  1
  53/72
  26
  #f
  135/29
  ((11/2 11/2 0) (5 11/2 0) (5 5 0)))
'(clean-cache
  mj09
  1
  15
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  60
  40
  14
  6
  22
  13
  35
  1
  161/240
  23
  #f
  19/4
  ((4 4 0) (4 9/2 0) (9/2 9/2 0)))
'(clean-cache
  mj09
  1
  15
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  16
  8
  5
  3
  0
  0
  0
  1
  0
  5
  #f
  37/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  mj09
  1
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  1
  15
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  16
  8
  5
  3
  0
  0
  0
  1
  0
  5
  #f
  37/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  mj09
  1
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  1
  15
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  10
  5
  3
  2
  4
  3
  7
  1
  4/5
  4
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  1
  15
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  86
  55
  20
  11
  40
  17
  57
  1
  17/23
  26
  #f
  258/55
  ((5 5 0) (5 5 0) (5 11/2 0)))
'(clean-cache
  mj09
  1
  15
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  59
  37
  14
  8
  28
  13
  41
  1
  13/17
  20
  #f
  176/37
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  mj09
  1
  15
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  11
  5
  3
  3
  0
  0
  0
  1
  0
  2
  #f
  22/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  1
  15
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  83
  52
  20
  11
  38
  17
  55
  1
  49/66
  26
  #f
  123/26
  ((9/2 5 0) (5 5 0) (9/2 9/2 0)))
'(clean-cache
  mj09
  1
  15
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  62
  40
  14
  8
  30
  13
  43
  1
  41/54
  20
  #f
  47/10
  ((7/2 7/2 0) (4 4 0) (7/2 7/2 0)))
'(clean-cache
  mj09
  1
  15
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  40
  25
  10
  5
  25
  10
  35
  1
  1
  11
  #f
  111/25
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  mj09
  1
  15
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  11
  #f
  103/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  mj09
  1
  15
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  1
  15
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  11
  #f
  103/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  mj09
  1
  15
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  1
  15
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  39
  24
  10
  5
  24
  10
  34
  1
  1
  11
  #f
  107/24
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  mj09
  1
  15
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  86
  55
  20
  11
  40
  17
  57
  1
  17/23
  26
  #f
  258/55
  ((5 5 0) (9/2 5 0) (9/2 5 0)))
'(shuffled-cache
  0
  mj09
  1
  15
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  86
  55
  20
  11
  40
  17
  57
  1
  17/23
  26
  #f
  258/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  15
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  93
  61
  20
  12
  46
  17
  63
  1
  45/56
  28
  #f
  284/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  15
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  98
  66
  20
  12
  51
  17
  68
  1
  37/45
  29
  #f
  305/66
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  15
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  98
  66
  20
  12
  51
  17
  68
  1
  37/45
  29
  #t
  305/66
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  15
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  98
  66
  20
  12
  51
  17
  68
  1
  37/45
  29
  #f
  305/66
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  15
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  103
  67
  21
  15
  51
  17
  68
  1
  367/450
  29
  #f
  309/67
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  mj09
  1
  15
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  104
  68
  21
  15
  52
  17
  69
  1
  382/465
  29
  #f
  313/68
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  15
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  108
  69
  21
  18
  52
  17
  69
  1
  253/310
  29
  #f
  317/69
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  15
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  122
  82
  21
  19
  52
  17
  69
  1
  237/310
  36
  #f
  379/82
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  mj09
  1
  15
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  123
  83
  21
  19
  52
  17
  69
  1
  701/930
  36
  #f
  383/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  15
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  123
  83
  21
  19
  52
  17
  69
  1
  701/930
  36
  #t
  383/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  15
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  123
  83
  21
  19
  52
  17
  69
  1
  701/930
  36
  #f
  383/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  124
  84
  21
  19
  52
  17
  69
  1
  233/310
  37
  #t
  389/84
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  15
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  125
  85
  21
  19
  52
  17
  69
  1
  689/930
  37
  #f
  393/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  15
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  127
  87
  21
  19
  54
  17
  71
  1
  749/990
  37
  #f
  401/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  15
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  127
  87
  21
  19
  54
  17
  71
  1
  749/990
  37
  #f
  401/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  127
  87
  21
  19
  54
  17
  71
  1
  749/990
  37
  #t
  401/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  15
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  127
  87
  21
  19
  54
  17
  71
  1
  749/990
  37
  #f
  401/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  15
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  127
  87
  21
  19
  54
  17
  71
  1
  749/990
  37
  #f
  401/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  1
  15
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  127
  87
  21
  19
  54
  17
  71
  1
  749/990
  37
  #f
  401/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  15
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  91
  56
  22
  13
  38
  17
  55
  1
  31/44
  28
  #f
  135/28
  ((13/2 13/2 0) (13/2 7 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  mj09
  1
  15
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  102
  66
  22
  14
  48
  17
  65
  1
  25/31
  30
  #f
  52/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  15
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  102
  66
  22
  14
  48
  17
  65
  1
  25/31
  30
  #t
  52/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  15
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  106
  70
  22
  14
  51
  17
  68
  1
  74/93
  30
  #f
  164/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  107
  71
  22
  14
  51
  17
  68
  1
  49/62
  31
  #t
  335/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  15
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  111
  72
  22
  17
  51
  17
  68
  1
  1025/1302
  31
  #f
  113/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  15
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  112
  73
  22
  17
  51
  17
  68
  1
  509/651
  31
  #f
  345/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  15
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  116
  74
  22
  20
  51
  17
  68
  1
  337/434
  31
  #f
  349/74
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  15
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  119
  77
  22
  20
  51
  17
  68
  1
  997/1302
  33
  #f
  33/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  mj09
  1
  15
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  119
  77
  22
  20
  51
  17
  68
  1
  997/1302
  33
  #t
  33/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  15
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  122
  80
  22
  20
  54
  17
  71
  1
  544/693
  34
  #f
  47/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  15
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  122
  80
  22
  20
  54
  17
  71
  1
  544/693
  34
  #f
  47/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  15
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  123
  81
  22
  20
  54
  17
  71
  1
  179/231
  34
  #f
  380/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  15
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  123
  81
  22
  20
  54
  17
  71
  1
  179/231
  34
  #f
  380/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  15
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  126
  84
  22
  20
  54
  17
  71
  1
  530/693
  36
  #f
  197/42
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  mj09
  1
  15
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  127
  85
  22
  20
  54
  17
  71
  1
  523/693
  36
  #f
  398/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  15
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  127
  85
  22
  20
  54
  17
  71
  1
  523/693
  36
  #f
  398/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  15
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  127
  85
  22
  20
  54
  17
  71
  1
  523/693
  36
  #f
  398/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  15
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  127
  85
  22
  20
  54
  17
  71
  1
  523/693
  36
  #f
  398/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  1
  15
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  132
  90
  22
  20
  54
  17
  71
  1
  1025/1386
  38
  #f
  14/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
