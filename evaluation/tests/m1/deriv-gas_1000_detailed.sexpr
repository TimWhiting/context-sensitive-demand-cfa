'(clean-cache
  deriv
  1
  1000
  257
  lettypes
  "'(eval ((top) lettypes (cons ... error) ...) (env ()))"
  #f
  413
  353
  50
  10
  335
  21
  356
  1
  4933/5040
  169
  #f
  1372/353
  (152 156 2))
'(clean-cache
  deriv
  1
  1000
  257
  letrec*
  "'(eval (lettypes cons ... error (letrec* (car ... deriv) ...)) (env ()))"
  #f
  412
  352
  50
  10
  334
  21
  355
  1
  4903/5010
  169
  #f
  1365/352
  (149 152 2))
'(clean-cache
  deriv
  1
  1000
  257
  lambda
  "'(eval (letrec* (... pair? (deriv (-> (λ (a) ...) <-)) () ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  match
  "'(eval (λ (a) (-> (match (app not (app pair? ...)) ...) <-)) (env ((□? (a)))))"
  #f
  594
  534
  50
  10
  509
  21
  530
  1
  4723/4890
  281
  #f
  865/267
  (179 184 1))
'(clean-cache
  deriv
  1
  1000
  257
  match
  "'(eval\n  (match (app not (app pair? a)) (#f) (_ (-> (match (app eq? a 'x) ...) <-)))\n  (env ((□? (a)))))"
  #f
  350
  292
  48
  10
  268
  20
  288
  1
  523/550
  151
  #f
  1071/292
  (125 128 2))
'(clean-cache
  deriv
  1
  1000
  257
  number
  "'(eval (match (app eq? a 'x) (#f) (_ (-> 1 <-))) (env ((□? (a)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  number
  "'(eval (match (app eq? a 'x) ((#f) (-> 0 <-)) _) (env ((□? (a)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (match (-> (app eq? a 'x) <-) (#f) _) (env ((□? (a)))))"
  #f
  332
  274
  48
  10
  253
  20
  273
  1
  1021/1070
  139
  #f
  1047/274
  (121 124 1))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval (app eq? a (-> 'x <-)) (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app eq? (-> a <-) 'x) (env ((□? (a)))))"
  #f
  314
  256
  48
  10
  238
  20
  258
  1
  249/260
  126
  #f
  249/64
  (122 125 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> eq? <-) a 'x) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  match
  "'(eval\n  (match\n   (app not (app pair? a))\n   ((#f) (-> (match (app eq? (app car ...) '+) ...) <-))\n   _)\n  (env ((□? (a)))))"
  #f
  519
  461
  48
  10
  435
  20
  455
  1
  2029/2115
  244
  #f
  1550/461
  (171 176 1))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (match\n   (app eq? (app car a) '+)\n   (#f)\n   (_ (-> (app cons '+ (app map deriv (app cdr ...))) <-)))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app cons '+ (-> (app map deriv (app cdr a)) <-)) (env ((□? (a)))))"
  #f
  325
  267
  48
  10
  241
  20
  261
  1
  1519/1605
  132
  #t
  1040/267
  (127 129 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app map deriv (-> (app cdr a) <-)) (env ((□? (a)))))"
  #f
  318
  260
  48
  10
  238
  20
  258
  1
  2963/3090
  127
  #f
  79/20
  (124 126 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app cdr (-> a <-)) (env ((□? (a)))))"
  #f
  314
  256
  48
  10
  238
  20
  258
  1
  2983/3090
  126
  #f
  249/64
  (115 117 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cdr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app map (-> deriv <-) (app cdr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> map <-) deriv (app cdr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval (app cons (-> '+ <-) (app map deriv (app cdr a))) (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) '+ (app map deriv (app cdr a))) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  match
  "'(eval\n  (match\n   (app eq? (app car a) '+)\n   ((#f) (-> (match (app eq? (app car ...) '-) ...) <-))\n   _)\n  (env ((□? (a)))))"
  #f
  471
  413
  48
  10
  387
  20
  407
  1
  947/990
  218
  #f
  1411/413
  (153 157 1))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (match\n   (app eq? (app car a) '-)\n   (#f)\n   (_ (-> (app cons '- (app map deriv (app cdr ...))) <-)))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app cons '- (-> (app map deriv (app cdr a)) <-)) (env ((□? (a)))))"
  #f
  323
  265
  48
  10
  241
  20
  261
  1
  508/535
  132
  #t
  1023/265
  (126 129 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app map deriv (-> (app cdr a) <-)) (env ((□? (a)))))"
  #f
  317
  259
  48
  10
  238
  20
  258
  1
  1484/1545
  127
  #f
  1014/259
  (118 121 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app cdr (-> a <-)) (env ((□? (a)))))"
  #f
  314
  256
  48
  10
  238
  20
  258
  1
  2983/3090
  126
  #f
  249/64
  (115 117 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cdr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app map (-> deriv <-) (app cdr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> map <-) deriv (app cdr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval (app cons (-> '- <-) (app map deriv (app cdr a))) (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) '- (app map deriv (app cdr a))) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  match
  "'(eval\n  (match\n   (app eq? (app car a) '-)\n   ((#f) (-> (match (app eq? (app car ...) '*) ...) <-))\n   _)\n  (env ((□? (a)))))"
  #f
  423
  365
  48
  10
  339
  20
  359
  1
  1759/1845
  192
  #f
  1277/365
  (142 146 2))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (match\n   (app eq? (app car a) '*)\n   (#f)\n   (_ (-> (app cons '* (app cons a (app cons ...))) <-)))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app cons '* (-> (app cons a (app cons (app cons ...) (app nil ...))) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app cons a (-> (app cons (app cons '+ (app map ...)) (app nil)) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (app cons '+ (app map (λ (a) ...) (app cdr ...)))\n   (-> (app nil) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cons '+ (app map (λ (a) ...) (app cdr ...))) <-)\n   (app nil))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app cons '+ (-> (app map (λ (a) ...) (app cdr a)) <-))\n  (env ((□? (a)))))"
  #f
  321
  263
  48
  10
  241
  20
  261
  1
  1529/1605
  132
  #t
  1006/263
  (116 119 1))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app map (λ (a) ...) (-> (app cdr a) <-)) (env ((□? (a)))))"
  #f
  316
  258
  48
  10
  238
  20
  258
  1
  991/1030
  127
  #f
  1001/258
  (115 118 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app cdr (-> a <-)) (env ((□? (a)))))"
  #f
  314
  256
  48
  10
  238
  20
  258
  1
  2983/3090
  126
  #f
  249/64
  (115 118 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cdr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  lambda
  "'(eval (app map (-> (λ (a) ...) <-) (app cdr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (λ (a) (-> (app cons '/ (app cons (app deriv ...) (app cons ...))) <-))\n  (env ((□? (a)) (□? (a)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app cons '/ (-> (app cons (app deriv a) (app cons a (app nil ...))) <-))\n  (env ((□? (a)) (□? (a)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app cons (app deriv a) (-> (app cons a (app nil)) <-))\n  (env ((□? (a)) (□? (a)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app cons a (-> (app nil) <-)) (env ((□? (a)) (□? (a)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (a)) (□? (a)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app cons (-> a <-) (app nil)) (env ((□? (a)) (□? (a)))))"
  #f
  317
  259
  48
  10
  238
  20
  258
  1
  371/390
  128
  #f
  1002/259
  (113 116 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) a (app nil)) (env ((□? (a)) (□? (a)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app cons (-> (app deriv a) <-) (app cons a (app nil)))\n  (env ((□? (a)) (□? (a)))))"
  #f
  417
  357
  50
  10
  331
  21
  352
  1
  4813/4980
  174
  #f
  1375/357
  (148 151 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app deriv (-> a <-)) (env ((□? (a)) (□? (a)))))"
  #f
  317
  259
  48
  10
  238
  20
  258
  1
  1484/1545
  128
  #f
  1002/259
  (115 118 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> deriv <-) a) (env ((□? (a)) (□? (a)))))"
  (lambda number char string quoted constructor)
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) (app deriv a) (app cons a (app nil)))\n  (env ((□? (a)) (□? (a)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval\n  (app cons (-> '/ <-) (app cons (app deriv a) (app cons a (app nil ...))))\n  (env ((□? (a)) (□? (a)))))"
  (quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) '/ (app cons (app deriv a) (app cons a (app nil ...))))\n  (env ((□? (a)) (□? (a)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> map <-) (λ (a) ...) (app cdr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval\n  (app cons (-> '+ <-) (app map (λ (a) ...) (app cdr a)))\n  (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) '+ (app map (λ (a) ...) (app cdr a)))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cons '+ (app map (λ (a) ...) (app cdr ...)))\n   (app nil))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app cons (-> a <-) (app cons (app cons '+ (app map ...)) (app nil)))\n  (env ((□? (a)))))"
  #f
  314
  256
  48
  10
  238
  20
  258
  1
  249/260
  126
  #f
  249/64
  (109 112 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) a (app cons (app cons '+ (app map ...)) (app nil)))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval\n  (app cons (-> '* <-) (app cons a (app cons (app cons ...) (app nil ...))))\n  (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) '* (app cons a (app cons (app cons ...) (app nil ...))))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  match
  "'(eval\n  (match\n   (app eq? (app car a) '*)\n   ((#f) (-> (match (app eq? (app car ...) '/) ...) <-))\n   _)\n  (env ((□? (a)))))"
  #f
  375
  317
  48
  10
  291
  20
  311
  1
  812/855
  167
  #f
  1148/317
  (124 127 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (match\n   (app eq? (app car a) '/)\n   (#f)\n   (_ (-> (app cons '- (app cons (app cons ...) (app cons ...))) <-)))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   '-\n   (->\n    (app\n     cons\n     (app cons '/ (app cons ...))\n     (app cons (app cons ...) (app nil ...)))\n    <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (app cons '/ (app cons (app deriv ...) (app cons ...)))\n   (-> (app cons (app cons '/ (app cons ...)) (app nil)) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (app cons '/ (app cons (app cadr ...) (app cons ...)))\n   (-> (app nil) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cons '/ (app cons (app cadr ...) (app cons ...))) <-)\n   (app nil))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   '/\n   (-> (app cons (app cadr a) (app cons (app cons ...) (app nil ...))) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (app cadr a)\n   (-> (app cons (app cons '* (app cons ...)) (app nil)) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (app cons '* (app cons (app caddr ...) (app cons ...)))\n   (-> (app nil) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cons '* (app cons (app caddr ...) (app cons ...))) <-)\n   (app nil))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   '*\n   (-> (app cons (app caddr a) (app cons (app caddr ...) (app cons ...))) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (app caddr a)\n   (-> (app cons (app caddr a) (app cons (app deriv ...) (app nil ...))) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (app caddr a)\n   (-> (app cons (app deriv (app caddr ...)) (app nil)) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app cons (app deriv (app caddr a)) (-> (app nil) <-)) (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app cons (-> (app deriv (app caddr a)) <-) (app nil)) (env ((□? (a)))))"
  #f
  416
  356
  50
  10
  336
  21
  357
  1
  2419/2490
  173
  #f
  683/178
  (141 144 1))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app deriv (-> (app caddr a) <-)) (env ((□? (a)))))"
  #f
  319
  261
  48
  10
  238
  20
  258
  1
  493/515
  127
  #f
  1040/261
  (132 135 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app caddr (-> a <-)) (env ((□? (a)))))"
  #f
  314
  256
  48
  10
  238
  20
  258
  1
  2983/3090
  126
  #f
  249/64
  (116 118 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> caddr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> deriv <-) (app caddr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) (app deriv (app caddr a)) (app nil)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app caddr a) <-)\n   (app cons (app deriv (app caddr ...)) (app nil)))\n  (env ((□? (a)))))"
  #f
  326
  268
  48
  10
  245
  20
  265
  1
  2993/3150
  133
  #f
  525/134
  (126 129 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app caddr (-> a <-)) (env ((□? (a)))))"
  #f
  314
  256
  48
  10
  238
  20
  258
  1
  2983/3090
  126
  #f
  249/64
  (118 121 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> caddr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app caddr a)\n   (app cons (app deriv (app caddr ...)) (app nil)))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app caddr a) <-)\n   (app cons (app caddr a) (app cons (app deriv ...) (app nil ...))))\n  (env ((□? (a)))))"
  #f
  326
  268
  48
  10
  245
  20
  265
  1
  2993/3150
  133
  #f
  525/134
  (124 127 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app caddr (-> a <-)) (env ((□? (a)))))"
  #f
  314
  256
  48
  10
  238
  20
  258
  1
  2983/3090
  126
  #f
  249/64
  (117 120 2))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> caddr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app caddr a)\n   (app cons (app caddr a) (app cons (app deriv ...) (app nil ...))))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval\n  (app\n   cons\n   (-> '* <-)\n   (app cons (app caddr a) (app cons (app caddr ...) (app cons ...))))\n  (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   '*\n   (app cons (app caddr a) (app cons (app caddr ...) (app cons ...))))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cons '* (app cons (app caddr ...) (app cons ...)))\n   (app nil))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cadr a) <-)\n   (app cons (app cons '* (app cons ...)) (app nil)))\n  (env ((□? (a)))))"
  #f
  324
  266
  48
  10
  245
  20
  265
  1
  143/150
  133
  #f
  512/133
  (114 117 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app cadr (-> a <-)) (env ((□? (a)))))"
  #f
  314
  256
  48
  10
  238
  20
  258
  1
  2983/3090
  126
  #f
  249/64
  (111 114 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cadr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cadr a)\n   (app cons (app cons '* (app cons ...)) (app nil)))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval\n  (app\n   cons\n   (-> '/ <-)\n   (app cons (app cadr a) (app cons (app cons ...) (app nil ...))))\n  (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   '/\n   (app cons (app cadr a) (app cons (app cons ...) (app nil ...))))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cons '/ (app cons (app cadr ...) (app cons ...)))\n   (app nil))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cons '/ (app cons (app deriv ...) (app cons ...))) <-)\n   (app cons (app cons '/ (app cons ...)) (app nil)))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   '/\n   (->\n    (app\n     cons\n     (app deriv (app cadr ...))\n     (app cons (app caddr ...) (app nil ...)))\n    <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (app deriv (app cadr a))\n   (-> (app cons (app caddr a) (app nil)) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app cons (app caddr a) (-> (app nil) <-)) (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app cons (-> (app caddr a) <-) (app nil)) (env ((□? (a)))))"
  #f
  326
  268
  48
  10
  245
  20
  265
  1
  2993/3150
  133
  #f
  525/134
  (125 129 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app caddr (-> a <-)) (env ((□? (a)))))"
  #f
  314
  256
  48
  10
  238
  20
  258
  1
  2983/3090
  126
  #f
  249/64
  (113 116 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> caddr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) (app caddr a) (app nil)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app deriv (app cadr a)) <-)\n   (app cons (app caddr a) (app nil)))\n  (env ((□? (a)))))"
  #f
  416
  356
  50
  10
  336
  21
  357
  1
  2419/2490
  173
  #f
  683/178
  (147 151 1))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app deriv (-> (app cadr a) <-)) (env ((□? (a)))))"
  #f
  317
  259
  48
  10
  238
  20
  258
  1
  1484/1545
  127
  #f
  1014/259
  (123 127 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app cadr (-> a <-)) (env ((□? (a)))))"
  #f
  314
  256
  48
  10
  238
  20
  258
  1
  2983/3090
  126
  #f
  249/64
  (119 123 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cadr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> deriv <-) (app cadr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app deriv (app cadr a))\n   (app cons (app caddr a) (app nil)))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval\n  (app\n   cons\n   (-> '/ <-)\n   (app\n    cons\n    (app deriv (app cadr ...))\n    (app cons (app caddr ...) (app nil ...))))\n  (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   '/\n   (app\n    cons\n    (app deriv (app cadr ...))\n    (app cons (app caddr ...) (app nil ...))))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cons '/ (app cons (app deriv ...) (app cons ...)))\n   (app cons (app cons '/ (app cons ...)) (app nil)))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval\n  (app\n   cons\n   (-> '- <-)\n   (app\n    cons\n    (app cons '/ (app cons ...))\n    (app cons (app cons ...) (app nil ...))))\n  (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   '-\n   (app\n    cons\n    (app cons '/ (app cons ...))\n    (app cons (app cons ...) (app nil ...))))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (match\n   (app eq? (app car a) '/)\n   ((#f) (-> (app error (app #f) \"No derivation method available\") <-))\n   _)\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  string
  "'(eval\n  (app error (app #f) (-> \"No derivation method available\" <-))\n  (env ((□? (a)))))"
  (string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app error (-> (app #f) <-) \"No derivation method available\")\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (a)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> error <-) (app #f) \"No derivation method available\")\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (match (-> (app eq? (app car a) '/) <-) (#f) _) (env ((□? (a)))))"
  #f
  347
  289
  48
  10
  266
  20
  286
  1
  3113/3270
  145
  #f
  1098/289
  (125 129 1))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval (app eq? (app car a) (-> '/ <-)) (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app eq? (-> (app car a) <-) '/) (env ((□? (a)))))"
  #f
  329
  271
  48
  10
  251
  20
  271
  1
  1519/1590
  133
  #f
  1060/271
  (119 122 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app car (-> a <-)) (env ((□? (a)))))"
  #f
  314
  256
  48
  10
  238
  20
  258
  1
  249/260
  126
  #f
  249/64
  (113 117 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> car <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> eq? <-) (app car a) '/) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (match (-> (app eq? (app car a) '*) <-) (#f) _) (env ((□? (a)))))"
  #f
  347
  289
  48
  10
  266
  20
  286
  1
  3113/3270
  145
  #f
  1098/289
  (124 128 0))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval (app eq? (app car a) (-> '* <-)) (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app eq? (-> (app car a) <-) '*) (env ((□? (a)))))"
  #f
  329
  271
  48
  10
  251
  20
  271
  1
  1519/1590
  133
  #f
  1060/271
  (122 126 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app car (-> a <-)) (env ((□? (a)))))"
  #f
  314
  256
  48
  10
  238
  20
  258
  1
  249/260
  126
  #f
  249/64
  (115 118 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> car <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> eq? <-) (app car a) '*) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (match (-> (app eq? (app car a) '-) <-) (#f) _) (env ((□? (a)))))"
  #f
  347
  289
  48
  10
  266
  20
  286
  1
  3113/3270
  145
  #f
  1098/289
  (128 132 0))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval (app eq? (app car a) (-> '- <-)) (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app eq? (-> (app car a) <-) '-) (env ((□? (a)))))"
  #f
  329
  271
  48
  10
  251
  20
  271
  1
  1519/1590
  133
  #f
  1060/271
  (123 127 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app car (-> a <-)) (env ((□? (a)))))"
  #f
  314
  256
  48
  10
  238
  20
  258
  1
  249/260
  126
  #f
  249/64
  (115 120 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> car <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> eq? <-) (app car a) '-) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (match (-> (app eq? (app car a) '+) <-) (#f) _) (env ((□? (a)))))"
  #f
  347
  289
  48
  10
  266
  20
  286
  1
  3113/3270
  145
  #f
  1098/289
  (126 130 0))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval (app eq? (app car a) (-> '+ <-)) (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app eq? (-> (app car a) <-) '+) (env ((□? (a)))))"
  #f
  329
  271
  48
  10
  251
  20
  271
  1
  1519/1590
  133
  #f
  1060/271
  (124 127 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app car (-> a <-)) (env ((□? (a)))))"
  #f
  314
  256
  48
  10
  238
  20
  258
  1
  249/260
  126
  #f
  249/64
  (117 121 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> car <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> eq? <-) (app car a) '+) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (match (-> (app not (app pair? a)) <-) (#f) _) (env ((□? (a)))))"
  #f
  349
  289
  50
  10
  267
  21
  288
  1
  1679/1755
  146
  #f
  1077/289
  (121 125 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app not (-> (app pair? a) <-)) (env ((□? (a)))))"
  #f
  335
  275
  50
  10
  255
  21
  276
  1
  1624/1695
  138
  #f
  1057/275
  (121 124 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app pair? (-> a <-)) (env ((□? (a)))))"
  #f
  314
  256
  48
  10
  238
  20
  258
  1
  249/260
  126
  #f
  249/64
  (116 119 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> pair? <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> not <-) (app pair? a)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  lambda
  "'(eval\n  (letrec* (... map (pair? (-> (λ (pair?-v) ...) <-)) deriv ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  match
  "'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))"
  #f
  331
  270
  50
  11
  248
  21
  269
  1
  1559/1650
  133
  #f
  1063/270
  (125 129 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (pair?-v)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (pair?-v)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))"
  #f
  323
  262
  50
  11
  243
  21
  264
  1
  3013/3150
  127
  #f
  521/131
  (122 125 1))
'(clean-cache
  deriv
  1
  1000
  257
  lambda
  "'(eval\n  (letrec* (... caddr (map (-> (λ (map-f map-l) ...) <-)) pair? ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  match
  "'(eval (λ (map-f map-l) (-> (match map-l ...) <-)) (env ((□? (map-f map-l)))))"
  #f
  334
  276
  48
  10
  251
  20
  271
  1
  1531/1620
  142
  #f
  86/23
  (122 126 1))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (match map-l (cons map-c map-d) ((nil) (-> (app nil) <-)))\n  (env ((□? (map-f map-l)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (map-f map-l)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (match\n   map-l\n   ((cons map-c map-d)\n    (-> (app cons (app map-f map-c) (app map map-f map-d)) <-))\n   (nil))\n  (env ((□? (map-f map-l)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app cons (app map-f map-c) (-> (app map map-f map-d) <-))\n  (env ((□? (map-f map-l)))))"
  #f
  323
  265
  48
  10
  243
  20
  263
  1
  1039/1090
  132
  #f
  202/53
  (115 118 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app map map-f (-> map-d <-)) (env ((□? (map-f map-l)))))"
  #f
  318
  260
  48
  10
  238
  20
  258
  1
  2963/3090
  127
  #f
  1009/260
  (128 133 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app map (-> map-f <-) map-d) (env ((□? (map-f map-l)))))"
  #f
  16
  9
  5
  2
  5
  1
  6
  1
  9/25
  7
  #f
  11/9
  (3 3 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> map <-) map-f map-d) (env ((□? (map-f map-l)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app cons (-> (app map-f map-c) <-) (app map map-f map-d))\n  (env ((□? (map-f map-l)))))"
  #f
  452
  392
  50
  10
  364
  21
  385
  1
  1659/1720
  203
  #f
  1457/392
  (170 177 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app map-f (-> map-c <-)) (env ((□? (map-f map-l)))))"
  #f
  319
  261
  48
  10
  238
  20
  258
  1
  2957/3090
  127
  #f
  1021/261
  (125 129 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> map-f <-) map-c) (env ((□? (map-f map-l)))))"
  #f
  17
  10
  5
  2
  5
  1
  6
  1
  3/10
  7
  #f
  13/10
  (3 3 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) (app map-f map-c) (app map map-f map-d))\n  (env ((□? (map-f map-l)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (match (-> map-l <-) (cons map-c map-d) (nil))\n  (env ((□? (map-f map-l)))))"
  #f
  318
  260
  48
  10
  238
  20
  258
  1
  2963/3090
  127
  #f
  1009/260
  (119 122 2))
'(clean-cache
  deriv
  1
  1000
  257
  lambda
  "'(eval\n  (letrec* (... cadr (caddr (-> (λ (cadr-v) ...) <-)) map ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (λ (cadr-v) (-> (app car (app cdr (app cdr ...))) <-))\n  (env ((□? (cadr-v)))))"
  #f
  322
  264
  48
  10
  241
  20
  261
  1
  2947/3090
  130
  #f
  1043/264
  (130 134 1))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app car (-> (app cdr (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))"
  #f
  317
  259
  48
  10
  238
  20
  258
  1
  1484/1545
  126
  #f
  1035/259
  (129 133 2))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app cdr (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))"
  #f
  315
  257
  48
  10
  238
  20
  258
  1
  298/309
  125
  #f
  1030/257
  (125 129 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))"
  #f
  313
  255
  48
  10
  238
  20
  258
  1
  1496/1545
  124
  #f
  205/51
  (126 130 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cdr <-) cadr-v) (env ((□? (cadr-v)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cdr <-) (app cdr cadr-v)) (env ((□? (cadr-v)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> car <-) (app cdr (app cdr cadr-v))) (env ((□? (cadr-v)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  lambda
  "'(eval\n  (letrec* (... cdr (cadr (-> (λ (cadr-v) ...) <-)) caddr ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (λ (cadr-v) (-> (app car (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))"
  #f
  318
  260
  48
  10
  239
  20
  259
  1
  2953/3090
  128
  #f
  203/52
  (124 128 1))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app car (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))"
  #f
  315
  257
  48
  10
  238
  20
  258
  1
  1489/1545
  126
  #f
  1009/257
  (119 123 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))"
  #f
  313
  255
  48
  10
  238
  20
  258
  1
  1499/1545
  125
  #f
  1004/255
  (122 127 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cdr <-) cadr-v) (env ((□? (cadr-v)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> car <-) (app cdr cadr-v)) (env ((□? (cadr-v)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  lambda
  "'(eval (letrec* (... car (cdr (-> (λ (cdr-v) ...) <-)) cadr ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  match
  "'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))"
  #f
  315
  256
  48
  11
  238
  20
  258
  1
  20987/21630
  123
  #f
  261/64
  (139 144 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))"
  #f
  319
  260
  48
  11
  238
  20
  258
  1
  6917/7210
  126
  #f
  1047/260
  (137 141 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))"
  #f
  318
  259
  48
  11
  238
  20
  258
  1
  6927/7210
  126
  #f
  1039/259
  (134 138 1))
'(clean-cache
  deriv
  1
  1000
  257
  lambda
  "'(eval (letrec* (... () (car (-> (λ (car-v) ...) <-)) cdr ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  match
  "'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))"
  #f
  349
  290
  48
  11
  266
  20
  286
  1
  3581/3745
  130
  #f
  128/29
  (166 171 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))"
  #f
  344
  285
  48
  11
  262
  20
  282
  1
  3586/3745
  130
  #f
  1252/285
  (149 153 1))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))"
  #f
  339
  280
  48
  11
  258
  20
  278
  1
  513/535
  130
  #f
  297/70
  (140 143 1))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (letrec* (car ... deriv) (-> (app deriv (app cons '+ (app cons ...))) <-))\n  (env ()))"
  #f
  411
  351
  50
  10
  333
  21
  354
  1
  4873/4980
  169
  #f
  1358/351
  (145 149 1))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app deriv (-> (app cons '+ (app cons (app cons ...) (app cons ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   '+\n   (->\n    (app\n     cons\n     (app cons '* (app cons ...))\n     (app cons (app cons ...) (app cons ...)))\n    <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (app cons '* (app cons 3 (app cons ...)))\n   (->\n    (app\n     cons\n     (app cons '* (app cons ...))\n     (app cons (app cons ...) (app cons ...)))\n    <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (app cons '* (app cons 'a (app cons ...)))\n   (-> (app cons (app cons '* (app cons ...)) (app cons 5 (app nil ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (app cons '* (app cons 'b (app cons ...)))\n   (-> (app cons 5 (app nil)) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app cons 5 (-> (app nil) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  number
  "'(eval (app cons (-> 5 <-) (app nil)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 5 (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cons '* (app cons 'b (app cons ...))) <-)\n   (app cons 5 (app nil)))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app cons '* (-> (app cons 'b (app cons 'x (app nil ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app cons 'b (-> (app cons 'x (app nil)) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app cons 'x (-> (app nil) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval (app cons (-> 'x <-) (app nil)) (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 'x (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval (app cons (-> 'b <-) (app cons 'x (app nil))) (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 'b (app cons 'x (app nil))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval\n  (app cons (-> '* <-) (app cons 'b (app cons 'x (app nil ...))))\n  (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) '* (app cons 'b (app cons 'x (app nil ...))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cons '* (app cons 'b (app cons ...)))\n   (app cons 5 (app nil)))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cons '* (app cons 'a (app cons ...))) <-)\n   (app cons (app cons '* (app cons ...)) (app cons 5 (app nil ...))))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app cons '* (-> (app cons 'a (app cons 'x (app cons ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app cons 'a (-> (app cons 'x (app cons 'x (app nil ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app cons 'x (-> (app cons 'x (app nil)) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app cons 'x (-> (app nil) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval (app cons (-> 'x <-) (app nil)) (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 'x (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval (app cons (-> 'x <-) (app cons 'x (app nil))) (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 'x (app cons 'x (app nil))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval\n  (app cons (-> 'a <-) (app cons 'x (app cons 'x (app nil ...))))\n  (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) 'a (app cons 'x (app cons 'x (app nil ...))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval\n  (app cons (-> '* <-) (app cons 'a (app cons 'x (app cons ...))))\n  (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) '* (app cons 'a (app cons 'x (app cons ...))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cons '* (app cons 'a (app cons ...)))\n   (app cons (app cons '* (app cons ...)) (app cons 5 (app nil ...))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cons '* (app cons 3 (app cons ...))) <-)\n   (app\n    cons\n    (app cons '* (app cons ...))\n    (app cons (app cons ...) (app cons ...))))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval\n  (app cons '* (-> (app cons 3 (app cons 'x (app cons ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app cons 3 (-> (app cons 'x (app cons 'x (app nil ...))) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app cons 'x (-> (app cons 'x (app nil)) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  app
  "'(eval (app cons 'x (-> (app nil) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval (app cons (-> 'x <-) (app nil)) (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 'x (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval (app cons (-> 'x <-) (app cons 'x (app nil))) (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 'x (app cons 'x (app nil))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  number
  "'(eval (app cons (-> 3 <-) (app cons 'x (app cons 'x (app nil ...)))) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 3 (app cons 'x (app cons 'x (app nil ...)))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval\n  (app cons (-> '* <-) (app cons 3 (app cons 'x (app cons ...))))\n  (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) '* (app cons 3 (app cons 'x (app cons ...))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cons '* (app cons 3 (app cons ...)))\n   (app\n    cons\n    (app cons '* (app cons ...))\n    (app cons (app cons ...) (app cons ...))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  quoted
  "'(eval\n  (app\n   cons\n   (-> '+ <-)\n   (app\n    cons\n    (app cons '* (app cons ...))\n    (app cons (app cons ...) (app cons ...))))\n  (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   '+\n   (app\n    cons\n    (app cons '* (app cons ...))\n    (app cons (app cons ...) (app cons ...))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  1
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> deriv <-) (app cons '+ (app cons (app cons ...) (app cons ...))))\n  (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
