'(clean-cache
  eta
  1
  5
  13
  letrec*
  "\"'(eval ((top) letrec* (do-something ... id) ...) (env ()))\""
  22
  12
  7
  3
  12
  7
  19
  1
  1
  12
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  5
  13
  let
  "\"'(eval (λ (y) (-> (let (_) ...) <-)) (env ((□? (y)))))\""
  10
  6
  3
  1
  4
  3
  7
  1
  2/3
  4
  #f
  4/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  5
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app do-something) <-)) () ...) ...)\n  (env ((□? (y)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  5
  13
  ref-or-constructor
  "\"'(eval (let (_) (-> y <-)) (env ((□? (y)))))\""
  7
  3
  3
  1
  2
  3
  5
  1
  2/3
  2
  #f
  4/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  5
  13
  let
  "\"'(eval (letrec* (do-something ... id) (-> (let (_) ...) <-)) (env ()))\""
  21
  11
  7
  3
  11
  7
  18
  1
  1
  11
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  5
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app (app id (λ (a) ...)) (app #t)) <-)) () ...) ...)\n  (env ()))\""
  20
  10
  7
  3
  10
  7
  17
  1
  1
  10
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  5
  13
  app
  "\"'(eval (app (app id (λ (a) ...)) (-> (app #t) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  5
  13
  app
  "\"'(eval (app (-> (app id (λ (a) ...)) <-) (app #t)) (env ()))\""
  10
  6
  3
  1
  6
  3
  9
  1
  1
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  5
  13
  ref-or-constructor
  "\"'(eval (λ (a) (-> a <-)) (env ((□? (a)))))\""
  14
  5
  7
  2
  4
  7
  11
  1
  4/5
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  5
  13
  app
  "\"'(eval (let (_) (-> (app (app id (λ (b) ...)) (app #f)) <-)) (env ()))\""
  20
  10
  7
  3
  10
  7
  17
  1
  1
  10
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  5
  13
  app
  "\"'(eval (app (app id (λ (b) ...)) (-> (app #f) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  5
  13
  app
  "\"'(eval (app (-> (app id (λ (b) ...)) <-) (app #f)) (env ()))\""
  10
  6
  3
  1
  6
  3
  9
  1
  1
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  1
  5
  13
  ref-or-constructor
  "\"'(eval (λ (b) (-> b <-)) (env ((□? (b)))))\""
  14
  5
  7
  2
  4
  7
  11
  1
  4/5
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  5
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app do-something) <-)) () ...) ...)\n  (env ((□? (y)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  5
  13
  ref-or-constructor
  "\"'(eval (let (_) (-> y <-)) (env ((□? (y)))))\""
  14
  9
  3
  2
  6
  3
  9
  1
  2/3
  8
  #f
  10/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  5
  13
  letrec*
  "\"'(eval ((top) letrec* (do-something ... id) ...) (env ()))\""
  31
  20
  7
  4
  17
  7
  24
  1
  91/102
  19
  #t
  21/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  5
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app (app id (λ (a) ...)) (app #t)) <-)) () ...) ...)\n  (env ()))\""
  44
  28
  11
  5
  25
  11
  36
  1
  64/69
  27
  #t
  29/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  5
  13
  app
  "\"'(eval (app (app id (λ (a) ...)) (-> (app #t) <-)) (env ()))\""
  44
  28
  11
  5
  25
  11
  36
  1
  64/69
  27
  #t
  29/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  5
  13
  let
  "\"'(eval (letrec* (do-something ... id) (-> (let (_) ...) <-)) (env ()))\""
  44
  28
  11
  5
  25
  11
  36
  1
  64/69
  27
  #t
  29/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  5
  13
  let
  "\"'(eval (λ (y) (-> (let (_) ...) <-)) (env ((□? (y)))))\""
  45
  29
  11
  5
  25
  11
  36
  1
  21/23
  27
  #f
  31/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  5
  13
  app
  "\"'(eval (let (_) (-> (app (app id (λ (b) ...)) (app #f)) <-)) (env ()))\""
  45
  29
  11
  5
  25
  11
  36
  1
  21/23
  27
  #t
  31/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  5
  13
  ref-or-constructor
  "\"'(eval (λ (a) (-> a <-)) (env ((□? (a)))))\""
  47
  30
  11
  6
  25
  11
  36
  1
  41/46
  28
  #t
  16/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  5
  13
  app
  "\"'(eval (app (-> (app id (λ (b) ...)) <-) (app #f)) (env ()))\""
  47
  30
  11
  6
  25
  11
  36
  1
  41/46
  28
  #t
  16/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  5
  13
  app
  "\"'(eval (app (-> (app id (λ (a) ...)) <-) (app #t)) (env ()))\""
  47
  30
  11
  6
  25
  11
  36
  1
  41/46
  28
  #t
  16/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  5
  13
  app
  "\"'(eval (app (app id (λ (b) ...)) (-> (app #f) <-)) (env ()))\""
  47
  30
  11
  6
  25
  11
  36
  1
  41/46
  28
  #t
  16/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  1
  5
  13
  ref-or-constructor
  "\"'(eval (λ (b) (-> b <-)) (env ((□? (b)))))\""
  49
  31
  11
  7
  25
  11
  36
  1
  20/23
  29
  #t
  33/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  5
  13
  app
  "\"'(eval (app (-> (app id (λ (a) ...)) <-) (app #t)) (env ()))\""
  10
  6
  3
  1
  6
  3
  9
  1
  1
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  5
  13
  app
  "\"'(eval (let (_) (-> (app (app id (λ (b) ...)) (app #f)) <-)) (env ()))\""
  25
  15
  7
  3
  15
  7
  22
  1
  1
  15
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  5
  13
  app
  "\"'(eval (app (-> (app id (λ (b) ...)) <-) (app #f)) (env ()))\""
  25
  15
  7
  3
  15
  7
  22
  1
  1
  15
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  5
  13
  ref-or-constructor
  "\"'(eval (λ (a) (-> a <-)) (env ((□? (a)))))\""
  33
  18
  11
  4
  17
  11
  28
  1
  15/16
  18
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  5
  13
  app
  "\"'(eval (app (app id (λ (a) ...)) (-> (app #t) <-)) (env ()))\""
  33
  18
  11
  4
  17
  11
  28
  1
  15/16
  18
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  5
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app (app id (λ (a) ...)) (app #t)) <-)) () ...) ...)\n  (env ()))\""
  36
  20
  11
  5
  19
  11
  30
  1
  33/34
  20
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  5
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app do-something) <-)) () ...) ...)\n  (env ((□? (y)))))\""
  42
  25
  11
  6
  23
  11
  34
  1
  13/14
  25
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  5
  13
  let
  "\"'(eval (λ (y) (-> (let (_) ...) <-)) (env ((□? (y)))))\""
  43
  26
  11
  6
  23
  11
  34
  1
  115/126
  25
  #f
  27/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  5
  13
  let
  "\"'(eval (letrec* (do-something ... id) (-> (let (_) ...) <-)) (env ()))\""
  44
  27
  11
  6
  24
  11
  35
  1
  11/12
  26
  #t
  28/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  5
  13
  letrec*
  "\"'(eval ((top) letrec* (do-something ... id) ...) (env ()))\""
  45
  28
  11
  6
  25
  11
  36
  1
  127/138
  27
  #t
  29/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  5
  13
  ref-or-constructor
  "\"'(eval (let (_) (-> y <-)) (env ((□? (y)))))\""
  46
  29
  11
  6
  25
  11
  36
  1
  125/138
  27
  #f
  31/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  5
  13
  app
  "\"'(eval (app (app id (λ (b) ...)) (-> (app #f) <-)) (env ()))\""
  46
  29
  11
  6
  25
  11
  36
  1
  125/138
  27
  #t
  31/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  1
  5
  13
  ref-or-constructor
  "\"'(eval (λ (b) (-> b <-)) (env ((□? (b)))))\""
  48
  30
  11
  7
  25
  11
  36
  1
  61/69
  28
  #t
  16/15
  ((0 0 0) (0 0 0) (0 0 0)))
