'(expression:
  (letrec ((phi
            (λ (x1)
              (λ (x2)
                (λ (x3)
                  (λ (x4)
                    (λ (x5)
                      (λ (x6)
                        (λ (x7)
                          (app
                           and
                           (app or x1 x2)
                           (app or x1 (app not x2) (app not x3))
                           (app or x3 x4)
                           (app or (app not x4) x1)
                           (app or (app not x2) (app not x3))
                           (app or x4 x2))))))))))
           (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
           (sat-solve-7
            (λ (p)
              (app
               try
               (λ (n1)
                 (app
                  try
                  (λ (n2)
                    (app
                     try
                     (λ (n3)
                       (app
                        try
                        (λ (n4)
                          (app
                           try
                           (λ (n5)
                             (app
                              try
                              (λ (n6)
                                (app
                                 try
                                 (λ (n7)
                                   (app
                                    (app
                                     (app
                                      (app (app (app (app p n1) n2) n3) n4)
                                      n5)
                                     n6)
                                    n7))))))))))))))))))
    (app sat-solve-7 phi)))
(list
 'query:
 '(app
   try
   (->
    (λ (n1)
      (app
       try
       (λ (n2)
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7))))))))))))))
    <-))
 (flatenv
  '(((let-bod
      letrec
      ((phi
        (λ (x1)
          (λ (x2)
            (λ (x3)
              (λ (x4)
                (λ (x5)
                  (λ (x6)
                    (λ (x7)
                      (app
                       and
                       (app or x1 x2)
                       (app or x1 (app not x2) (app not x3))
                       (app or x3 x4)
                       (app or (app not x4) x1)
                       (app or (app not x2) (app not x3))
                       (app or x4 x2))))))))))
       (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
       (sat-solve-7
        (λ (p)
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app
                 try
                 (λ (n3)
                   (app
                    try
                    (λ (n4)
                      (app
                       try
                       (λ (n5)
                         (app
                          try
                          (λ (n6)
                            (app
                             try
                             (λ (n7)
                               (app
                                (app
                                 (app (app (app (app (app p n1) n2) n3) n4) n5)
                                 n6)
                                n7))))))))))))))))))
      (top))
     app
     sat-solve-7
     phi))))
(list
 'clos/con:
 (list
  (list
   '(λ (n1)
      (app
       try
       (λ (n2)
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7))))))))))))))
   (flatenv '((letrec (phi try sat-solve-7) (-> (app sat-solve-7 phi) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (flatenv
  '(((bod
      (n6)
      (ran
       try
       ()
       ()
       (bod
        (n5)
        (ran
         try
         ()
         ()
         (bod
          (n4)
          (ran
           try
           ()
           ()
           (bod
            (n3)
            (ran
             try
             ()
             ()
             (bod
              (n2)
              (ran
               try
               ()
               ()
               (bod
                (n1)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (p)
                  (bin
                   letrec
                   sat-solve-7
                   (app sat-solve-7 phi)
                   ((phi
                     (λ (x1)
                       (λ (x2)
                         (λ (x3)
                           (λ (x4)
                             (λ (x5)
                               (λ (x6)
                                 (λ (x7)
                                   (app
                                    and
                                    (app or x1 x2)
                                    (app or x1 (app not x2) (app not x3))
                                    (app or x3 x4)
                                    (app or (app not x4) x1)
                                    (app or (app not x2) (app not x3))
                                    (app or x4 x2))))))))))
                    (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                   ()
                   (top)))))))))))))))
     app
     try
     (λ (n7)
       (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))))))
(list
 'clos/con:
 (list
  (list
   #t
   (flatenv
    '((λ (n6)
        (->
         (app
          try
          (λ (n7)
            (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (flatenv
  '(((bod
      (n5)
      (ran
       try
       ()
       ()
       (bod
        (n4)
        (ran
         try
         ()
         ()
         (bod
          (n3)
          (ran
           try
           ()
           ()
           (bod
            (n2)
            (ran
             try
             ()
             ()
             (bod
              (n1)
              (ran
               try
               ()
               ()
               (bod
                (p)
                (bin
                 letrec
                 sat-solve-7
                 (app sat-solve-7 phi)
                 ((phi
                   (λ (x1)
                     (λ (x2)
                       (λ (x3)
                         (λ (x4)
                           (λ (x5)
                             (λ (x6)
                               (λ (x7)
                                 (app
                                  and
                                  (app or x1 x2)
                                  (app or x1 (app not x2) (app not x3))
                                  (app or x3 x4)
                                  (app or (app not x4) x1)
                                  (app or (app not x2) (app not x3))
                                  (app or x4 x2))))))))))
                  (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                 ()
                 (top)))))))))))))
     app
     try
     (λ (n6)
       (app
        try
        (λ (n7)
          (app
           (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
           n7))))))))
(list
 'clos/con:
 (list
  (list
   #t
   (flatenv
    '((λ (n5)
        (->
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7)))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-7
               (app sat-solve-7 phi)
               ((phi
                 (λ (x1)
                   (λ (x2)
                     (λ (x3)
                       (λ (x4)
                         (λ (x5)
                           (λ (x6)
                             (λ (x7)
                               (app
                                and
                                (app or x1 x2)
                                (app or x1 (app not x2) (app not x3))
                                (app or x3 x4)
                                (app or (app not x4) x1)
                                (app or (app not x2) (app not x3))
                                (app or x4 x2))))))))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     try
     (λ (n5)
       (app
        try
        (λ (n6)
          (app
           try
           (λ (n7)
             (app
              (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
              n7))))))))))
(list
 'clos/con:
 (list
  (list
   #t
   (flatenv
    '((λ (n4)
        (->
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (flatenv
  '(((bod
      (n3)
      (ran
       try
       ()
       ()
       (bod
        (n2)
        (ran
         try
         ()
         ()
         (bod
          (n1)
          (ran
           try
           ()
           ()
           (bod
            (p)
            (bin
             letrec
             sat-solve-7
             (app sat-solve-7 phi)
             ((phi
               (λ (x1)
                 (λ (x2)
                   (λ (x3)
                     (λ (x4)
                       (λ (x5)
                         (λ (x6)
                           (λ (x7)
                             (app
                              and
                              (app or x1 x2)
                              (app or x1 (app not x2) (app not x3))
                              (app or x3 x4)
                              (app or (app not x4) x1)
                              (app or (app not x2) (app not x3))
                              (app or x4 x2))))))))))
              (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
             ()
             (top)))))))))
     app
     try
     (λ (n4)
       (app
        try
        (λ (n5)
          (app
           try
           (λ (n6)
             (app
              try
              (λ (n7)
                (app
                 (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                 n7))))))))))))
(list
 'clos/con:
 (list
  (list
   #t
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (flatenv
  '(((bod
      (n2)
      (ran
       try
       ()
       ()
       (bod
        (n1)
        (ran
         try
         ()
         ()
         (bod
          (p)
          (bin
           letrec
           sat-solve-7
           (app sat-solve-7 phi)
           ((phi
             (λ (x1)
               (λ (x2)
                 (λ (x3)
                   (λ (x4)
                     (λ (x5)
                       (λ (x6)
                         (λ (x7)
                           (app
                            and
                            (app or x1 x2)
                            (app or x1 (app not x2) (app not x3))
                            (app or x3 x4)
                            (app or (app not x4) x1)
                            (app or (app not x2) (app not x3))
                            (app or x4 x2))))))))))
            (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
           ()
           (top)))))))
     app
     try
     (λ (n3)
       (app
        try
        (λ (n4)
          (app
           try
           (λ (n5)
             (app
              try
              (λ (n6)
                (app
                 try
                 (λ (n7)
                   (app
                    (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                    n7))))))))))))))
(list
 'clos/con:
 (list
  (list
   #t
   (flatenv
    '((λ (n2)
        (->
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7)))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (flatenv
  '(((bod
      (n1)
      (ran
       try
       ()
       ()
       (bod
        (p)
        (bin
         letrec
         sat-solve-7
         (app sat-solve-7 phi)
         ((phi
           (λ (x1)
             (λ (x2)
               (λ (x3)
                 (λ (x4)
                   (λ (x5)
                     (λ (x6)
                       (λ (x7)
                         (app
                          and
                          (app or x1 x2)
                          (app or x1 (app not x2) (app not x3))
                          (app or x3 x4)
                          (app or (app not x4) x1)
                          (app or (app not x2) (app not x3))
                          (app or x4 x2))))))))))
          (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
         ()
         (top)))))
     app
     try
     (λ (n2)
       (app
        try
        (λ (n3)
          (app
           try
           (λ (n4)
             (app
              try
              (λ (n5)
                (app
                 try
                 (λ (n6)
                   (app
                    try
                    (λ (n7)
                      (app
                       (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                       n7))))))))))))))))
(list
 'clos/con:
 (list
  (list
   #t
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (flatenv
  '(((bod
      (p)
      (bin
       letrec
       sat-solve-7
       (app sat-solve-7 phi)
       ((phi
         (λ (x1)
           (λ (x2)
             (λ (x3)
               (λ (x4)
                 (λ (x5)
                   (λ (x6)
                     (λ (x7)
                       (app
                        and
                        (app or x1 x2)
                        (app or x1 (app not x2) (app not x3))
                        (app or x3 x4)
                        (app or (app not x4) x1)
                        (app or (app not x2) (app not x3))
                        (app or x4 x2))))))))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
       ()
       (top)))
     app
     try
     (λ (n1)
       (app
        try
        (λ (n2)
          (app
           try
           (λ (n3)
             (app
              try
              (λ (n4)
                (app
                 try
                 (λ (n5)
                   (app
                    try
                    (λ (n6)
                      (app
                       try
                       (λ (n7)
                         (app
                          (app
                           (app (app (app (app (app p n1) n2) n3) n4) n5)
                           n6)
                          n7))))))))))))))))))
(list
 'clos/con:
 (list
  (list
   #t
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app
                try
                (λ (n3)
                  (app
                   try
                   (λ (n4)
                     (app
                      try
                      (λ (n5)
                        (app
                         try
                         (λ (n6)
                           (app
                            try
                            (λ (n7)
                              (app
                               (app
                                (app (app (app (app (app p n1) n2) n3) n4) n5)
                                n6)
                               n7)))))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app (app p n1) n2) (-> n3 <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n2)
        (->
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7)))))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n2)
        (->
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7)))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app (app p n1) n2) (-> n3 <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n2)
        (->
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7)))))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n2)
        (->
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7)))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n2)
     (app
      try
      (λ (n3)
        (app
         try
         (λ (n4)
           (app
            try
            (λ (n5)
              (app
               try
               (λ (n6)
                 (app
                  try
                  (λ (n7)
                    (app
                     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                     n7)))))))))))))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n2)
     (app
      try
      (λ (n3)
        (app
         try
         (λ (n4)
           (app
            try
            (λ (n5)
              (app
               try
               (λ (n6)
                 (app
                  try
                  (λ (n7)
                    (app
                     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                     n7)))))))))))))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> x1 <-) x2)
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app
                try
                (λ (n3)
                  (app
                   try
                   (λ (n4)
                     (app
                      try
                      (λ (n5)
                        (app
                         try
                         (λ (n6)
                           (app
                            try
                            (λ (n7)
                              (app
                               (app
                                (app (app (app (app (app p n1) n2) n3) n4) n5)
                                n6)
                               n7)))))))))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app
                try
                (λ (n3)
                  (app
                   try
                   (λ (n4)
                     (app
                      try
                      (λ (n5)
                        (app
                         try
                         (λ (n6)
                           (app
                            try
                            (λ (n7)
                              (app
                               (app
                                (app (app (app (app (app p n1) n2) n3) n4) n5)
                                n6)
                               n7)))))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or x3 (-> x4 <-))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> (app not x4) <-) x1)
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) x4)
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app (app (app p n1) n2) n3) <-) n4)
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x4)
      (λ (x5)
        (λ (x6)
          (λ (x7)
            (app
             and
             (app or x1 x2)
             (app or x1 (app not x2) (app not x3))
             (app or x3 x4)
             (app or (app not x4) x1)
             (app or (app not x2) (app not x3))
             (app or x4 x2))))))
   (flatenv '((app (-> (app (app (app p n1) n2) n3) <-) n4))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app (app (app p n1) n2) n3) <-) n4)
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x4)
      (λ (x5)
        (λ (x6)
          (λ (x7)
            (app
             and
             (app or x1 x2)
             (app or x1 (app not x2) (app not x3))
             (app or x3 x4)
             (app or (app not x4) x1)
             (app or (app not x2) (app not x3))
             (app or x4 x2))))))
   (flatenv '((app (-> (app (app (app p n1) n2) n3) <-) n4))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or x1 (app not x2) (-> (app not x3) <-))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app sat-solve-7 (-> phi <-)) (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (x1)
      (λ (x2)
        (λ (x3)
          (λ (x4)
            (λ (x5)
              (λ (x6)
                (λ (x7)
                  (app
                   and
                   (app or x1 x2)
                   (app or x1 (app not x2) (app not x3))
                   (app or x3 x4)
                   (app or (app not x4) x1)
                   (app or (app not x2) (app not x3))
                   (app or x4 x2)))))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) x2)
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (app or x1 x2)
   (app or x1 (app not x2) (app not x3))
   (app or x3 x4)
   (-> (app or (app not x4) x1) <-)
   (app or (app not x2) (app not x3))
   (app or x4 x2))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app
                try
                (λ (n3)
                  (app
                   try
                   (λ (n4)
                     (app
                      try
                      (λ (n5)
                        (app
                         try
                         (λ (n6)
                           (app
                            try
                            (λ (n7)
                              (app
                               (app
                                (app (app (app (app (app p n1) n2) n3) n4) n5)
                                n6)
                               n7)))))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n7) (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n7) (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) x3 x4)
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> (app not x2) <-) (app not x3))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n5)
     (app
      try
      (λ (n6)
        (app
         try
         (λ (n7)
           (app
            (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
            n7)))))))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n5)
     (app
      try
      (λ (n6)
        (app
         try
         (λ (n7)
           (app
            (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
            n7)))))))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (phi
           (-> try = (λ (f) (app or (app f (app #t)) (app f (app #f)))) <-)
           sat-solve-7)
    bod)
 (flatenv '()))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app not x4) (-> x1 <-))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app
                try
                (λ (n3)
                  (app
                   try
                   (λ (n4)
                     (app
                      try
                      (λ (n5)
                        (app
                         try
                         (λ (n6)
                           (app
                            try
                            (λ (n7)
                              (app
                               (app
                                (app (app (app (app (app p n1) n2) n3) n4) n5)
                                n6)
                               n7)))))))))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app
                try
                (λ (n3)
                  (app
                   try
                   (λ (n4)
                     (app
                      try
                      (λ (n5)
                        (app
                         try
                         (λ (n6)
                           (app
                            try
                            (λ (n7)
                              (app
                               (app
                                (app (app (app (app (app p n1) n2) n3) n4) n5)
                                n6)
                               n7)))))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> sat-solve-7 <-) phi) (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (p)
      (app
       try
       (λ (n1)
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7))))))))))))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((λ (n4)
        (->
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7)))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n4)
        (->
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((λ (n4)
        (->
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7)))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n4)
        (->
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> x2 <-))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #f) <-))
 (flatenv
  '(((bod
      (p)
      (bin
       letrec
       sat-solve-7
       (app sat-solve-7 phi)
       ((phi
         (λ (x1)
           (λ (x2)
             (λ (x3)
               (λ (x4)
                 (λ (x5)
                   (λ (x6)
                     (λ (x7)
                       (app
                        and
                        (app or x1 x2)
                        (app or x1 (app not x2) (app not x3))
                        (app or x3 x4)
                        (app or (app not x4) x1)
                        (app or (app not x2) (app not x3))
                        (app or x4 x2))))))))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
       ()
       (top)))
     app
     try
     (λ (n1)
       (app
        try
        (λ (n2)
          (app
           try
           (λ (n3)
             (app
              try
              (λ (n4)
                (app
                 try
                 (λ (n5)
                   (app
                    try
                    (λ (n6)
                      (app
                       try
                       (λ (n7)
                         (app
                          (app
                           (app (app (app (app (app p n1) n2) n3) n4) n5)
                           n6)
                          n7))))))))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app
                try
                (λ (n3)
                  (app
                   try
                   (λ (n4)
                     (app
                      try
                      (λ (n5)
                        (app
                         try
                         (λ (n6)
                           (app
                            try
                            (λ (n7)
                              (app
                               (app
                                (app (app (app (app (app p n1) n2) n3) n4) n5)
                                n6)
                               n7)))))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #f) <-))
 (flatenv
  '(((bod
      (n1)
      (ran
       try
       ()
       ()
       (bod
        (p)
        (bin
         letrec
         sat-solve-7
         (app sat-solve-7 phi)
         ((phi
           (λ (x1)
             (λ (x2)
               (λ (x3)
                 (λ (x4)
                   (λ (x5)
                     (λ (x6)
                       (λ (x7)
                         (app
                          and
                          (app or x1 x2)
                          (app or x1 (app not x2) (app not x3))
                          (app or x3 x4)
                          (app or (app not x4) x1)
                          (app or (app not x2) (app not x3))
                          (app or x4 x2))))))))))
          (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
         ()
         (top)))))
     app
     try
     (λ (n2)
       (app
        try
        (λ (n3)
          (app
           try
           (λ (n4)
             (app
              try
              (λ (n5)
                (app
                 try
                 (λ (n6)
                   (app
                    try
                    (λ (n7)
                      (app
                       (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                       n7))))))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #f) <-))
 (flatenv
  '(((bod
      (n2)
      (ran
       try
       ()
       ()
       (bod
        (n1)
        (ran
         try
         ()
         ()
         (bod
          (p)
          (bin
           letrec
           sat-solve-7
           (app sat-solve-7 phi)
           ((phi
             (λ (x1)
               (λ (x2)
                 (λ (x3)
                   (λ (x4)
                     (λ (x5)
                       (λ (x6)
                         (λ (x7)
                           (app
                            and
                            (app or x1 x2)
                            (app or x1 (app not x2) (app not x3))
                            (app or x3 x4)
                            (app or (app not x4) x1)
                            (app or (app not x2) (app not x3))
                            (app or x4 x2))))))))))
            (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
           ()
           (top)))))))
     app
     try
     (λ (n3)
       (app
        try
        (λ (n4)
          (app
           try
           (λ (n5)
             (app
              try
              (λ (n6)
                (app
                 try
                 (λ (n7)
                   (app
                    (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                    n7))))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((λ (n2)
        (->
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7)))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #f) <-))
 (flatenv
  '(((bod
      (n3)
      (ran
       try
       ()
       ()
       (bod
        (n2)
        (ran
         try
         ()
         ()
         (bod
          (n1)
          (ran
           try
           ()
           ()
           (bod
            (p)
            (bin
             letrec
             sat-solve-7
             (app sat-solve-7 phi)
             ((phi
               (λ (x1)
                 (λ (x2)
                   (λ (x3)
                     (λ (x4)
                       (λ (x5)
                         (λ (x6)
                           (λ (x7)
                             (app
                              and
                              (app or x1 x2)
                              (app or x1 (app not x2) (app not x3))
                              (app or x3 x4)
                              (app or (app not x4) x1)
                              (app or (app not x2) (app not x3))
                              (app or x4 x2))))))))))
              (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
             ()
             (top)))))))))
     app
     try
     (λ (n4)
       (app
        try
        (λ (n5)
          (app
           try
           (λ (n6)
             (app
              try
              (λ (n7)
                (app
                 (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                 n7))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #f) <-))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-7
               (app sat-solve-7 phi)
               ((phi
                 (λ (x1)
                   (λ (x2)
                     (λ (x3)
                       (λ (x4)
                         (λ (x5)
                           (λ (x6)
                             (λ (x7)
                               (app
                                and
                                (app or x1 x2)
                                (app or x1 (app not x2) (app not x3))
                                (app or x3 x4)
                                (app or (app not x4) x1)
                                (app or (app not x2) (app not x3))
                                (app or x4 x2))))))))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     try
     (λ (n5)
       (app
        try
        (λ (n6)
          (app
           try
           (λ (n7)
             (app
              (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
              n7))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((λ (n4)
        (->
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #f) <-))
 (flatenv
  '(((bod
      (n5)
      (ran
       try
       ()
       ()
       (bod
        (n4)
        (ran
         try
         ()
         ()
         (bod
          (n3)
          (ran
           try
           ()
           ()
           (bod
            (n2)
            (ran
             try
             ()
             ()
             (bod
              (n1)
              (ran
               try
               ()
               ()
               (bod
                (p)
                (bin
                 letrec
                 sat-solve-7
                 (app sat-solve-7 phi)
                 ((phi
                   (λ (x1)
                     (λ (x2)
                       (λ (x3)
                         (λ (x4)
                           (λ (x5)
                             (λ (x6)
                               (λ (x7)
                                 (app
                                  and
                                  (app or x1 x2)
                                  (app or x1 (app not x2) (app not x3))
                                  (app or x3 x4)
                                  (app or (app not x4) x1)
                                  (app or (app not x2) (app not x3))
                                  (app or x4 x2))))))))))
                  (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                 ()
                 (top)))))))))))))
     app
     try
     (λ (n6)
       (app
        try
        (λ (n7)
          (app
           (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
           n7))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((λ (n5)
        (->
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7)))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #f) <-))
 (flatenv
  '(((bod
      (n6)
      (ran
       try
       ()
       ()
       (bod
        (n5)
        (ran
         try
         ()
         ()
         (bod
          (n4)
          (ran
           try
           ()
           ()
           (bod
            (n3)
            (ran
             try
             ()
             ()
             (bod
              (n2)
              (ran
               try
               ()
               ()
               (bod
                (n1)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (p)
                  (bin
                   letrec
                   sat-solve-7
                   (app sat-solve-7 phi)
                   ((phi
                     (λ (x1)
                       (λ (x2)
                         (λ (x3)
                           (λ (x4)
                             (λ (x5)
                               (λ (x6)
                                 (λ (x7)
                                   (app
                                    and
                                    (app or x1 x2)
                                    (app or x1 (app not x2) (app not x3))
                                    (app or x3 x4)
                                    (app or (app not x4) x1)
                                    (app or (app not x2) (app not x3))
                                    (app or x4 x2))))))))))
                    (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                   ()
                   (top)))))))))))))))
     app
     try
     (λ (n7)
       (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((λ (n6)
        (->
         (app
          try
          (λ (n7)
            (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) x1 x2)
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n7)
    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n7)
    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))
 (flatenv
  '(((bod
      (p)
      (bin
       letrec
       sat-solve-7
       (app sat-solve-7 phi)
       ((phi
         (λ (x1)
           (λ (x2)
             (λ (x3)
               (λ (x4)
                 (λ (x5)
                   (λ (x6)
                     (λ (x7)
                       (app
                        and
                        (app or x1 x2)
                        (app or x1 (app not x2) (app not x3))
                        (app or x3 x4)
                        (app or (app not x4) x1)
                        (app or (app not x2) (app not x3))
                        (app or x4 x2))))))))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
       ()
       (top)))
     app
     try
     (λ (n1)
       (app
        try
        (λ (n2)
          (app
           try
           (λ (n3)
             (app
              try
              (λ (n4)
                (app
                 try
                 (λ (n5)
                   (app
                    try
                    (λ (n6)
                      (app
                       try
                       (λ (n7)
                         (app
                          (app
                           (app (app (app (app (app p n1) n2) n3) n4) n5)
                           n6)
                          n7))))))))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app
                try
                (λ (n3)
                  (app
                   try
                   (λ (n4)
                     (app
                      try
                      (λ (n5)
                        (app
                         try
                         (λ (n6)
                           (app
                            try
                            (λ (n7)
                              (app
                               (app
                                (app (app (app (app (app p n1) n2) n3) n4) n5)
                                n6)
                               n7)))))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))
 (flatenv
  '(((bod
      (n1)
      (ran
       try
       ()
       ()
       (bod
        (p)
        (bin
         letrec
         sat-solve-7
         (app sat-solve-7 phi)
         ((phi
           (λ (x1)
             (λ (x2)
               (λ (x3)
                 (λ (x4)
                   (λ (x5)
                     (λ (x6)
                       (λ (x7)
                         (app
                          and
                          (app or x1 x2)
                          (app or x1 (app not x2) (app not x3))
                          (app or x3 x4)
                          (app or (app not x4) x1)
                          (app or (app not x2) (app not x3))
                          (app or x4 x2))))))))))
          (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
         ()
         (top)))))
     app
     try
     (λ (n2)
       (app
        try
        (λ (n3)
          (app
           try
           (λ (n4)
             (app
              try
              (λ (n5)
                (app
                 try
                 (λ (n6)
                   (app
                    try
                    (λ (n7)
                      (app
                       (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                       n7))))))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))
 (flatenv
  '(((bod
      (n2)
      (ran
       try
       ()
       ()
       (bod
        (n1)
        (ran
         try
         ()
         ()
         (bod
          (p)
          (bin
           letrec
           sat-solve-7
           (app sat-solve-7 phi)
           ((phi
             (λ (x1)
               (λ (x2)
                 (λ (x3)
                   (λ (x4)
                     (λ (x5)
                       (λ (x6)
                         (λ (x7)
                           (app
                            and
                            (app or x1 x2)
                            (app or x1 (app not x2) (app not x3))
                            (app or x3 x4)
                            (app or (app not x4) x1)
                            (app or (app not x2) (app not x3))
                            (app or x4 x2))))))))))
            (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
           ()
           (top)))))))
     app
     try
     (λ (n3)
       (app
        try
        (λ (n4)
          (app
           try
           (λ (n5)
             (app
              try
              (λ (n6)
                (app
                 try
                 (λ (n7)
                   (app
                    (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                    n7))))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n2)
        (->
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7)))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))
 (flatenv
  '(((bod
      (n3)
      (ran
       try
       ()
       ()
       (bod
        (n2)
        (ran
         try
         ()
         ()
         (bod
          (n1)
          (ran
           try
           ()
           ()
           (bod
            (p)
            (bin
             letrec
             sat-solve-7
             (app sat-solve-7 phi)
             ((phi
               (λ (x1)
                 (λ (x2)
                   (λ (x3)
                     (λ (x4)
                       (λ (x5)
                         (λ (x6)
                           (λ (x7)
                             (app
                              and
                              (app or x1 x2)
                              (app or x1 (app not x2) (app not x3))
                              (app or x3 x4)
                              (app or (app not x4) x1)
                              (app or (app not x2) (app not x3))
                              (app or x4 x2))))))))))
              (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
             ()
             (top)))))))))
     app
     try
     (λ (n4)
       (app
        try
        (λ (n5)
          (app
           try
           (λ (n6)
             (app
              try
              (λ (n7)
                (app
                 (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                 n7))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-7
               (app sat-solve-7 phi)
               ((phi
                 (λ (x1)
                   (λ (x2)
                     (λ (x3)
                       (λ (x4)
                         (λ (x5)
                           (λ (x6)
                             (λ (x7)
                               (app
                                and
                                (app or x1 x2)
                                (app or x1 (app not x2) (app not x3))
                                (app or x3 x4)
                                (app or (app not x4) x1)
                                (app or (app not x2) (app not x3))
                                (app or x4 x2))))))))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     try
     (λ (n5)
       (app
        try
        (λ (n6)
          (app
           try
           (λ (n7)
             (app
              (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
              n7))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n4)
        (->
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))
 (flatenv
  '(((bod
      (n5)
      (ran
       try
       ()
       ()
       (bod
        (n4)
        (ran
         try
         ()
         ()
         (bod
          (n3)
          (ran
           try
           ()
           ()
           (bod
            (n2)
            (ran
             try
             ()
             ()
             (bod
              (n1)
              (ran
               try
               ()
               ()
               (bod
                (p)
                (bin
                 letrec
                 sat-solve-7
                 (app sat-solve-7 phi)
                 ((phi
                   (λ (x1)
                     (λ (x2)
                       (λ (x3)
                         (λ (x4)
                           (λ (x5)
                             (λ (x6)
                               (λ (x7)
                                 (app
                                  and
                                  (app or x1 x2)
                                  (app or x1 (app not x2) (app not x3))
                                  (app or x3 x4)
                                  (app or (app not x4) x1)
                                  (app or (app not x2) (app not x3))
                                  (app or x4 x2))))))))))
                  (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                 ()
                 (top)))))))))))))
     app
     try
     (λ (n6)
       (app
        try
        (λ (n7)
          (app
           (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
           n7))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n5)
        (->
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7)))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))
 (flatenv
  '(((bod
      (n6)
      (ran
       try
       ()
       ()
       (bod
        (n5)
        (ran
         try
         ()
         ()
         (bod
          (n4)
          (ran
           try
           ()
           ()
           (bod
            (n3)
            (ran
             try
             ()
             ()
             (bod
              (n2)
              (ran
               try
               ()
               ()
               (bod
                (n1)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (p)
                  (bin
                   letrec
                   sat-solve-7
                   (app sat-solve-7 phi)
                   ((phi
                     (λ (x1)
                       (λ (x2)
                         (λ (x3)
                           (λ (x4)
                             (λ (x5)
                               (λ (x6)
                                 (λ (x7)
                                   (app
                                    and
                                    (app or x1 x2)
                                    (app or x1 (app not x2) (app not x3))
                                    (app or x3 x4)
                                    (app or (app not x4) x1)
                                    (app or (app not x2) (app not x3))
                                    (app or x4 x2))))))))))
                    (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                   ()
                   (top)))))))))))))))
     app
     try
     (λ (n7)
       (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n6)
        (->
         (app
          try
          (λ (n7)
            (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) x2)
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app not x2) (-> (app not x3) <-))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app p n1) <-) n2)
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2)
      (λ (x3)
        (λ (x4)
          (λ (x5)
            (λ (x6)
              (λ (x7)
                (app
                 and
                 (app or x1 x2)
                 (app or x1 (app not x2) (app not x3))
                 (app or x3 x4)
                 (app or (app not x4) x1)
                 (app or (app not x2) (app not x3))
                 (app or x4 x2))))))))
   (flatenv '((app (-> (app p n1) <-) n2))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app p n1) <-) n2)
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2)
      (λ (x3)
        (λ (x4)
          (λ (x5)
            (λ (x6)
              (λ (x7)
                (app
                 and
                 (app or x1 x2)
                 (app or x1 (app not x2) (app not x3))
                 (app or x3 x4)
                 (app or (app not x4) x1)
                 (app or (app not x2) (app not x3))
                 (app or x4 x2))))))))
   (flatenv '((app (-> (app p n1) <-) n2))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) x3)
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> x3 <-) x4)
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n2)
        (->
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7)))))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n2)
        (->
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7)))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (phi try sat-solve-7) (-> (app sat-solve-7 phi) <-))
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app
                try
                (λ (n3)
                  (app
                   try
                   (λ (n4)
                     (app
                      try
                      (λ (n5)
                        (app
                         try
                         (λ (n6)
                           (app
                            try
                            (λ (n7)
                              (app
                               (app
                                (app (app (app (app (app p n1) n2) n3) n4) n5)
                                n6)
                               n7)))))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> x4 <-))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x6)
      (λ (x7)
        (app
         and
         (app or x1 x2)
         (app or x1 (app not x2) (app not x3))
         (app or x3 x4)
         (app or (app not x4) x1)
         (app or (app not x2) (app not x3))
         (app or x4 x2))))
   (flatenv
    '((app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x6)
      (λ (x7)
        (app
         and
         (app or x1 x2)
         (app or x1 (app not x2) (app not x3))
         (app or x3 x4)
         (app or (app not x4) x1)
         (app or (app not x2) (app not x3))
         (app or x4 x2))))
   (flatenv
    '((app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (->
    (λ (n2)
      (app
       try
       (λ (n3)
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7))))))))))))
    <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n2)
      (app
       try
       (λ (n3)
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7))))))))))))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (->
    (λ (n2)
      (app
       try
       (λ (n3)
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7))))))))))))
    <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n2)
      (app
       try
       (λ (n3)
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7))))))))))))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) (app f (app #t)) (app f (app #f)))
 (flatenv
  '(((bod
      (p)
      (bin
       letrec
       sat-solve-7
       (app sat-solve-7 phi)
       ((phi
         (λ (x1)
           (λ (x2)
             (λ (x3)
               (λ (x4)
                 (λ (x5)
                   (λ (x6)
                     (λ (x7)
                       (app
                        and
                        (app or x1 x2)
                        (app or x1 (app not x2) (app not x3))
                        (app or x3 x4)
                        (app or (app not x4) x1)
                        (app or (app not x2) (app not x3))
                        (app or x4 x2))))))))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
       ()
       (top)))
     app
     try
     (λ (n1)
       (app
        try
        (λ (n2)
          (app
           try
           (λ (n3)
             (app
              try
              (λ (n4)
                (app
                 try
                 (λ (n5)
                   (app
                    try
                    (λ (n6)
                      (app
                       try
                       (λ (n7)
                         (app
                          (app
                           (app (app (app (app (app p n1) n2) n3) n4) n5)
                           n6)
                          n7))))))))))))))))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) (app f (app #t)) (app f (app #f)))
 (flatenv
  '(((bod
      (n1)
      (ran
       try
       ()
       ()
       (bod
        (p)
        (bin
         letrec
         sat-solve-7
         (app sat-solve-7 phi)
         ((phi
           (λ (x1)
             (λ (x2)
               (λ (x3)
                 (λ (x4)
                   (λ (x5)
                     (λ (x6)
                       (λ (x7)
                         (app
                          and
                          (app or x1 x2)
                          (app or x1 (app not x2) (app not x3))
                          (app or x3 x4)
                          (app or (app not x4) x1)
                          (app or (app not x2) (app not x3))
                          (app or x4 x2))))))))))
          (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
         ()
         (top)))))
     app
     try
     (λ (n2)
       (app
        try
        (λ (n3)
          (app
           try
           (λ (n4)
             (app
              try
              (λ (n5)
                (app
                 try
                 (λ (n6)
                   (app
                    try
                    (λ (n7)
                      (app
                       (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                       n7))))))))))))))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) (app f (app #t)) (app f (app #f)))
 (flatenv
  '(((bod
      (n2)
      (ran
       try
       ()
       ()
       (bod
        (n1)
        (ran
         try
         ()
         ()
         (bod
          (p)
          (bin
           letrec
           sat-solve-7
           (app sat-solve-7 phi)
           ((phi
             (λ (x1)
               (λ (x2)
                 (λ (x3)
                   (λ (x4)
                     (λ (x5)
                       (λ (x6)
                         (λ (x7)
                           (app
                            and
                            (app or x1 x2)
                            (app or x1 (app not x2) (app not x3))
                            (app or x3 x4)
                            (app or (app not x4) x1)
                            (app or (app not x2) (app not x3))
                            (app or x4 x2))))))))))
            (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
           ()
           (top)))))))
     app
     try
     (λ (n3)
       (app
        try
        (λ (n4)
          (app
           try
           (λ (n5)
             (app
              try
              (λ (n6)
                (app
                 try
                 (λ (n7)
                   (app
                    (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                    n7))))))))))))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) (app f (app #t)) (app f (app #f)))
 (flatenv
  '(((bod
      (n3)
      (ran
       try
       ()
       ()
       (bod
        (n2)
        (ran
         try
         ()
         ()
         (bod
          (n1)
          (ran
           try
           ()
           ()
           (bod
            (p)
            (bin
             letrec
             sat-solve-7
             (app sat-solve-7 phi)
             ((phi
               (λ (x1)
                 (λ (x2)
                   (λ (x3)
                     (λ (x4)
                       (λ (x5)
                         (λ (x6)
                           (λ (x7)
                             (app
                              and
                              (app or x1 x2)
                              (app or x1 (app not x2) (app not x3))
                              (app or x3 x4)
                              (app or (app not x4) x1)
                              (app or (app not x2) (app not x3))
                              (app or x4 x2))))))))))
              (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
             ()
             (top)))))))))
     app
     try
     (λ (n4)
       (app
        try
        (λ (n5)
          (app
           try
           (λ (n6)
             (app
              try
              (λ (n7)
                (app
                 (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                 n7))))))))))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) (app f (app #t)) (app f (app #f)))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-7
               (app sat-solve-7 phi)
               ((phi
                 (λ (x1)
                   (λ (x2)
                     (λ (x3)
                       (λ (x4)
                         (λ (x5)
                           (λ (x6)
                             (λ (x7)
                               (app
                                and
                                (app or x1 x2)
                                (app or x1 (app not x2) (app not x3))
                                (app or x3 x4)
                                (app or (app not x4) x1)
                                (app or (app not x2) (app not x3))
                                (app or x4 x2))))))))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     try
     (λ (n5)
       (app
        try
        (λ (n6)
          (app
           try
           (λ (n7)
             (app
              (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
              n7))))))))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) (app f (app #t)) (app f (app #f)))
 (flatenv
  '(((bod
      (n5)
      (ran
       try
       ()
       ()
       (bod
        (n4)
        (ran
         try
         ()
         ()
         (bod
          (n3)
          (ran
           try
           ()
           ()
           (bod
            (n2)
            (ran
             try
             ()
             ()
             (bod
              (n1)
              (ran
               try
               ()
               ()
               (bod
                (p)
                (bin
                 letrec
                 sat-solve-7
                 (app sat-solve-7 phi)
                 ((phi
                   (λ (x1)
                     (λ (x2)
                       (λ (x3)
                         (λ (x4)
                           (λ (x5)
                             (λ (x6)
                               (λ (x7)
                                 (app
                                  and
                                  (app or x1 x2)
                                  (app or x1 (app not x2) (app not x3))
                                  (app or x3 x4)
                                  (app or (app not x4) x1)
                                  (app or (app not x2) (app not x3))
                                  (app or x4 x2))))))))))
                  (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                 ()
                 (top)))))))))))))
     app
     try
     (λ (n6)
       (app
        try
        (λ (n7)
          (app
           (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
           n7))))))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) (app f (app #t)) (app f (app #f)))
 (flatenv
  '(((bod
      (n6)
      (ran
       try
       ()
       ()
       (bod
        (n5)
        (ran
         try
         ()
         ()
         (bod
          (n4)
          (ran
           try
           ()
           ()
           (bod
            (n3)
            (ran
             try
             ()
             ()
             (bod
              (n2)
              (ran
               try
               ()
               ()
               (bod
                (n1)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (p)
                  (bin
                   letrec
                   sat-solve-7
                   (app sat-solve-7 phi)
                   ((phi
                     (λ (x1)
                       (λ (x2)
                         (λ (x3)
                           (λ (x4)
                             (λ (x5)
                               (λ (x6)
                                 (λ (x7)
                                   (app
                                    and
                                    (app or x1 x2)
                                    (app or x1 (app not x2) (app not x3))
                                    (app or x3 x4)
                                    (app or (app not x4) x1)
                                    (app or (app not x2) (app not x3))
                                    (app or x4 x2))))))))))
                    (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                   ()
                   (top)))))))))))))))
     app
     try
     (λ (n7)
       (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x6)
    (->
     (λ (x7)
       (app
        and
        (app or x1 x2)
        (app or x1 (app not x2) (app not x3))
        (app or x3 x4)
        (app or (app not x4) x1)
        (app or (app not x2) (app not x3))
        (app or x4 x2)))
     <-))
 (flatenv
  '(((rat
      (n7)
      (bod
       (n7)
       (ran
        try
        ()
        ()
        (bod
         (n6)
         (ran
          try
          ()
          ()
          (bod
           (n5)
           (ran
            try
            ()
            ()
            (bod
             (n4)
             (ran
              try
              ()
              ()
              (bod
               (n3)
               (ran
                try
                ()
                ()
                (bod
                 (n2)
                 (ran
                  try
                  ()
                  ()
                  (bod
                   (n1)
                   (ran
                    try
                    ()
                    ()
                    (bod
                     (p)
                     (bin
                      letrec
                      sat-solve-7
                      (app sat-solve-7 phi)
                      ((phi
                        (λ (x1)
                          (λ (x2)
                            (λ (x3)
                              (λ (x4)
                                (λ (x5)
                                  (λ (x6)
                                    (λ (x7)
                                      (app
                                       and
                                       (app or x1 x2)
                                       (app or x1 (app not x2) (app not x3))
                                       (app or x3 x4)
                                       (app or (app not x4) x1)
                                       (app or (app not x2) (app not x3))
                                       (app or x4 x2))))))))))
                       (try
                        (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                      ()
                      (top))))))))))))))))))
     app
     (app (app (app (app (app p n1) n2) n3) n4) n5)
     n6))))
(list
 'clos/con:
 (list
  (list
   '(λ (x7)
      (app
       and
       (app or x1 x2)
       (app or x1 (app not x2) (app not x3))
       (app or x3 x4)
       (app or (app not x4) x1)
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (flatenv
    '((app
       (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-)
       n7))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (app or x1 x2)
   (-> (app or x1 (app not x2) (app not x3)) <-)
   (app or x3 x4)
   (app or (app not x4) x1)
   (app or (app not x2) (app not x3))
   (app or x4 x2))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app
                try
                (λ (n3)
                  (app
                   try
                   (λ (n4)
                     (app
                      try
                      (λ (n5)
                        (app
                         try
                         (λ (n6)
                           (app
                            try
                            (λ (n7)
                              (app
                               (app
                                (app (app (app (app (app p n1) n2) n3) n4) n5)
                                n6)
                               n7)))))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #t) <-))
 (flatenv
  '(((bod
      (n6)
      (ran
       try
       ()
       ()
       (bod
        (n5)
        (ran
         try
         ()
         ()
         (bod
          (n4)
          (ran
           try
           ()
           ()
           (bod
            (n3)
            (ran
             try
             ()
             ()
             (bod
              (n2)
              (ran
               try
               ()
               ()
               (bod
                (n1)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (p)
                  (bin
                   letrec
                   sat-solve-7
                   (app sat-solve-7 phi)
                   ((phi
                     (λ (x1)
                       (λ (x2)
                         (λ (x3)
                           (λ (x4)
                             (λ (x5)
                               (λ (x6)
                                 (λ (x7)
                                   (app
                                    and
                                    (app or x1 x2)
                                    (app or x1 (app not x2) (app not x3))
                                    (app or x3 x4)
                                    (app or (app not x4) x1)
                                    (app or (app not x2) (app not x3))
                                    (app or x4 x2))))))))))
                    (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                   ()
                   (top)))))))))))))))
     app
     try
     (λ (n7)
       (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n6)
        (->
         (app
          try
          (λ (n7)
            (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #t) <-))
 (flatenv
  '(((bod
      (n5)
      (ran
       try
       ()
       ()
       (bod
        (n4)
        (ran
         try
         ()
         ()
         (bod
          (n3)
          (ran
           try
           ()
           ()
           (bod
            (n2)
            (ran
             try
             ()
             ()
             (bod
              (n1)
              (ran
               try
               ()
               ()
               (bod
                (p)
                (bin
                 letrec
                 sat-solve-7
                 (app sat-solve-7 phi)
                 ((phi
                   (λ (x1)
                     (λ (x2)
                       (λ (x3)
                         (λ (x4)
                           (λ (x5)
                             (λ (x6)
                               (λ (x7)
                                 (app
                                  and
                                  (app or x1 x2)
                                  (app or x1 (app not x2) (app not x3))
                                  (app or x3 x4)
                                  (app or (app not x4) x1)
                                  (app or (app not x2) (app not x3))
                                  (app or x4 x2))))))))))
                  (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                 ()
                 (top)))))))))))))
     app
     try
     (λ (n6)
       (app
        try
        (λ (n7)
          (app
           (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
           n7))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n5)
        (->
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7)))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #t) <-))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-7
               (app sat-solve-7 phi)
               ((phi
                 (λ (x1)
                   (λ (x2)
                     (λ (x3)
                       (λ (x4)
                         (λ (x5)
                           (λ (x6)
                             (λ (x7)
                               (app
                                and
                                (app or x1 x2)
                                (app or x1 (app not x2) (app not x3))
                                (app or x3 x4)
                                (app or (app not x4) x1)
                                (app or (app not x2) (app not x3))
                                (app or x4 x2))))))))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     try
     (λ (n5)
       (app
        try
        (λ (n6)
          (app
           try
           (λ (n7)
             (app
              (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
              n7))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n4)
        (->
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #t) <-))
 (flatenv
  '(((bod
      (n3)
      (ran
       try
       ()
       ()
       (bod
        (n2)
        (ran
         try
         ()
         ()
         (bod
          (n1)
          (ran
           try
           ()
           ()
           (bod
            (p)
            (bin
             letrec
             sat-solve-7
             (app sat-solve-7 phi)
             ((phi
               (λ (x1)
                 (λ (x2)
                   (λ (x3)
                     (λ (x4)
                       (λ (x5)
                         (λ (x6)
                           (λ (x7)
                             (app
                              and
                              (app or x1 x2)
                              (app or x1 (app not x2) (app not x3))
                              (app or x3 x4)
                              (app or (app not x4) x1)
                              (app or (app not x2) (app not x3))
                              (app or x4 x2))))))))))
              (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
             ()
             (top)))))))))
     app
     try
     (λ (n4)
       (app
        try
        (λ (n5)
          (app
           try
           (λ (n6)
             (app
              try
              (λ (n7)
                (app
                 (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                 n7))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #t) <-))
 (flatenv
  '(((bod
      (n2)
      (ran
       try
       ()
       ()
       (bod
        (n1)
        (ran
         try
         ()
         ()
         (bod
          (p)
          (bin
           letrec
           sat-solve-7
           (app sat-solve-7 phi)
           ((phi
             (λ (x1)
               (λ (x2)
                 (λ (x3)
                   (λ (x4)
                     (λ (x5)
                       (λ (x6)
                         (λ (x7)
                           (app
                            and
                            (app or x1 x2)
                            (app or x1 (app not x2) (app not x3))
                            (app or x3 x4)
                            (app or (app not x4) x1)
                            (app or (app not x2) (app not x3))
                            (app or x4 x2))))))))))
            (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
           ()
           (top)))))))
     app
     try
     (λ (n3)
       (app
        try
        (λ (n4)
          (app
           try
           (λ (n5)
             (app
              try
              (λ (n6)
                (app
                 try
                 (λ (n7)
                   (app
                    (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                    n7))))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n2)
        (->
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7)))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #t) <-))
 (flatenv
  '(((bod
      (n1)
      (ran
       try
       ()
       ()
       (bod
        (p)
        (bin
         letrec
         sat-solve-7
         (app sat-solve-7 phi)
         ((phi
           (λ (x1)
             (λ (x2)
               (λ (x3)
                 (λ (x4)
                   (λ (x5)
                     (λ (x6)
                       (λ (x7)
                         (app
                          and
                          (app or x1 x2)
                          (app or x1 (app not x2) (app not x3))
                          (app or x3 x4)
                          (app or (app not x4) x1)
                          (app or (app not x2) (app not x3))
                          (app or x4 x2))))))))))
          (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
         ()
         (top)))))
     app
     try
     (λ (n2)
       (app
        try
        (λ (n3)
          (app
           try
           (λ (n4)
             (app
              try
              (λ (n5)
                (app
                 try
                 (λ (n6)
                   (app
                    try
                    (λ (n7)
                      (app
                       (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                       n7))))))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f (-> (app #t) <-))
 (flatenv
  '(((bod
      (p)
      (bin
       letrec
       sat-solve-7
       (app sat-solve-7 phi)
       ((phi
         (λ (x1)
           (λ (x2)
             (λ (x3)
               (λ (x4)
                 (λ (x5)
                   (λ (x6)
                     (λ (x7)
                       (app
                        and
                        (app or x1 x2)
                        (app or x1 (app not x2) (app not x3))
                        (app or x3 x4)
                        (app or (app not x4) x1)
                        (app or (app not x2) (app not x3))
                        (app or x4 x2))))))))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
       ()
       (top)))
     app
     try
     (λ (n1)
       (app
        try
        (λ (n2)
          (app
           try
           (λ (n3)
             (app
              try
              (λ (n4)
                (app
                 try
                 (λ (n5)
                   (app
                    try
                    (λ (n6)
                      (app
                       try
                       (λ (n7)
                         (app
                          (app
                           (app (app (app (app (app p n1) n2) n3) n4) n5)
                           n6)
                          n7))))))))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app
                try
                (λ (n3)
                  (app
                   try
                   (λ (n4)
                     (app
                      try
                      (λ (n5)
                        (app
                         try
                         (λ (n6)
                           (app
                            try
                            (λ (n7)
                              (app
                               (app
                                (app (app (app (app (app p n1) n2) n3) n4) n5)
                                n6)
                               n7)))))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> x1 <-) (app not x2) (app not x3))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app
                try
                (λ (n3)
                  (app
                   try
                   (λ (n4)
                     (app
                      try
                      (λ (n5)
                        (app
                         try
                         (λ (n6)
                           (app
                            try
                            (λ (n7)
                              (app
                               (app
                                (app (app (app (app (app p n1) n2) n3) n4) n5)
                                n6)
                               n7)))))))))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app
                try
                (λ (n3)
                  (app
                   try
                   (λ (n4)
                     (app
                      try
                      (λ (n5)
                        (app
                         try
                         (λ (n6)
                           (app
                            try
                            (λ (n7)
                              (app
                               (app
                                (app (app (app (app (app p n1) n2) n3) n4) n5)
                                n6)
                               n7)))))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n3)
     (app
      try
      (λ (n4)
        (app
         try
         (λ (n5)
           (app
            try
            (λ (n6)
              (app
               try
               (λ (n7)
                 (app
                  (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                  n7)))))))))))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n3)
     (app
      try
      (λ (n4)
        (app
         try
         (λ (n5)
           (app
            try
            (λ (n6)
              (app
               try
               (λ (n7)
                 (app
                  (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                  n7)))))))))))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n5)
    (->
     (app
      try
      (λ (n6)
        (app
         try
         (λ (n7)
           (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))))
     <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n5)
        (->
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7)))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n5)
    (->
     (app
      try
      (λ (n6)
        (app
         try
         (λ (n7)
           (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))))
     <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n5)
        (->
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7)))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or x1 (-> x2 <-))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) x4 x2)
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (->
    (λ (n3)
      (app
       try
       (λ (n4)
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7))))))))))
    <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n3)
      (app
       try
       (λ (n4)
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7))))))))))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (->
    (λ (n3)
      (app
       try
       (λ (n4)
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7))))))))))
    <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n3)
      (app
       try
       (λ (n4)
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7))))))))))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((λ (n6)
        (->
         (app
          try
          (λ (n7)
            (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n6)
        (->
         (app
          try
          (λ (n7)
            (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n4)
     (app
      try
      (λ (n5)
        (app
         try
         (λ (n6)
           (app
            try
            (λ (n7)
              (app
               (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
               n7)))))))))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n4)
     (app
      try
      (λ (n5)
        (app
         try
         (λ (n6)
           (app
            try
            (λ (n7)
              (app
               (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
               n7)))))))))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n5)
        (->
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7)))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n5)
        (->
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7)))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n5)
        (->
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7)))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n5)
        (->
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7)))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n4)
    (->
     (app
      try
      (λ (n5)
        (app
         try
         (λ (n6)
           (app
            try
            (λ (n7)
              (app
               (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
               n7)))))))
     <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n4)
        (->
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n4)
    (->
     (app
      try
      (λ (n5)
        (app
         try
         (λ (n6)
           (app
            try
            (λ (n7)
              (app
               (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
               n7)))))))
     <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n4)
        (->
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (p)
    (->
     (app
      try
      (λ (n1)
        (app
         try
         (λ (n2)
           (app
            try
            (λ (n3)
              (app
               try
               (λ (n4)
                 (app
                  try
                  (λ (n5)
                    (app
                     try
                     (λ (n6)
                       (app
                        try
                        (λ (n7)
                          (app
                           (app
                            (app (app (app (app (app p n1) n2) n3) n4) n5)
                            n6)
                           n7)))))))))))))))
     <-))
 (flatenv
  '(((let-bod
      letrec
      ((phi
        (λ (x1)
          (λ (x2)
            (λ (x3)
              (λ (x4)
                (λ (x5)
                  (λ (x6)
                    (λ (x7)
                      (app
                       and
                       (app or x1 x2)
                       (app or x1 (app not x2) (app not x3))
                       (app or x3 x4)
                       (app or (app not x4) x1)
                       (app or (app not x2) (app not x3))
                       (app or x4 x2))))))))))
       (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
       (sat-solve-7
        (λ (p)
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app
                 try
                 (λ (n3)
                   (app
                    try
                    (λ (n4)
                      (app
                       try
                       (λ (n5)
                         (app
                          try
                          (λ (n6)
                            (app
                             try
                             (λ (n7)
                               (app
                                (app
                                 (app (app (app (app (app p n1) n2) n3) n4) n5)
                                 n6)
                                n7))))))))))))))))))
      (top))
     app
     sat-solve-7
     phi))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app
                try
                (λ (n3)
                  (app
                   try
                   (λ (n4)
                     (app
                      try
                      (λ (n5)
                        (app
                         try
                         (λ (n6)
                           (app
                            try
                            (λ (n7)
                              (app
                               (app
                                (app (app (app (app (app p n1) n2) n3) n4) n5)
                                n6)
                               n7)))))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x3)
    (->
     (λ (x4)
       (λ (x5)
         (λ (x6)
           (λ (x7)
             (app
              and
              (app or x1 x2)
              (app or x1 (app not x2) (app not x3))
              (app or x3 x4)
              (app or (app not x4) x1)
              (app or (app not x2) (app not x3))
              (app or x4 x2))))))
     <-))
 (flatenv
  '(((rat
      (n4)
      (rat
       (n5)
       (rat
        (n6)
        (rat
         (n7)
         (bod
          (n7)
          (ran
           try
           ()
           ()
           (bod
            (n6)
            (ran
             try
             ()
             ()
             (bod
              (n5)
              (ran
               try
               ()
               ()
               (bod
                (n4)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n3)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (n2)
                    (ran
                     try
                     ()
                     ()
                     (bod
                      (n1)
                      (ran
                       try
                       ()
                       ()
                       (bod
                        (p)
                        (bin
                         letrec
                         sat-solve-7
                         (app sat-solve-7 phi)
                         ((phi
                           (λ (x1)
                             (λ (x2)
                               (λ (x3)
                                 (λ (x4)
                                   (λ (x5)
                                     (λ (x6)
                                       (λ (x7)
                                         (app
                                          and
                                          (app or x1 x2)
                                          (app or x1 (app not x2) (app not x3))
                                          (app or x3 x4)
                                          (app or (app not x4) x1)
                                          (app or (app not x2) (app not x3))
                                          (app or x4 x2))))))))))
                          (try
                           (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                         ()
                         (top)))))))))))))))))))))
     app
     (app (app p n1) n2)
     n3))))
(list
 'clos/con:
 (list
  (list
   '(λ (x4)
      (λ (x5)
        (λ (x6)
          (λ (x7)
            (app
             and
             (app or x1 x2)
             (app or x1 (app not x2) (app not x3))
             (app or x3 x4)
             (app or (app not x4) x1)
             (app or (app not x2) (app not x3))
             (app or x4 x2))))))
   (flatenv '((app (-> (app (app (app p n1) n2) n3) <-) n4))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n1)
    (->
     (app
      try
      (λ (n2)
        (app
         try
         (λ (n3)
           (app
            try
            (λ (n4)
              (app
               try
               (λ (n5)
                 (app
                  try
                  (λ (n6)
                    (app
                     try
                     (λ (n7)
                       (app
                        (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                        n7)))))))))))))
     <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n1)
    (->
     (app
      try
      (λ (n2)
        (app
         try
         (λ (n3)
           (app
            try
            (λ (n4)
              (app
               try
               (λ (n5)
                 (app
                  try
                  (λ (n6)
                    (app
                     try
                     (λ (n7)
                       (app
                        (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                        n7)))))))))))))
     <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n6)
    (->
     (app
      try
      (λ (n7)
        (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))
     <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n6)
        (->
         (app
          try
          (λ (n7)
            (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n6)
    (->
     (app
      try
      (λ (n7)
        (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))
     <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n6)
        (->
         (app
          try
          (λ (n7)
            (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app f (app #t)) (-> (app f (app #f)) <-))
 (flatenv
  '(((bod
      (p)
      (bin
       letrec
       sat-solve-7
       (app sat-solve-7 phi)
       ((phi
         (λ (x1)
           (λ (x2)
             (λ (x3)
               (λ (x4)
                 (λ (x5)
                   (λ (x6)
                     (λ (x7)
                       (app
                        and
                        (app or x1 x2)
                        (app or x1 (app not x2) (app not x3))
                        (app or x3 x4)
                        (app or (app not x4) x1)
                        (app or (app not x2) (app not x3))
                        (app or x4 x2))))))))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
       ()
       (top)))
     app
     try
     (λ (n1)
       (app
        try
        (λ (n2)
          (app
           try
           (λ (n3)
             (app
              try
              (λ (n4)
                (app
                 try
                 (λ (n5)
                   (app
                    try
                    (λ (n6)
                      (app
                       try
                       (λ (n7)
                         (app
                          (app
                           (app (app (app (app (app p n1) n2) n3) n4) n5)
                           n6)
                          n7))))))))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app f (app #t)) (-> (app f (app #f)) <-))
 (flatenv
  '(((bod
      (n1)
      (ran
       try
       ()
       ()
       (bod
        (p)
        (bin
         letrec
         sat-solve-7
         (app sat-solve-7 phi)
         ((phi
           (λ (x1)
             (λ (x2)
               (λ (x3)
                 (λ (x4)
                   (λ (x5)
                     (λ (x6)
                       (λ (x7)
                         (app
                          and
                          (app or x1 x2)
                          (app or x1 (app not x2) (app not x3))
                          (app or x3 x4)
                          (app or (app not x4) x1)
                          (app or (app not x2) (app not x3))
                          (app or x4 x2))))))))))
          (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
         ()
         (top)))))
     app
     try
     (λ (n2)
       (app
        try
        (λ (n3)
          (app
           try
           (λ (n4)
             (app
              try
              (λ (n5)
                (app
                 try
                 (λ (n6)
                   (app
                    try
                    (λ (n7)
                      (app
                       (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                       n7))))))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n2)
        (->
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7)))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app f (app #t)) (-> (app f (app #f)) <-))
 (flatenv
  '(((bod
      (n2)
      (ran
       try
       ()
       ()
       (bod
        (n1)
        (ran
         try
         ()
         ()
         (bod
          (p)
          (bin
           letrec
           sat-solve-7
           (app sat-solve-7 phi)
           ((phi
             (λ (x1)
               (λ (x2)
                 (λ (x3)
                   (λ (x4)
                     (λ (x5)
                       (λ (x6)
                         (λ (x7)
                           (app
                            and
                            (app or x1 x2)
                            (app or x1 (app not x2) (app not x3))
                            (app or x3 x4)
                            (app or (app not x4) x1)
                            (app or (app not x2) (app not x3))
                            (app or x4 x2))))))))))
            (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
           ()
           (top)))))))
     app
     try
     (λ (n3)
       (app
        try
        (λ (n4)
          (app
           try
           (λ (n5)
             (app
              try
              (λ (n6)
                (app
                 try
                 (λ (n7)
                   (app
                    (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                    n7))))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app f (app #t)) (-> (app f (app #f)) <-))
 (flatenv
  '(((bod
      (n3)
      (ran
       try
       ()
       ()
       (bod
        (n2)
        (ran
         try
         ()
         ()
         (bod
          (n1)
          (ran
           try
           ()
           ()
           (bod
            (p)
            (bin
             letrec
             sat-solve-7
             (app sat-solve-7 phi)
             ((phi
               (λ (x1)
                 (λ (x2)
                   (λ (x3)
                     (λ (x4)
                       (λ (x5)
                         (λ (x6)
                           (λ (x7)
                             (app
                              and
                              (app or x1 x2)
                              (app or x1 (app not x2) (app not x3))
                              (app or x3 x4)
                              (app or (app not x4) x1)
                              (app or (app not x2) (app not x3))
                              (app or x4 x2))))))))))
              (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
             ()
             (top)))))))))
     app
     try
     (λ (n4)
       (app
        try
        (λ (n5)
          (app
           try
           (λ (n6)
             (app
              try
              (λ (n7)
                (app
                 (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                 n7))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n4)
        (->
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app f (app #t)) (-> (app f (app #f)) <-))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-7
               (app sat-solve-7 phi)
               ((phi
                 (λ (x1)
                   (λ (x2)
                     (λ (x3)
                       (λ (x4)
                         (λ (x5)
                           (λ (x6)
                             (λ (x7)
                               (app
                                and
                                (app or x1 x2)
                                (app or x1 (app not x2) (app not x3))
                                (app or x3 x4)
                                (app or (app not x4) x1)
                                (app or (app not x2) (app not x3))
                                (app or x4 x2))))))))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     try
     (λ (n5)
       (app
        try
        (λ (n6)
          (app
           try
           (λ (n7)
             (app
              (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
              n7))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n5)
        (->
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7)))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app f (app #t)) (-> (app f (app #f)) <-))
 (flatenv
  '(((bod
      (n5)
      (ran
       try
       ()
       ()
       (bod
        (n4)
        (ran
         try
         ()
         ()
         (bod
          (n3)
          (ran
           try
           ()
           ()
           (bod
            (n2)
            (ran
             try
             ()
             ()
             (bod
              (n1)
              (ran
               try
               ()
               ()
               (bod
                (p)
                (bin
                 letrec
                 sat-solve-7
                 (app sat-solve-7 phi)
                 ((phi
                   (λ (x1)
                     (λ (x2)
                       (λ (x3)
                         (λ (x4)
                           (λ (x5)
                             (λ (x6)
                               (λ (x7)
                                 (app
                                  and
                                  (app or x1 x2)
                                  (app or x1 (app not x2) (app not x3))
                                  (app or x3 x4)
                                  (app or (app not x4) x1)
                                  (app or (app not x2) (app not x3))
                                  (app or x4 x2))))))))))
                  (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                 ()
                 (top)))))))))))))
     app
     try
     (λ (n6)
       (app
        try
        (λ (n7)
          (app
           (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
           n7))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n6)
        (->
         (app
          try
          (λ (n7)
            (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app f (app #t)) (-> (app f (app #f)) <-))
 (flatenv
  '(((bod
      (n6)
      (ran
       try
       ()
       ()
       (bod
        (n5)
        (ran
         try
         ()
         ()
         (bod
          (n4)
          (ran
           try
           ()
           ()
           (bod
            (n3)
            (ran
             try
             ()
             ()
             (bod
              (n2)
              (ran
               try
               ()
               ()
               (bod
                (n1)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (p)
                  (bin
                   letrec
                   sat-solve-7
                   (app sat-solve-7 phi)
                   ((phi
                     (λ (x1)
                       (λ (x2)
                         (λ (x3)
                           (λ (x4)
                             (λ (x5)
                               (λ (x6)
                                 (λ (x7)
                                   (app
                                    and
                                    (app or x1 x2)
                                    (app or x1 (app not x2) (app not x3))
                                    (app or x3 x4)
                                    (app or (app not x4) x1)
                                    (app or (app not x2) (app not x3))
                                    (app or x4 x2))))))))))
                    (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                   ()
                   (top)))))))))))))))
     app
     try
     (λ (n7)
       (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) (app not x4) x1)
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n6)
     (app
      try
      (λ (n7)
        (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n6)
     (app
      try
      (λ (n7)
        (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x5)
      (λ (x6)
        (λ (x7)
          (app
           and
           (app or x1 x2)
           (app or x1 (app not x2) (app not x3))
           (app or x3 x4)
           (app or (app not x4) x1)
           (app or (app not x2) (app not x3))
           (app or x4 x2)))))
   (flatenv '((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x5)
      (λ (x6)
        (λ (x7)
          (app
           and
           (app or x1 x2)
           (app or x1 (app not x2) (app not x3))
           (app or x3 x4)
           (app or (app not x4) x1)
           (app or (app not x2) (app not x3))
           (app or x4 x2)))))
   (flatenv '((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) x3)
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app p n1) (-> n2 <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app p n1) (-> n2 <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(top) (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app
                try
                (λ (n3)
                  (app
                   try
                   (λ (n4)
                     (app
                      try
                      (λ (n5)
                        (app
                         try
                         (λ (n6)
                           (app
                            try
                            (λ (n7)
                              (app
                               (app
                                (app (app (app (app (app p n1) n2) n3) n4) n5)
                                n6)
                               n7)))))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> and <-)
   (app or x1 x2)
   (app or x1 (app not x2) (app not x3))
   (app or x3 x4)
   (app or (app not x4) x1)
   (app or (app not x2) (app not x3))
   (app or x4 x2))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
'(clos/con: (#<procedure:do-and>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec ((->
            phi
            =
            (λ (x1)
              (λ (x2)
                (λ (x3)
                  (λ (x4)
                    (λ (x5)
                      (λ (x6)
                        (λ (x7)
                          (app
                           and
                           (app or x1 x2)
                           (app or x1 (app not x2) (app not x3))
                           (app or x3 x4)
                           (app or (app not x4) x1)
                           (app or (app not x2) (app not x3))
                           (app or x4 x2)))))))))
            <-)
           try
           sat-solve-7)
    bod)
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (x1)
      (λ (x2)
        (λ (x3)
          (λ (x4)
            (λ (x5)
              (λ (x6)
                (λ (x7)
                  (app
                   and
                   (app or x1 x2)
                   (app or x1 (app not x2) (app not x3))
                   (app or x3 x4)
                   (app or (app not x4) x1)
                   (app or (app not x2) (app not x3))
                   (app or x4 x2)))))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (app or x1 x2)
   (app or x1 (app not x2) (app not x3))
   (-> (app or x3 x4) <-)
   (app or (app not x4) x1)
   (app or (app not x2) (app not x3))
   (app or x4 x2))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n2)
        (->
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7)))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or x1 (-> (app not x2) <-) (app not x3))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x2)
    (->
     (λ (x3)
       (λ (x4)
         (λ (x5)
           (λ (x6)
             (λ (x7)
               (app
                and
                (app or x1 x2)
                (app or x1 (app not x2) (app not x3))
                (app or x3 x4)
                (app or (app not x4) x1)
                (app or (app not x2) (app not x3))
                (app or x4 x2)))))))
     <-))
 (flatenv
  '(((rat
      (n3)
      (rat
       (n4)
       (rat
        (n5)
        (rat
         (n6)
         (rat
          (n7)
          (bod
           (n7)
           (ran
            try
            ()
            ()
            (bod
             (n6)
             (ran
              try
              ()
              ()
              (bod
               (n5)
               (ran
                try
                ()
                ()
                (bod
                 (n4)
                 (ran
                  try
                  ()
                  ()
                  (bod
                   (n3)
                   (ran
                    try
                    ()
                    ()
                    (bod
                     (n2)
                     (ran
                      try
                      ()
                      ()
                      (bod
                       (n1)
                       (ran
                        try
                        ()
                        ()
                        (bod
                         (p)
                         (bin
                          letrec
                          sat-solve-7
                          (app sat-solve-7 phi)
                          ((phi
                            (λ (x1)
                              (λ (x2)
                                (λ (x3)
                                  (λ (x4)
                                    (λ (x5)
                                      (λ (x6)
                                        (λ (x7)
                                          (app
                                           and
                                           (app or x1 x2)
                                           (app
                                            or
                                            x1
                                            (app not x2)
                                            (app not x3))
                                           (app or x3 x4)
                                           (app or (app not x4) x1)
                                           (app or (app not x2) (app not x3))
                                           (app or x4 x2))))))))))
                           (try
                            (λ (f)
                              (app or (app f (app #t)) (app f (app #f))))))
                          ()
                          (top))))))))))))))))))))))
     app
     (app p n1)
     n2))))
(list
 'clos/con:
 (list
  (list
   '(λ (x3)
      (λ (x4)
        (λ (x5)
          (λ (x6)
            (λ (x7)
              (app
               and
               (app or x1 x2)
               (app or x1 (app not x2) (app not x3))
               (app or x3 x4)
               (app or (app not x4) x1)
               (app or (app not x2) (app not x3))
               (app or x4 x2)))))))
   (flatenv '((app (-> (app (app p n1) n2) <-) n3))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> x3 <-))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n2)
        (->
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7)))))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n2)
        (->
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7)))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (->
    (λ (n6)
      (app
       try
       (λ (n7)
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))))
    <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n6)
      (app
       try
       (λ (n7)
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (->
    (λ (n6)
      (app
       try
       (λ (n7)
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))))
    <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n6)
      (app
       try
       (λ (n7)
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x4)
    (->
     (λ (x5)
       (λ (x6)
         (λ (x7)
           (app
            and
            (app or x1 x2)
            (app or x1 (app not x2) (app not x3))
            (app or x3 x4)
            (app or (app not x4) x1)
            (app or (app not x2) (app not x3))
            (app or x4 x2)))))
     <-))
 (flatenv
  '(((rat
      (n5)
      (rat
       (n6)
       (rat
        (n7)
        (bod
         (n7)
         (ran
          try
          ()
          ()
          (bod
           (n6)
           (ran
            try
            ()
            ()
            (bod
             (n5)
             (ran
              try
              ()
              ()
              (bod
               (n4)
               (ran
                try
                ()
                ()
                (bod
                 (n3)
                 (ran
                  try
                  ()
                  ()
                  (bod
                   (n2)
                   (ran
                    try
                    ()
                    ()
                    (bod
                     (n1)
                     (ran
                      try
                      ()
                      ()
                      (bod
                       (p)
                       (bin
                        letrec
                        sat-solve-7
                        (app sat-solve-7 phi)
                        ((phi
                          (λ (x1)
                            (λ (x2)
                              (λ (x3)
                                (λ (x4)
                                  (λ (x5)
                                    (λ (x6)
                                      (λ (x7)
                                        (app
                                         and
                                         (app or x1 x2)
                                         (app or x1 (app not x2) (app not x3))
                                         (app or x3 x4)
                                         (app or (app not x4) x1)
                                         (app or (app not x2) (app not x3))
                                         (app or x4 x2))))))))))
                         (try
                          (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                        ()
                        (top))))))))))))))))))))
     app
     (app (app (app p n1) n2) n3)
     n4))))
(list
 'clos/con:
 (list
  (list
   '(λ (x5)
      (λ (x6)
        (λ (x7)
          (app
           and
           (app or x1 x2)
           (app or x1 (app not x2) (app not x3))
           (app or x3 x4)
           (app or (app not x4) x1)
           (app or (app not x2) (app not x3))
           (app or x4 x2)))))
   (flatenv '((app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x7)
    (->
     (app
      and
      (app or x1 x2)
      (app or x1 (app not x2) (app not x3))
      (app or x3 x4)
      (app or (app not x4) x1)
      (app or (app not x2) (app not x3))
      (app or x4 x2))
     <-))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (-> (app or x1 x2) <-)
   (app or x1 (app not x2) (app not x3))
   (app or x3 x4)
   (app or (app not x4) x1)
   (app or (app not x2) (app not x3))
   (app or x4 x2))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app
                try
                (λ (n3)
                  (app
                   try
                   (λ (n4)
                     (app
                      try
                      (λ (n5)
                        (app
                         try
                         (λ (n6)
                           (app
                            try
                            (λ (n7)
                              (app
                               (app
                                (app (app (app (app (app p n1) n2) n3) n4) n5)
                                n6)
                               n7)))))))))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> x3 <-))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n2)
        (->
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7)))))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n2)
        (->
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7)))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app (app (app p n1) n2) n3) (-> n4 <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app (app (app p n1) n2) n3) (-> n4 <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (->
    (λ (n4)
      (app
       try
       (λ (n5)
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7))))))))
    <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n4)
      (app
       try
       (λ (n5)
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7))))))))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (->
    (λ (n4)
      (app
       try
       (λ (n5)
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7))))))))
    <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n4)
      (app
       try
       (λ (n5)
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7))))))))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p (-> n1 <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app
                try
                (λ (n3)
                  (app
                   try
                   (λ (n4)
                     (app
                      try
                      (λ (n5)
                        (app
                         try
                         (λ (n6)
                           (app
                            try
                            (λ (n7)
                              (app
                               (app
                                (app (app (app (app (app p n1) n2) n3) n4) n5)
                                n6)
                               n7)))))))))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app
                try
                (λ (n3)
                  (app
                   try
                   (λ (n4)
                     (app
                      try
                      (λ (n5)
                        (app
                         try
                         (λ (n6)
                           (app
                            try
                            (λ (n7)
                              (app
                               (app
                                (app (app (app (app (app p n1) n2) n3) n4) n5)
                                n6)
                               n7)))))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p (-> n1 <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app
                try
                (λ (n3)
                  (app
                   try
                   (λ (n4)
                     (app
                      try
                      (λ (n5)
                        (app
                         try
                         (λ (n6)
                           (app
                            try
                            (λ (n7)
                              (app
                               (app
                                (app (app (app (app (app p n1) n2) n3) n4) n5)
                                n6)
                               n7)))))))))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app
                try
                (λ (n3)
                  (app
                   try
                   (λ (n4)
                     (app
                      try
                      (λ (n5)
                        (app
                         try
                         (λ (n6)
                           (app
                            try
                            (λ (n7)
                              (app
                               (app
                                (app (app (app (app (app p n1) n2) n3) n4) n5)
                                n6)
                               n7)))))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (app or x1 x2)
   (app or x1 (app not x2) (app not x3))
   (app or x3 x4)
   (app or (app not x4) x1)
   (-> (app or (app not x2) (app not x3)) <-)
   (app or x4 x2))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x7)
      (app
       and
       (app or x1 x2)
       (app or x1 (app not x2) (app not x3))
       (app or x3 x4)
       (app or (app not x4) x1)
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (flatenv
    '((app
       (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-)
       n7))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x7)
      (app
       and
       (app or x1 x2)
       (app or x1 (app not x2) (app not x3))
       (app or x3 x4)
       (app or (app not x4) x1)
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (flatenv
    '((app
       (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-)
       n7))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> (app f (app #t)) <-) (app f (app #f)))
 (flatenv
  '(((bod
      (n6)
      (ran
       try
       ()
       ()
       (bod
        (n5)
        (ran
         try
         ()
         ()
         (bod
          (n4)
          (ran
           try
           ()
           ()
           (bod
            (n3)
            (ran
             try
             ()
             ()
             (bod
              (n2)
              (ran
               try
               ()
               ()
               (bod
                (n1)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (p)
                  (bin
                   letrec
                   sat-solve-7
                   (app sat-solve-7 phi)
                   ((phi
                     (λ (x1)
                       (λ (x2)
                         (λ (x3)
                           (λ (x4)
                             (λ (x5)
                               (λ (x6)
                                 (λ (x7)
                                   (app
                                    and
                                    (app or x1 x2)
                                    (app or x1 (app not x2) (app not x3))
                                    (app or x3 x4)
                                    (app or (app not x4) x1)
                                    (app or (app not x2) (app not x3))
                                    (app or x4 x2))))))))))
                    (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                   ()
                   (top)))))))))))))))
     app
     try
     (λ (n7)
       (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> (app f (app #t)) <-) (app f (app #f)))
 (flatenv
  '(((bod
      (n5)
      (ran
       try
       ()
       ()
       (bod
        (n4)
        (ran
         try
         ()
         ()
         (bod
          (n3)
          (ran
           try
           ()
           ()
           (bod
            (n2)
            (ran
             try
             ()
             ()
             (bod
              (n1)
              (ran
               try
               ()
               ()
               (bod
                (p)
                (bin
                 letrec
                 sat-solve-7
                 (app sat-solve-7 phi)
                 ((phi
                   (λ (x1)
                     (λ (x2)
                       (λ (x3)
                         (λ (x4)
                           (λ (x5)
                             (λ (x6)
                               (λ (x7)
                                 (app
                                  and
                                  (app or x1 x2)
                                  (app or x1 (app not x2) (app not x3))
                                  (app or x3 x4)
                                  (app or (app not x4) x1)
                                  (app or (app not x2) (app not x3))
                                  (app or x4 x2))))))))))
                  (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                 ()
                 (top)))))))))))))
     app
     try
     (λ (n6)
       (app
        try
        (λ (n7)
          (app
           (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
           n7))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n6)
        (->
         (app
          try
          (λ (n7)
            (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> (app f (app #t)) <-) (app f (app #f)))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-7
               (app sat-solve-7 phi)
               ((phi
                 (λ (x1)
                   (λ (x2)
                     (λ (x3)
                       (λ (x4)
                         (λ (x5)
                           (λ (x6)
                             (λ (x7)
                               (app
                                and
                                (app or x1 x2)
                                (app or x1 (app not x2) (app not x3))
                                (app or x3 x4)
                                (app or (app not x4) x1)
                                (app or (app not x2) (app not x3))
                                (app or x4 x2))))))))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     try
     (λ (n5)
       (app
        try
        (λ (n6)
          (app
           try
           (λ (n7)
             (app
              (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
              n7))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n5)
        (->
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7)))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> (app f (app #t)) <-) (app f (app #f)))
 (flatenv
  '(((bod
      (n3)
      (ran
       try
       ()
       ()
       (bod
        (n2)
        (ran
         try
         ()
         ()
         (bod
          (n1)
          (ran
           try
           ()
           ()
           (bod
            (p)
            (bin
             letrec
             sat-solve-7
             (app sat-solve-7 phi)
             ((phi
               (λ (x1)
                 (λ (x2)
                   (λ (x3)
                     (λ (x4)
                       (λ (x5)
                         (λ (x6)
                           (λ (x7)
                             (app
                              and
                              (app or x1 x2)
                              (app or x1 (app not x2) (app not x3))
                              (app or x3 x4)
                              (app or (app not x4) x1)
                              (app or (app not x2) (app not x3))
                              (app or x4 x2))))))))))
              (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
             ()
             (top)))))))))
     app
     try
     (λ (n4)
       (app
        try
        (λ (n5)
          (app
           try
           (λ (n6)
             (app
              try
              (λ (n7)
                (app
                 (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                 n7))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n4)
        (->
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> (app f (app #t)) <-) (app f (app #f)))
 (flatenv
  '(((bod
      (n2)
      (ran
       try
       ()
       ()
       (bod
        (n1)
        (ran
         try
         ()
         ()
         (bod
          (p)
          (bin
           letrec
           sat-solve-7
           (app sat-solve-7 phi)
           ((phi
             (λ (x1)
               (λ (x2)
                 (λ (x3)
                   (λ (x4)
                     (λ (x5)
                       (λ (x6)
                         (λ (x7)
                           (app
                            and
                            (app or x1 x2)
                            (app or x1 (app not x2) (app not x3))
                            (app or x3 x4)
                            (app or (app not x4) x1)
                            (app or (app not x2) (app not x3))
                            (app or x4 x2))))))))))
            (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
           ()
           (top)))))))
     app
     try
     (λ (n3)
       (app
        try
        (λ (n4)
          (app
           try
           (λ (n5)
             (app
              try
              (λ (n6)
                (app
                 try
                 (λ (n7)
                   (app
                    (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                    n7))))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> (app f (app #t)) <-) (app f (app #f)))
 (flatenv
  '(((bod
      (n1)
      (ran
       try
       ()
       ()
       (bod
        (p)
        (bin
         letrec
         sat-solve-7
         (app sat-solve-7 phi)
         ((phi
           (λ (x1)
             (λ (x2)
               (λ (x3)
                 (λ (x4)
                   (λ (x5)
                     (λ (x6)
                       (λ (x7)
                         (app
                          and
                          (app or x1 x2)
                          (app or x1 (app not x2) (app not x3))
                          (app or x3 x4)
                          (app or (app not x4) x1)
                          (app or (app not x2) (app not x3))
                          (app or x4 x2))))))))))
          (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
         ()
         (top)))))
     app
     try
     (λ (n2)
       (app
        try
        (λ (n3)
          (app
           try
           (λ (n4)
             (app
              try
              (λ (n5)
                (app
                 try
                 (λ (n6)
                   (app
                    try
                    (λ (n7)
                      (app
                       (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                       n7))))))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n2)
        (->
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7)))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> (app f (app #t)) <-) (app f (app #f)))
 (flatenv
  '(((bod
      (p)
      (bin
       letrec
       sat-solve-7
       (app sat-solve-7 phi)
       ((phi
         (λ (x1)
           (λ (x2)
             (λ (x3)
               (λ (x4)
                 (λ (x5)
                   (λ (x6)
                     (λ (x7)
                       (app
                        and
                        (app or x1 x2)
                        (app or x1 (app not x2) (app not x3))
                        (app or x3 x4)
                        (app or (app not x4) x1)
                        (app or (app not x2) (app not x3))
                        (app or x4 x2))))))))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
       ()
       (top)))
     app
     try
     (λ (n1)
       (app
        try
        (λ (n2)
          (app
           try
           (λ (n3)
             (app
              try
              (λ (n4)
                (app
                 try
                 (λ (n5)
                   (app
                    try
                    (λ (n6)
                      (app
                       try
                       (λ (n7)
                         (app
                          (app
                           (app (app (app (app (app p n1) n2) n3) n4) n5)
                           n6)
                          n7))))))))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> x2 <-))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or x4 (-> x2 <-))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (->
    (λ (n5)
      (app
       try
       (λ (n6)
         (app
          try
          (λ (n7)
            (app
             (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
             n7))))))
    <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n5)
      (app
       try
       (λ (n6)
         (app
          try
          (λ (n7)
            (app
             (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
             n7))))))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (->
    (λ (n5)
      (app
       try
       (λ (n6)
         (app
          try
          (λ (n7)
            (app
             (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
             n7))))))
    <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n5)
      (app
       try
       (λ (n6)
         (app
          try
          (λ (n7)
            (app
             (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
             n7))))))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) x1 (app not x2) (app not x3))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x5)
    (->
     (λ (x6)
       (λ (x7)
         (app
          and
          (app or x1 x2)
          (app or x1 (app not x2) (app not x3))
          (app or x3 x4)
          (app or (app not x4) x1)
          (app or (app not x2) (app not x3))
          (app or x4 x2))))
     <-))
 (flatenv
  '(((rat
      (n6)
      (rat
       (n7)
       (bod
        (n7)
        (ran
         try
         ()
         ()
         (bod
          (n6)
          (ran
           try
           ()
           ()
           (bod
            (n5)
            (ran
             try
             ()
             ()
             (bod
              (n4)
              (ran
               try
               ()
               ()
               (bod
                (n3)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n2)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (n1)
                    (ran
                     try
                     ()
                     ()
                     (bod
                      (p)
                      (bin
                       letrec
                       sat-solve-7
                       (app sat-solve-7 phi)
                       ((phi
                         (λ (x1)
                           (λ (x2)
                             (λ (x3)
                               (λ (x4)
                                 (λ (x5)
                                   (λ (x6)
                                     (λ (x7)
                                       (app
                                        and
                                        (app or x1 x2)
                                        (app or x1 (app not x2) (app not x3))
                                        (app or x3 x4)
                                        (app or (app not x4) x1)
                                        (app or (app not x2) (app not x3))
                                        (app or x4 x2))))))))))
                        (try
                         (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                       ()
                       (top)))))))))))))))))))
     app
     (app (app (app (app p n1) n2) n3) n4)
     n5))))
(list
 'clos/con:
 (list
  (list
   '(λ (x6)
      (λ (x7)
        (app
         and
         (app or x1 x2)
         (app or x1 (app not x2) (app not x3))
         (app or x3 x4)
         (app or (app not x4) x1)
         (app or (app not x2) (app not x3))
         (app or x4 x2))))
   (flatenv
    '((app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n3)
    (->
     (app
      try
      (λ (n4)
        (app
         try
         (λ (n5)
           (app
            try
            (λ (n6)
              (app
               try
               (λ (n7)
                 (app
                  (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                  n7)))))))))
     <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n3)
    (->
     (app
      try
      (λ (n4)
        (app
         try
         (λ (n5)
           (app
            try
            (λ (n6)
              (app
               try
               (λ (n7)
                 (app
                  (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                  n7)))))))))
     <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (->
    (λ (n7) (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))
    <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n7) (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (->
    (λ (n7) (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))
    <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n7) (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x1)
    (->
     (λ (x2)
       (λ (x3)
         (λ (x4)
           (λ (x5)
             (λ (x6)
               (λ (x7)
                 (app
                  and
                  (app or x1 x2)
                  (app or x1 (app not x2) (app not x3))
                  (app or x3 x4)
                  (app or (app not x4) x1)
                  (app or (app not x2) (app not x3))
                  (app or x4 x2))))))))
     <-))
 (flatenv
  '(((rat
      (n2)
      (rat
       (n3)
       (rat
        (n4)
        (rat
         (n5)
         (rat
          (n6)
          (rat
           (n7)
           (bod
            (n7)
            (ran
             try
             ()
             ()
             (bod
              (n6)
              (ran
               try
               ()
               ()
               (bod
                (n5)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n4)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (n3)
                    (ran
                     try
                     ()
                     ()
                     (bod
                      (n2)
                      (ran
                       try
                       ()
                       ()
                       (bod
                        (n1)
                        (ran
                         try
                         ()
                         ()
                         (bod
                          (p)
                          (bin
                           letrec
                           sat-solve-7
                           (app sat-solve-7 phi)
                           ((phi
                             (λ (x1)
                               (λ (x2)
                                 (λ (x3)
                                   (λ (x4)
                                     (λ (x5)
                                       (λ (x6)
                                         (λ (x7)
                                           (app
                                            and
                                            (app or x1 x2)
                                            (app
                                             or
                                             x1
                                             (app not x2)
                                             (app not x3))
                                            (app or x3 x4)
                                            (app or (app not x4) x1)
                                            (app or (app not x2) (app not x3))
                                            (app or x4 x2))))))))))
                            (try
                             (λ (f)
                               (app or (app f (app #t)) (app f (app #f))))))
                           ()
                           (top)))))))))))))))))))))))
     app
     p
     n1))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2)
      (λ (x3)
        (λ (x4)
          (λ (x5)
            (λ (x6)
              (λ (x7)
                (app
                 and
                 (app or x1 x2)
                 (app or x1 (app not x2) (app not x3))
                 (app or x3 x4)
                 (app or (app not x4) x1)
                 (app or (app not x2) (app not x3))
                 (app or x4 x2))))))))
   (flatenv '((app (-> (app p n1) <-) n2))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n1)
     (app
      try
      (λ (n2)
        (app
         try
         (λ (n3)
           (app
            try
            (λ (n4)
              (app
               try
               (λ (n5)
                 (app
                  try
                  (λ (n6)
                    (app
                     try
                     (λ (n7)
                       (app
                        (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                        n7)))))))))))))))
 (flatenv
  '(((let-bod
      letrec
      ((phi
        (λ (x1)
          (λ (x2)
            (λ (x3)
              (λ (x4)
                (λ (x5)
                  (λ (x6)
                    (λ (x7)
                      (app
                       and
                       (app or x1 x2)
                       (app or x1 (app not x2) (app not x3))
                       (app or x3 x4)
                       (app or (app not x4) x1)
                       (app or (app not x2) (app not x3))
                       (app or x4 x2))))))))))
       (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
       (sat-solve-7
        (λ (p)
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app
                 try
                 (λ (n3)
                   (app
                    try
                    (λ (n4)
                      (app
                       try
                       (λ (n5)
                         (app
                          try
                          (λ (n6)
                            (app
                             try
                             (λ (n7)
                               (app
                                (app
                                 (app (app (app (app (app p n1) n2) n3) n4) n5)
                                 n6)
                                n7))))))))))))))))))
      (top))
     app
     sat-solve-7
     phi))))
(list
 'clos/con:
 (list
  (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (flatenv
  '(((bod
      (p)
      (bin
       letrec
       sat-solve-7
       (app sat-solve-7 phi)
       ((phi
         (λ (x1)
           (λ (x2)
             (λ (x3)
               (λ (x4)
                 (λ (x5)
                   (λ (x6)
                     (λ (x7)
                       (app
                        and
                        (app or x1 x2)
                        (app or x1 (app not x2) (app not x3))
                        (app or x3 x4)
                        (app or (app not x4) x1)
                        (app or (app not x2) (app not x3))
                        (app or x4 x2))))))))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
       ()
       (top)))
     app
     try
     (λ (n1)
       (app
        try
        (λ (n2)
          (app
           try
           (λ (n3)
             (app
              try
              (λ (n4)
                (app
                 try
                 (λ (n5)
                   (app
                    try
                    (λ (n6)
                      (app
                       try
                       (λ (n7)
                         (app
                          (app
                           (app (app (app (app (app p n1) n2) n3) n4) n5)
                           n6)
                          n7))))))))))))))))))
(list
 'clos/con:
 (list
  (list
   #f
   (flatenv
    '((λ (p)
        (->
         (app
          try
          (λ (n1)
            (app
             try
             (λ (n2)
               (app
                try
                (λ (n3)
                  (app
                   try
                   (λ (n4)
                     (app
                      try
                      (λ (n5)
                        (app
                         try
                         (λ (n6)
                           (app
                            try
                            (λ (n7)
                              (app
                               (app
                                (app (app (app (app (app p n1) n2) n3) n4) n5)
                                n6)
                               n7)))))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (flatenv
  '(((bod
      (n1)
      (ran
       try
       ()
       ()
       (bod
        (p)
        (bin
         letrec
         sat-solve-7
         (app sat-solve-7 phi)
         ((phi
           (λ (x1)
             (λ (x2)
               (λ (x3)
                 (λ (x4)
                   (λ (x5)
                     (λ (x6)
                       (λ (x7)
                         (app
                          and
                          (app or x1 x2)
                          (app or x1 (app not x2) (app not x3))
                          (app or x3 x4)
                          (app or (app not x4) x1)
                          (app or (app not x2) (app not x3))
                          (app or x4 x2))))))))))
          (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
         ()
         (top)))))
     app
     try
     (λ (n2)
       (app
        try
        (λ (n3)
          (app
           try
           (λ (n4)
             (app
              try
              (λ (n5)
                (app
                 try
                 (λ (n6)
                   (app
                    try
                    (λ (n7)
                      (app
                       (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                       n7))))))))))))))))
(list
 'clos/con:
 (list
  (list
   #f
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (flatenv
  '(((bod
      (n2)
      (ran
       try
       ()
       ()
       (bod
        (n1)
        (ran
         try
         ()
         ()
         (bod
          (p)
          (bin
           letrec
           sat-solve-7
           (app sat-solve-7 phi)
           ((phi
             (λ (x1)
               (λ (x2)
                 (λ (x3)
                   (λ (x4)
                     (λ (x5)
                       (λ (x6)
                         (λ (x7)
                           (app
                            and
                            (app or x1 x2)
                            (app or x1 (app not x2) (app not x3))
                            (app or x3 x4)
                            (app or (app not x4) x1)
                            (app or (app not x2) (app not x3))
                            (app or x4 x2))))))))))
            (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
           ()
           (top)))))))
     app
     try
     (λ (n3)
       (app
        try
        (λ (n4)
          (app
           try
           (λ (n5)
             (app
              try
              (λ (n6)
                (app
                 try
                 (λ (n7)
                   (app
                    (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                    n7))))))))))))))
(list
 'clos/con:
 (list
  (list
   #f
   (flatenv
    '((λ (n2)
        (->
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7)))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (flatenv
  '(((bod
      (n3)
      (ran
       try
       ()
       ()
       (bod
        (n2)
        (ran
         try
         ()
         ()
         (bod
          (n1)
          (ran
           try
           ()
           ()
           (bod
            (p)
            (bin
             letrec
             sat-solve-7
             (app sat-solve-7 phi)
             ((phi
               (λ (x1)
                 (λ (x2)
                   (λ (x3)
                     (λ (x4)
                       (λ (x5)
                         (λ (x6)
                           (λ (x7)
                             (app
                              and
                              (app or x1 x2)
                              (app or x1 (app not x2) (app not x3))
                              (app or x3 x4)
                              (app or (app not x4) x1)
                              (app or (app not x2) (app not x3))
                              (app or x4 x2))))))))))
              (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
             ()
             (top)))))))))
     app
     try
     (λ (n4)
       (app
        try
        (λ (n5)
          (app
           try
           (λ (n6)
             (app
              try
              (λ (n7)
                (app
                 (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                 n7))))))))))))
(list
 'clos/con:
 (list
  (list
   #f
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-7
               (app sat-solve-7 phi)
               ((phi
                 (λ (x1)
                   (λ (x2)
                     (λ (x3)
                       (λ (x4)
                         (λ (x5)
                           (λ (x6)
                             (λ (x7)
                               (app
                                and
                                (app or x1 x2)
                                (app or x1 (app not x2) (app not x3))
                                (app or x3 x4)
                                (app or (app not x4) x1)
                                (app or (app not x2) (app not x3))
                                (app or x4 x2))))))))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     try
     (λ (n5)
       (app
        try
        (λ (n6)
          (app
           try
           (λ (n7)
             (app
              (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
              n7))))))))))
(list
 'clos/con:
 (list
  (list
   #f
   (flatenv
    '((λ (n4)
        (->
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7)))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (flatenv
  '(((bod
      (n5)
      (ran
       try
       ()
       ()
       (bod
        (n4)
        (ran
         try
         ()
         ()
         (bod
          (n3)
          (ran
           try
           ()
           ()
           (bod
            (n2)
            (ran
             try
             ()
             ()
             (bod
              (n1)
              (ran
               try
               ()
               ()
               (bod
                (p)
                (bin
                 letrec
                 sat-solve-7
                 (app sat-solve-7 phi)
                 ((phi
                   (λ (x1)
                     (λ (x2)
                       (λ (x3)
                         (λ (x4)
                           (λ (x5)
                             (λ (x6)
                               (λ (x7)
                                 (app
                                  and
                                  (app or x1 x2)
                                  (app or x1 (app not x2) (app not x3))
                                  (app or x3 x4)
                                  (app or (app not x4) x1)
                                  (app or (app not x2) (app not x3))
                                  (app or x4 x2))))))))))
                  (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                 ()
                 (top)))))))))))))
     app
     try
     (λ (n6)
       (app
        try
        (λ (n7)
          (app
           (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
           n7))))))))
(list
 'clos/con:
 (list
  (list
   #f
   (flatenv
    '((λ (n5)
        (->
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7)))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (flatenv
  '(((bod
      (n6)
      (ran
       try
       ()
       ()
       (bod
        (n5)
        (ran
         try
         ()
         ()
         (bod
          (n4)
          (ran
           try
           ()
           ()
           (bod
            (n3)
            (ran
             try
             ()
             ()
             (bod
              (n2)
              (ran
               try
               ()
               ()
               (bod
                (n1)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (p)
                  (bin
                   letrec
                   sat-solve-7
                   (app sat-solve-7 phi)
                   ((phi
                     (λ (x1)
                       (λ (x2)
                         (λ (x3)
                           (λ (x4)
                             (λ (x5)
                               (λ (x6)
                                 (λ (x7)
                                   (app
                                    and
                                    (app or x1 x2)
                                    (app or x1 (app not x2) (app not x3))
                                    (app or x3 x4)
                                    (app or (app not x4) x1)
                                    (app or (app not x2) (app not x3))
                                    (app or x4 x2))))))))))
                    (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                   ()
                   (top)))))))))))))))
     app
     try
     (λ (n7)
       (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))))))
(list
 'clos/con:
 (list
  (list
   #f
   (flatenv
    '((λ (n6)
        (->
         (app
          try
          (λ (n7)
            (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (app or x1 x2)
   (app or x1 (app not x2) (app not x3))
   (app or x3 x4)
   (app or (app not x4) x1)
   (app or (app not x2) (app not x3))
   (-> (app or x4 x2) <-))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n7)
        (->
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7)
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (phi
           try
           (->
            sat-solve-7
            =
            (λ (p)
              (app
               try
               (λ (n1)
                 (app
                  try
                  (λ (n2)
                    (app
                     try
                     (λ (n3)
                       (app
                        try
                        (λ (n4)
                          (app
                           try
                           (λ (n5)
                             (app
                              try
                              (λ (n6)
                                (app
                                 try
                                 (λ (n7)
                                   (app
                                    (app
                                     (app
                                      (app (app (app (app p n1) n2) n3) n4)
                                      n5)
                                     n6)
                                    n7))))))))))))))))
            <-))
    bod)
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (p)
      (app
       try
       (λ (n1)
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7))))))))))))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> p <-) n1)
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1)
      (λ (x2)
        (λ (x3)
          (λ (x4)
            (λ (x5)
              (λ (x6)
                (λ (x7)
                  (app
                   and
                   (app or x1 x2)
                   (app or x1 (app not x2) (app not x3))
                   (app or x3 x4)
                   (app or (app not x4) x1)
                   (app or (app not x2) (app not x3))
                   (app or x4 x2)))))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> p <-) n1)
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1)
      (λ (x2)
        (λ (x3)
          (λ (x4)
            (λ (x5)
              (λ (x6)
                (λ (x7)
                  (app
                   and
                   (app or x1 x2)
                   (app or x1 (app not x2) (app not x3))
                   (app or x3 x4)
                   (app or (app not x4) x1)
                   (app or (app not x2) (app not x3))
                   (app or x4 x2)))))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #f))
 (flatenv
  '(((bod
      (p)
      (bin
       letrec
       sat-solve-7
       (app sat-solve-7 phi)
       ((phi
         (λ (x1)
           (λ (x2)
             (λ (x3)
               (λ (x4)
                 (λ (x5)
                   (λ (x6)
                     (λ (x7)
                       (app
                        and
                        (app or x1 x2)
                        (app or x1 (app not x2) (app not x3))
                        (app or x3 x4)
                        (app or (app not x4) x1)
                        (app or (app not x2) (app not x3))
                        (app or x4 x2))))))))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
       ()
       (top)))
     app
     try
     (λ (n1)
       (app
        try
        (λ (n2)
          (app
           try
           (λ (n3)
             (app
              try
              (λ (n4)
                (app
                 try
                 (λ (n5)
                   (app
                    try
                    (λ (n6)
                      (app
                       try
                       (λ (n7)
                         (app
                          (app
                           (app (app (app (app (app p n1) n2) n3) n4) n5)
                           n6)
                          n7))))))))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n1)
      (app
       try
       (λ (n2)
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7))))))))))))))
   (flatenv '((letrec (phi try sat-solve-7) (-> (app sat-solve-7 phi) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #f))
 (flatenv
  '(((bod
      (n1)
      (ran
       try
       ()
       ()
       (bod
        (p)
        (bin
         letrec
         sat-solve-7
         (app sat-solve-7 phi)
         ((phi
           (λ (x1)
             (λ (x2)
               (λ (x3)
                 (λ (x4)
                   (λ (x5)
                     (λ (x6)
                       (λ (x7)
                         (app
                          and
                          (app or x1 x2)
                          (app or x1 (app not x2) (app not x3))
                          (app or x3 x4)
                          (app or (app not x4) x1)
                          (app or (app not x2) (app not x3))
                          (app or x4 x2))))))))))
          (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
         ()
         (top)))))
     app
     try
     (λ (n2)
       (app
        try
        (λ (n3)
          (app
           try
           (λ (n4)
             (app
              try
              (λ (n5)
                (app
                 try
                 (λ (n6)
                   (app
                    try
                    (λ (n7)
                      (app
                       (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                       n7))))))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n2)
      (app
       try
       (λ (n3)
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7))))))))))))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))
  (list
   '(λ (n2)
      (app
       try
       (λ (n3)
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7))))))))))))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #f))
 (flatenv
  '(((bod
      (n2)
      (ran
       try
       ()
       ()
       (bod
        (n1)
        (ran
         try
         ()
         ()
         (bod
          (p)
          (bin
           letrec
           sat-solve-7
           (app sat-solve-7 phi)
           ((phi
             (λ (x1)
               (λ (x2)
                 (λ (x3)
                   (λ (x4)
                     (λ (x5)
                       (λ (x6)
                         (λ (x7)
                           (app
                            and
                            (app or x1 x2)
                            (app or x1 (app not x2) (app not x3))
                            (app or x3 x4)
                            (app or (app not x4) x1)
                            (app or (app not x2) (app not x3))
                            (app or x4 x2))))))))))
            (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
           ()
           (top)))))))
     app
     try
     (λ (n3)
       (app
        try
        (λ (n4)
          (app
           try
           (λ (n5)
             (app
              try
              (λ (n6)
                (app
                 try
                 (λ (n7)
                   (app
                    (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                    n7))))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n3)
      (app
       try
       (λ (n4)
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7))))))))))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))
  (list
   '(λ (n3)
      (app
       try
       (λ (n4)
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7))))))))))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #f))
 (flatenv
  '(((bod
      (n3)
      (ran
       try
       ()
       ()
       (bod
        (n2)
        (ran
         try
         ()
         ()
         (bod
          (n1)
          (ran
           try
           ()
           ()
           (bod
            (p)
            (bin
             letrec
             sat-solve-7
             (app sat-solve-7 phi)
             ((phi
               (λ (x1)
                 (λ (x2)
                   (λ (x3)
                     (λ (x4)
                       (λ (x5)
                         (λ (x6)
                           (λ (x7)
                             (app
                              and
                              (app or x1 x2)
                              (app or x1 (app not x2) (app not x3))
                              (app or x3 x4)
                              (app or (app not x4) x1)
                              (app or (app not x2) (app not x3))
                              (app or x4 x2))))))))))
              (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
             ()
             (top)))))))))
     app
     try
     (λ (n4)
       (app
        try
        (λ (n5)
          (app
           try
           (λ (n6)
             (app
              try
              (λ (n7)
                (app
                 (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                 n7))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n4)
      (app
       try
       (λ (n5)
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7))))))))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))
  (list
   '(λ (n4)
      (app
       try
       (λ (n5)
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7))))))))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #f))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-7
               (app sat-solve-7 phi)
               ((phi
                 (λ (x1)
                   (λ (x2)
                     (λ (x3)
                       (λ (x4)
                         (λ (x5)
                           (λ (x6)
                             (λ (x7)
                               (app
                                and
                                (app or x1 x2)
                                (app or x1 (app not x2) (app not x3))
                                (app or x3 x4)
                                (app or (app not x4) x1)
                                (app or (app not x2) (app not x3))
                                (app or x4 x2))))))))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     try
     (λ (n5)
       (app
        try
        (λ (n6)
          (app
           try
           (λ (n7)
             (app
              (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
              n7))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n5)
      (app
       try
       (λ (n6)
         (app
          try
          (λ (n7)
            (app
             (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
             n7))))))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))
  (list
   '(λ (n5)
      (app
       try
       (λ (n6)
         (app
          try
          (λ (n7)
            (app
             (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
             n7))))))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #f))
 (flatenv
  '(((bod
      (n5)
      (ran
       try
       ()
       ()
       (bod
        (n4)
        (ran
         try
         ()
         ()
         (bod
          (n3)
          (ran
           try
           ()
           ()
           (bod
            (n2)
            (ran
             try
             ()
             ()
             (bod
              (n1)
              (ran
               try
               ()
               ()
               (bod
                (p)
                (bin
                 letrec
                 sat-solve-7
                 (app sat-solve-7 phi)
                 ((phi
                   (λ (x1)
                     (λ (x2)
                       (λ (x3)
                         (λ (x4)
                           (λ (x5)
                             (λ (x6)
                               (λ (x7)
                                 (app
                                  and
                                  (app or x1 x2)
                                  (app or x1 (app not x2) (app not x3))
                                  (app or x3 x4)
                                  (app or (app not x4) x1)
                                  (app or (app not x2) (app not x3))
                                  (app or x4 x2))))))))))
                  (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                 ()
                 (top)))))))))))))
     app
     try
     (λ (n6)
       (app
        try
        (λ (n7)
          (app
           (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
           n7))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n6)
      (app
       try
       (λ (n7)
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))
  (list
   '(λ (n6)
      (app
       try
       (λ (n7)
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #f))
 (flatenv
  '(((bod
      (n6)
      (ran
       try
       ()
       ()
       (bod
        (n5)
        (ran
         try
         ()
         ()
         (bod
          (n4)
          (ran
           try
           ()
           ()
           (bod
            (n3)
            (ran
             try
             ()
             ()
             (bod
              (n2)
              (ran
               try
               ()
               ()
               (bod
                (n1)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (p)
                  (bin
                   letrec
                   sat-solve-7
                   (app sat-solve-7 phi)
                   ((phi
                     (λ (x1)
                       (λ (x2)
                         (λ (x3)
                           (λ (x4)
                             (λ (x5)
                               (λ (x6)
                                 (λ (x7)
                                   (app
                                    and
                                    (app or x1 x2)
                                    (app or x1 (app not x2) (app not x3))
                                    (app or x3 x4)
                                    (app or (app not x4) x1)
                                    (app or (app not x2) (app not x3))
                                    (app or x4 x2))))))))))
                    (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                   ()
                   (top)))))))))))))))
     app
     try
     (λ (n7)
       (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n7) (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))
  (list
   '(λ (n7) (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> x4 <-) x2)
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #t))
 (flatenv
  '(((bod
      (n6)
      (ran
       try
       ()
       ()
       (bod
        (n5)
        (ran
         try
         ()
         ()
         (bod
          (n4)
          (ran
           try
           ()
           ()
           (bod
            (n3)
            (ran
             try
             ()
             ()
             (bod
              (n2)
              (ran
               try
               ()
               ()
               (bod
                (n1)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (p)
                  (bin
                   letrec
                   sat-solve-7
                   (app sat-solve-7 phi)
                   ((phi
                     (λ (x1)
                       (λ (x2)
                         (λ (x3)
                           (λ (x4)
                             (λ (x5)
                               (λ (x6)
                                 (λ (x7)
                                   (app
                                    and
                                    (app or x1 x2)
                                    (app or x1 (app not x2) (app not x3))
                                    (app or x3 x4)
                                    (app or (app not x4) x1)
                                    (app or (app not x2) (app not x3))
                                    (app or x4 x2))))))))))
                    (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                   ()
                   (top)))))))))))))))
     app
     try
     (λ (n7)
       (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n7) (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))
  (list
   '(λ (n7) (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #t))
 (flatenv
  '(((bod
      (n5)
      (ran
       try
       ()
       ()
       (bod
        (n4)
        (ran
         try
         ()
         ()
         (bod
          (n3)
          (ran
           try
           ()
           ()
           (bod
            (n2)
            (ran
             try
             ()
             ()
             (bod
              (n1)
              (ran
               try
               ()
               ()
               (bod
                (p)
                (bin
                 letrec
                 sat-solve-7
                 (app sat-solve-7 phi)
                 ((phi
                   (λ (x1)
                     (λ (x2)
                       (λ (x3)
                         (λ (x4)
                           (λ (x5)
                             (λ (x6)
                               (λ (x7)
                                 (app
                                  and
                                  (app or x1 x2)
                                  (app or x1 (app not x2) (app not x3))
                                  (app or x3 x4)
                                  (app or (app not x4) x1)
                                  (app or (app not x2) (app not x3))
                                  (app or x4 x2))))))))))
                  (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                 ()
                 (top)))))))))))))
     app
     try
     (λ (n6)
       (app
        try
        (λ (n7)
          (app
           (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
           n7))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n6)
      (app
       try
       (λ (n7)
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))
  (list
   '(λ (n6)
      (app
       try
       (λ (n7)
         (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7))))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #t))
 (flatenv
  '(((bod
      (n4)
      (ran
       try
       ()
       ()
       (bod
        (n3)
        (ran
         try
         ()
         ()
         (bod
          (n2)
          (ran
           try
           ()
           ()
           (bod
            (n1)
            (ran
             try
             ()
             ()
             (bod
              (p)
              (bin
               letrec
               sat-solve-7
               (app sat-solve-7 phi)
               ((phi
                 (λ (x1)
                   (λ (x2)
                     (λ (x3)
                       (λ (x4)
                         (λ (x5)
                           (λ (x6)
                             (λ (x7)
                               (app
                                and
                                (app or x1 x2)
                                (app or x1 (app not x2) (app not x3))
                                (app or x3 x4)
                                (app or (app not x4) x1)
                                (app or (app not x2) (app not x3))
                                (app or x4 x2))))))))))
                (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
               ()
               (top)))))))))))
     app
     try
     (λ (n5)
       (app
        try
        (λ (n6)
          (app
           try
           (λ (n7)
             (app
              (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
              n7))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n5)
      (app
       try
       (λ (n6)
         (app
          try
          (λ (n7)
            (app
             (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
             n7))))))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))
  (list
   '(λ (n5)
      (app
       try
       (λ (n6)
         (app
          try
          (λ (n7)
            (app
             (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
             n7))))))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #t))
 (flatenv
  '(((bod
      (n3)
      (ran
       try
       ()
       ()
       (bod
        (n2)
        (ran
         try
         ()
         ()
         (bod
          (n1)
          (ran
           try
           ()
           ()
           (bod
            (p)
            (bin
             letrec
             sat-solve-7
             (app sat-solve-7 phi)
             ((phi
               (λ (x1)
                 (λ (x2)
                   (λ (x3)
                     (λ (x4)
                       (λ (x5)
                         (λ (x6)
                           (λ (x7)
                             (app
                              and
                              (app or x1 x2)
                              (app or x1 (app not x2) (app not x3))
                              (app or x3 x4)
                              (app or (app not x4) x1)
                              (app or (app not x2) (app not x3))
                              (app or x4 x2))))))))))
              (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
             ()
             (top)))))))))
     app
     try
     (λ (n4)
       (app
        try
        (λ (n5)
          (app
           try
           (λ (n6)
             (app
              try
              (λ (n7)
                (app
                 (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                 n7))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n4)
      (app
       try
       (λ (n5)
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7))))))))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))
  (list
   '(λ (n4)
      (app
       try
       (λ (n5)
         (app
          try
          (λ (n6)
            (app
             try
             (λ (n7)
               (app
                (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                n7))))))))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #t))
 (flatenv
  '(((bod
      (n2)
      (ran
       try
       ()
       ()
       (bod
        (n1)
        (ran
         try
         ()
         ()
         (bod
          (p)
          (bin
           letrec
           sat-solve-7
           (app sat-solve-7 phi)
           ((phi
             (λ (x1)
               (λ (x2)
                 (λ (x3)
                   (λ (x4)
                     (λ (x5)
                       (λ (x6)
                         (λ (x7)
                           (app
                            and
                            (app or x1 x2)
                            (app or x1 (app not x2) (app not x3))
                            (app or x3 x4)
                            (app or (app not x4) x1)
                            (app or (app not x2) (app not x3))
                            (app or x4 x2))))))))))
            (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
           ()
           (top)))))))
     app
     try
     (λ (n3)
       (app
        try
        (λ (n4)
          (app
           try
           (λ (n5)
             (app
              try
              (λ (n6)
                (app
                 try
                 (λ (n7)
                   (app
                    (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                    n7))))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n3)
      (app
       try
       (λ (n4)
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7))))))))))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))
  (list
   '(λ (n3)
      (app
       try
       (λ (n4)
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6)
               (app
                try
                (λ (n7)
                  (app
                   (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                   n7))))))))))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #t))
 (flatenv
  '(((bod
      (n1)
      (ran
       try
       ()
       ()
       (bod
        (p)
        (bin
         letrec
         sat-solve-7
         (app sat-solve-7 phi)
         ((phi
           (λ (x1)
             (λ (x2)
               (λ (x3)
                 (λ (x4)
                   (λ (x5)
                     (λ (x6)
                       (λ (x7)
                         (app
                          and
                          (app or x1 x2)
                          (app or x1 (app not x2) (app not x3))
                          (app or x3 x4)
                          (app or (app not x4) x1)
                          (app or (app not x2) (app not x3))
                          (app or x4 x2))))))))))
          (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
         ()
         (top)))))
     app
     try
     (λ (n2)
       (app
        try
        (λ (n3)
          (app
           try
           (λ (n4)
             (app
              try
              (λ (n5)
                (app
                 try
                 (λ (n6)
                   (app
                    try
                    (λ (n7)
                      (app
                       (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                       n7))))))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n2)
      (app
       try
       (λ (n3)
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7))))))))))))
   (flatenv '((app or (-> (app f (app #t)) <-) (app f (app #f))))))
  (list
   '(λ (n2)
      (app
       try
       (λ (n3)
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7))))))))))))
   (flatenv '((app or (app f (app #t)) (-> (app f (app #f)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f <-) (app #t))
 (flatenv
  '(((bod
      (p)
      (bin
       letrec
       sat-solve-7
       (app sat-solve-7 phi)
       ((phi
         (λ (x1)
           (λ (x2)
             (λ (x3)
               (λ (x4)
                 (λ (x5)
                   (λ (x6)
                     (λ (x7)
                       (app
                        and
                        (app or x1 x2)
                        (app or x1 (app not x2) (app not x3))
                        (app or x3 x4)
                        (app or (app not x4) x1)
                        (app or (app not x2) (app not x3))
                        (app or x4 x2))))))))))
        (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
       ()
       (top)))
     app
     try
     (λ (n1)
       (app
        try
        (λ (n2)
          (app
           try
           (λ (n3)
             (app
              try
              (λ (n4)
                (app
                 try
                 (λ (n5)
                   (app
                    try
                    (λ (n6)
                      (app
                       try
                       (λ (n7)
                         (app
                          (app
                           (app (app (app (app (app p n1) n2) n3) n4) n5)
                           n6)
                          n7))))))))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (n1)
      (app
       try
       (λ (n2)
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7))))))))))))))
   (flatenv '((letrec (phi try sat-solve-7) (-> (app sat-solve-7 phi) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n2)
    (->
     (app
      try
      (λ (n3)
        (app
         try
         (λ (n4)
           (app
            try
            (λ (n5)
              (app
               try
               (λ (n6)
                 (app
                  try
                  (λ (n7)
                    (app
                     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                     n7)))))))))))
     <-))
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n2)
        (->
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7)))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n2)
    (->
     (app
      try
      (λ (n3)
        (app
         try
         (λ (n4)
           (app
            try
            (λ (n5)
              (app
               try
               (λ (n6)
                 (app
                  try
                  (λ (n7)
                    (app
                     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                     n7)))))))))))
     <-))
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((λ (n1)
        (->
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7)
                           (app
                            (app
                             (app (app (app (app (app p n1) n2) n3) n4) n5)
                             n6)
                            n7)))))))))))))
         <-)))))
  (list
   '(#t ())
   (flatenv
    '((λ (n3)
        (->
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app
                   try
                   (λ (n7)
                     (app
                      (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
                      n7)))))))))
         <-)))))
  (list
   '(#f ())
   (flatenv
    '((λ (n2)
        (->
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app
                      try
                      (λ (n7)
                        (app
                         (app
                          (app (app (app (app (app p n1) n2) n3) n4) n5)
                          n6)
                         n7)))))))))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) (app not x2) (app not x3))
 (flatenv
  '(((bod
      (n7)
      (ran
       try
       ()
       ()
       (bod
        (n6)
        (ran
         try
         ()
         ()
         (bod
          (n5)
          (ran
           try
           ()
           ()
           (bod
            (n4)
            (ran
             try
             ()
             ()
             (bod
              (n3)
              (ran
               try
               ()
               ()
               (bod
                (n2)
                (ran
                 try
                 ()
                 ()
                 (bod
                  (n1)
                  (ran
                   try
                   ()
                   ()
                   (bod
                    (p)
                    (bin
                     letrec
                     sat-solve-7
                     (app sat-solve-7 phi)
                     ((phi
                       (λ (x1)
                         (λ (x2)
                           (λ (x3)
                             (λ (x4)
                               (λ (x5)
                                 (λ (x6)
                                   (λ (x7)
                                     (app
                                      and
                                      (app or x1 x2)
                                      (app or x1 (app not x2) (app not x3))
                                      (app or x3 x4)
                                      (app or (app not x4) x1)
                                      (app or (app not x2) (app not x3))
                                      (app or x4 x2))))))))))
                      (try (λ (f) (app or (app f (app #t)) (app f (app #f))))))
                     ()
                     (top)))))))))))))))))
     app
     (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6)
     n7))))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app (app p n1) n2) <-) n3)
 (flatenv
  '(((ran
      or
      ((app f (app #t)))
      ()
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x3)
      (λ (x4)
        (λ (x5)
          (λ (x6)
            (λ (x7)
              (app
               and
               (app or x1 x2)
               (app or x1 (app not x2) (app not x3))
               (app or x3 x4)
               (app or (app not x4) x1)
               (app or (app not x2) (app not x3))
               (app or x4 x2)))))))
   (flatenv '((app (-> (app (app p n1) n2) <-) n3))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app (app p n1) n2) <-) n3)
 (flatenv
  '(((ran
      or
      ()
      ((app f (app #f)))
      (bod
       (f)
       (bin
        letrec
        try
        (app sat-solve-7 phi)
        ((phi
          (λ (x1)
            (λ (x2)
              (λ (x3)
                (λ (x4)
                  (λ (x5)
                    (λ (x6)
                      (λ (x7)
                        (app
                         and
                         (app or x1 x2)
                         (app or x1 (app not x2) (app not x3))
                         (app or x3 x4)
                         (app or (app not x4) x1)
                         (app or (app not x2) (app not x3))
                         (app or x4 x2)))))))))))
        ((sat-solve-7
          (λ (p)
            (app
             try
             (λ (n1)
               (app
                try
                (λ (n2)
                  (app
                   try
                   (λ (n3)
                     (app
                      try
                      (λ (n4)
                        (app
                         try
                         (λ (n5)
                           (app
                            try
                            (λ (n6)
                              (app
                               try
                               (λ (n7)
                                 (app
                                  (app
                                   (app
                                    (app (app (app (app p n1) n2) n3) n4)
                                    n5)
                                   n6)
                                  n7))))))))))))))))))
        (top))))
     app
     f
     (app #t)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x3)
      (λ (x4)
        (λ (x5)
          (λ (x6)
            (λ (x7)
              (app
               and
               (app or x1 x2)
               (app or x1 (app not x2) (app not x3))
               (app or x3 x4)
               (app or (app not x4) x1)
               (app or (app not x2) (app not x3))
               (app or x4 x2)))))))
   (flatenv '((app (-> (app (app p n1) n2) <-) n3))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
